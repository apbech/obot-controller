ARM GAS  /tmp/ccA7VsRU.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"main.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.comm	hadc1,108,4
  18              		.comm	hadc2,108,4
  19              		.comm	hadc3,108,4
  20              		.comm	hhrtim1,252,4
  21              		.comm	hspi2,100,4
  22              		.comm	hspi3,100,4
  23              		.comm	hdma_spi3_rx,96,4
  24              		.comm	hdma_spi3_tx,96,4
  25              		.comm	huart1,140,4
  26              		.global	drv_regs_error
  27              		.section	.bss.drv_regs_error,"aw",%nobits
  28              		.align	1
  31              	drv_regs_error:
  32 0000 0000     		.space	2
  33              		.global	drv_regs
  34              		.section	.data.drv_regs,"aw"
  35              		.align	2
  38              	drv_regs:
  39 0000 0010     		.short	4096
  40 0002 AA1B     		.short	7082
  41 0004 FF22     		.short	8959
  42 0006 2028     		.short	10272
  43 0008 C032     		.short	12992
  44              		.section	.text.main,"ax",%progbits
  45              		.align	1
  46              		.global	main
  47              		.arch armv7e-m
  48              		.syntax unified
  49              		.thumb
  50              		.thumb_func
  51              		.fpu fpv4-sp-d16
  53              	main:
  54              	.LFB409:
  55              		.file 1 "Src/main.c"
   1:Src/main.c    **** /* USER CODE BEGIN Header */
   2:Src/main.c    **** /**
   3:Src/main.c    ****   ******************************************************************************
   4:Src/main.c    ****   * @file           : main.c
   5:Src/main.c    ****   * @brief          : Main program body
   6:Src/main.c    ****   ******************************************************************************
   7:Src/main.c    ****   * @attention
ARM GAS  /tmp/ccA7VsRU.s 			page 2


   8:Src/main.c    ****   *
   9:Src/main.c    ****   * <h2><center>&copy; Copyright (c) 2019 STMicroelectronics.
  10:Src/main.c    ****   * All rights reserved.</center></h2>
  11:Src/main.c    ****   *
  12:Src/main.c    ****   * This software component is licensed by ST under Ultimate Liberty license
  13:Src/main.c    ****   * SLA0044, the "License"; You may not use this file except in compliance with
  14:Src/main.c    ****   * the License. You may obtain a copy of the License at:
  15:Src/main.c    ****   *                             www.st.com/SLA0044
  16:Src/main.c    ****   *
  17:Src/main.c    ****   ******************************************************************************
  18:Src/main.c    ****   */
  19:Src/main.c    **** /* USER CODE END Header */
  20:Src/main.c    **** 
  21:Src/main.c    **** /* Includes ------------------------------------------------------------------*/
  22:Src/main.c    **** #include "main.h"
  23:Src/main.c    **** #include "usb_device.h"
  24:Src/main.c    **** 
  25:Src/main.c    **** /* Private includes ----------------------------------------------------------*/
  26:Src/main.c    **** /* USER CODE BEGIN Includes */
  27:Src/main.c    **** 
  28:Src/main.c    **** /* USER CODE END Includes */
  29:Src/main.c    **** 
  30:Src/main.c    **** /* Private typedef -----------------------------------------------------------*/
  31:Src/main.c    **** /* USER CODE BEGIN PTD */
  32:Src/main.c    **** 
  33:Src/main.c    **** /* USER CODE END PTD */
  34:Src/main.c    **** 
  35:Src/main.c    **** /* Private define ------------------------------------------------------------*/
  36:Src/main.c    **** /* USER CODE BEGIN PD */
  37:Src/main.c    **** 
  38:Src/main.c    **** /* USER CODE END PD */
  39:Src/main.c    **** 
  40:Src/main.c    **** /* Private macro -------------------------------------------------------------*/
  41:Src/main.c    **** /* USER CODE BEGIN PM */
  42:Src/main.c    **** 
  43:Src/main.c    **** /* USER CODE END PM */
  44:Src/main.c    **** 
  45:Src/main.c    **** /* Private variables ---------------------------------------------------------*/
  46:Src/main.c    **** ADC_HandleTypeDef hadc1;
  47:Src/main.c    **** ADC_HandleTypeDef hadc2;
  48:Src/main.c    **** ADC_HandleTypeDef hadc3;
  49:Src/main.c    **** 
  50:Src/main.c    **** HRTIM_HandleTypeDef hhrtim1;
  51:Src/main.c    **** 
  52:Src/main.c    **** SPI_HandleTypeDef hspi2;
  53:Src/main.c    **** SPI_HandleTypeDef hspi3;
  54:Src/main.c    **** DMA_HandleTypeDef hdma_spi3_rx;
  55:Src/main.c    **** DMA_HandleTypeDef hdma_spi3_tx;
  56:Src/main.c    **** 
  57:Src/main.c    **** UART_HandleTypeDef huart1;
  58:Src/main.c    **** 
  59:Src/main.c    **** /* USER CODE BEGIN PV */
  60:Src/main.c    **** #include "../motorlib/param.h"
  61:Src/main.c    **** #include "main2.h"
  62:Src/main.c    **** #include "usb/usbd_rt_if.h"
  63:Src/main.c    **** /* USER CODE END PV */
  64:Src/main.c    **** 
ARM GAS  /tmp/ccA7VsRU.s 			page 3


  65:Src/main.c    **** /* Private function prototypes -----------------------------------------------*/
  66:Src/main.c    **** void SystemClock_Config(void);
  67:Src/main.c    **** static void MX_GPIO_Init(void);
  68:Src/main.c    **** static void MX_DMA_Init(void);
  69:Src/main.c    **** static void MX_USART1_UART_Init(void);
  70:Src/main.c    **** static void MX_HRTIM1_Init(void);
  71:Src/main.c    **** static void MX_ADC1_Init(void);
  72:Src/main.c    **** static void MX_ADC2_Init(void);
  73:Src/main.c    **** static void MX_ADC3_Init(void);
  74:Src/main.c    **** static void MX_SPI2_Init(void);
  75:Src/main.c    **** static void MX_SPI3_Init(void);
  76:Src/main.c    **** /* USER CODE BEGIN PFP */
  77:Src/main.c    **** 
  78:Src/main.c    **** /* USER CODE END PFP */
  79:Src/main.c    **** 
  80:Src/main.c    **** /* Private user code ---------------------------------------------------------*/
  81:Src/main.c    **** /* USER CODE BEGIN 0 */
  82:Src/main.c    **** uint16_t drv_regs_error = 0;
  83:Src/main.c    **** 
  84:Src/main.c    **** uint16_t drv_regs[] = {
  85:Src/main.c    ****   (2<<11) | 0x00,  // control_reg 0x20, 3 PWM mode
  86:Src/main.c    ****   (3<<11) | 0x3AA, // hs_reg      0x3CC, moderate drive current
  87:Src/main.c    ****   (4<<11) | 0x2FF, // ls_reg      0x0CC, no cycle by cycle, 500 ns tdrive
  88:Src/main.c    ****                                 // moderate drive current (.57,1.14A)
  89:Src/main.c    ****   (5<<11) | 0x020,  // ocp_reg     0x20 -> 50 ns dead time, 
  90:Src/main.c    ****                               //latched ocp, 4 us ocp deglitch, 0.06 Vds thresh
  91:Src/main.c    ****   (6<<11) | 0x2C0, // csa_reg     0x280 -> bidirectional current, 40V/V
  92:Src/main.c    **** };         
  93:Src/main.c    **** 
  94:Src/main.c    **** /* USER CODE END 0 */
  95:Src/main.c    **** 
  96:Src/main.c    **** /**
  97:Src/main.c    ****   * @brief  The application entry point.
  98:Src/main.c    ****   * @retval int
  99:Src/main.c    ****   */
 100:Src/main.c    **** int main(void)
 101:Src/main.c    **** {
  56              		.loc 1 101 1
  57              		.cfi_startproc
  58              		@ args = 0, pretend = 0, frame = 24
  59              		@ frame_needed = 1, uses_anonymous_args = 0
  60 0000 80B5     		push	{r7, lr}
  61              	.LCFI0:
  62              		.cfi_def_cfa_offset 8
  63              		.cfi_offset 7, -8
  64              		.cfi_offset 14, -4
  65 0002 88B0     		sub	sp, sp, #32
  66              	.LCFI1:
  67              		.cfi_def_cfa_offset 40
  68 0004 02AF     		add	r7, sp, #8
  69              	.LCFI2:
  70              		.cfi_def_cfa 7, 32
 102:Src/main.c    ****   /* USER CODE BEGIN 1 */
 103:Src/main.c    ****   init();
  71              		.loc 1 103 3
  72 0006 FFF7FEFF 		bl	init
 104:Src/main.c    ****   /* USER CODE END 1 */
ARM GAS  /tmp/ccA7VsRU.s 			page 4


 105:Src/main.c    ****   
 106:Src/main.c    **** 
 107:Src/main.c    ****   /* MCU Configuration--------------------------------------------------------*/
 108:Src/main.c    **** 
 109:Src/main.c    ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
 110:Src/main.c    ****   HAL_Init();
  73              		.loc 1 110 3
  74 000a FFF7FEFF 		bl	HAL_Init
 111:Src/main.c    **** 
 112:Src/main.c    ****   /* USER CODE BEGIN Init */
 113:Src/main.c    ****   RCC->APB1ENR1 |= RCC_APB1ENR1_CRSEN;      // Clock recovery circuit, enables syncing HSI48 MHz to
  75              		.loc 1 113 17
  76 000e 964B     		ldr	r3, .L6
  77 0010 9B6D     		ldr	r3, [r3, #88]
  78 0012 954A     		ldr	r2, .L6
  79 0014 43F48073 		orr	r3, r3, #256
  80 0018 9365     		str	r3, [r2, #88]
 114:Src/main.c    ****   /* USER CODE END Init */
 115:Src/main.c    **** 
 116:Src/main.c    ****   /* Configure the system clock */
 117:Src/main.c    ****   SystemClock_Config();
  81              		.loc 1 117 3
  82 001a FFF7FEFF 		bl	SystemClock_Config
 118:Src/main.c    **** 
 119:Src/main.c    ****   /* USER CODE BEGIN SysInit */
 120:Src/main.c    ****         DWT->CTRL = 0x400003FF | (1ul<<17) | DWT_CTRL_LSUEVTENA_Msk | DWT_CTRL_FOLDEVTENA_Msk;
  83              		.loc 1 120 12
  84 001e 934B     		ldr	r3, .L6+4
  85              		.loc 1 120 19
  86 0020 934A     		ldr	r2, .L6+8
  87 0022 1A60     		str	r2, [r3]
 121:Src/main.c    ****   init_param_from_flash();
  88              		.loc 1 121 3
  89 0024 FFF7FEFF 		bl	init_param_from_flash
 122:Src/main.c    ****     fast_loop_set_param(&param()->fast_loop_param);
  90              		.loc 1 122 26
  91 0028 FFF7FEFF 		bl	param
  92 002c 0346     		mov	r3, r0
  93              		.loc 1 122 5
  94 002e 1846     		mov	r0, r3
  95 0030 FFF7FEFF 		bl	fast_loop_set_param
 123:Src/main.c    ****   main_loop_set_param(&param()->main_loop_param);
  96              		.loc 1 123 24
  97 0034 FFF7FEFF 		bl	param
  98 0038 0346     		mov	r3, r0
  99              		.loc 1 123 3
 100 003a 03F58353 		add	r3, r3, #4192
 101 003e 1846     		mov	r0, r3
 102 0040 FFF7FEFF 		bl	main_loop_set_param
 124:Src/main.c    ****   /* USER CODE END SysInit */
 125:Src/main.c    **** 
 126:Src/main.c    ****   /* Initialize all configured peripherals */
 127:Src/main.c    ****   MX_GPIO_Init();
 103              		.loc 1 127 3
 104 0044 FFF7FEFF 		bl	MX_GPIO_Init
 128:Src/main.c    ****   MX_DMA_Init();
 105              		.loc 1 128 3
ARM GAS  /tmp/ccA7VsRU.s 			page 5


 106 0048 FFF7FEFF 		bl	MX_DMA_Init
 129:Src/main.c    ****   MX_USART1_UART_Init();
 107              		.loc 1 129 3
 108 004c FFF7FEFF 		bl	MX_USART1_UART_Init
 130:Src/main.c    ****   MX_USB_Device_Init();
 109              		.loc 1 130 3
 110 0050 FFF7FEFF 		bl	MX_USB_Device_Init
 131:Src/main.c    ****   MX_HRTIM1_Init();
 111              		.loc 1 131 3
 112 0054 FFF7FEFF 		bl	MX_HRTIM1_Init
 132:Src/main.c    ****   MX_ADC1_Init();
 113              		.loc 1 132 3
 114 0058 FFF7FEFF 		bl	MX_ADC1_Init
 133:Src/main.c    ****   MX_ADC2_Init();
 115              		.loc 1 133 3
 116 005c FFF7FEFF 		bl	MX_ADC2_Init
 134:Src/main.c    ****   MX_ADC3_Init();
 117              		.loc 1 134 3
 118 0060 FFF7FEFF 		bl	MX_ADC3_Init
 135:Src/main.c    ****   MX_SPI2_Init();
 119              		.loc 1 135 3
 120 0064 FFF7FEFF 		bl	MX_SPI2_Init
 136:Src/main.c    ****   MX_SPI3_Init();
 121              		.loc 1 136 3
 122 0068 FFF7FEFF 		bl	MX_SPI3_Init
 137:Src/main.c    ****   /* USER CODE BEGIN 2 */
 138:Src/main.c    ****   HAL_ADC_Start(&hadc1);
 123              		.loc 1 138 3
 124 006c 8148     		ldr	r0, .L6+12
 125 006e FFF7FEFF 		bl	HAL_ADC_Start
 139:Src/main.c    ****    HAL_ADC_Start(&hadc2);
 126              		.loc 1 139 4
 127 0072 8148     		ldr	r0, .L6+16
 128 0074 FFF7FEFF 		bl	HAL_ADC_Start
 140:Src/main.c    ****     HAL_ADC_Start(&hadc3);
 129              		.loc 1 140 5
 130 0078 8048     		ldr	r0, .L6+20
 131 007a FFF7FEFF 		bl	HAL_ADC_Start
 141:Src/main.c    **** 
 142:Src/main.c    ****     SPI3->CR1 |= SPI_CR1_SPE; 
 132              		.loc 1 142 15
 133 007e 804B     		ldr	r3, .L6+24
 134 0080 1B68     		ldr	r3, [r3]
 135 0082 7F4A     		ldr	r2, .L6+24
 136 0084 43F04003 		orr	r3, r3, #64
 137 0088 1360     		str	r3, [r2]
 138              	.LBB2:
 143:Src/main.c    **** 
 144:Src/main.c    ****   for (uint8_t i=0; i<sizeof(drv_regs)/sizeof(uint16_t); i++) {
 139              		.loc 1 144 16
 140 008a 0023     		movs	r3, #0
 141 008c FB75     		strb	r3, [r7, #23]
 142              		.loc 1 144 3
 143 008e 35E0     		b	.L2
 144              	.L4:
 145              	.LBB3:
 145:Src/main.c    ****     uint16_t reg_out = drv_regs[i];
ARM GAS  /tmp/ccA7VsRU.s 			page 6


 146              		.loc 1 145 32
 147 0090 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 148 0092 7C4A     		ldr	r2, .L6+28
 149 0094 32F81330 		ldrh	r3, [r2, r3, lsl #1]
 150              		.loc 1 145 14
 151 0098 FB80     		strh	r3, [r7, #6]	@ movhi
 146:Src/main.c    ****     uint16_t reg_in = 0;
 152              		.loc 1 146 14
 153 009a 0023     		movs	r3, #0
 154 009c BB80     		strh	r3, [r7, #4]	@ movhi
 147:Src/main.c    ****     HAL_SPI_TransmitReceive(&hspi2, (uint8_t *) &reg_out, (uint8_t *) &reg_in, 1, 10);
 155              		.loc 1 147 5
 156 009e 3A1D     		adds	r2, r7, #4
 157 00a0 B91D     		adds	r1, r7, #6
 158 00a2 0A23     		movs	r3, #10
 159 00a4 0093     		str	r3, [sp]
 160 00a6 0123     		movs	r3, #1
 161 00a8 7748     		ldr	r0, .L6+32
 162 00aa FFF7FEFF 		bl	HAL_SPI_TransmitReceive
 148:Src/main.c    ****      reg_out |= (1<<15); // switch to read mode
 163              		.loc 1 148 14
 164 00ae FB88     		ldrh	r3, [r7, #6]
 165 00b0 6FEA4343 		mvn	r3, r3, lsl #17
 166 00b4 6FEA5343 		mvn	r3, r3, lsr #17
 167 00b8 9BB2     		uxth	r3, r3
 168 00ba FB80     		strh	r3, [r7, #6]	@ movhi
 149:Src/main.c    ****      HAL_SPI_TransmitReceive(&hspi2, (uint8_t *) &reg_out, (uint8_t *) &reg_in, 1, 10);
 169              		.loc 1 149 6
 170 00bc 3A1D     		adds	r2, r7, #4
 171 00be B91D     		adds	r1, r7, #6
 172 00c0 0A23     		movs	r3, #10
 173 00c2 0093     		str	r3, [sp]
 174 00c4 0123     		movs	r3, #1
 175 00c6 7048     		ldr	r0, .L6+32
 176 00c8 FFF7FEFF 		bl	HAL_SPI_TransmitReceive
 150:Src/main.c    ****     if ((reg_in & 0x7FF) != (reg_out & 0x7FF)) {
 177              		.loc 1 150 26
 178 00cc BA88     		ldrh	r2, [r7, #4]
 179 00ce FB88     		ldrh	r3, [r7, #6]
 180 00d0 5340     		eors	r3, r3, r2
 181 00d2 9BB2     		uxth	r3, r3
 182 00d4 C3F30A03 		ubfx	r3, r3, #0, #11
 183              		.loc 1 150 8
 184 00d8 002B     		cmp	r3, #0
 185 00da 0CD0     		beq	.L3
 151:Src/main.c    ****       drv_regs_error |= 1 << i;
 186              		.loc 1 151 27
 187 00dc FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 188 00de 0122     		movs	r2, #1
 189 00e0 02FA03F3 		lsl	r3, r2, r3
 190              		.loc 1 151 22
 191 00e4 1AB2     		sxth	r2, r3
 192 00e6 694B     		ldr	r3, .L6+36
 193 00e8 1B88     		ldrh	r3, [r3]
 194 00ea 1BB2     		sxth	r3, r3
 195 00ec 1343     		orrs	r3, r3, r2
 196 00ee 1BB2     		sxth	r3, r3
ARM GAS  /tmp/ccA7VsRU.s 			page 7


 197 00f0 9AB2     		uxth	r2, r3
 198 00f2 664B     		ldr	r3, .L6+36
 199 00f4 1A80     		strh	r2, [r3]	@ movhi
 200              	.L3:
 201              	.LBE3:
 144:Src/main.c    ****     uint16_t reg_out = drv_regs[i];
 202              		.loc 1 144 59 discriminator 2
 203 00f6 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 204 00f8 0133     		adds	r3, r3, #1
 205 00fa FB75     		strb	r3, [r7, #23]
 206              	.L2:
 144:Src/main.c    ****     uint16_t reg_out = drv_regs[i];
 207              		.loc 1 144 3 discriminator 1
 208 00fc FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 209 00fe 042B     		cmp	r3, #4
 210 0100 C6D9     		bls	.L4
 211              	.LBE2:
 152:Src/main.c    ****     }
 153:Src/main.c    ****   }
 154:Src/main.c    ****   uint32_t deadtime = 10;
 212              		.loc 1 154 12
 213 0102 0A23     		movs	r3, #10
 214 0104 FB60     		str	r3, [r7, #12]
 155:Src/main.c    ****   uint32_t deadprescale = 0;
 215              		.loc 1 155 12
 216 0106 0023     		movs	r3, #0
 217 0108 BB60     		str	r3, [r7, #8]
 156:Src/main.c    ****   HRTIM1->sTimerxRegs[0].OUTxR |= HRTIM_OUTR_DTEN;
 218              		.loc 1 156 32
 219 010a 614B     		ldr	r3, .L6+40
 220 010c D3F8E430 		ldr	r3, [r3, #228]
 221 0110 5F4A     		ldr	r2, .L6+40
 222 0112 43F48073 		orr	r3, r3, #256
 223 0116 C2F8E430 		str	r3, [r2, #228]
 157:Src/main.c    ****   HRTIM1->sTimerxRegs[0].DTxR |= (deadtime << HRTIM_DTR_DTF_Pos) | (deadtime << HRTIM_DTR_DTR_Pos) 
 224              		.loc 1 157 31
 225 011a 5D4B     		ldr	r3, .L6+40
 226 011c D3F8B820 		ldr	r2, [r3, #184]
 227              		.loc 1 157 44
 228 0120 FB68     		ldr	r3, [r7, #12]
 229 0122 1904     		lsls	r1, r3, #16
 230              		.loc 1 157 66
 231 0124 FB68     		ldr	r3, [r7, #12]
 232 0126 1943     		orrs	r1, r1, r3
 233              		.loc 1 157 116
 234 0128 BB68     		ldr	r3, [r7, #8]
 235 012a 9B02     		lsls	r3, r3, #10
 236              		.loc 1 157 100
 237 012c 0B43     		orrs	r3, r3, r1
 238              		.loc 1 157 31
 239 012e 5849     		ldr	r1, .L6+40
 240 0130 1343     		orrs	r3, r3, r2
 241 0132 C1F8B830 		str	r3, [r1, #184]
 158:Src/main.c    ****   HRTIM1->sTimerxRegs[0].TIMxCR |= HRTIM_TIMCR_PREEN | HRTIM_TIMCR_TRSTU;
 242              		.loc 1 158 33
 243 0136 564B     		ldr	r3, .L6+40
 244 0138 D3F88030 		ldr	r3, [r3, #128]
ARM GAS  /tmp/ccA7VsRU.s 			page 8


 245 013c 544A     		ldr	r2, .L6+40
 246 013e 43F00063 		orr	r3, r3, #134217728
 247 0142 43F48023 		orr	r3, r3, #262144
 248 0146 C2F88030 		str	r3, [r2, #128]
 159:Src/main.c    ****   HRTIM1->sTimerxRegs[4].OUTxR |= HRTIM_OUTR_DTEN;
 249              		.loc 1 159 32
 250 014a 514B     		ldr	r3, .L6+40
 251 014c D3F8E432 		ldr	r3, [r3, #740]
 252 0150 4F4A     		ldr	r2, .L6+40
 253 0152 43F48073 		orr	r3, r3, #256
 254 0156 C2F8E432 		str	r3, [r2, #740]
 160:Src/main.c    ****   HRTIM1->sTimerxRegs[4].DTxR |= (deadtime << HRTIM_DTR_DTF_Pos) | (deadtime << HRTIM_DTR_DTR_Pos) 
 255              		.loc 1 160 31
 256 015a 4D4B     		ldr	r3, .L6+40
 257 015c D3F8B822 		ldr	r2, [r3, #696]
 258              		.loc 1 160 44
 259 0160 FB68     		ldr	r3, [r7, #12]
 260 0162 1904     		lsls	r1, r3, #16
 261              		.loc 1 160 66
 262 0164 FB68     		ldr	r3, [r7, #12]
 263 0166 1943     		orrs	r1, r1, r3
 264              		.loc 1 160 116
 265 0168 BB68     		ldr	r3, [r7, #8]
 266 016a 9B02     		lsls	r3, r3, #10
 267              		.loc 1 160 100
 268 016c 0B43     		orrs	r3, r3, r1
 269              		.loc 1 160 31
 270 016e 4849     		ldr	r1, .L6+40
 271 0170 1343     		orrs	r3, r3, r2
 272 0172 C1F8B832 		str	r3, [r1, #696]
 161:Src/main.c    ****   HRTIM1->sTimerxRegs[4].TIMxCR |= HRTIM_TIMCR_PREEN | HRTIM_TIMCR_TRSTU;
 273              		.loc 1 161 33
 274 0176 464B     		ldr	r3, .L6+40
 275 0178 D3F88032 		ldr	r3, [r3, #640]
 276 017c 444A     		ldr	r2, .L6+40
 277 017e 43F00063 		orr	r3, r3, #134217728
 278 0182 43F48023 		orr	r3, r3, #262144
 279 0186 C2F88032 		str	r3, [r2, #640]
 162:Src/main.c    ****   HRTIM1->sTimerxRegs[5].OUTxR |= HRTIM_OUTR_DTEN;
 280              		.loc 1 162 32
 281 018a 414B     		ldr	r3, .L6+40
 282 018c D3F86433 		ldr	r3, [r3, #868]
 283 0190 3F4A     		ldr	r2, .L6+40
 284 0192 43F48073 		orr	r3, r3, #256
 285 0196 C2F86433 		str	r3, [r2, #868]
 163:Src/main.c    ****   HRTIM1->sTimerxRegs[5].DTxR |= (deadtime << HRTIM_DTR_DTF_Pos) | (deadtime << HRTIM_DTR_DTR_Pos) 
 286              		.loc 1 163 31
 287 019a 3D4B     		ldr	r3, .L6+40
 288 019c D3F83823 		ldr	r2, [r3, #824]
 289              		.loc 1 163 44
 290 01a0 FB68     		ldr	r3, [r7, #12]
 291 01a2 1904     		lsls	r1, r3, #16
 292              		.loc 1 163 66
 293 01a4 FB68     		ldr	r3, [r7, #12]
 294 01a6 1943     		orrs	r1, r1, r3
 295              		.loc 1 163 116
 296 01a8 BB68     		ldr	r3, [r7, #8]
ARM GAS  /tmp/ccA7VsRU.s 			page 9


 297 01aa 9B02     		lsls	r3, r3, #10
 298              		.loc 1 163 100
 299 01ac 0B43     		orrs	r3, r3, r1
 300              		.loc 1 163 31
 301 01ae 3849     		ldr	r1, .L6+40
 302 01b0 1343     		orrs	r3, r3, r2
 303 01b2 C1F83833 		str	r3, [r1, #824]
 164:Src/main.c    ****   HRTIM1->sTimerxRegs[5].TIMxCR |= HRTIM_TIMCR_PREEN | HRTIM_TIMCR_TRSTU;
 304              		.loc 1 164 33
 305 01b6 364B     		ldr	r3, .L6+40
 306 01b8 D3F80033 		ldr	r3, [r3, #768]
 307 01bc 344A     		ldr	r2, .L6+40
 308 01be 43F00063 		orr	r3, r3, #134217728
 309 01c2 43F48023 		orr	r3, r3, #262144
 310 01c6 C2F80033 		str	r3, [r2, #768]
 165:Src/main.c    ****   
 166:Src/main.c    ****   //HRTIM1->sCommonRegs.CR2 |= HRTIM_CR2_TESWU;
 167:Src/main.c    ****   HRTIM1->sMasterRegs.MCR |= HRTIM_MCR_TACEN + HRTIM_MCR_TECEN + HRTIM_MCR_TFCEN;
 311              		.loc 1 167 27
 312 01ca 314B     		ldr	r3, .L6+40
 313 01cc 1B68     		ldr	r3, [r3]
 314 01ce 304A     		ldr	r2, .L6+40
 315 01d0 43F4C403 		orr	r3, r3, #6422528
 316 01d4 1360     		str	r3, [r2]
 168:Src/main.c    **** 
 169:Src/main.c    ****   HAL_HRTIM_SimplePWMStart(&hhrtim1, HRTIM_TIMERINDEX_TIMER_F, HRTIM_OUTPUT_TA1);
 317              		.loc 1 169 3
 318 01d6 0122     		movs	r2, #1
 319 01d8 0521     		movs	r1, #5
 320 01da 2E48     		ldr	r0, .L6+44
 321 01dc FFF7FEFF 		bl	HAL_HRTIM_SimplePWMStart
 170:Src/main.c    ****   HAL_HRTIM_SimplePWMStart(&hhrtim1, HRTIM_TIMERINDEX_TIMER_F, HRTIM_OUTPUT_TA2);
 322              		.loc 1 170 3
 323 01e0 0222     		movs	r2, #2
 324 01e2 0521     		movs	r1, #5
 325 01e4 2B48     		ldr	r0, .L6+44
 326 01e6 FFF7FEFF 		bl	HAL_HRTIM_SimplePWMStart
 171:Src/main.c    ****   HAL_HRTIM_SimplePWMStart(&hhrtim1, HRTIM_TIMERINDEX_TIMER_F, HRTIM_OUTPUT_TE2);
 327              		.loc 1 171 3
 328 01ea 4FF40072 		mov	r2, #512
 329 01ee 0521     		movs	r1, #5
 330 01f0 2848     		ldr	r0, .L6+44
 331 01f2 FFF7FEFF 		bl	HAL_HRTIM_SimplePWMStart
 172:Src/main.c    ****   HAL_HRTIM_SimplePWMStart(&hhrtim1, HRTIM_TIMERINDEX_TIMER_F, HRTIM_OUTPUT_TF1);
 332              		.loc 1 172 3
 333 01f6 4FF48062 		mov	r2, #1024
 334 01fa 0521     		movs	r1, #5
 335 01fc 2548     		ldr	r0, .L6+44
 336 01fe FFF7FEFF 		bl	HAL_HRTIM_SimplePWMStart
 173:Src/main.c    ****   HAL_HRTIM_SimplePWMStart(&hhrtim1, HRTIM_TIMERINDEX_TIMER_F, HRTIM_OUTPUT_TE1);
 337              		.loc 1 173 3
 338 0202 4FF48072 		mov	r2, #256
 339 0206 0521     		movs	r1, #5
 340 0208 2248     		ldr	r0, .L6+44
 341 020a FFF7FEFF 		bl	HAL_HRTIM_SimplePWMStart
 174:Src/main.c    ****   HAL_HRTIM_SimplePWMStart(&hhrtim1, HRTIM_TIMERINDEX_TIMER_F, HRTIM_OUTPUT_TF2);
 342              		.loc 1 174 3
ARM GAS  /tmp/ccA7VsRU.s 			page 10


 343 020e 4FF40062 		mov	r2, #2048
 344 0212 0521     		movs	r1, #5
 345 0214 1F48     		ldr	r0, .L6+44
 346 0216 FFF7FEFF 		bl	HAL_HRTIM_SimplePWMStart
 175:Src/main.c    ****   hadc1.Instance->CR |= ADC_CR_JADSTART;
 347              		.loc 1 175 8
 348 021a 164B     		ldr	r3, .L6+12
 349 021c 1B68     		ldr	r3, [r3]
 350              		.loc 1 175 22
 351 021e 9A68     		ldr	r2, [r3, #8]
 352              		.loc 1 175 8
 353 0220 144B     		ldr	r3, .L6+12
 354 0222 1B68     		ldr	r3, [r3]
 355              		.loc 1 175 22
 356 0224 42F00802 		orr	r2, r2, #8
 357 0228 9A60     		str	r2, [r3, #8]
 176:Src/main.c    ****   hadc1.Instance->IER |= ADC_IER_JEOCIE;
 358              		.loc 1 176 8
 359 022a 124B     		ldr	r3, .L6+12
 360 022c 1B68     		ldr	r3, [r3]
 361              		.loc 1 176 23
 362 022e 5A68     		ldr	r2, [r3, #4]
 363              		.loc 1 176 8
 364 0230 104B     		ldr	r3, .L6+12
 365 0232 1B68     		ldr	r3, [r3]
 366              		.loc 1 176 23
 367 0234 42F02002 		orr	r2, r2, #32
 368 0238 5A60     		str	r2, [r3, #4]
 177:Src/main.c    ****   hadc2.Instance->CR |= ADC_CR_JADSTART;
 369              		.loc 1 177 8
 370 023a 0F4B     		ldr	r3, .L6+16
 371 023c 1B68     		ldr	r3, [r3]
 372              		.loc 1 177 22
 373 023e 9A68     		ldr	r2, [r3, #8]
 374              		.loc 1 177 8
 375 0240 0D4B     		ldr	r3, .L6+16
 376 0242 1B68     		ldr	r3, [r3]
 377              		.loc 1 177 22
 378 0244 42F00802 		orr	r2, r2, #8
 379 0248 9A60     		str	r2, [r3, #8]
 178:Src/main.c    ****   hadc3.Instance->CR |= ADC_CR_JADSTART;
 380              		.loc 1 178 8
 381 024a 0C4B     		ldr	r3, .L6+20
 382 024c 1B68     		ldr	r3, [r3]
 383              		.loc 1 178 22
 384 024e 9A68     		ldr	r2, [r3, #8]
 385              		.loc 1 178 8
 386 0250 0A4B     		ldr	r3, .L6+20
 387 0252 1B68     		ldr	r3, [r3]
 388              		.loc 1 178 22
 389 0254 42F00802 		orr	r2, r2, #8
 390 0258 9A60     		str	r2, [r3, #8]
 179:Src/main.c    **** 
 180:Src/main.c    ****   /* USER CODE END 2 */
 181:Src/main.c    **** 
 182:Src/main.c    ****   /* Infinite loop */
 183:Src/main.c    ****   /* USER CODE BEGIN WHILE */
ARM GAS  /tmp/ccA7VsRU.s 			page 11


 184:Src/main.c    ****   int i = 0;
 391              		.loc 1 184 7
 392 025a 0023     		movs	r3, #0
 393 025c 3B61     		str	r3, [r7, #16]
 394              	.L5:
 185:Src/main.c    ****   while (1)
 186:Src/main.c    ****   {
 187:Src/main.c    ****     i++;
 395              		.loc 1 187 6 discriminator 1
 396 025e 3B69     		ldr	r3, [r7, #16]
 397 0260 0133     		adds	r3, r3, #1
 398 0262 3B61     		str	r3, [r7, #16]
 399 0264 FBE7     		b	.L5
 400              	.L7:
 401 0266 00BF     		.align	2
 402              	.L6:
 403 0268 00100240 		.word	1073876992
 404 026c 001000E0 		.word	-536866816
 405 0270 FF033240 		.word	1077019647
 406 0274 00000000 		.word	hadc1
 407 0278 00000000 		.word	hadc2
 408 027c 00000000 		.word	hadc3
 409 0280 003C0040 		.word	1073757184
 410 0284 00000000 		.word	drv_regs
 411 0288 00000000 		.word	hspi2
 412 028c 00000000 		.word	drv_regs_error
 413 0290 00680140 		.word	1073833984
 414 0294 00000000 		.word	hhrtim1
 415              		.cfi_endproc
 416              	.LFE409:
 418              		.section	.text.SystemClock_Config,"ax",%progbits
 419              		.align	1
 420              		.global	SystemClock_Config
 421              		.syntax unified
 422              		.thumb
 423              		.thumb_func
 424              		.fpu fpv4-sp-d16
 426              	SystemClock_Config:
 427              	.LFB410:
 188:Src/main.c    ****    // USB_send(&i,sizeof(int));
 189:Src/main.c    ****     /* USER CODE END WHILE */
 190:Src/main.c    ****     //HAL_Delay(1000);
 191:Src/main.c    ****   
 192:Src/main.c    ****     /* USER CODE BEGIN 3 */
 193:Src/main.c    ****   }
 194:Src/main.c    ****   /* USER CODE END 3 */
 195:Src/main.c    **** }
 196:Src/main.c    **** 
 197:Src/main.c    **** /**
 198:Src/main.c    ****   * @brief System Clock Configuration
 199:Src/main.c    ****   * @retval None
 200:Src/main.c    ****   */
 201:Src/main.c    **** void SystemClock_Config(void)
 202:Src/main.c    **** {
 428              		.loc 1 202 1
 429              		.cfi_startproc
 430              		@ args = 0, pretend = 0, frame = 184
ARM GAS  /tmp/ccA7VsRU.s 			page 12


 431              		@ frame_needed = 1, uses_anonymous_args = 0
 432 0000 80B5     		push	{r7, lr}
 433              	.LCFI3:
 434              		.cfi_def_cfa_offset 8
 435              		.cfi_offset 7, -8
 436              		.cfi_offset 14, -4
 437 0002 AEB0     		sub	sp, sp, #184
 438              	.LCFI4:
 439              		.cfi_def_cfa_offset 192
 440 0004 00AF     		add	r7, sp, #0
 441              	.LCFI5:
 442              		.cfi_def_cfa_register 7
 203:Src/main.c    ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 443              		.loc 1 203 22
 444 0006 07F18003 		add	r3, r7, #128
 445 000a 3822     		movs	r2, #56
 446 000c 0021     		movs	r1, #0
 447 000e 1846     		mov	r0, r3
 448 0010 FFF7FEFF 		bl	memset
 204:Src/main.c    ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 449              		.loc 1 204 22
 450 0014 07F16C03 		add	r3, r7, #108
 451 0018 0022     		movs	r2, #0
 452 001a 1A60     		str	r2, [r3]
 453 001c 5A60     		str	r2, [r3, #4]
 454 001e 9A60     		str	r2, [r3, #8]
 455 0020 DA60     		str	r2, [r3, #12]
 456 0022 1A61     		str	r2, [r3, #16]
 205:Src/main.c    ****   RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 457              		.loc 1 205 28
 458 0024 07F11803 		add	r3, r7, #24
 459 0028 5422     		movs	r2, #84
 460 002a 0021     		movs	r1, #0
 461 002c 1846     		mov	r0, r3
 462 002e FFF7FEFF 		bl	memset
 206:Src/main.c    ****   RCC_CRSInitTypeDef pInit = {0};
 463              		.loc 1 206 22
 464 0032 3B46     		mov	r3, r7
 465 0034 0022     		movs	r2, #0
 466 0036 1A60     		str	r2, [r3]
 467 0038 5A60     		str	r2, [r3, #4]
 468 003a 9A60     		str	r2, [r3, #8]
 469 003c DA60     		str	r2, [r3, #12]
 470 003e 1A61     		str	r2, [r3, #16]
 471 0040 5A61     		str	r2, [r3, #20]
 207:Src/main.c    **** 
 208:Src/main.c    ****   /** Configure the main internal regulator output voltage 
 209:Src/main.c    ****   */
 210:Src/main.c    ****   HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 472              		.loc 1 210 3
 473 0042 0020     		movs	r0, #0
 474 0044 FFF7FEFF 		bl	HAL_PWREx_ControlVoltageScaling
 211:Src/main.c    ****   /** Initializes the CPU, AHB and APB busses clocks 
 212:Src/main.c    ****   */
 213:Src/main.c    ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 475              		.loc 1 213 36
 476 0048 2123     		movs	r3, #33
ARM GAS  /tmp/ccA7VsRU.s 			page 13


 477 004a C7F88030 		str	r3, [r7, #128]
 214:Src/main.c    ****   RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 478              		.loc 1 214 30
 479 004e 4FF48033 		mov	r3, #65536
 480 0052 C7F88430 		str	r3, [r7, #132]
 215:Src/main.c    ****   RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 481              		.loc 1 215 32
 482 0056 0123     		movs	r3, #1
 483 0058 C7F89830 		str	r3, [r7, #152]
 216:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 484              		.loc 1 216 34
 485 005c 0223     		movs	r3, #2
 486 005e C7F89C30 		str	r3, [r7, #156]
 217:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 487              		.loc 1 217 35
 488 0062 0323     		movs	r3, #3
 489 0064 C7F8A030 		str	r3, [r7, #160]
 218:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 490              		.loc 1 218 30
 491 0068 0623     		movs	r3, #6
 492 006a C7F8A430 		str	r3, [r7, #164]
 219:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLN = 85;
 493              		.loc 1 219 30
 494 006e 5523     		movs	r3, #85
 495 0070 C7F8A830 		str	r3, [r7, #168]
 220:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV6;
 496              		.loc 1 220 30
 497 0074 0623     		movs	r3, #6
 498 0076 C7F8AC30 		str	r3, [r7, #172]
 221:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV8;
 499              		.loc 1 221 30
 500 007a 0823     		movs	r3, #8
 501 007c C7F8B030 		str	r3, [r7, #176]
 222:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 502              		.loc 1 222 30
 503 0080 0223     		movs	r3, #2
 504 0082 C7F8B430 		str	r3, [r7, #180]
 223:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 505              		.loc 1 223 7
 506 0086 07F18003 		add	r3, r7, #128
 507 008a 1846     		mov	r0, r3
 508 008c FFF7FEFF 		bl	HAL_RCC_OscConfig
 509 0090 0346     		mov	r3, r0
 510              		.loc 1 223 6
 511 0092 002B     		cmp	r3, #0
 512 0094 01D0     		beq	.L9
 224:Src/main.c    ****   {
 225:Src/main.c    ****     Error_Handler();
 513              		.loc 1 225 5
 514 0096 FFF7FEFF 		bl	Error_Handler
 515              	.L9:
 226:Src/main.c    ****   }
 227:Src/main.c    ****   /** Initializes the CPU, AHB and APB busses clocks 
 228:Src/main.c    ****   */
 229:Src/main.c    ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 516              		.loc 1 229 31
 517 009a 0F23     		movs	r3, #15
ARM GAS  /tmp/ccA7VsRU.s 			page 14


 518 009c FB66     		str	r3, [r7, #108]
 230:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 231:Src/main.c    ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 519              		.loc 1 231 34
 520 009e 0323     		movs	r3, #3
 521 00a0 3B67     		str	r3, [r7, #112]
 232:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 522              		.loc 1 232 35
 523 00a2 0023     		movs	r3, #0
 524 00a4 7B67     		str	r3, [r7, #116]
 233:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 525              		.loc 1 233 36
 526 00a6 0023     		movs	r3, #0
 527 00a8 BB67     		str	r3, [r7, #120]
 234:Src/main.c    ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 528              		.loc 1 234 36
 529 00aa 0023     		movs	r3, #0
 530 00ac FB67     		str	r3, [r7, #124]
 235:Src/main.c    **** 
 236:Src/main.c    ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_8) != HAL_OK)
 531              		.loc 1 236 7
 532 00ae 07F16C03 		add	r3, r7, #108
 533 00b2 0821     		movs	r1, #8
 534 00b4 1846     		mov	r0, r3
 535 00b6 FFF7FEFF 		bl	HAL_RCC_ClockConfig
 536 00ba 0346     		mov	r3, r0
 537              		.loc 1 236 6
 538 00bc 002B     		cmp	r3, #0
 539 00be 01D0     		beq	.L10
 237:Src/main.c    ****   {
 238:Src/main.c    ****     Error_Handler();
 540              		.loc 1 238 5
 541 00c0 FFF7FEFF 		bl	Error_Handler
 542              	.L10:
 239:Src/main.c    ****   }
 240:Src/main.c    ****   /** Initializes the peripherals clocks 
 241:Src/main.c    ****   */
 242:Src/main.c    ****   PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USB
 543              		.loc 1 242 38
 544 00c4 154B     		ldr	r3, .L12
 545 00c6 BB61     		str	r3, [r7, #24]
 243:Src/main.c    ****                               |RCC_PERIPHCLK_ADC12|RCC_PERIPHCLK_ADC345;
 244:Src/main.c    ****   PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 546              		.loc 1 244 38
 547 00c8 0023     		movs	r3, #0
 548 00ca FB61     		str	r3, [r7, #28]
 245:Src/main.c    ****   PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 549              		.loc 1 245 35
 550 00cc 0023     		movs	r3, #0
 551 00ce 7B65     		str	r3, [r7, #84]
 246:Src/main.c    ****   PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_PLL;
 552              		.loc 1 246 37
 553 00d0 4FF08053 		mov	r3, #268435456
 554 00d4 FB65     		str	r3, [r7, #92]
 247:Src/main.c    ****   PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_PLL;
 555              		.loc 1 247 38
 556 00d6 4FF08043 		mov	r3, #1073741824
ARM GAS  /tmp/ccA7VsRU.s 			page 15


 557 00da 3B66     		str	r3, [r7, #96]
 248:Src/main.c    ****   if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 558              		.loc 1 248 7
 559 00dc 07F11803 		add	r3, r7, #24
 560 00e0 1846     		mov	r0, r3
 561 00e2 FFF7FEFF 		bl	HAL_RCCEx_PeriphCLKConfig
 562 00e6 0346     		mov	r3, r0
 563              		.loc 1 248 6
 564 00e8 002B     		cmp	r3, #0
 565 00ea 01D0     		beq	.L11
 249:Src/main.c    ****   {
 250:Src/main.c    ****     Error_Handler();
 566              		.loc 1 250 5
 567 00ec FFF7FEFF 		bl	Error_Handler
 568              	.L11:
 251:Src/main.c    ****   }
 252:Src/main.c    ****   /** Configures CRS 
 253:Src/main.c    ****   */
 254:Src/main.c    ****   pInit.Prescaler = RCC_CRS_SYNC_DIV1;
 569              		.loc 1 254 19
 570 00f0 0023     		movs	r3, #0
 571 00f2 3B60     		str	r3, [r7]
 255:Src/main.c    ****   pInit.Source = RCC_CRS_SYNC_SOURCE_USB;
 572              		.loc 1 255 16
 573 00f4 4FF00053 		mov	r3, #536870912
 574 00f8 7B60     		str	r3, [r7, #4]
 256:Src/main.c    ****   pInit.Polarity = RCC_CRS_SYNC_POLARITY_RISING;
 575              		.loc 1 256 18
 576 00fa 0023     		movs	r3, #0
 577 00fc BB60     		str	r3, [r7, #8]
 257:Src/main.c    ****   pInit.ReloadValue = __HAL_RCC_CRS_RELOADVALUE_CALCULATE(48000000,1000);
 578              		.loc 1 257 21
 579 00fe 4BF67F33 		movw	r3, #47999
 580 0102 FB60     		str	r3, [r7, #12]
 258:Src/main.c    ****   pInit.ErrorLimitValue = 34;
 581              		.loc 1 258 25
 582 0104 2223     		movs	r3, #34
 583 0106 3B61     		str	r3, [r7, #16]
 259:Src/main.c    ****   pInit.HSI48CalibrationValue = 29;
 584              		.loc 1 259 31
 585 0108 1D23     		movs	r3, #29
 586 010a 7B61     		str	r3, [r7, #20]
 260:Src/main.c    **** 
 261:Src/main.c    ****   HAL_RCCEx_CRSConfig(&pInit);
 587              		.loc 1 261 3
 588 010c 3B46     		mov	r3, r7
 589 010e 1846     		mov	r0, r3
 590 0110 FFF7FEFF 		bl	HAL_RCCEx_CRSConfig
 262:Src/main.c    **** }
 591              		.loc 1 262 1
 592 0114 00BF     		nop
 593 0116 B837     		adds	r7, r7, #184
 594              	.LCFI6:
 595              		.cfi_def_cfa_offset 8
 596 0118 BD46     		mov	sp, r7
 597              	.LCFI7:
 598              		.cfi_def_cfa_register 13
ARM GAS  /tmp/ccA7VsRU.s 			page 16


 599              		@ sp needed
 600 011a 80BD     		pop	{r7, pc}
 601              	.L13:
 602              		.align	2
 603              	.L12:
 604 011c 01A00100 		.word	106497
 605              		.cfi_endproc
 606              	.LFE410:
 608              		.section	.text.MX_ADC1_Init,"ax",%progbits
 609              		.align	1
 610              		.syntax unified
 611              		.thumb
 612              		.thumb_func
 613              		.fpu fpv4-sp-d16
 615              	MX_ADC1_Init:
 616              	.LFB411:
 263:Src/main.c    **** 
 264:Src/main.c    **** /**
 265:Src/main.c    ****   * @brief ADC1 Initialization Function
 266:Src/main.c    ****   * @param None
 267:Src/main.c    ****   * @retval None
 268:Src/main.c    ****   */
 269:Src/main.c    **** static void MX_ADC1_Init(void)
 270:Src/main.c    **** {
 617              		.loc 1 270 1
 618              		.cfi_startproc
 619              		@ args = 0, pretend = 0, frame = 104
 620              		@ frame_needed = 1, uses_anonymous_args = 0
 621 0000 80B5     		push	{r7, lr}
 622              	.LCFI8:
 623              		.cfi_def_cfa_offset 8
 624              		.cfi_offset 7, -8
 625              		.cfi_offset 14, -4
 626 0002 9AB0     		sub	sp, sp, #104
 627              	.LCFI9:
 628              		.cfi_def_cfa_offset 112
 629 0004 00AF     		add	r7, sp, #0
 630              	.LCFI10:
 631              		.cfi_def_cfa_register 7
 271:Src/main.c    **** 
 272:Src/main.c    ****   /* USER CODE BEGIN ADC1_Init 0 */
 273:Src/main.c    **** 
 274:Src/main.c    ****   /* USER CODE END ADC1_Init 0 */
 275:Src/main.c    **** 
 276:Src/main.c    ****   ADC_MultiModeTypeDef multimode = {0};
 632              		.loc 1 276 24
 633 0006 07F15C03 		add	r3, r7, #92
 634 000a 0022     		movs	r2, #0
 635 000c 1A60     		str	r2, [r3]
 636 000e 5A60     		str	r2, [r3, #4]
 637 0010 9A60     		str	r2, [r3, #8]
 277:Src/main.c    ****   ADC_InjectionConfTypeDef sConfigInjected = {0};
 638              		.loc 1 277 28
 639 0012 07F12003 		add	r3, r7, #32
 640 0016 3C22     		movs	r2, #60
 641 0018 0021     		movs	r1, #0
 642 001a 1846     		mov	r0, r3
ARM GAS  /tmp/ccA7VsRU.s 			page 17


 643 001c FFF7FEFF 		bl	memset
 278:Src/main.c    ****   ADC_ChannelConfTypeDef sConfig = {0};
 644              		.loc 1 278 26
 645 0020 3B46     		mov	r3, r7
 646 0022 2022     		movs	r2, #32
 647 0024 0021     		movs	r1, #0
 648 0026 1846     		mov	r0, r3
 649 0028 FFF7FEFF 		bl	memset
 279:Src/main.c    **** 
 280:Src/main.c    ****   /* USER CODE BEGIN ADC1_Init 1 */
 281:Src/main.c    **** 
 282:Src/main.c    ****   /* USER CODE END ADC1_Init 1 */
 283:Src/main.c    ****   /** Common config 
 284:Src/main.c    ****   */
 285:Src/main.c    ****   hadc1.Instance = ADC1;
 650              		.loc 1 285 18
 651 002c 4F4B     		ldr	r3, .L21
 652 002e 4FF0A042 		mov	r2, #1342177280
 653 0032 1A60     		str	r2, [r3]
 286:Src/main.c    ****   hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 654              		.loc 1 286 29
 655 0034 4D4B     		ldr	r3, .L21
 656 0036 4FF44032 		mov	r2, #196608
 657 003a 5A60     		str	r2, [r3, #4]
 287:Src/main.c    ****   hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 658              		.loc 1 287 25
 659 003c 4B4B     		ldr	r3, .L21
 660 003e 0022     		movs	r2, #0
 661 0040 9A60     		str	r2, [r3, #8]
 288:Src/main.c    ****   hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 662              		.loc 1 288 24
 663 0042 4A4B     		ldr	r3, .L21
 664 0044 0022     		movs	r2, #0
 665 0046 DA60     		str	r2, [r3, #12]
 289:Src/main.c    ****   hadc1.Init.GainCompensation = 0;
 666              		.loc 1 289 31
 667 0048 484B     		ldr	r3, .L21
 668 004a 0022     		movs	r2, #0
 669 004c 1A61     		str	r2, [r3, #16]
 290:Src/main.c    ****   hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 670              		.loc 1 290 27
 671 004e 474B     		ldr	r3, .L21
 672 0050 0122     		movs	r2, #1
 673 0052 5A61     		str	r2, [r3, #20]
 291:Src/main.c    ****   hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 674              		.loc 1 291 27
 675 0054 454B     		ldr	r3, .L21
 676 0056 0822     		movs	r2, #8
 677 0058 9A61     		str	r2, [r3, #24]
 292:Src/main.c    ****   hadc1.Init.LowPowerAutoWait = DISABLE;
 678              		.loc 1 292 31
 679 005a 444B     		ldr	r3, .L21
 680 005c 0022     		movs	r2, #0
 681 005e 1A77     		strb	r2, [r3, #28]
 293:Src/main.c    ****   hadc1.Init.ContinuousConvMode = DISABLE;
 682              		.loc 1 293 33
 683 0060 424B     		ldr	r3, .L21
ARM GAS  /tmp/ccA7VsRU.s 			page 18


 684 0062 0022     		movs	r2, #0
 685 0064 5A77     		strb	r2, [r3, #29]
 294:Src/main.c    ****   hadc1.Init.NbrOfConversion = 1;
 686              		.loc 1 294 30
 687 0066 414B     		ldr	r3, .L21
 688 0068 0122     		movs	r2, #1
 689 006a 1A62     		str	r2, [r3, #32]
 295:Src/main.c    ****   hadc1.Init.DiscontinuousConvMode = DISABLE;
 690              		.loc 1 295 36
 691 006c 3F4B     		ldr	r3, .L21
 692 006e 0022     		movs	r2, #0
 693 0070 83F82420 		strb	r2, [r3, #36]
 296:Src/main.c    ****   hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_HRTIM_TRG5;
 694              		.loc 1 296 31
 695 0074 3D4B     		ldr	r3, .L21
 696 0076 4FF4DC62 		mov	r2, #1760
 697 007a DA62     		str	r2, [r3, #44]
 297:Src/main.c    ****   hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 698              		.loc 1 297 35
 699 007c 3B4B     		ldr	r3, .L21
 700 007e 4FF48062 		mov	r2, #1024
 701 0082 1A63     		str	r2, [r3, #48]
 298:Src/main.c    ****   hadc1.Init.DMAContinuousRequests = DISABLE;
 702              		.loc 1 298 36
 703 0084 394B     		ldr	r3, .L21
 704 0086 0022     		movs	r2, #0
 705 0088 83F83820 		strb	r2, [r3, #56]
 299:Src/main.c    ****   hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 706              		.loc 1 299 22
 707 008c 374B     		ldr	r3, .L21
 708 008e 4FF48052 		mov	r2, #4096
 709 0092 DA63     		str	r2, [r3, #60]
 300:Src/main.c    ****   hadc1.Init.OversamplingMode = DISABLE;
 710              		.loc 1 300 31
 711 0094 354B     		ldr	r3, .L21
 712 0096 0022     		movs	r2, #0
 713 0098 83F84020 		strb	r2, [r3, #64]
 301:Src/main.c    ****   if (HAL_ADC_Init(&hadc1) != HAL_OK)
 714              		.loc 1 301 7
 715 009c 3348     		ldr	r0, .L21
 716 009e FFF7FEFF 		bl	HAL_ADC_Init
 717 00a2 0346     		mov	r3, r0
 718              		.loc 1 301 6
 719 00a4 002B     		cmp	r3, #0
 720 00a6 01D0     		beq	.L15
 302:Src/main.c    ****   {
 303:Src/main.c    ****     Error_Handler();
 721              		.loc 1 303 5
 722 00a8 FFF7FEFF 		bl	Error_Handler
 723              	.L15:
 304:Src/main.c    ****   }
 305:Src/main.c    ****   /** Configure the ADC multi-mode 
 306:Src/main.c    ****   */
 307:Src/main.c    ****   multimode.Mode = ADC_MODE_INDEPENDENT;
 724              		.loc 1 307 18
 725 00ac 0023     		movs	r3, #0
 726 00ae FB65     		str	r3, [r7, #92]
ARM GAS  /tmp/ccA7VsRU.s 			page 19


 308:Src/main.c    ****   if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 727              		.loc 1 308 7
 728 00b0 07F15C03 		add	r3, r7, #92
 729 00b4 1946     		mov	r1, r3
 730 00b6 2D48     		ldr	r0, .L21
 731 00b8 FFF7FEFF 		bl	HAL_ADCEx_MultiModeConfigChannel
 732 00bc 0346     		mov	r3, r0
 733              		.loc 1 308 6
 734 00be 002B     		cmp	r3, #0
 735 00c0 01D0     		beq	.L16
 309:Src/main.c    ****   {
 310:Src/main.c    ****     Error_Handler();
 736              		.loc 1 310 5
 737 00c2 FFF7FEFF 		bl	Error_Handler
 738              	.L16:
 311:Src/main.c    ****   }
 312:Src/main.c    ****   /** Configure Injected Channel 
 313:Src/main.c    ****   */
 314:Src/main.c    ****   sConfigInjected.InjectedChannel = ADC_CHANNEL_12;
 739              		.loc 1 314 35
 740 00c6 2A4B     		ldr	r3, .L21+4
 741 00c8 3B62     		str	r3, [r7, #32]
 315:Src/main.c    ****   sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 742              		.loc 1 315 32
 743 00ca 0923     		movs	r3, #9
 744 00cc 7B62     		str	r3, [r7, #36]
 316:Src/main.c    ****   sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_12CYCLES_5;
 745              		.loc 1 316 40
 746 00ce 0223     		movs	r3, #2
 747 00d0 BB62     		str	r3, [r7, #40]
 317:Src/main.c    ****   sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 748              		.loc 1 317 38
 749 00d2 7F23     		movs	r3, #127
 750 00d4 FB62     		str	r3, [r7, #44]
 318:Src/main.c    ****   sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_NONE;
 751              		.loc 1 318 40
 752 00d6 0423     		movs	r3, #4
 753 00d8 3B63     		str	r3, [r7, #48]
 319:Src/main.c    ****   sConfigInjected.InjectedOffset = 0;
 754              		.loc 1 319 34
 755 00da 0023     		movs	r3, #0
 756 00dc 7B63     		str	r3, [r7, #52]
 320:Src/main.c    ****   sConfigInjected.InjectedNbrOfConversion = 2;
 757              		.loc 1 320 43
 758 00de 0223     		movs	r3, #2
 759 00e0 3B64     		str	r3, [r7, #64]
 321:Src/main.c    ****   sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 760              		.loc 1 321 49
 761 00e2 0023     		movs	r3, #0
 762 00e4 87F84430 		strb	r3, [r7, #68]
 322:Src/main.c    ****   sConfigInjected.AutoInjectedConv = DISABLE;
 763              		.loc 1 322 36
 764 00e8 0023     		movs	r3, #0
 765 00ea 87F84530 		strb	r3, [r7, #69]
 323:Src/main.c    ****   sConfigInjected.QueueInjectedContext = DISABLE;
 766              		.loc 1 323 40
 767 00ee 0023     		movs	r3, #0
ARM GAS  /tmp/ccA7VsRU.s 			page 20


 768 00f0 87F84630 		strb	r3, [r7, #70]
 324:Src/main.c    ****   sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJEC_HRTIM_TRG5;
 769              		.loc 1 324 41
 770 00f4 D423     		movs	r3, #212
 771 00f6 BB64     		str	r3, [r7, #72]
 325:Src/main.c    ****   sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_RISING;
 772              		.loc 1 325 45
 773 00f8 8023     		movs	r3, #128
 774 00fa FB64     		str	r3, [r7, #76]
 326:Src/main.c    ****   sConfigInjected.InjecOversamplingMode = DISABLE;
 775              		.loc 1 326 41
 776 00fc 0023     		movs	r3, #0
 777 00fe 87F85030 		strb	r3, [r7, #80]
 327:Src/main.c    ****   if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 778              		.loc 1 327 7
 779 0102 07F12003 		add	r3, r7, #32
 780 0106 1946     		mov	r1, r3
 781 0108 1848     		ldr	r0, .L21
 782 010a FFF7FEFF 		bl	HAL_ADCEx_InjectedConfigChannel
 783 010e 0346     		mov	r3, r0
 784              		.loc 1 327 6
 785 0110 002B     		cmp	r3, #0
 786 0112 01D0     		beq	.L17
 328:Src/main.c    ****   {
 329:Src/main.c    ****     Error_Handler();
 787              		.loc 1 329 5
 788 0114 FFF7FEFF 		bl	Error_Handler
 789              	.L17:
 330:Src/main.c    ****   }
 331:Src/main.c    ****   /** Configure Injected Channel 
 332:Src/main.c    ****   */
 333:Src/main.c    ****   sConfigInjected.InjectedRank = ADC_INJECTED_RANK_2;
 790              		.loc 1 333 32
 791 0118 40F20F13 		movw	r3, #271
 792 011c 7B62     		str	r3, [r7, #36]
 334:Src/main.c    ****   sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_6CYCLES_5;
 793              		.loc 1 334 40
 794 011e 0123     		movs	r3, #1
 795 0120 BB62     		str	r3, [r7, #40]
 335:Src/main.c    ****   if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 796              		.loc 1 335 7
 797 0122 07F12003 		add	r3, r7, #32
 798 0126 1946     		mov	r1, r3
 799 0128 1048     		ldr	r0, .L21
 800 012a FFF7FEFF 		bl	HAL_ADCEx_InjectedConfigChannel
 801 012e 0346     		mov	r3, r0
 802              		.loc 1 335 6
 803 0130 002B     		cmp	r3, #0
 804 0132 01D0     		beq	.L18
 336:Src/main.c    ****   {
 337:Src/main.c    ****     Error_Handler();
 805              		.loc 1 337 5
 806 0134 FFF7FEFF 		bl	Error_Handler
 807              	.L18:
 338:Src/main.c    ****   }
 339:Src/main.c    ****   /** Configure Regular Channel 
 340:Src/main.c    ****   */
ARM GAS  /tmp/ccA7VsRU.s 			page 21


 341:Src/main.c    ****   sConfig.Channel = ADC_CHANNEL_1;
 808              		.loc 1 341 19
 809 0138 0E4B     		ldr	r3, .L21+8
 810 013a 3B60     		str	r3, [r7]
 342:Src/main.c    ****   sConfig.Rank = ADC_REGULAR_RANK_1;
 811              		.loc 1 342 16
 812 013c 0623     		movs	r3, #6
 813 013e 7B60     		str	r3, [r7, #4]
 343:Src/main.c    ****   sConfig.SamplingTime = ADC_SAMPLETIME_6CYCLES_5;
 814              		.loc 1 343 24
 815 0140 0123     		movs	r3, #1
 816 0142 BB60     		str	r3, [r7, #8]
 344:Src/main.c    ****   sConfig.SingleDiff = ADC_SINGLE_ENDED;
 817              		.loc 1 344 22
 818 0144 7F23     		movs	r3, #127
 819 0146 FB60     		str	r3, [r7, #12]
 345:Src/main.c    ****   sConfig.OffsetNumber = ADC_OFFSET_NONE;
 820              		.loc 1 345 24
 821 0148 0423     		movs	r3, #4
 822 014a 3B61     		str	r3, [r7, #16]
 346:Src/main.c    ****   sConfig.Offset = 0;
 823              		.loc 1 346 18
 824 014c 0023     		movs	r3, #0
 825 014e 7B61     		str	r3, [r7, #20]
 347:Src/main.c    ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 826              		.loc 1 347 7
 827 0150 3B46     		mov	r3, r7
 828 0152 1946     		mov	r1, r3
 829 0154 0548     		ldr	r0, .L21
 830 0156 FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 831 015a 0346     		mov	r3, r0
 832              		.loc 1 347 6
 833 015c 002B     		cmp	r3, #0
 834 015e 01D0     		beq	.L20
 348:Src/main.c    ****   {
 349:Src/main.c    ****     Error_Handler();
 835              		.loc 1 349 5
 836 0160 FFF7FEFF 		bl	Error_Handler
 837              	.L20:
 350:Src/main.c    ****   }
 351:Src/main.c    ****   /* USER CODE BEGIN ADC1_Init 2 */
 352:Src/main.c    **** 
 353:Src/main.c    ****   /* USER CODE END ADC1_Init 2 */
 354:Src/main.c    **** 
 355:Src/main.c    **** }
 838              		.loc 1 355 1
 839 0164 00BF     		nop
 840 0166 6837     		adds	r7, r7, #104
 841              	.LCFI11:
 842              		.cfi_def_cfa_offset 8
 843 0168 BD46     		mov	sp, r7
 844              	.LCFI12:
 845              		.cfi_def_cfa_register 13
 846              		@ sp needed
 847 016a 80BD     		pop	{r7, pc}
 848              	.L22:
 849              		.align	2
ARM GAS  /tmp/ccA7VsRU.s 			page 22


 850              	.L21:
 851 016c 00000000 		.word	hadc1
 852 0170 00106032 		.word	845156352
 853 0174 02003004 		.word	70254594
 854              		.cfi_endproc
 855              	.LFE411:
 857              		.section	.text.MX_ADC2_Init,"ax",%progbits
 858              		.align	1
 859              		.syntax unified
 860              		.thumb
 861              		.thumb_func
 862              		.fpu fpv4-sp-d16
 864              	MX_ADC2_Init:
 865              	.LFB412:
 356:Src/main.c    **** 
 357:Src/main.c    **** /**
 358:Src/main.c    ****   * @brief ADC2 Initialization Function
 359:Src/main.c    ****   * @param None
 360:Src/main.c    ****   * @retval None
 361:Src/main.c    ****   */
 362:Src/main.c    **** static void MX_ADC2_Init(void)
 363:Src/main.c    **** {
 866              		.loc 1 363 1
 867              		.cfi_startproc
 868              		@ args = 0, pretend = 0, frame = 64
 869              		@ frame_needed = 1, uses_anonymous_args = 0
 870 0000 80B5     		push	{r7, lr}
 871              	.LCFI13:
 872              		.cfi_def_cfa_offset 8
 873              		.cfi_offset 7, -8
 874              		.cfi_offset 14, -4
 875 0002 90B0     		sub	sp, sp, #64
 876              	.LCFI14:
 877              		.cfi_def_cfa_offset 72
 878 0004 00AF     		add	r7, sp, #0
 879              	.LCFI15:
 880              		.cfi_def_cfa_register 7
 364:Src/main.c    **** 
 365:Src/main.c    ****   /* USER CODE BEGIN ADC2_Init 0 */
 366:Src/main.c    **** 
 367:Src/main.c    ****   /* USER CODE END ADC2_Init 0 */
 368:Src/main.c    **** 
 369:Src/main.c    ****   ADC_InjectionConfTypeDef sConfigInjected = {0};
 881              		.loc 1 369 28
 882 0006 3B1D     		adds	r3, r7, #4
 883 0008 3C22     		movs	r2, #60
 884 000a 0021     		movs	r1, #0
 885 000c 1846     		mov	r0, r3
 886 000e FFF7FEFF 		bl	memset
 370:Src/main.c    **** 
 371:Src/main.c    ****   /* USER CODE BEGIN ADC2_Init 1 */
 372:Src/main.c    **** 
 373:Src/main.c    ****   /* USER CODE END ADC2_Init 1 */
 374:Src/main.c    ****   /** Common config 
 375:Src/main.c    ****   */
 376:Src/main.c    ****   hadc2.Instance = ADC2;
 887              		.loc 1 376 18
ARM GAS  /tmp/ccA7VsRU.s 			page 23


 888 0012 394B     		ldr	r3, .L28
 889 0014 394A     		ldr	r2, .L28+4
 890 0016 1A60     		str	r2, [r3]
 377:Src/main.c    ****   hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 891              		.loc 1 377 29
 892 0018 374B     		ldr	r3, .L28
 893 001a 4FF44032 		mov	r2, #196608
 894 001e 5A60     		str	r2, [r3, #4]
 378:Src/main.c    ****   hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 895              		.loc 1 378 25
 896 0020 354B     		ldr	r3, .L28
 897 0022 0022     		movs	r2, #0
 898 0024 9A60     		str	r2, [r3, #8]
 379:Src/main.c    ****   hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 899              		.loc 1 379 24
 900 0026 344B     		ldr	r3, .L28
 901 0028 0022     		movs	r2, #0
 902 002a DA60     		str	r2, [r3, #12]
 380:Src/main.c    ****   hadc2.Init.GainCompensation = 0;
 903              		.loc 1 380 31
 904 002c 324B     		ldr	r3, .L28
 905 002e 0022     		movs	r2, #0
 906 0030 1A61     		str	r2, [r3, #16]
 381:Src/main.c    ****   hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 907              		.loc 1 381 27
 908 0032 314B     		ldr	r3, .L28
 909 0034 0122     		movs	r2, #1
 910 0036 5A61     		str	r2, [r3, #20]
 382:Src/main.c    ****   hadc2.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 911              		.loc 1 382 27
 912 0038 2F4B     		ldr	r3, .L28
 913 003a 0822     		movs	r2, #8
 914 003c 9A61     		str	r2, [r3, #24]
 383:Src/main.c    ****   hadc2.Init.LowPowerAutoWait = DISABLE;
 915              		.loc 1 383 31
 916 003e 2E4B     		ldr	r3, .L28
 917 0040 0022     		movs	r2, #0
 918 0042 1A77     		strb	r2, [r3, #28]
 384:Src/main.c    ****   hadc2.Init.ContinuousConvMode = DISABLE;
 919              		.loc 1 384 33
 920 0044 2C4B     		ldr	r3, .L28
 921 0046 0022     		movs	r2, #0
 922 0048 5A77     		strb	r2, [r3, #29]
 385:Src/main.c    ****   hadc2.Init.NbrOfConversion = 1;
 923              		.loc 1 385 30
 924 004a 2B4B     		ldr	r3, .L28
 925 004c 0122     		movs	r2, #1
 926 004e 1A62     		str	r2, [r3, #32]
 386:Src/main.c    ****   hadc2.Init.DiscontinuousConvMode = DISABLE;
 927              		.loc 1 386 36
 928 0050 294B     		ldr	r3, .L28
 929 0052 0022     		movs	r2, #0
 930 0054 83F82420 		strb	r2, [r3, #36]
 387:Src/main.c    ****   hadc2.Init.DMAContinuousRequests = DISABLE;
 931              		.loc 1 387 36
 932 0058 274B     		ldr	r3, .L28
 933 005a 0022     		movs	r2, #0
ARM GAS  /tmp/ccA7VsRU.s 			page 24


 934 005c 83F83820 		strb	r2, [r3, #56]
 388:Src/main.c    ****   hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 935              		.loc 1 388 22
 936 0060 254B     		ldr	r3, .L28
 937 0062 4FF48052 		mov	r2, #4096
 938 0066 DA63     		str	r2, [r3, #60]
 389:Src/main.c    ****   hadc2.Init.OversamplingMode = DISABLE;
 939              		.loc 1 389 31
 940 0068 234B     		ldr	r3, .L28
 941 006a 0022     		movs	r2, #0
 942 006c 83F84020 		strb	r2, [r3, #64]
 390:Src/main.c    ****   if (HAL_ADC_Init(&hadc2) != HAL_OK)
 943              		.loc 1 390 7
 944 0070 2148     		ldr	r0, .L28
 945 0072 FFF7FEFF 		bl	HAL_ADC_Init
 946 0076 0346     		mov	r3, r0
 947              		.loc 1 390 6
 948 0078 002B     		cmp	r3, #0
 949 007a 01D0     		beq	.L24
 391:Src/main.c    ****   {
 392:Src/main.c    ****     Error_Handler();
 950              		.loc 1 392 5
 951 007c FFF7FEFF 		bl	Error_Handler
 952              	.L24:
 393:Src/main.c    ****   }
 394:Src/main.c    ****   /** Configure Injected Channel 
 395:Src/main.c    ****   */
 396:Src/main.c    ****   sConfigInjected.InjectedChannel = ADC_CHANNEL_12;
 953              		.loc 1 396 35
 954 0080 1F4B     		ldr	r3, .L28+8
 955 0082 7B60     		str	r3, [r7, #4]
 397:Src/main.c    ****   sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 956              		.loc 1 397 32
 957 0084 0923     		movs	r3, #9
 958 0086 BB60     		str	r3, [r7, #8]
 398:Src/main.c    ****   sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_12CYCLES_5;
 959              		.loc 1 398 40
 960 0088 0223     		movs	r3, #2
 961 008a FB60     		str	r3, [r7, #12]
 399:Src/main.c    ****   sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 962              		.loc 1 399 38
 963 008c 7F23     		movs	r3, #127
 964 008e 3B61     		str	r3, [r7, #16]
 400:Src/main.c    ****   sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_NONE;
 965              		.loc 1 400 40
 966 0090 0423     		movs	r3, #4
 967 0092 7B61     		str	r3, [r7, #20]
 401:Src/main.c    ****   sConfigInjected.InjectedOffset = 0;
 968              		.loc 1 401 34
 969 0094 0023     		movs	r3, #0
 970 0096 BB61     		str	r3, [r7, #24]
 402:Src/main.c    ****   sConfigInjected.InjectedNbrOfConversion = 2;
 971              		.loc 1 402 43
 972 0098 0223     		movs	r3, #2
 973 009a 7B62     		str	r3, [r7, #36]
 403:Src/main.c    ****   sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 974              		.loc 1 403 49
ARM GAS  /tmp/ccA7VsRU.s 			page 25


 975 009c 0023     		movs	r3, #0
 976 009e 87F82830 		strb	r3, [r7, #40]
 404:Src/main.c    ****   sConfigInjected.AutoInjectedConv = DISABLE;
 977              		.loc 1 404 36
 978 00a2 0023     		movs	r3, #0
 979 00a4 87F82930 		strb	r3, [r7, #41]
 405:Src/main.c    ****   sConfigInjected.QueueInjectedContext = DISABLE;
 980              		.loc 1 405 40
 981 00a8 0023     		movs	r3, #0
 982 00aa 87F82A30 		strb	r3, [r7, #42]
 406:Src/main.c    ****   sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJEC_HRTIM_TRG5;
 983              		.loc 1 406 41
 984 00ae D423     		movs	r3, #212
 985 00b0 FB62     		str	r3, [r7, #44]
 407:Src/main.c    ****   sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_RISING;
 986              		.loc 1 407 45
 987 00b2 8023     		movs	r3, #128
 988 00b4 3B63     		str	r3, [r7, #48]
 408:Src/main.c    ****   sConfigInjected.InjecOversamplingMode = DISABLE;
 989              		.loc 1 408 41
 990 00b6 0023     		movs	r3, #0
 991 00b8 87F83430 		strb	r3, [r7, #52]
 409:Src/main.c    ****   if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 992              		.loc 1 409 7
 993 00bc 3B1D     		adds	r3, r7, #4
 994 00be 1946     		mov	r1, r3
 995 00c0 0D48     		ldr	r0, .L28
 996 00c2 FFF7FEFF 		bl	HAL_ADCEx_InjectedConfigChannel
 997 00c6 0346     		mov	r3, r0
 998              		.loc 1 409 6
 999 00c8 002B     		cmp	r3, #0
 1000 00ca 01D0     		beq	.L25
 410:Src/main.c    ****   {
 411:Src/main.c    ****     Error_Handler();
 1001              		.loc 1 411 5
 1002 00cc FFF7FEFF 		bl	Error_Handler
 1003              	.L25:
 412:Src/main.c    ****   }
 413:Src/main.c    ****   /** Configure Injected Channel 
 414:Src/main.c    ****   */
 415:Src/main.c    ****   sConfigInjected.InjectedRank = ADC_INJECTED_RANK_2;
 1004              		.loc 1 415 32
 1005 00d0 40F20F13 		movw	r3, #271
 1006 00d4 BB60     		str	r3, [r7, #8]
 416:Src/main.c    ****   sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_6CYCLES_5;
 1007              		.loc 1 416 40
 1008 00d6 0123     		movs	r3, #1
 1009 00d8 FB60     		str	r3, [r7, #12]
 417:Src/main.c    ****   if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 1010              		.loc 1 417 7
 1011 00da 3B1D     		adds	r3, r7, #4
 1012 00dc 1946     		mov	r1, r3
 1013 00de 0648     		ldr	r0, .L28
 1014 00e0 FFF7FEFF 		bl	HAL_ADCEx_InjectedConfigChannel
 1015 00e4 0346     		mov	r3, r0
 1016              		.loc 1 417 6
 1017 00e6 002B     		cmp	r3, #0
ARM GAS  /tmp/ccA7VsRU.s 			page 26


 1018 00e8 01D0     		beq	.L27
 418:Src/main.c    ****   {
 419:Src/main.c    ****     Error_Handler();
 1019              		.loc 1 419 5
 1020 00ea FFF7FEFF 		bl	Error_Handler
 1021              	.L27:
 420:Src/main.c    ****   }
 421:Src/main.c    ****   /* USER CODE BEGIN ADC2_Init 2 */
 422:Src/main.c    **** 
 423:Src/main.c    ****   /* USER CODE END ADC2_Init 2 */
 424:Src/main.c    **** 
 425:Src/main.c    **** }
 1022              		.loc 1 425 1
 1023 00ee 00BF     		nop
 1024 00f0 4037     		adds	r7, r7, #64
 1025              	.LCFI16:
 1026              		.cfi_def_cfa_offset 8
 1027 00f2 BD46     		mov	sp, r7
 1028              	.LCFI17:
 1029              		.cfi_def_cfa_register 13
 1030              		@ sp needed
 1031 00f4 80BD     		pop	{r7, pc}
 1032              	.L29:
 1033 00f6 00BF     		.align	2
 1034              	.L28:
 1035 00f8 00000000 		.word	hadc2
 1036 00fc 00010050 		.word	1342177536
 1037 0100 00106032 		.word	845156352
 1038              		.cfi_endproc
 1039              	.LFE412:
 1041              		.section	.text.MX_ADC3_Init,"ax",%progbits
 1042              		.align	1
 1043              		.syntax unified
 1044              		.thumb
 1045              		.thumb_func
 1046              		.fpu fpv4-sp-d16
 1048              	MX_ADC3_Init:
 1049              	.LFB413:
 426:Src/main.c    **** 
 427:Src/main.c    **** /**
 428:Src/main.c    ****   * @brief ADC3 Initialization Function
 429:Src/main.c    ****   * @param None
 430:Src/main.c    ****   * @retval None
 431:Src/main.c    ****   */
 432:Src/main.c    **** static void MX_ADC3_Init(void)
 433:Src/main.c    **** {
 1050              		.loc 1 433 1
 1051              		.cfi_startproc
 1052              		@ args = 0, pretend = 0, frame = 72
 1053              		@ frame_needed = 1, uses_anonymous_args = 0
 1054 0000 80B5     		push	{r7, lr}
 1055              	.LCFI18:
 1056              		.cfi_def_cfa_offset 8
 1057              		.cfi_offset 7, -8
 1058              		.cfi_offset 14, -4
 1059 0002 92B0     		sub	sp, sp, #72
 1060              	.LCFI19:
ARM GAS  /tmp/ccA7VsRU.s 			page 27


 1061              		.cfi_def_cfa_offset 80
 1062 0004 00AF     		add	r7, sp, #0
 1063              	.LCFI20:
 1064              		.cfi_def_cfa_register 7
 434:Src/main.c    **** 
 435:Src/main.c    ****   /* USER CODE BEGIN ADC3_Init 0 */
 436:Src/main.c    **** 
 437:Src/main.c    ****   /* USER CODE END ADC3_Init 0 */
 438:Src/main.c    **** 
 439:Src/main.c    ****   ADC_MultiModeTypeDef multimode = {0};
 1065              		.loc 1 439 24
 1066 0006 07F13C03 		add	r3, r7, #60
 1067 000a 0022     		movs	r2, #0
 1068 000c 1A60     		str	r2, [r3]
 1069 000e 5A60     		str	r2, [r3, #4]
 1070 0010 9A60     		str	r2, [r3, #8]
 440:Src/main.c    ****   ADC_InjectionConfTypeDef sConfigInjected = {0};
 1071              		.loc 1 440 28
 1072 0012 3B46     		mov	r3, r7
 1073 0014 3C22     		movs	r2, #60
 1074 0016 0021     		movs	r1, #0
 1075 0018 1846     		mov	r0, r3
 1076 001a FFF7FEFF 		bl	memset
 441:Src/main.c    **** 
 442:Src/main.c    ****   /* USER CODE BEGIN ADC3_Init 1 */
 443:Src/main.c    **** 
 444:Src/main.c    ****   /* USER CODE END ADC3_Init 1 */
 445:Src/main.c    ****   /** Common config 
 446:Src/main.c    ****   */
 447:Src/main.c    ****   hadc3.Instance = ADC3;
 1077              		.loc 1 447 18
 1078 001e 3F4B     		ldr	r3, .L36
 1079 0020 3F4A     		ldr	r2, .L36+4
 1080 0022 1A60     		str	r2, [r3]
 448:Src/main.c    ****   hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 1081              		.loc 1 448 29
 1082 0024 3D4B     		ldr	r3, .L36
 1083 0026 4FF44032 		mov	r2, #196608
 1084 002a 5A60     		str	r2, [r3, #4]
 449:Src/main.c    ****   hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 1085              		.loc 1 449 25
 1086 002c 3B4B     		ldr	r3, .L36
 1087 002e 0022     		movs	r2, #0
 1088 0030 9A60     		str	r2, [r3, #8]
 450:Src/main.c    ****   hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 1089              		.loc 1 450 24
 1090 0032 3A4B     		ldr	r3, .L36
 1091 0034 0022     		movs	r2, #0
 1092 0036 DA60     		str	r2, [r3, #12]
 451:Src/main.c    ****   hadc3.Init.GainCompensation = 0;
 1093              		.loc 1 451 31
 1094 0038 384B     		ldr	r3, .L36
 1095 003a 0022     		movs	r2, #0
 1096 003c 1A61     		str	r2, [r3, #16]
 452:Src/main.c    ****   hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 1097              		.loc 1 452 27
 1098 003e 374B     		ldr	r3, .L36
ARM GAS  /tmp/ccA7VsRU.s 			page 28


 1099 0040 0122     		movs	r2, #1
 1100 0042 5A61     		str	r2, [r3, #20]
 453:Src/main.c    ****   hadc3.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 1101              		.loc 1 453 27
 1102 0044 354B     		ldr	r3, .L36
 1103 0046 0822     		movs	r2, #8
 1104 0048 9A61     		str	r2, [r3, #24]
 454:Src/main.c    ****   hadc3.Init.LowPowerAutoWait = DISABLE;
 1105              		.loc 1 454 31
 1106 004a 344B     		ldr	r3, .L36
 1107 004c 0022     		movs	r2, #0
 1108 004e 1A77     		strb	r2, [r3, #28]
 455:Src/main.c    ****   hadc3.Init.ContinuousConvMode = DISABLE;
 1109              		.loc 1 455 33
 1110 0050 324B     		ldr	r3, .L36
 1111 0052 0022     		movs	r2, #0
 1112 0054 5A77     		strb	r2, [r3, #29]
 456:Src/main.c    ****   hadc3.Init.NbrOfConversion = 1;
 1113              		.loc 1 456 30
 1114 0056 314B     		ldr	r3, .L36
 1115 0058 0122     		movs	r2, #1
 1116 005a 1A62     		str	r2, [r3, #32]
 457:Src/main.c    ****   hadc3.Init.DiscontinuousConvMode = DISABLE;
 1117              		.loc 1 457 36
 1118 005c 2F4B     		ldr	r3, .L36
 1119 005e 0022     		movs	r2, #0
 1120 0060 83F82420 		strb	r2, [r3, #36]
 458:Src/main.c    ****   hadc3.Init.DMAContinuousRequests = DISABLE;
 1121              		.loc 1 458 36
 1122 0064 2D4B     		ldr	r3, .L36
 1123 0066 0022     		movs	r2, #0
 1124 0068 83F83820 		strb	r2, [r3, #56]
 459:Src/main.c    ****   hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 1125              		.loc 1 459 22
 1126 006c 2B4B     		ldr	r3, .L36
 1127 006e 4FF48052 		mov	r2, #4096
 1128 0072 DA63     		str	r2, [r3, #60]
 460:Src/main.c    ****   hadc3.Init.OversamplingMode = DISABLE;
 1129              		.loc 1 460 31
 1130 0074 294B     		ldr	r3, .L36
 1131 0076 0022     		movs	r2, #0
 1132 0078 83F84020 		strb	r2, [r3, #64]
 461:Src/main.c    ****   if (HAL_ADC_Init(&hadc3) != HAL_OK)
 1133              		.loc 1 461 7
 1134 007c 2748     		ldr	r0, .L36
 1135 007e FFF7FEFF 		bl	HAL_ADC_Init
 1136 0082 0346     		mov	r3, r0
 1137              		.loc 1 461 6
 1138 0084 002B     		cmp	r3, #0
 1139 0086 01D0     		beq	.L31
 462:Src/main.c    ****   {
 463:Src/main.c    ****     Error_Handler();
 1140              		.loc 1 463 5
 1141 0088 FFF7FEFF 		bl	Error_Handler
 1142              	.L31:
 464:Src/main.c    ****   }
 465:Src/main.c    ****   /** Configure the ADC multi-mode 
ARM GAS  /tmp/ccA7VsRU.s 			page 29


 466:Src/main.c    ****   */
 467:Src/main.c    ****   multimode.Mode = ADC_MODE_INDEPENDENT;
 1143              		.loc 1 467 18
 1144 008c 0023     		movs	r3, #0
 1145 008e FB63     		str	r3, [r7, #60]
 468:Src/main.c    ****   if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 1146              		.loc 1 468 7
 1147 0090 07F13C03 		add	r3, r7, #60
 1148 0094 1946     		mov	r1, r3
 1149 0096 2148     		ldr	r0, .L36
 1150 0098 FFF7FEFF 		bl	HAL_ADCEx_MultiModeConfigChannel
 1151 009c 0346     		mov	r3, r0
 1152              		.loc 1 468 6
 1153 009e 002B     		cmp	r3, #0
 1154 00a0 01D0     		beq	.L32
 469:Src/main.c    ****   {
 470:Src/main.c    ****     Error_Handler();
 1155              		.loc 1 470 5
 1156 00a2 FFF7FEFF 		bl	Error_Handler
 1157              	.L32:
 471:Src/main.c    ****   }
 472:Src/main.c    ****   /** Configure Injected Channel 
 473:Src/main.c    ****   */
 474:Src/main.c    ****   sConfigInjected.InjectedChannel = ADC_CHANNEL_12;
 1158              		.loc 1 474 35
 1159 00a6 1F4B     		ldr	r3, .L36+8
 1160 00a8 3B60     		str	r3, [r7]
 475:Src/main.c    ****   sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 1161              		.loc 1 475 32
 1162 00aa 0923     		movs	r3, #9
 1163 00ac 7B60     		str	r3, [r7, #4]
 476:Src/main.c    ****   sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_12CYCLES_5;
 1164              		.loc 1 476 40
 1165 00ae 0223     		movs	r3, #2
 1166 00b0 BB60     		str	r3, [r7, #8]
 477:Src/main.c    ****   sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 1167              		.loc 1 477 38
 1168 00b2 7F23     		movs	r3, #127
 1169 00b4 FB60     		str	r3, [r7, #12]
 478:Src/main.c    ****   sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_NONE;
 1170              		.loc 1 478 40
 1171 00b6 0423     		movs	r3, #4
 1172 00b8 3B61     		str	r3, [r7, #16]
 479:Src/main.c    ****   sConfigInjected.InjectedOffset = 0;
 1173              		.loc 1 479 34
 1174 00ba 0023     		movs	r3, #0
 1175 00bc 7B61     		str	r3, [r7, #20]
 480:Src/main.c    ****   sConfigInjected.InjectedNbrOfConversion = 2;
 1176              		.loc 1 480 43
 1177 00be 0223     		movs	r3, #2
 1178 00c0 3B62     		str	r3, [r7, #32]
 481:Src/main.c    ****   sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 1179              		.loc 1 481 49
 1180 00c2 0023     		movs	r3, #0
 1181 00c4 87F82430 		strb	r3, [r7, #36]
 482:Src/main.c    ****   sConfigInjected.AutoInjectedConv = DISABLE;
 1182              		.loc 1 482 36
ARM GAS  /tmp/ccA7VsRU.s 			page 30


 1183 00c8 0023     		movs	r3, #0
 1184 00ca 87F82530 		strb	r3, [r7, #37]
 483:Src/main.c    ****   sConfigInjected.QueueInjectedContext = DISABLE;
 1185              		.loc 1 483 40
 1186 00ce 0023     		movs	r3, #0
 1187 00d0 87F82630 		strb	r3, [r7, #38]
 484:Src/main.c    ****   sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJEC_HRTIM_TRG5;
 1188              		.loc 1 484 41
 1189 00d4 D423     		movs	r3, #212
 1190 00d6 BB62     		str	r3, [r7, #40]
 485:Src/main.c    ****   sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_RISING;
 1191              		.loc 1 485 45
 1192 00d8 8023     		movs	r3, #128
 1193 00da FB62     		str	r3, [r7, #44]
 486:Src/main.c    ****   sConfigInjected.InjecOversamplingMode = DISABLE;
 1194              		.loc 1 486 41
 1195 00dc 0023     		movs	r3, #0
 1196 00de 87F83030 		strb	r3, [r7, #48]
 487:Src/main.c    ****   if (HAL_ADCEx_InjectedConfigChannel(&hadc3, &sConfigInjected) != HAL_OK)
 1197              		.loc 1 487 7
 1198 00e2 3B46     		mov	r3, r7
 1199 00e4 1946     		mov	r1, r3
 1200 00e6 0D48     		ldr	r0, .L36
 1201 00e8 FFF7FEFF 		bl	HAL_ADCEx_InjectedConfigChannel
 1202 00ec 0346     		mov	r3, r0
 1203              		.loc 1 487 6
 1204 00ee 002B     		cmp	r3, #0
 1205 00f0 01D0     		beq	.L33
 488:Src/main.c    ****   {
 489:Src/main.c    ****     Error_Handler();
 1206              		.loc 1 489 5
 1207 00f2 FFF7FEFF 		bl	Error_Handler
 1208              	.L33:
 490:Src/main.c    ****   }
 491:Src/main.c    ****   /** Configure Injected Channel 
 492:Src/main.c    ****   */
 493:Src/main.c    ****   sConfigInjected.InjectedRank = ADC_INJECTED_RANK_2;
 1209              		.loc 1 493 32
 1210 00f6 40F20F13 		movw	r3, #271
 1211 00fa 7B60     		str	r3, [r7, #4]
 494:Src/main.c    ****   sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_6CYCLES_5;
 1212              		.loc 1 494 40
 1213 00fc 0123     		movs	r3, #1
 1214 00fe BB60     		str	r3, [r7, #8]
 495:Src/main.c    ****   if (HAL_ADCEx_InjectedConfigChannel(&hadc3, &sConfigInjected) != HAL_OK)
 1215              		.loc 1 495 7
 1216 0100 3B46     		mov	r3, r7
 1217 0102 1946     		mov	r1, r3
 1218 0104 0548     		ldr	r0, .L36
 1219 0106 FFF7FEFF 		bl	HAL_ADCEx_InjectedConfigChannel
 1220 010a 0346     		mov	r3, r0
 1221              		.loc 1 495 6
 1222 010c 002B     		cmp	r3, #0
 1223 010e 01D0     		beq	.L35
 496:Src/main.c    ****   {
 497:Src/main.c    ****     Error_Handler();
 1224              		.loc 1 497 5
ARM GAS  /tmp/ccA7VsRU.s 			page 31


 1225 0110 FFF7FEFF 		bl	Error_Handler
 1226              	.L35:
 498:Src/main.c    ****   }
 499:Src/main.c    ****   /* USER CODE BEGIN ADC3_Init 2 */
 500:Src/main.c    **** 
 501:Src/main.c    ****   /* USER CODE END ADC3_Init 2 */
 502:Src/main.c    **** 
 503:Src/main.c    **** }
 1227              		.loc 1 503 1
 1228 0114 00BF     		nop
 1229 0116 4837     		adds	r7, r7, #72
 1230              	.LCFI21:
 1231              		.cfi_def_cfa_offset 8
 1232 0118 BD46     		mov	sp, r7
 1233              	.LCFI22:
 1234              		.cfi_def_cfa_register 13
 1235              		@ sp needed
 1236 011a 80BD     		pop	{r7, pc}
 1237              	.L37:
 1238              		.align	2
 1239              	.L36:
 1240 011c 00000000 		.word	hadc3
 1241 0120 00040050 		.word	1342178304
 1242 0124 00106032 		.word	845156352
 1243              		.cfi_endproc
 1244              	.LFE413:
 1246              		.section	.text.MX_HRTIM1_Init,"ax",%progbits
 1247              		.align	1
 1248              		.syntax unified
 1249              		.thumb
 1250              		.thumb_func
 1251              		.fpu fpv4-sp-d16
 1253              	MX_HRTIM1_Init:
 1254              	.LFB414:
 504:Src/main.c    **** 
 505:Src/main.c    **** /**
 506:Src/main.c    ****   * @brief HRTIM1 Initialization Function
 507:Src/main.c    ****   * @param None
 508:Src/main.c    ****   * @retval None
 509:Src/main.c    ****   */
 510:Src/main.c    **** static void MX_HRTIM1_Init(void)
 511:Src/main.c    **** {
 1255              		.loc 1 511 1
 1256              		.cfi_startproc
 1257              		@ args = 0, pretend = 0, frame = 72
 1258              		@ frame_needed = 1, uses_anonymous_args = 0
 1259 0000 80B5     		push	{r7, lr}
 1260              	.LCFI23:
 1261              		.cfi_def_cfa_offset 8
 1262              		.cfi_offset 7, -8
 1263              		.cfi_offset 14, -4
 1264 0002 92B0     		sub	sp, sp, #72
 1265              	.LCFI24:
 1266              		.cfi_def_cfa_offset 80
 1267 0004 00AF     		add	r7, sp, #0
 1268              	.LCFI25:
 1269              		.cfi_def_cfa_register 7
ARM GAS  /tmp/ccA7VsRU.s 			page 32


 512:Src/main.c    **** 
 513:Src/main.c    ****   /* USER CODE BEGIN HRTIM1_Init 0 */
 514:Src/main.c    **** 
 515:Src/main.c    ****   /* USER CODE END HRTIM1_Init 0 */
 516:Src/main.c    **** 
 517:Src/main.c    ****   HRTIM_ADCTriggerCfgTypeDef pADCTriggerCfg = {0};
 1270              		.loc 1 517 30
 1271 0006 07F14003 		add	r3, r7, #64
 1272 000a 0022     		movs	r2, #0
 1273 000c 1A60     		str	r2, [r3]
 1274 000e 5A60     		str	r2, [r3, #4]
 518:Src/main.c    ****   HRTIM_TimeBaseCfgTypeDef pTimeBaseCfg = {0};
 1275              		.loc 1 518 28
 1276 0010 07F13003 		add	r3, r7, #48
 1277 0014 0022     		movs	r2, #0
 1278 0016 1A60     		str	r2, [r3]
 1279 0018 5A60     		str	r2, [r3, #4]
 1280 001a 9A60     		str	r2, [r3, #8]
 1281 001c DA60     		str	r2, [r3, #12]
 519:Src/main.c    ****   HRTIM_TimerCtlTypeDef pTimerCtl = {0};
 1282              		.loc 1 519 25
 1283 001e 07F11403 		add	r3, r7, #20
 1284 0022 0022     		movs	r2, #0
 1285 0024 1A60     		str	r2, [r3]
 1286 0026 5A60     		str	r2, [r3, #4]
 1287 0028 9A60     		str	r2, [r3, #8]
 1288 002a DA60     		str	r2, [r3, #12]
 1289 002c 1A61     		str	r2, [r3, #16]
 1290 002e 5A61     		str	r2, [r3, #20]
 1291 0030 9A61     		str	r2, [r3, #24]
 520:Src/main.c    ****   HRTIM_SimpleOCChannelCfgTypeDef pSimpleOCChannelCfg = {0};
 1292              		.loc 1 520 35
 1293 0032 3B1D     		adds	r3, r7, #4
 1294 0034 0022     		movs	r2, #0
 1295 0036 1A60     		str	r2, [r3]
 1296 0038 5A60     		str	r2, [r3, #4]
 1297 003a 9A60     		str	r2, [r3, #8]
 1298 003c DA60     		str	r2, [r3, #12]
 521:Src/main.c    **** 
 522:Src/main.c    ****   /* USER CODE BEGIN HRTIM1_Init 1 */
 523:Src/main.c    **** 
 524:Src/main.c    ****   /* USER CODE END HRTIM1_Init 1 */
 525:Src/main.c    ****   hhrtim1.Instance = HRTIM1;
 1299              		.loc 1 525 20
 1300 003e AC4B     		ldr	r3, .L64
 1301 0040 AC4A     		ldr	r2, .L64+4
 1302 0042 1A60     		str	r2, [r3]
 526:Src/main.c    ****   hhrtim1.Init.HRTIMInterruptResquests = HRTIM_IT_NONE;
 1303              		.loc 1 526 40
 1304 0044 AA4B     		ldr	r3, .L64
 1305 0046 0022     		movs	r2, #0
 1306 0048 5A60     		str	r2, [r3, #4]
 527:Src/main.c    ****   hhrtim1.Init.SyncOptions = HRTIM_SYNCOPTION_NONE;
 1307              		.loc 1 527 28
 1308 004a A94B     		ldr	r3, .L64
 1309 004c 0022     		movs	r2, #0
 1310 004e 9A60     		str	r2, [r3, #8]
ARM GAS  /tmp/ccA7VsRU.s 			page 33


 528:Src/main.c    ****   if (HAL_HRTIM_Init(&hhrtim1) != HAL_OK)
 1311              		.loc 1 528 7
 1312 0050 A748     		ldr	r0, .L64
 1313 0052 FFF7FEFF 		bl	HAL_HRTIM_Init
 1314 0056 0346     		mov	r3, r0
 1315              		.loc 1 528 6
 1316 0058 002B     		cmp	r3, #0
 1317 005a 01D0     		beq	.L39
 529:Src/main.c    ****   {
 530:Src/main.c    ****     Error_Handler();
 1318              		.loc 1 530 5
 1319 005c FFF7FEFF 		bl	Error_Handler
 1320              	.L39:
 531:Src/main.c    ****   }
 532:Src/main.c    ****   if (HAL_HRTIM_DLLCalibrationStart(&hhrtim1, HRTIM_CALIBRATIONRATE_3) != HAL_OK)
 1321              		.loc 1 532 7
 1322 0060 0C21     		movs	r1, #12
 1323 0062 A348     		ldr	r0, .L64
 1324 0064 FFF7FEFF 		bl	HAL_HRTIM_DLLCalibrationStart
 1325 0068 0346     		mov	r3, r0
 1326              		.loc 1 532 6
 1327 006a 002B     		cmp	r3, #0
 1328 006c 01D0     		beq	.L40
 533:Src/main.c    ****   {
 534:Src/main.c    ****     Error_Handler();
 1329              		.loc 1 534 5
 1330 006e FFF7FEFF 		bl	Error_Handler
 1331              	.L40:
 535:Src/main.c    ****   }
 536:Src/main.c    ****   if (HAL_HRTIM_PollForDLLCalibration(&hhrtim1, 10) != HAL_OK)
 1332              		.loc 1 536 7
 1333 0072 0A21     		movs	r1, #10
 1334 0074 9E48     		ldr	r0, .L64
 1335 0076 FFF7FEFF 		bl	HAL_HRTIM_PollForDLLCalibration
 1336 007a 0346     		mov	r3, r0
 1337              		.loc 1 536 6
 1338 007c 002B     		cmp	r3, #0
 1339 007e 01D0     		beq	.L41
 537:Src/main.c    ****   {
 538:Src/main.c    ****     Error_Handler();
 1340              		.loc 1 538 5
 1341 0080 FFF7FEFF 		bl	Error_Handler
 1342              	.L41:
 539:Src/main.c    ****   }
 540:Src/main.c    ****   pADCTriggerCfg.UpdateSource = HRTIM_ADCTRIGGERUPDATE_TIMER_A;
 1343              		.loc 1 540 31
 1344 0084 4FF48033 		mov	r3, #65536
 1345 0088 3B64     		str	r3, [r7, #64]
 541:Src/main.c    ****   pADCTriggerCfg.Trigger = HRTIM_ADCTRIGGEREVENT13_TIMERF_RESET;
 1346              		.loc 1 541 26
 1347 008a 4FF08053 		mov	r3, #268435456
 1348 008e 7B64     		str	r3, [r7, #68]
 542:Src/main.c    ****   if (HAL_HRTIM_ADCTriggerConfig(&hhrtim1, HRTIM_ADCTRIGGER_1, &pADCTriggerCfg) != HAL_OK)
 1349              		.loc 1 542 7
 1350 0090 07F14003 		add	r3, r7, #64
 1351 0094 1A46     		mov	r2, r3
 1352 0096 0121     		movs	r1, #1
ARM GAS  /tmp/ccA7VsRU.s 			page 34


 1353 0098 9548     		ldr	r0, .L64
 1354 009a FFF7FEFF 		bl	HAL_HRTIM_ADCTriggerConfig
 1355 009e 0346     		mov	r3, r0
 1356              		.loc 1 542 6
 1357 00a0 002B     		cmp	r3, #0
 1358 00a2 01D0     		beq	.L42
 543:Src/main.c    ****   {
 544:Src/main.c    ****     Error_Handler();
 1359              		.loc 1 544 5
 1360 00a4 FFF7FEFF 		bl	Error_Handler
 1361              	.L42:
 545:Src/main.c    ****   }
 546:Src/main.c    ****   if (HAL_HRTIM_ADCPostScalerConfig(&hhrtim1, HRTIM_ADCTRIGGER_1, 0x0) != HAL_OK)
 1362              		.loc 1 546 7
 1363 00a8 0022     		movs	r2, #0
 1364 00aa 0121     		movs	r1, #1
 1365 00ac 9048     		ldr	r0, .L64
 1366 00ae FFF7FEFF 		bl	HAL_HRTIM_ADCPostScalerConfig
 1367 00b2 0346     		mov	r3, r0
 1368              		.loc 1 546 6
 1369 00b4 002B     		cmp	r3, #0
 1370 00b6 01D0     		beq	.L43
 547:Src/main.c    ****   {
 548:Src/main.c    ****     Error_Handler();
 1371              		.loc 1 548 5
 1372 00b8 FFF7FEFF 		bl	Error_Handler
 1373              	.L43:
 549:Src/main.c    ****   }
 550:Src/main.c    ****   pADCTriggerCfg.Trigger = HRTIM_ADCTRIGGEREVENT24_TIMERF_PERIOD;
 1374              		.loc 1 550 26
 1375 00bc 4FF08073 		mov	r3, #16777216
 1376 00c0 7B64     		str	r3, [r7, #68]
 551:Src/main.c    ****   if (HAL_HRTIM_ADCTriggerConfig(&hhrtim1, HRTIM_ADCTRIGGER_2, &pADCTriggerCfg) != HAL_OK)
 1377              		.loc 1 551 7
 1378 00c2 07F14003 		add	r3, r7, #64
 1379 00c6 1A46     		mov	r2, r3
 1380 00c8 0221     		movs	r1, #2
 1381 00ca 8948     		ldr	r0, .L64
 1382 00cc FFF7FEFF 		bl	HAL_HRTIM_ADCTriggerConfig
 1383 00d0 0346     		mov	r3, r0
 1384              		.loc 1 551 6
 1385 00d2 002B     		cmp	r3, #0
 1386 00d4 01D0     		beq	.L44
 552:Src/main.c    ****   {
 553:Src/main.c    ****     Error_Handler();
 1387              		.loc 1 553 5
 1388 00d6 FFF7FEFF 		bl	Error_Handler
 1389              	.L44:
 554:Src/main.c    ****   }
 555:Src/main.c    ****   if (HAL_HRTIM_ADCPostScalerConfig(&hhrtim1, HRTIM_ADCTRIGGER_2, 0x0) != HAL_OK)
 1390              		.loc 1 555 7
 1391 00da 0022     		movs	r2, #0
 1392 00dc 0221     		movs	r1, #2
 1393 00de 8448     		ldr	r0, .L64
 1394 00e0 FFF7FEFF 		bl	HAL_HRTIM_ADCPostScalerConfig
 1395 00e4 0346     		mov	r3, r0
 1396              		.loc 1 555 6
ARM GAS  /tmp/ccA7VsRU.s 			page 35


 1397 00e6 002B     		cmp	r3, #0
 1398 00e8 01D0     		beq	.L45
 556:Src/main.c    ****   {
 557:Src/main.c    ****     Error_Handler();
 1399              		.loc 1 557 5
 1400 00ea FFF7FEFF 		bl	Error_Handler
 1401              	.L45:
 558:Src/main.c    ****   }
 559:Src/main.c    ****   pADCTriggerCfg.UpdateSource = HRTIM_ADCTRIGGERUPDATE_TIMER_F;
 1402              		.loc 1 559 31
 1403 00ee 4FF4C023 		mov	r3, #393216
 1404 00f2 3B64     		str	r3, [r7, #64]
 560:Src/main.c    ****   pADCTriggerCfg.Trigger = HRTIM_ADCTRIGGEREVENT579_TIMERF_RESET;
 1405              		.loc 1 560 26
 1406 00f4 1F23     		movs	r3, #31
 1407 00f6 7B64     		str	r3, [r7, #68]
 561:Src/main.c    ****   if (HAL_HRTIM_ADCTriggerConfig(&hhrtim1, HRTIM_ADCTRIGGER_5, &pADCTriggerCfg) != HAL_OK)
 1408              		.loc 1 561 7
 1409 00f8 07F14003 		add	r3, r7, #64
 1410 00fc 1A46     		mov	r2, r3
 1411 00fe 1021     		movs	r1, #16
 1412 0100 7B48     		ldr	r0, .L64
 1413 0102 FFF7FEFF 		bl	HAL_HRTIM_ADCTriggerConfig
 1414 0106 0346     		mov	r3, r0
 1415              		.loc 1 561 6
 1416 0108 002B     		cmp	r3, #0
 1417 010a 01D0     		beq	.L46
 562:Src/main.c    ****   {
 563:Src/main.c    ****     Error_Handler();
 1418              		.loc 1 563 5
 1419 010c FFF7FEFF 		bl	Error_Handler
 1420              	.L46:
 564:Src/main.c    ****   }
 565:Src/main.c    ****   if (HAL_HRTIM_ADCPostScalerConfig(&hhrtim1, HRTIM_ADCTRIGGER_5, 0x1) != HAL_OK)
 1421              		.loc 1 565 7
 1422 0110 0122     		movs	r2, #1
 1423 0112 1021     		movs	r1, #16
 1424 0114 7648     		ldr	r0, .L64
 1425 0116 FFF7FEFF 		bl	HAL_HRTIM_ADCPostScalerConfig
 1426 011a 0346     		mov	r3, r0
 1427              		.loc 1 565 6
 1428 011c 002B     		cmp	r3, #0
 1429 011e 01D0     		beq	.L47
 566:Src/main.c    ****   {
 567:Src/main.c    ****     Error_Handler();
 1430              		.loc 1 567 5
 1431 0120 FFF7FEFF 		bl	Error_Handler
 1432              	.L47:
 568:Src/main.c    ****   }
 569:Src/main.c    ****   pADCTriggerCfg.UpdateSource = HRTIM_ADCTRIGGERUPDATE_TIMER_A;
 1433              		.loc 1 569 31
 1434 0124 4FF48033 		mov	r3, #65536
 1435 0128 3B64     		str	r3, [r7, #64]
 570:Src/main.c    ****   pADCTriggerCfg.Trigger = HRTIM_ADCTRIGGEREVENT579_TIMERA_PERIOD;
 1436              		.loc 1 570 26
 1437 012a 0C23     		movs	r3, #12
 1438 012c 7B64     		str	r3, [r7, #68]
ARM GAS  /tmp/ccA7VsRU.s 			page 36


 571:Src/main.c    ****   if (HAL_HRTIM_ADCTriggerConfig(&hhrtim1, HRTIM_ADCTRIGGER_7, &pADCTriggerCfg) != HAL_OK)
 1439              		.loc 1 571 7
 1440 012e 07F14003 		add	r3, r7, #64
 1441 0132 1A46     		mov	r2, r3
 1442 0134 4021     		movs	r1, #64
 1443 0136 6E48     		ldr	r0, .L64
 1444 0138 FFF7FEFF 		bl	HAL_HRTIM_ADCTriggerConfig
 1445 013c 0346     		mov	r3, r0
 1446              		.loc 1 571 6
 1447 013e 002B     		cmp	r3, #0
 1448 0140 01D0     		beq	.L48
 572:Src/main.c    ****   {
 573:Src/main.c    ****     Error_Handler();
 1449              		.loc 1 573 5
 1450 0142 FFF7FEFF 		bl	Error_Handler
 1451              	.L48:
 574:Src/main.c    ****   }
 575:Src/main.c    ****   if (HAL_HRTIM_ADCPostScalerConfig(&hhrtim1, HRTIM_ADCTRIGGER_7, 0x0) != HAL_OK)
 1452              		.loc 1 575 7
 1453 0146 0022     		movs	r2, #0
 1454 0148 4021     		movs	r1, #64
 1455 014a 6948     		ldr	r0, .L64
 1456 014c FFF7FEFF 		bl	HAL_HRTIM_ADCPostScalerConfig
 1457 0150 0346     		mov	r3, r0
 1458              		.loc 1 575 6
 1459 0152 002B     		cmp	r3, #0
 1460 0154 01D0     		beq	.L49
 576:Src/main.c    ****   {
 577:Src/main.c    ****     Error_Handler();
 1461              		.loc 1 577 5
 1462 0156 FFF7FEFF 		bl	Error_Handler
 1463              	.L49:
 578:Src/main.c    ****   }
 579:Src/main.c    ****   pTimeBaseCfg.Period = hrperiod;
 1464              		.loc 1 579 23
 1465 015a 4FF69033 		movw	r3, #64400
 1466 015e 3B63     		str	r3, [r7, #48]
 580:Src/main.c    ****   pTimeBaseCfg.RepetitionCounter = 0x00;
 1467              		.loc 1 580 34
 1468 0160 0023     		movs	r3, #0
 1469 0162 7B63     		str	r3, [r7, #52]
 581:Src/main.c    ****   pTimeBaseCfg.PrescalerRatio = HRTIM_PRESCALERRATIO_MUL32;
 1470              		.loc 1 581 31
 1471 0164 0023     		movs	r3, #0
 1472 0166 BB63     		str	r3, [r7, #56]
 582:Src/main.c    ****   pTimeBaseCfg.Mode = HRTIM_MODE_CONTINUOUS;
 1473              		.loc 1 582 21
 1474 0168 0823     		movs	r3, #8
 1475 016a FB63     		str	r3, [r7, #60]
 583:Src/main.c    ****   if (HAL_HRTIM_TimeBaseConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, &pTimeBaseCfg) != HAL_OK)
 1476              		.loc 1 583 7
 1477 016c 07F13003 		add	r3, r7, #48
 1478 0170 1A46     		mov	r2, r3
 1479 0172 0021     		movs	r1, #0
 1480 0174 5E48     		ldr	r0, .L64
 1481 0176 FFF7FEFF 		bl	HAL_HRTIM_TimeBaseConfig
 1482 017a 0346     		mov	r3, r0
ARM GAS  /tmp/ccA7VsRU.s 			page 37


 1483              		.loc 1 583 6
 1484 017c 002B     		cmp	r3, #0
 1485 017e 01D0     		beq	.L50
 584:Src/main.c    ****   {
 585:Src/main.c    ****     Error_Handler();
 1486              		.loc 1 585 5
 1487 0180 FFF7FEFF 		bl	Error_Handler
 1488              	.L50:
 586:Src/main.c    ****   }
 587:Src/main.c    ****   pTimerCtl.UpDownMode = HRTIM_TIMERUPDOWNMODE_UPDOWN;
 1489              		.loc 1 587 24
 1490 0184 0123     		movs	r3, #1
 1491 0186 7B61     		str	r3, [r7, #20]
 588:Src/main.c    ****   pTimerCtl.DualChannelDacEnable = HRTIM_TIMER_DCDE_DISABLED;
 1492              		.loc 1 588 34
 1493 0188 0023     		movs	r3, #0
 1494 018a FB62     		str	r3, [r7, #44]
 589:Src/main.c    **** 
 590:Src/main.c    ****   if (HAL_HRTIM_WaveformTimerControl(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, &pTimerCtl) != HAL_OK)
 1495              		.loc 1 590 7
 1496 018c 07F11403 		add	r3, r7, #20
 1497 0190 1A46     		mov	r2, r3
 1498 0192 0021     		movs	r1, #0
 1499 0194 5648     		ldr	r0, .L64
 1500 0196 FFF7FEFF 		bl	HAL_HRTIM_WaveformTimerControl
 1501 019a 0346     		mov	r3, r0
 1502              		.loc 1 590 6
 1503 019c 002B     		cmp	r3, #0
 1504 019e 01D0     		beq	.L51
 591:Src/main.c    ****   {
 592:Src/main.c    ****     Error_Handler();
 1505              		.loc 1 592 5
 1506 01a0 FFF7FEFF 		bl	Error_Handler
 1507              	.L51:
 593:Src/main.c    ****   }
 594:Src/main.c    ****   if (HAL_HRTIM_RollOverModeConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, HRTIM_TIM_FEROM_BOTH|HRTIM_T
 1508              		.loc 1 594 7
 1509 01a4 0022     		movs	r2, #0
 1510 01a6 0021     		movs	r1, #0
 1511 01a8 5148     		ldr	r0, .L64
 1512 01aa FFF7FEFF 		bl	HAL_HRTIM_RollOverModeConfig
 1513 01ae 0346     		mov	r3, r0
 1514              		.loc 1 594 6
 1515 01b0 002B     		cmp	r3, #0
 1516 01b2 01D0     		beq	.L52
 595:Src/main.c    ****                               |HRTIM_TIM_ADROM_BOTH|HRTIM_TIM_OUTROM_BOTH
 596:Src/main.c    ****                               |HRTIM_TIM_ROM_BOTH) != HAL_OK)
 597:Src/main.c    ****   {
 598:Src/main.c    ****     Error_Handler();
 1517              		.loc 1 598 5
 1518 01b4 FFF7FEFF 		bl	Error_Handler
 1519              	.L52:
 599:Src/main.c    ****   }
 600:Src/main.c    ****   pSimpleOCChannelCfg.Mode = HRTIM_BASICOCMODE_INACTIVE;
 1520              		.loc 1 600 28
 1521 01b8 0223     		movs	r3, #2
 1522 01ba 7B60     		str	r3, [r7, #4]
ARM GAS  /tmp/ccA7VsRU.s 			page 38


 601:Src/main.c    ****   pSimpleOCChannelCfg.Pulse = 0xFFDF;
 1523              		.loc 1 601 29
 1524 01bc 4FF6DF73 		movw	r3, #65503
 1525 01c0 BB60     		str	r3, [r7, #8]
 602:Src/main.c    ****   pSimpleOCChannelCfg.Polarity = HRTIM_OUTPUTPOLARITY_HIGH;
 1526              		.loc 1 602 32
 1527 01c2 0023     		movs	r3, #0
 1528 01c4 FB60     		str	r3, [r7, #12]
 603:Src/main.c    ****   pSimpleOCChannelCfg.IdleLevel = HRTIM_OUTPUTIDLELEVEL_INACTIVE;
 1529              		.loc 1 603 33
 1530 01c6 0023     		movs	r3, #0
 1531 01c8 3B61     		str	r3, [r7, #16]
 604:Src/main.c    ****   if (HAL_HRTIM_SimpleOCChannelConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, HRTIM_OUTPUT_TA1, &pSimpl
 1532              		.loc 1 604 7
 1533 01ca 3B1D     		adds	r3, r7, #4
 1534 01cc 0122     		movs	r2, #1
 1535 01ce 0021     		movs	r1, #0
 1536 01d0 4748     		ldr	r0, .L64
 1537 01d2 FFF7FEFF 		bl	HAL_HRTIM_SimpleOCChannelConfig
 1538 01d6 0346     		mov	r3, r0
 1539              		.loc 1 604 6
 1540 01d8 002B     		cmp	r3, #0
 1541 01da 01D0     		beq	.L53
 605:Src/main.c    ****   {
 606:Src/main.c    ****     Error_Handler();
 1542              		.loc 1 606 5
 1543 01dc FFF7FEFF 		bl	Error_Handler
 1544              	.L53:
 607:Src/main.c    ****   }
 608:Src/main.c    ****   if (HAL_HRTIM_SimpleOCChannelConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, HRTIM_OUTPUT_TA2, &pSimpl
 1545              		.loc 1 608 7
 1546 01e0 3B1D     		adds	r3, r7, #4
 1547 01e2 0222     		movs	r2, #2
 1548 01e4 0021     		movs	r1, #0
 1549 01e6 4248     		ldr	r0, .L64
 1550 01e8 FFF7FEFF 		bl	HAL_HRTIM_SimpleOCChannelConfig
 1551 01ec 0346     		mov	r3, r0
 1552              		.loc 1 608 6
 1553 01ee 002B     		cmp	r3, #0
 1554 01f0 01D0     		beq	.L54
 609:Src/main.c    ****   {
 610:Src/main.c    ****     Error_Handler();
 1555              		.loc 1 610 5
 1556 01f2 FFF7FEFF 		bl	Error_Handler
 1557              	.L54:
 611:Src/main.c    ****   }
 612:Src/main.c    ****   if (HAL_HRTIM_TimeBaseConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_E, &pTimeBaseCfg) != HAL_OK)
 1558              		.loc 1 612 7
 1559 01f6 07F13003 		add	r3, r7, #48
 1560 01fa 1A46     		mov	r2, r3
 1561 01fc 0421     		movs	r1, #4
 1562 01fe 3C48     		ldr	r0, .L64
 1563 0200 FFF7FEFF 		bl	HAL_HRTIM_TimeBaseConfig
 1564 0204 0346     		mov	r3, r0
 1565              		.loc 1 612 6
 1566 0206 002B     		cmp	r3, #0
 1567 0208 01D0     		beq	.L55
ARM GAS  /tmp/ccA7VsRU.s 			page 39


 613:Src/main.c    ****   {
 614:Src/main.c    ****     Error_Handler();
 1568              		.loc 1 614 5
 1569 020a FFF7FEFF 		bl	Error_Handler
 1570              	.L55:
 615:Src/main.c    ****   }
 616:Src/main.c    ****   pTimerCtl.DualChannelDacEnable = HRTIM_TIMER_DCDE_DISABLED;
 1571              		.loc 1 616 34
 1572 020e 0023     		movs	r3, #0
 1573 0210 FB62     		str	r3, [r7, #44]
 617:Src/main.c    **** 
 618:Src/main.c    ****   if (HAL_HRTIM_WaveformTimerControl(&hhrtim1, HRTIM_TIMERINDEX_TIMER_E, &pTimerCtl) != HAL_OK)
 1574              		.loc 1 618 7
 1575 0212 07F11403 		add	r3, r7, #20
 1576 0216 1A46     		mov	r2, r3
 1577 0218 0421     		movs	r1, #4
 1578 021a 3548     		ldr	r0, .L64
 1579 021c FFF7FEFF 		bl	HAL_HRTIM_WaveformTimerControl
 1580 0220 0346     		mov	r3, r0
 1581              		.loc 1 618 6
 1582 0222 002B     		cmp	r3, #0
 1583 0224 01D0     		beq	.L56
 619:Src/main.c    ****   {
 620:Src/main.c    ****     Error_Handler();
 1584              		.loc 1 620 5
 1585 0226 FFF7FEFF 		bl	Error_Handler
 1586              	.L56:
 621:Src/main.c    ****   }
 622:Src/main.c    ****   if (HAL_HRTIM_RollOverModeConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_E, HRTIM_TIM_FEROM_BOTH|HRTIM_T
 1587              		.loc 1 622 7
 1588 022a 0022     		movs	r2, #0
 1589 022c 0421     		movs	r1, #4
 1590 022e 3048     		ldr	r0, .L64
 1591 0230 FFF7FEFF 		bl	HAL_HRTIM_RollOverModeConfig
 1592 0234 0346     		mov	r3, r0
 1593              		.loc 1 622 6
 1594 0236 002B     		cmp	r3, #0
 1595 0238 01D0     		beq	.L57
 623:Src/main.c    ****                               |HRTIM_TIM_ADROM_BOTH|HRTIM_TIM_OUTROM_BOTH
 624:Src/main.c    ****                               |HRTIM_TIM_ROM_BOTH) != HAL_OK)
 625:Src/main.c    ****   {
 626:Src/main.c    ****     Error_Handler();
 1596              		.loc 1 626 5
 1597 023a FFF7FEFF 		bl	Error_Handler
 1598              	.L57:
 627:Src/main.c    ****   }
 628:Src/main.c    ****   pSimpleOCChannelCfg.Pulse = 1000;
 1599              		.loc 1 628 29
 1600 023e 4FF47A73 		mov	r3, #1000
 1601 0242 BB60     		str	r3, [r7, #8]
 629:Src/main.c    ****   if (HAL_HRTIM_SimpleOCChannelConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_E, HRTIM_OUTPUT_TE1, &pSimpl
 1602              		.loc 1 629 7
 1603 0244 3B1D     		adds	r3, r7, #4
 1604 0246 4FF48072 		mov	r2, #256
 1605 024a 0421     		movs	r1, #4
 1606 024c 2848     		ldr	r0, .L64
 1607 024e FFF7FEFF 		bl	HAL_HRTIM_SimpleOCChannelConfig
ARM GAS  /tmp/ccA7VsRU.s 			page 40


 1608 0252 0346     		mov	r3, r0
 1609              		.loc 1 629 6
 1610 0254 002B     		cmp	r3, #0
 1611 0256 01D0     		beq	.L58
 630:Src/main.c    ****   {
 631:Src/main.c    ****     Error_Handler();
 1612              		.loc 1 631 5
 1613 0258 FFF7FEFF 		bl	Error_Handler
 1614              	.L58:
 632:Src/main.c    ****   }
 633:Src/main.c    ****   if (HAL_HRTIM_TimeBaseConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_F, &pTimeBaseCfg) != HAL_OK)
 1615              		.loc 1 633 7
 1616 025c 07F13003 		add	r3, r7, #48
 1617 0260 1A46     		mov	r2, r3
 1618 0262 0521     		movs	r1, #5
 1619 0264 2248     		ldr	r0, .L64
 1620 0266 FFF7FEFF 		bl	HAL_HRTIM_TimeBaseConfig
 1621 026a 0346     		mov	r3, r0
 1622              		.loc 1 633 6
 1623 026c 002B     		cmp	r3, #0
 1624 026e 01D0     		beq	.L59
 634:Src/main.c    ****   {
 635:Src/main.c    ****     Error_Handler();
 1625              		.loc 1 635 5
 1626 0270 FFF7FEFF 		bl	Error_Handler
 1627              	.L59:
 636:Src/main.c    ****   }
 637:Src/main.c    ****   pTimerCtl.DualChannelDacEnable = HRTIM_TIMER_DCDE_DISABLED;
 1628              		.loc 1 637 34
 1629 0274 0023     		movs	r3, #0
 1630 0276 FB62     		str	r3, [r7, #44]
 638:Src/main.c    **** 
 639:Src/main.c    ****   if (HAL_HRTIM_WaveformTimerControl(&hhrtim1, HRTIM_TIMERINDEX_TIMER_F, &pTimerCtl) != HAL_OK)
 1631              		.loc 1 639 7
 1632 0278 07F11403 		add	r3, r7, #20
 1633 027c 1A46     		mov	r2, r3
 1634 027e 0521     		movs	r1, #5
 1635 0280 1B48     		ldr	r0, .L64
 1636 0282 FFF7FEFF 		bl	HAL_HRTIM_WaveformTimerControl
 1637 0286 0346     		mov	r3, r0
 1638              		.loc 1 639 6
 1639 0288 002B     		cmp	r3, #0
 1640 028a 01D0     		beq	.L60
 640:Src/main.c    ****   {
 641:Src/main.c    ****     Error_Handler();
 1641              		.loc 1 641 5
 1642 028c FFF7FEFF 		bl	Error_Handler
 1643              	.L60:
 642:Src/main.c    ****   }
 643:Src/main.c    ****   if (HAL_HRTIM_RollOverModeConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_F, HRTIM_TIM_FEROM_BOTH|HRTIM_T
 1644              		.loc 1 643 7
 1645 0290 0022     		movs	r2, #0
 1646 0292 0521     		movs	r1, #5
 1647 0294 1648     		ldr	r0, .L64
 1648 0296 FFF7FEFF 		bl	HAL_HRTIM_RollOverModeConfig
 1649 029a 0346     		mov	r3, r0
 1650              		.loc 1 643 6
ARM GAS  /tmp/ccA7VsRU.s 			page 41


 1651 029c 002B     		cmp	r3, #0
 1652 029e 01D0     		beq	.L61
 644:Src/main.c    ****                               |HRTIM_TIM_ADROM_BOTH|HRTIM_TIM_OUTROM_BOTH
 645:Src/main.c    ****                               |HRTIM_TIM_ROM_BOTH) != HAL_OK)
 646:Src/main.c    ****   {
 647:Src/main.c    ****     Error_Handler();
 1653              		.loc 1 647 5
 1654 02a0 FFF7FEFF 		bl	Error_Handler
 1655              	.L61:
 648:Src/main.c    ****   }
 649:Src/main.c    ****   pSimpleOCChannelCfg.Pulse = 3000;
 1656              		.loc 1 649 29
 1657 02a4 40F6B833 		movw	r3, #3000
 1658 02a8 BB60     		str	r3, [r7, #8]
 650:Src/main.c    ****   if (HAL_HRTIM_SimpleOCChannelConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_F, HRTIM_OUTPUT_TF1, &pSimpl
 1659              		.loc 1 650 7
 1660 02aa 3B1D     		adds	r3, r7, #4
 1661 02ac 4FF48062 		mov	r2, #1024
 1662 02b0 0521     		movs	r1, #5
 1663 02b2 0F48     		ldr	r0, .L64
 1664 02b4 FFF7FEFF 		bl	HAL_HRTIM_SimpleOCChannelConfig
 1665 02b8 0346     		mov	r3, r0
 1666              		.loc 1 650 6
 1667 02ba 002B     		cmp	r3, #0
 1668 02bc 01D0     		beq	.L62
 651:Src/main.c    ****   {
 652:Src/main.c    ****     Error_Handler();
 1669              		.loc 1 652 5
 1670 02be FFF7FEFF 		bl	Error_Handler
 1671              	.L62:
 653:Src/main.c    ****   }
 654:Src/main.c    ****   pSimpleOCChannelCfg.Pulse = 4000;
 1672              		.loc 1 654 29
 1673 02c2 4FF47A63 		mov	r3, #4000
 1674 02c6 BB60     		str	r3, [r7, #8]
 655:Src/main.c    ****   if (HAL_HRTIM_SimpleOCChannelConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_F, HRTIM_OUTPUT_TF2, &pSimpl
 1675              		.loc 1 655 7
 1676 02c8 3B1D     		adds	r3, r7, #4
 1677 02ca 4FF40062 		mov	r2, #2048
 1678 02ce 0521     		movs	r1, #5
 1679 02d0 0748     		ldr	r0, .L64
 1680 02d2 FFF7FEFF 		bl	HAL_HRTIM_SimpleOCChannelConfig
 1681 02d6 0346     		mov	r3, r0
 1682              		.loc 1 655 6
 1683 02d8 002B     		cmp	r3, #0
 1684 02da 01D0     		beq	.L63
 656:Src/main.c    ****   {
 657:Src/main.c    ****     Error_Handler();
 1685              		.loc 1 657 5
 1686 02dc FFF7FEFF 		bl	Error_Handler
 1687              	.L63:
 658:Src/main.c    ****   }
 659:Src/main.c    ****   /* USER CODE BEGIN HRTIM1_Init 2 */
 660:Src/main.c    **** 
 661:Src/main.c    ****   /* USER CODE END HRTIM1_Init 2 */
 662:Src/main.c    ****   HAL_HRTIM_MspPostInit(&hhrtim1);
 1688              		.loc 1 662 3
ARM GAS  /tmp/ccA7VsRU.s 			page 42


 1689 02e0 0348     		ldr	r0, .L64
 1690 02e2 FFF7FEFF 		bl	HAL_HRTIM_MspPostInit
 663:Src/main.c    **** 
 664:Src/main.c    **** }
 1691              		.loc 1 664 1
 1692 02e6 00BF     		nop
 1693 02e8 4837     		adds	r7, r7, #72
 1694              	.LCFI26:
 1695              		.cfi_def_cfa_offset 8
 1696 02ea BD46     		mov	sp, r7
 1697              	.LCFI27:
 1698              		.cfi_def_cfa_register 13
 1699              		@ sp needed
 1700 02ec 80BD     		pop	{r7, pc}
 1701              	.L65:
 1702 02ee 00BF     		.align	2
 1703              	.L64:
 1704 02f0 00000000 		.word	hhrtim1
 1705 02f4 00680140 		.word	1073833984
 1706              		.cfi_endproc
 1707              	.LFE414:
 1709              		.section	.text.MX_SPI2_Init,"ax",%progbits
 1710              		.align	1
 1711              		.syntax unified
 1712              		.thumb
 1713              		.thumb_func
 1714              		.fpu fpv4-sp-d16
 1716              	MX_SPI2_Init:
 1717              	.LFB415:
 665:Src/main.c    **** 
 666:Src/main.c    **** /**
 667:Src/main.c    ****   * @brief SPI2 Initialization Function
 668:Src/main.c    ****   * @param None
 669:Src/main.c    ****   * @retval None
 670:Src/main.c    ****   */
 671:Src/main.c    **** static void MX_SPI2_Init(void)
 672:Src/main.c    **** {
 1718              		.loc 1 672 1
 1719              		.cfi_startproc
 1720              		@ args = 0, pretend = 0, frame = 0
 1721              		@ frame_needed = 1, uses_anonymous_args = 0
 1722 0000 80B5     		push	{r7, lr}
 1723              	.LCFI28:
 1724              		.cfi_def_cfa_offset 8
 1725              		.cfi_offset 7, -8
 1726              		.cfi_offset 14, -4
 1727 0002 00AF     		add	r7, sp, #0
 1728              	.LCFI29:
 1729              		.cfi_def_cfa_register 7
 673:Src/main.c    **** 
 674:Src/main.c    ****   /* USER CODE BEGIN SPI2_Init 0 */
 675:Src/main.c    **** 
 676:Src/main.c    ****   /* USER CODE END SPI2_Init 0 */
 677:Src/main.c    **** 
 678:Src/main.c    ****   /* USER CODE BEGIN SPI2_Init 1 */
 679:Src/main.c    **** 
 680:Src/main.c    ****   /* USER CODE END SPI2_Init 1 */
ARM GAS  /tmp/ccA7VsRU.s 			page 43


 681:Src/main.c    ****   /* SPI2 parameter configuration*/
 682:Src/main.c    ****   hspi2.Instance = SPI2;
 1730              		.loc 1 682 18
 1731 0004 164B     		ldr	r3, .L69
 1732 0006 174A     		ldr	r2, .L69+4
 1733 0008 1A60     		str	r2, [r3]
 683:Src/main.c    ****   hspi2.Init.Mode = SPI_MODE_MASTER;
 1734              		.loc 1 683 19
 1735 000a 154B     		ldr	r3, .L69
 1736 000c 4FF48272 		mov	r2, #260
 1737 0010 5A60     		str	r2, [r3, #4]
 684:Src/main.c    ****   hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 1738              		.loc 1 684 24
 1739 0012 134B     		ldr	r3, .L69
 1740 0014 0022     		movs	r2, #0
 1741 0016 9A60     		str	r2, [r3, #8]
 685:Src/main.c    ****   hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 1742              		.loc 1 685 23
 1743 0018 114B     		ldr	r3, .L69
 1744 001a 4FF47062 		mov	r2, #3840
 1745 001e DA60     		str	r2, [r3, #12]
 686:Src/main.c    ****   hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 1746              		.loc 1 686 18
 1747 0020 0F4B     		ldr	r3, .L69
 1748 0022 4FF48022 		mov	r2, #262144
 1749 0026 9A61     		str	r2, [r3, #24]
 687:Src/main.c    ****   hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 1750              		.loc 1 687 32
 1751 0028 0D4B     		ldr	r3, .L69
 1752 002a 3022     		movs	r2, #48
 1753 002c DA61     		str	r2, [r3, #28]
 688:Src/main.c    ****   hspi2.Init.TIMode = SPI_TIMODE_ENABLE;
 1754              		.loc 1 688 21
 1755 002e 0C4B     		ldr	r3, .L69
 1756 0030 1022     		movs	r2, #16
 1757 0032 5A62     		str	r2, [r3, #36]
 689:Src/main.c    ****   hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 1758              		.loc 1 689 29
 1759 0034 0A4B     		ldr	r3, .L69
 1760 0036 0022     		movs	r2, #0
 1761 0038 9A62     		str	r2, [r3, #40]
 690:Src/main.c    ****   hspi2.Init.CRCPolynomial = 7;
 1762              		.loc 1 690 28
 1763 003a 094B     		ldr	r3, .L69
 1764 003c 0722     		movs	r2, #7
 1765 003e DA62     		str	r2, [r3, #44]
 691:Src/main.c    ****   hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 1766              		.loc 1 691 24
 1767 0040 074B     		ldr	r3, .L69
 1768 0042 0022     		movs	r2, #0
 1769 0044 1A63     		str	r2, [r3, #48]
 692:Src/main.c    ****   hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 1770              		.loc 1 692 23
 1771 0046 064B     		ldr	r3, .L69
 1772 0048 0022     		movs	r2, #0
 1773 004a 5A63     		str	r2, [r3, #52]
 693:Src/main.c    ****   if (HAL_SPI_Init(&hspi2) != HAL_OK)
ARM GAS  /tmp/ccA7VsRU.s 			page 44


 1774              		.loc 1 693 7
 1775 004c 0448     		ldr	r0, .L69
 1776 004e FFF7FEFF 		bl	HAL_SPI_Init
 1777 0052 0346     		mov	r3, r0
 1778              		.loc 1 693 6
 1779 0054 002B     		cmp	r3, #0
 1780 0056 01D0     		beq	.L68
 694:Src/main.c    ****   {
 695:Src/main.c    ****     Error_Handler();
 1781              		.loc 1 695 5
 1782 0058 FFF7FEFF 		bl	Error_Handler
 1783              	.L68:
 696:Src/main.c    ****   }
 697:Src/main.c    ****   /* USER CODE BEGIN SPI2_Init 2 */
 698:Src/main.c    **** 
 699:Src/main.c    ****   /* USER CODE END SPI2_Init 2 */
 700:Src/main.c    **** 
 701:Src/main.c    **** }
 1784              		.loc 1 701 1
 1785 005c 00BF     		nop
 1786 005e 80BD     		pop	{r7, pc}
 1787              	.L70:
 1788              		.align	2
 1789              	.L69:
 1790 0060 00000000 		.word	hspi2
 1791 0064 00380040 		.word	1073756160
 1792              		.cfi_endproc
 1793              	.LFE415:
 1795              		.section	.text.MX_SPI3_Init,"ax",%progbits
 1796              		.align	1
 1797              		.syntax unified
 1798              		.thumb
 1799              		.thumb_func
 1800              		.fpu fpv4-sp-d16
 1802              	MX_SPI3_Init:
 1803              	.LFB416:
 702:Src/main.c    **** 
 703:Src/main.c    **** /**
 704:Src/main.c    ****   * @brief SPI3 Initialization Function
 705:Src/main.c    ****   * @param None
 706:Src/main.c    ****   * @retval None
 707:Src/main.c    ****   */
 708:Src/main.c    **** static void MX_SPI3_Init(void)
 709:Src/main.c    **** {
 1804              		.loc 1 709 1
 1805              		.cfi_startproc
 1806              		@ args = 0, pretend = 0, frame = 0
 1807              		@ frame_needed = 1, uses_anonymous_args = 0
 1808 0000 80B5     		push	{r7, lr}
 1809              	.LCFI30:
 1810              		.cfi_def_cfa_offset 8
 1811              		.cfi_offset 7, -8
 1812              		.cfi_offset 14, -4
 1813 0002 00AF     		add	r7, sp, #0
 1814              	.LCFI31:
 1815              		.cfi_def_cfa_register 7
 710:Src/main.c    **** 
ARM GAS  /tmp/ccA7VsRU.s 			page 45


 711:Src/main.c    ****   /* USER CODE BEGIN SPI3_Init 0 */
 712:Src/main.c    **** 
 713:Src/main.c    ****   /* USER CODE END SPI3_Init 0 */
 714:Src/main.c    **** 
 715:Src/main.c    ****   /* USER CODE BEGIN SPI3_Init 1 */
 716:Src/main.c    **** 
 717:Src/main.c    ****   /* USER CODE END SPI3_Init 1 */
 718:Src/main.c    ****   /* SPI3 parameter configuration*/
 719:Src/main.c    ****   hspi3.Instance = SPI3;
 1816              		.loc 1 719 18
 1817 0004 1B4B     		ldr	r3, .L74
 1818 0006 1C4A     		ldr	r2, .L74+4
 1819 0008 1A60     		str	r2, [r3]
 720:Src/main.c    ****   hspi3.Init.Mode = SPI_MODE_MASTER;
 1820              		.loc 1 720 19
 1821 000a 1A4B     		ldr	r3, .L74
 1822 000c 4FF48272 		mov	r2, #260
 1823 0010 5A60     		str	r2, [r3, #4]
 721:Src/main.c    ****   hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 1824              		.loc 1 721 24
 1825 0012 184B     		ldr	r3, .L74
 1826 0014 0022     		movs	r2, #0
 1827 0016 9A60     		str	r2, [r3, #8]
 722:Src/main.c    ****   hspi3.Init.DataSize = SPI_DATASIZE_16BIT;
 1828              		.loc 1 722 23
 1829 0018 164B     		ldr	r3, .L74
 1830 001a 4FF47062 		mov	r2, #3840
 1831 001e DA60     		str	r2, [r3, #12]
 723:Src/main.c    ****   hspi3.Init.CLKPolarity = SPI_POLARITY_HIGH;
 1832              		.loc 1 723 26
 1833 0020 144B     		ldr	r3, .L74
 1834 0022 0222     		movs	r2, #2
 1835 0024 1A61     		str	r2, [r3, #16]
 724:Src/main.c    ****   hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 1836              		.loc 1 724 23
 1837 0026 134B     		ldr	r3, .L74
 1838 0028 0022     		movs	r2, #0
 1839 002a 5A61     		str	r2, [r3, #20]
 725:Src/main.c    ****   hspi3.Init.NSS = SPI_NSS_SOFT;
 1840              		.loc 1 725 18
 1841 002c 114B     		ldr	r3, .L74
 1842 002e 4FF40072 		mov	r2, #512
 1843 0032 9A61     		str	r2, [r3, #24]
 726:Src/main.c    ****   hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 1844              		.loc 1 726 32
 1845 0034 0F4B     		ldr	r3, .L74
 1846 0036 2822     		movs	r2, #40
 1847 0038 DA61     		str	r2, [r3, #28]
 727:Src/main.c    ****   hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 1848              		.loc 1 727 23
 1849 003a 0E4B     		ldr	r3, .L74
 1850 003c 0022     		movs	r2, #0
 1851 003e 1A62     		str	r2, [r3, #32]
 728:Src/main.c    ****   hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 1852              		.loc 1 728 21
 1853 0040 0C4B     		ldr	r3, .L74
 1854 0042 0022     		movs	r2, #0
ARM GAS  /tmp/ccA7VsRU.s 			page 46


 1855 0044 5A62     		str	r2, [r3, #36]
 729:Src/main.c    ****   hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 1856              		.loc 1 729 29
 1857 0046 0B4B     		ldr	r3, .L74
 1858 0048 0022     		movs	r2, #0
 1859 004a 9A62     		str	r2, [r3, #40]
 730:Src/main.c    ****   hspi3.Init.CRCPolynomial = 7;
 1860              		.loc 1 730 28
 1861 004c 094B     		ldr	r3, .L74
 1862 004e 0722     		movs	r2, #7
 1863 0050 DA62     		str	r2, [r3, #44]
 731:Src/main.c    ****   hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 1864              		.loc 1 731 24
 1865 0052 084B     		ldr	r3, .L74
 1866 0054 0022     		movs	r2, #0
 1867 0056 1A63     		str	r2, [r3, #48]
 732:Src/main.c    ****   hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 1868              		.loc 1 732 23
 1869 0058 064B     		ldr	r3, .L74
 1870 005a 0022     		movs	r2, #0
 1871 005c 5A63     		str	r2, [r3, #52]
 733:Src/main.c    ****   if (HAL_SPI_Init(&hspi3) != HAL_OK)
 1872              		.loc 1 733 7
 1873 005e 0548     		ldr	r0, .L74
 1874 0060 FFF7FEFF 		bl	HAL_SPI_Init
 1875 0064 0346     		mov	r3, r0
 1876              		.loc 1 733 6
 1877 0066 002B     		cmp	r3, #0
 1878 0068 01D0     		beq	.L73
 734:Src/main.c    ****   {
 735:Src/main.c    ****     Error_Handler();
 1879              		.loc 1 735 5
 1880 006a FFF7FEFF 		bl	Error_Handler
 1881              	.L73:
 736:Src/main.c    ****   }
 737:Src/main.c    ****   /* USER CODE BEGIN SPI3_Init 2 */
 738:Src/main.c    **** 
 739:Src/main.c    ****   /* USER CODE END SPI3_Init 2 */
 740:Src/main.c    **** 
 741:Src/main.c    **** }
 1882              		.loc 1 741 1
 1883 006e 00BF     		nop
 1884 0070 80BD     		pop	{r7, pc}
 1885              	.L75:
 1886 0072 00BF     		.align	2
 1887              	.L74:
 1888 0074 00000000 		.word	hspi3
 1889 0078 003C0040 		.word	1073757184
 1890              		.cfi_endproc
 1891              	.LFE416:
 1893              		.section	.text.MX_USART1_UART_Init,"ax",%progbits
 1894              		.align	1
 1895              		.syntax unified
 1896              		.thumb
 1897              		.thumb_func
 1898              		.fpu fpv4-sp-d16
 1900              	MX_USART1_UART_Init:
ARM GAS  /tmp/ccA7VsRU.s 			page 47


 1901              	.LFB417:
 742:Src/main.c    **** 
 743:Src/main.c    **** /**
 744:Src/main.c    ****   * @brief USART1 Initialization Function
 745:Src/main.c    ****   * @param None
 746:Src/main.c    ****   * @retval None
 747:Src/main.c    ****   */
 748:Src/main.c    **** static void MX_USART1_UART_Init(void)
 749:Src/main.c    **** {
 1902              		.loc 1 749 1
 1903              		.cfi_startproc
 1904              		@ args = 0, pretend = 0, frame = 0
 1905              		@ frame_needed = 1, uses_anonymous_args = 0
 1906 0000 80B5     		push	{r7, lr}
 1907              	.LCFI32:
 1908              		.cfi_def_cfa_offset 8
 1909              		.cfi_offset 7, -8
 1910              		.cfi_offset 14, -4
 1911 0002 00AF     		add	r7, sp, #0
 1912              	.LCFI33:
 1913              		.cfi_def_cfa_register 7
 750:Src/main.c    **** 
 751:Src/main.c    ****   /* USER CODE BEGIN USART1_Init 0 */
 752:Src/main.c    **** 
 753:Src/main.c    ****   /* USER CODE END USART1_Init 0 */
 754:Src/main.c    **** 
 755:Src/main.c    ****   /* USER CODE BEGIN USART1_Init 1 */
 756:Src/main.c    **** 
 757:Src/main.c    ****   /* USER CODE END USART1_Init 1 */
 758:Src/main.c    ****   huart1.Instance = USART1;
 1914              		.loc 1 758 19
 1915 0004 224B     		ldr	r3, .L82
 1916 0006 234A     		ldr	r2, .L82+4
 1917 0008 1A60     		str	r2, [r3]
 759:Src/main.c    ****   huart1.Init.BaudRate = 115200;
 1918              		.loc 1 759 24
 1919 000a 214B     		ldr	r3, .L82
 1920 000c 4FF4E132 		mov	r2, #115200
 1921 0010 5A60     		str	r2, [r3, #4]
 760:Src/main.c    ****   huart1.Init.WordLength = UART_WORDLENGTH_8B;
 1922              		.loc 1 760 26
 1923 0012 1F4B     		ldr	r3, .L82
 1924 0014 0022     		movs	r2, #0
 1925 0016 9A60     		str	r2, [r3, #8]
 761:Src/main.c    ****   huart1.Init.StopBits = UART_STOPBITS_1;
 1926              		.loc 1 761 24
 1927 0018 1D4B     		ldr	r3, .L82
 1928 001a 0022     		movs	r2, #0
 1929 001c DA60     		str	r2, [r3, #12]
 762:Src/main.c    ****   huart1.Init.Parity = UART_PARITY_NONE;
 1930              		.loc 1 762 22
 1931 001e 1C4B     		ldr	r3, .L82
 1932 0020 0022     		movs	r2, #0
 1933 0022 1A61     		str	r2, [r3, #16]
 763:Src/main.c    ****   huart1.Init.Mode = UART_MODE_TX_RX;
 1934              		.loc 1 763 20
 1935 0024 1A4B     		ldr	r3, .L82
ARM GAS  /tmp/ccA7VsRU.s 			page 48


 1936 0026 0C22     		movs	r2, #12
 1937 0028 5A61     		str	r2, [r3, #20]
 764:Src/main.c    ****   huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 1938              		.loc 1 764 25
 1939 002a 194B     		ldr	r3, .L82
 1940 002c 0022     		movs	r2, #0
 1941 002e 9A61     		str	r2, [r3, #24]
 765:Src/main.c    ****   huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 1942              		.loc 1 765 28
 1943 0030 174B     		ldr	r3, .L82
 1944 0032 0022     		movs	r2, #0
 1945 0034 DA61     		str	r2, [r3, #28]
 766:Src/main.c    ****   huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 1946              		.loc 1 766 30
 1947 0036 164B     		ldr	r3, .L82
 1948 0038 0022     		movs	r2, #0
 1949 003a 1A62     		str	r2, [r3, #32]
 767:Src/main.c    ****   huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 1950              		.loc 1 767 30
 1951 003c 144B     		ldr	r3, .L82
 1952 003e 0022     		movs	r2, #0
 1953 0040 5A62     		str	r2, [r3, #36]
 768:Src/main.c    ****   huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 1954              		.loc 1 768 38
 1955 0042 134B     		ldr	r3, .L82
 1956 0044 0022     		movs	r2, #0
 1957 0046 9A62     		str	r2, [r3, #40]
 769:Src/main.c    ****   if (HAL_UART_Init(&huart1) != HAL_OK)
 1958              		.loc 1 769 7
 1959 0048 1148     		ldr	r0, .L82
 1960 004a FFF7FEFF 		bl	HAL_UART_Init
 1961 004e 0346     		mov	r3, r0
 1962              		.loc 1 769 6
 1963 0050 002B     		cmp	r3, #0
 1964 0052 01D0     		beq	.L77
 770:Src/main.c    ****   {
 771:Src/main.c    ****     Error_Handler();
 1965              		.loc 1 771 5
 1966 0054 FFF7FEFF 		bl	Error_Handler
 1967              	.L77:
 772:Src/main.c    ****   }
 773:Src/main.c    ****   if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 1968              		.loc 1 773 7
 1969 0058 0021     		movs	r1, #0
 1970 005a 0D48     		ldr	r0, .L82
 1971 005c FFF7FEFF 		bl	HAL_UARTEx_SetTxFifoThreshold
 1972 0060 0346     		mov	r3, r0
 1973              		.loc 1 773 6
 1974 0062 002B     		cmp	r3, #0
 1975 0064 01D0     		beq	.L78
 774:Src/main.c    ****   {
 775:Src/main.c    ****     Error_Handler();
 1976              		.loc 1 775 5
 1977 0066 FFF7FEFF 		bl	Error_Handler
 1978              	.L78:
 776:Src/main.c    ****   }
 777:Src/main.c    ****   if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
ARM GAS  /tmp/ccA7VsRU.s 			page 49


 1979              		.loc 1 777 7
 1980 006a 0021     		movs	r1, #0
 1981 006c 0848     		ldr	r0, .L82
 1982 006e FFF7FEFF 		bl	HAL_UARTEx_SetRxFifoThreshold
 1983 0072 0346     		mov	r3, r0
 1984              		.loc 1 777 6
 1985 0074 002B     		cmp	r3, #0
 1986 0076 01D0     		beq	.L79
 778:Src/main.c    ****   {
 779:Src/main.c    ****     Error_Handler();
 1987              		.loc 1 779 5
 1988 0078 FFF7FEFF 		bl	Error_Handler
 1989              	.L79:
 780:Src/main.c    ****   }
 781:Src/main.c    ****   if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 1990              		.loc 1 781 7
 1991 007c 0448     		ldr	r0, .L82
 1992 007e FFF7FEFF 		bl	HAL_UARTEx_DisableFifoMode
 1993 0082 0346     		mov	r3, r0
 1994              		.loc 1 781 6
 1995 0084 002B     		cmp	r3, #0
 1996 0086 01D0     		beq	.L81
 782:Src/main.c    ****   {
 783:Src/main.c    ****     Error_Handler();
 1997              		.loc 1 783 5
 1998 0088 FFF7FEFF 		bl	Error_Handler
 1999              	.L81:
 784:Src/main.c    ****   }
 785:Src/main.c    ****   /* USER CODE BEGIN USART1_Init 2 */
 786:Src/main.c    **** 
 787:Src/main.c    ****   /* USER CODE END USART1_Init 2 */
 788:Src/main.c    **** 
 789:Src/main.c    **** }
 2000              		.loc 1 789 1
 2001 008c 00BF     		nop
 2002 008e 80BD     		pop	{r7, pc}
 2003              	.L83:
 2004              		.align	2
 2005              	.L82:
 2006 0090 00000000 		.word	huart1
 2007 0094 00380140 		.word	1073821696
 2008              		.cfi_endproc
 2009              	.LFE417:
 2011              		.section	.text.MX_DMA_Init,"ax",%progbits
 2012              		.align	1
 2013              		.syntax unified
 2014              		.thumb
 2015              		.thumb_func
 2016              		.fpu fpv4-sp-d16
 2018              	MX_DMA_Init:
 2019              	.LFB418:
 790:Src/main.c    **** 
 791:Src/main.c    **** /** 
 792:Src/main.c    ****   * Enable DMA controller clock
 793:Src/main.c    ****   */
 794:Src/main.c    **** static void MX_DMA_Init(void) 
 795:Src/main.c    **** {
ARM GAS  /tmp/ccA7VsRU.s 			page 50


 2020              		.loc 1 795 1
 2021              		.cfi_startproc
 2022              		@ args = 0, pretend = 0, frame = 8
 2023              		@ frame_needed = 1, uses_anonymous_args = 0
 2024 0000 80B5     		push	{r7, lr}
 2025              	.LCFI34:
 2026              		.cfi_def_cfa_offset 8
 2027              		.cfi_offset 7, -8
 2028              		.cfi_offset 14, -4
 2029 0002 82B0     		sub	sp, sp, #8
 2030              	.LCFI35:
 2031              		.cfi_def_cfa_offset 16
 2032 0004 00AF     		add	r7, sp, #0
 2033              	.LCFI36:
 2034              		.cfi_def_cfa_register 7
 2035              	.LBB4:
 796:Src/main.c    **** 
 797:Src/main.c    ****   /* DMA controller clock enable */
 798:Src/main.c    ****   __HAL_RCC_DMAMUX1_CLK_ENABLE();
 2036              		.loc 1 798 3
 2037 0006 164B     		ldr	r3, .L85
 2038 0008 9B6C     		ldr	r3, [r3, #72]
 2039 000a 154A     		ldr	r2, .L85
 2040 000c 43F00403 		orr	r3, r3, #4
 2041 0010 9364     		str	r3, [r2, #72]
 2042 0012 134B     		ldr	r3, .L85
 2043 0014 9B6C     		ldr	r3, [r3, #72]
 2044 0016 03F00403 		and	r3, r3, #4
 2045 001a 7B60     		str	r3, [r7, #4]
 2046 001c 7B68     		ldr	r3, [r7, #4]
 2047              	.LBE4:
 2048              	.LBB5:
 799:Src/main.c    ****   __HAL_RCC_DMA1_CLK_ENABLE();
 2049              		.loc 1 799 3
 2050 001e 104B     		ldr	r3, .L85
 2051 0020 9B6C     		ldr	r3, [r3, #72]
 2052 0022 0F4A     		ldr	r2, .L85
 2053 0024 43F00103 		orr	r3, r3, #1
 2054 0028 9364     		str	r3, [r2, #72]
 2055 002a 0D4B     		ldr	r3, .L85
 2056 002c 9B6C     		ldr	r3, [r3, #72]
 2057 002e 03F00103 		and	r3, r3, #1
 2058 0032 3B60     		str	r3, [r7]
 2059 0034 3B68     		ldr	r3, [r7]
 2060              	.LBE5:
 800:Src/main.c    **** 
 801:Src/main.c    ****   /* DMA interrupt init */
 802:Src/main.c    ****   /* DMA1_Channel1_IRQn interrupt configuration */
 803:Src/main.c    ****   HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 2061              		.loc 1 803 3
 2062 0036 0022     		movs	r2, #0
 2063 0038 0021     		movs	r1, #0
 2064 003a 0B20     		movs	r0, #11
 2065 003c FFF7FEFF 		bl	HAL_NVIC_SetPriority
 804:Src/main.c    ****   HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 2066              		.loc 1 804 3
 2067 0040 0B20     		movs	r0, #11
ARM GAS  /tmp/ccA7VsRU.s 			page 51


 2068 0042 FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 805:Src/main.c    ****   /* DMA1_Channel2_IRQn interrupt configuration */
 806:Src/main.c    ****   HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 2069              		.loc 1 806 3
 2070 0046 0022     		movs	r2, #0
 2071 0048 0021     		movs	r1, #0
 2072 004a 0C20     		movs	r0, #12
 2073 004c FFF7FEFF 		bl	HAL_NVIC_SetPriority
 807:Src/main.c    ****   HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 2074              		.loc 1 807 3
 2075 0050 0C20     		movs	r0, #12
 2076 0052 FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 808:Src/main.c    **** 
 809:Src/main.c    **** }
 2077              		.loc 1 809 1
 2078 0056 00BF     		nop
 2079 0058 0837     		adds	r7, r7, #8
 2080              	.LCFI37:
 2081              		.cfi_def_cfa_offset 8
 2082 005a BD46     		mov	sp, r7
 2083              	.LCFI38:
 2084              		.cfi_def_cfa_register 13
 2085              		@ sp needed
 2086 005c 80BD     		pop	{r7, pc}
 2087              	.L86:
 2088 005e 00BF     		.align	2
 2089              	.L85:
 2090 0060 00100240 		.word	1073876992
 2091              		.cfi_endproc
 2092              	.LFE418:
 2094              		.section	.text.MX_GPIO_Init,"ax",%progbits
 2095              		.align	1
 2096              		.syntax unified
 2097              		.thumb
 2098              		.thumb_func
 2099              		.fpu fpv4-sp-d16
 2101              	MX_GPIO_Init:
 2102              	.LFB419:
 810:Src/main.c    **** 
 811:Src/main.c    **** /**
 812:Src/main.c    ****   * @brief GPIO Initialization Function
 813:Src/main.c    ****   * @param None
 814:Src/main.c    ****   * @retval None
 815:Src/main.c    ****   */
 816:Src/main.c    **** static void MX_GPIO_Init(void)
 817:Src/main.c    **** {
 2103              		.loc 1 817 1
 2104              		.cfi_startproc
 2105              		@ args = 0, pretend = 0, frame = 40
 2106              		@ frame_needed = 1, uses_anonymous_args = 0
 2107 0000 80B5     		push	{r7, lr}
 2108              	.LCFI39:
 2109              		.cfi_def_cfa_offset 8
 2110              		.cfi_offset 7, -8
 2111              		.cfi_offset 14, -4
 2112 0002 8AB0     		sub	sp, sp, #40
 2113              	.LCFI40:
ARM GAS  /tmp/ccA7VsRU.s 			page 52


 2114              		.cfi_def_cfa_offset 48
 2115 0004 00AF     		add	r7, sp, #0
 2116              	.LCFI41:
 2117              		.cfi_def_cfa_register 7
 818:Src/main.c    ****   GPIO_InitTypeDef GPIO_InitStruct = {0};
 2118              		.loc 1 818 20
 2119 0006 07F11403 		add	r3, r7, #20
 2120 000a 0022     		movs	r2, #0
 2121 000c 1A60     		str	r2, [r3]
 2122 000e 5A60     		str	r2, [r3, #4]
 2123 0010 9A60     		str	r2, [r3, #8]
 2124 0012 DA60     		str	r2, [r3, #12]
 2125 0014 1A61     		str	r2, [r3, #16]
 2126              	.LBB6:
 819:Src/main.c    **** 
 820:Src/main.c    ****   /* GPIO Ports Clock Enable */
 821:Src/main.c    ****   __HAL_RCC_GPIOC_CLK_ENABLE();
 2127              		.loc 1 821 3
 2128 0016 4C4B     		ldr	r3, .L88
 2129 0018 DB6C     		ldr	r3, [r3, #76]
 2130 001a 4B4A     		ldr	r2, .L88
 2131 001c 43F00403 		orr	r3, r3, #4
 2132 0020 D364     		str	r3, [r2, #76]
 2133 0022 494B     		ldr	r3, .L88
 2134 0024 DB6C     		ldr	r3, [r3, #76]
 2135 0026 03F00403 		and	r3, r3, #4
 2136 002a 3B61     		str	r3, [r7, #16]
 2137 002c 3B69     		ldr	r3, [r7, #16]
 2138              	.LBE6:
 2139              	.LBB7:
 822:Src/main.c    ****   __HAL_RCC_GPIOF_CLK_ENABLE();
 2140              		.loc 1 822 3
 2141 002e 464B     		ldr	r3, .L88
 2142 0030 DB6C     		ldr	r3, [r3, #76]
 2143 0032 454A     		ldr	r2, .L88
 2144 0034 43F02003 		orr	r3, r3, #32
 2145 0038 D364     		str	r3, [r2, #76]
 2146 003a 434B     		ldr	r3, .L88
 2147 003c DB6C     		ldr	r3, [r3, #76]
 2148 003e 03F02003 		and	r3, r3, #32
 2149 0042 FB60     		str	r3, [r7, #12]
 2150 0044 FB68     		ldr	r3, [r7, #12]
 2151              	.LBE7:
 2152              	.LBB8:
 823:Src/main.c    ****   __HAL_RCC_GPIOG_CLK_ENABLE();
 2153              		.loc 1 823 3
 2154 0046 404B     		ldr	r3, .L88
 2155 0048 DB6C     		ldr	r3, [r3, #76]
 2156 004a 3F4A     		ldr	r2, .L88
 2157 004c 43F04003 		orr	r3, r3, #64
 2158 0050 D364     		str	r3, [r2, #76]
 2159 0052 3D4B     		ldr	r3, .L88
 2160 0054 DB6C     		ldr	r3, [r3, #76]
 2161 0056 03F04003 		and	r3, r3, #64
 2162 005a BB60     		str	r3, [r7, #8]
 2163 005c BB68     		ldr	r3, [r7, #8]
 2164              	.LBE8:
ARM GAS  /tmp/ccA7VsRU.s 			page 53


 2165              	.LBB9:
 824:Src/main.c    ****   __HAL_RCC_GPIOA_CLK_ENABLE();
 2166              		.loc 1 824 3
 2167 005e 3A4B     		ldr	r3, .L88
 2168 0060 DB6C     		ldr	r3, [r3, #76]
 2169 0062 394A     		ldr	r2, .L88
 2170 0064 43F00103 		orr	r3, r3, #1
 2171 0068 D364     		str	r3, [r2, #76]
 2172 006a 374B     		ldr	r3, .L88
 2173 006c DB6C     		ldr	r3, [r3, #76]
 2174 006e 03F00103 		and	r3, r3, #1
 2175 0072 7B60     		str	r3, [r7, #4]
 2176 0074 7B68     		ldr	r3, [r7, #4]
 2177              	.LBE9:
 2178              	.LBB10:
 825:Src/main.c    ****   __HAL_RCC_GPIOB_CLK_ENABLE();
 2179              		.loc 1 825 3
 2180 0076 344B     		ldr	r3, .L88
 2181 0078 DB6C     		ldr	r3, [r3, #76]
 2182 007a 334A     		ldr	r2, .L88
 2183 007c 43F00203 		orr	r3, r3, #2
 2184 0080 D364     		str	r3, [r2, #76]
 2185 0082 314B     		ldr	r3, .L88
 2186 0084 DB6C     		ldr	r3, [r3, #76]
 2187 0086 03F00203 		and	r3, r3, #2
 2188 008a 3B60     		str	r3, [r7]
 2189 008c 3B68     		ldr	r3, [r7]
 2190              	.LBE10:
 826:Src/main.c    **** 
 827:Src/main.c    ****   /*Configure GPIO pin Output Level */
 828:Src/main.c    ****   HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 2191              		.loc 1 828 3
 2192 008e 0022     		movs	r2, #0
 2193 0090 0821     		movs	r1, #8
 2194 0092 2E48     		ldr	r0, .L88+4
 2195 0094 FFF7FEFF 		bl	HAL_GPIO_WritePin
 829:Src/main.c    **** 
 830:Src/main.c    ****   /*Configure GPIO pin Output Level */
 831:Src/main.c    ****   HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 2196              		.loc 1 831 3
 2197 0098 0022     		movs	r2, #0
 2198 009a 2021     		movs	r1, #32
 2199 009c 4FF09040 		mov	r0, #1207959552
 2200 00a0 FFF7FEFF 		bl	HAL_GPIO_WritePin
 832:Src/main.c    **** 
 833:Src/main.c    ****   /*Configure GPIO pin : B1_Pin */
 834:Src/main.c    ****   GPIO_InitStruct.Pin = B1_Pin;
 2201              		.loc 1 834 23
 2202 00a4 4FF40053 		mov	r3, #8192
 2203 00a8 7B61     		str	r3, [r7, #20]
 835:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 2204              		.loc 1 835 24
 2205 00aa 294B     		ldr	r3, .L88+8
 2206 00ac BB61     		str	r3, [r7, #24]
 836:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 2207              		.loc 1 836 24
 2208 00ae 0023     		movs	r3, #0
ARM GAS  /tmp/ccA7VsRU.s 			page 54


 2209 00b0 FB61     		str	r3, [r7, #28]
 837:Src/main.c    ****   HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 2210              		.loc 1 837 3
 2211 00b2 07F11403 		add	r3, r7, #20
 2212 00b6 1946     		mov	r1, r3
 2213 00b8 2448     		ldr	r0, .L88+4
 2214 00ba FFF7FEFF 		bl	HAL_GPIO_Init
 838:Src/main.c    **** 
 839:Src/main.c    ****   /*Configure GPIO pin : PG10 */
 840:Src/main.c    ****   GPIO_InitStruct.Pin = GPIO_PIN_10;
 2215              		.loc 1 840 23
 2216 00be 4FF48063 		mov	r3, #1024
 2217 00c2 7B61     		str	r3, [r7, #20]
 841:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 2218              		.loc 1 841 24
 2219 00c4 0023     		movs	r3, #0
 2220 00c6 BB61     		str	r3, [r7, #24]
 842:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 2221              		.loc 1 842 24
 2222 00c8 0023     		movs	r3, #0
 2223 00ca FB61     		str	r3, [r7, #28]
 843:Src/main.c    ****   HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 2224              		.loc 1 843 3
 2225 00cc 07F11403 		add	r3, r7, #20
 2226 00d0 1946     		mov	r1, r3
 2227 00d2 2048     		ldr	r0, .L88+12
 2228 00d4 FFF7FEFF 		bl	HAL_GPIO_Init
 844:Src/main.c    **** 
 845:Src/main.c    ****   /*Configure GPIO pin : PC3 */
 846:Src/main.c    ****   GPIO_InitStruct.Pin = GPIO_PIN_3;
 2229              		.loc 1 846 23
 2230 00d8 0823     		movs	r3, #8
 2231 00da 7B61     		str	r3, [r7, #20]
 847:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 2232              		.loc 1 847 24
 2233 00dc 0123     		movs	r3, #1
 2234 00de BB61     		str	r3, [r7, #24]
 848:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 2235              		.loc 1 848 24
 2236 00e0 0023     		movs	r3, #0
 2237 00e2 FB61     		str	r3, [r7, #28]
 849:Src/main.c    ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 2238              		.loc 1 849 25
 2239 00e4 0323     		movs	r3, #3
 2240 00e6 3B62     		str	r3, [r7, #32]
 850:Src/main.c    ****   HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 2241              		.loc 1 850 3
 2242 00e8 07F11403 		add	r3, r7, #20
 2243 00ec 1946     		mov	r1, r3
 2244 00ee 1748     		ldr	r0, .L88+4
 2245 00f0 FFF7FEFF 		bl	HAL_GPIO_Init
 851:Src/main.c    **** 
 852:Src/main.c    ****     /*Configure GPIO pin : PC2 */
 853:Src/main.c    ****   GPIO_InitStruct.Pin = GPIO_PIN_2;
 2246              		.loc 1 853 23
 2247 00f4 0423     		movs	r3, #4
 2248 00f6 7B61     		str	r3, [r7, #20]
ARM GAS  /tmp/ccA7VsRU.s 			page 55


 854:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 2249              		.loc 1 854 24
 2250 00f8 0123     		movs	r3, #1
 2251 00fa BB61     		str	r3, [r7, #24]
 855:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 2252              		.loc 1 855 24
 2253 00fc 0023     		movs	r3, #0
 2254 00fe FB61     		str	r3, [r7, #28]
 856:Src/main.c    ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 2255              		.loc 1 856 25
 2256 0100 0323     		movs	r3, #3
 2257 0102 3B62     		str	r3, [r7, #32]
 857:Src/main.c    ****   HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 2258              		.loc 1 857 3
 2259 0104 07F11403 		add	r3, r7, #20
 2260 0108 1946     		mov	r1, r3
 2261 010a 1048     		ldr	r0, .L88+4
 2262 010c FFF7FEFF 		bl	HAL_GPIO_Init
 858:Src/main.c    **** 
 859:Src/main.c    ****   /*Configure GPIO pin : LD2_Pin */
 860:Src/main.c    ****   GPIO_InitStruct.Pin = LD2_Pin;
 2263              		.loc 1 860 23
 2264 0110 2023     		movs	r3, #32
 2265 0112 7B61     		str	r3, [r7, #20]
 861:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 2266              		.loc 1 861 24
 2267 0114 0123     		movs	r3, #1
 2268 0116 BB61     		str	r3, [r7, #24]
 862:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 2269              		.loc 1 862 24
 2270 0118 0023     		movs	r3, #0
 2271 011a FB61     		str	r3, [r7, #28]
 863:Src/main.c    ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 2272              		.loc 1 863 25
 2273 011c 0023     		movs	r3, #0
 2274 011e 3B62     		str	r3, [r7, #32]
 864:Src/main.c    ****   HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 2275              		.loc 1 864 3
 2276 0120 07F11403 		add	r3, r7, #20
 2277 0124 1946     		mov	r1, r3
 2278 0126 4FF09040 		mov	r0, #1207959552
 2279 012a FFF7FEFF 		bl	HAL_GPIO_Init
 865:Src/main.c    **** 
 866:Src/main.c    ****   /* EXTI interrupt init*/
 867:Src/main.c    ****   HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 2280              		.loc 1 867 3
 2281 012e 0022     		movs	r2, #0
 2282 0130 0021     		movs	r1, #0
 2283 0132 2820     		movs	r0, #40
 2284 0134 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 868:Src/main.c    ****   HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 2285              		.loc 1 868 3
 2286 0138 2820     		movs	r0, #40
 2287 013a FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 869:Src/main.c    **** 
 870:Src/main.c    **** }
 2288              		.loc 1 870 1
ARM GAS  /tmp/ccA7VsRU.s 			page 56


 2289 013e 00BF     		nop
 2290 0140 2837     		adds	r7, r7, #40
 2291              	.LCFI42:
 2292              		.cfi_def_cfa_offset 8
 2293 0142 BD46     		mov	sp, r7
 2294              	.LCFI43:
 2295              		.cfi_def_cfa_register 13
 2296              		@ sp needed
 2297 0144 80BD     		pop	{r7, pc}
 2298              	.L89:
 2299 0146 00BF     		.align	2
 2300              	.L88:
 2301 0148 00100240 		.word	1073876992
 2302 014c 00080048 		.word	1207961600
 2303 0150 00001110 		.word	269549568
 2304 0154 00180048 		.word	1207965696
 2305              		.cfi_endproc
 2306              	.LFE419:
 2308              		.section	.text.Error_Handler,"ax",%progbits
 2309              		.align	1
 2310              		.global	Error_Handler
 2311              		.syntax unified
 2312              		.thumb
 2313              		.thumb_func
 2314              		.fpu fpv4-sp-d16
 2316              	Error_Handler:
 2317              	.LFB420:
 871:Src/main.c    **** 
 872:Src/main.c    **** /* USER CODE BEGIN 4 */
 873:Src/main.c    **** 
 874:Src/main.c    **** /* USER CODE END 4 */
 875:Src/main.c    **** 
 876:Src/main.c    **** /**
 877:Src/main.c    ****   * @brief  This function is executed in case of error occurrence.
 878:Src/main.c    ****   * @retval None
 879:Src/main.c    ****   */
 880:Src/main.c    **** void Error_Handler(void)
 881:Src/main.c    **** {
 2318              		.loc 1 881 1
 2319              		.cfi_startproc
 2320              		@ args = 0, pretend = 0, frame = 0
 2321              		@ frame_needed = 1, uses_anonymous_args = 0
 2322              		@ link register save eliminated.
 2323 0000 80B4     		push	{r7}
 2324              	.LCFI44:
 2325              		.cfi_def_cfa_offset 4
 2326              		.cfi_offset 7, -4
 2327 0002 00AF     		add	r7, sp, #0
 2328              	.LCFI45:
 2329              		.cfi_def_cfa_register 7
 882:Src/main.c    ****   /* USER CODE BEGIN Error_Handler_Debug */
 883:Src/main.c    ****   /* User can add his own implementation to report the HAL error return state */
 884:Src/main.c    **** 
 885:Src/main.c    ****   /* USER CODE END Error_Handler_Debug */
 886:Src/main.c    **** }
 2330              		.loc 1 886 1
 2331 0004 00BF     		nop
ARM GAS  /tmp/ccA7VsRU.s 			page 57


 2332 0006 BD46     		mov	sp, r7
 2333              	.LCFI46:
 2334              		.cfi_def_cfa_register 13
 2335              		@ sp needed
 2336 0008 5DF8047B 		ldr	r7, [sp], #4
 2337              	.LCFI47:
 2338              		.cfi_restore 7
 2339              		.cfi_def_cfa_offset 0
 2340 000c 7047     		bx	lr
 2341              		.cfi_endproc
 2342              	.LFE420:
 2344              		.text
 2345              	.Letext0:
 2346              		.file 2 "/opt/gcc-arm-none-eabi-8-2019-q3-update/arm-none-eabi/include/machine/_default_types.h"
 2347              		.file 3 "/opt/gcc-arm-none-eabi-8-2019-q3-update/arm-none-eabi/include/sys/_stdint.h"
 2348              		.file 4 "Drivers/CMSIS/Include/core_cm4.h"
 2349              		.file 5 "Drivers/CMSIS/Device/ST/STM32G4xx/Include/system_stm32g4xx.h"
 2350              		.file 6 "Drivers/CMSIS/Device/ST/STM32G4xx/Include/stm32g474xx.h"
 2351              		.file 7 "Drivers/CMSIS/Device/ST/STM32G4xx/Include/stm32g4xx.h"
 2352              		.file 8 "Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_hal_def.h"
 2353              		.file 9 "Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_hal_rcc.h"
 2354              		.file 10 "Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_hal_rcc_ex.h"
 2355              		.file 11 "Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_hal_gpio.h"
 2356              		.file 12 "Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_hal_dma.h"
 2357              		.file 13 "Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_hal_adc.h"
 2358              		.file 14 "Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_hal_adc_ex.h"
 2359              		.file 15 "Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_hal_flash.h"
 2360              		.file 16 "Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_hal_hrtim.h"
 2361              		.file 17 "Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_hal_spi.h"
 2362              		.file 18 "Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_hal_uart.h"
 2363              		.file 19 "Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_hal.h"
 2364              		.file 20 "/opt/gcc-arm-none-eabi-8-2019-q3-update/lib/gcc/arm-none-eabi/8.3.1/include/stddef.h"
 2365              		.file 21 "/opt/gcc-arm-none-eabi-8-2019-q3-update/arm-none-eabi/include/sys/_types.h"
 2366              		.file 22 "/opt/gcc-arm-none-eabi-8-2019-q3-update/arm-none-eabi/include/sys/reent.h"
 2367              		.file 23 "/opt/gcc-arm-none-eabi-8-2019-q3-update/arm-none-eabi/include/sys/lock.h"
 2368              		.file 24 "/opt/gcc-arm-none-eabi-8-2019-q3-update/arm-none-eabi/include/stdlib.h"
 2369              		.file 25 "Middlewares/ST/STM32_USB_Device_Library/Core/Inc/usbd_def.h"
 2370              		.file 26 "Src/usb/usbd_rt.h"
ARM GAS  /tmp/ccA7VsRU.s 			page 58


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
                            *COM*:000000000000006c hadc1
                            *COM*:000000000000006c hadc2
                            *COM*:000000000000006c hadc3
                            *COM*:00000000000000fc hhrtim1
                            *COM*:0000000000000064 hspi2
                            *COM*:0000000000000064 hspi3
                            *COM*:0000000000000060 hdma_spi3_rx
                            *COM*:0000000000000060 hdma_spi3_tx
                            *COM*:000000000000008c huart1
     /tmp/ccA7VsRU.s:31     .bss.drv_regs_error:0000000000000000 drv_regs_error
     /tmp/ccA7VsRU.s:28     .bss.drv_regs_error:0000000000000000 $d
     /tmp/ccA7VsRU.s:38     .data.drv_regs:0000000000000000 drv_regs
     /tmp/ccA7VsRU.s:35     .data.drv_regs:0000000000000000 $d
     /tmp/ccA7VsRU.s:45     .text.main:0000000000000000 $t
     /tmp/ccA7VsRU.s:53     .text.main:0000000000000000 main
     /tmp/ccA7VsRU.s:426    .text.SystemClock_Config:0000000000000000 SystemClock_Config
     /tmp/ccA7VsRU.s:2101   .text.MX_GPIO_Init:0000000000000000 MX_GPIO_Init
     /tmp/ccA7VsRU.s:2018   .text.MX_DMA_Init:0000000000000000 MX_DMA_Init
     /tmp/ccA7VsRU.s:1900   .text.MX_USART1_UART_Init:0000000000000000 MX_USART1_UART_Init
     /tmp/ccA7VsRU.s:1253   .text.MX_HRTIM1_Init:0000000000000000 MX_HRTIM1_Init
     /tmp/ccA7VsRU.s:615    .text.MX_ADC1_Init:0000000000000000 MX_ADC1_Init
     /tmp/ccA7VsRU.s:864    .text.MX_ADC2_Init:0000000000000000 MX_ADC2_Init
     /tmp/ccA7VsRU.s:1048   .text.MX_ADC3_Init:0000000000000000 MX_ADC3_Init
     /tmp/ccA7VsRU.s:1716   .text.MX_SPI2_Init:0000000000000000 MX_SPI2_Init
     /tmp/ccA7VsRU.s:1802   .text.MX_SPI3_Init:0000000000000000 MX_SPI3_Init
     /tmp/ccA7VsRU.s:403    .text.main:0000000000000268 $d
     /tmp/ccA7VsRU.s:419    .text.SystemClock_Config:0000000000000000 $t
     /tmp/ccA7VsRU.s:2316   .text.Error_Handler:0000000000000000 Error_Handler
     /tmp/ccA7VsRU.s:604    .text.SystemClock_Config:000000000000011c $d
     /tmp/ccA7VsRU.s:609    .text.MX_ADC1_Init:0000000000000000 $t
     /tmp/ccA7VsRU.s:851    .text.MX_ADC1_Init:000000000000016c $d
     /tmp/ccA7VsRU.s:858    .text.MX_ADC2_Init:0000000000000000 $t
     /tmp/ccA7VsRU.s:1035   .text.MX_ADC2_Init:00000000000000f8 $d
     /tmp/ccA7VsRU.s:1042   .text.MX_ADC3_Init:0000000000000000 $t
     /tmp/ccA7VsRU.s:1240   .text.MX_ADC3_Init:000000000000011c $d
     /tmp/ccA7VsRU.s:1247   .text.MX_HRTIM1_Init:0000000000000000 $t
     /tmp/ccA7VsRU.s:1704   .text.MX_HRTIM1_Init:00000000000002f0 $d
     /tmp/ccA7VsRU.s:1710   .text.MX_SPI2_Init:0000000000000000 $t
     /tmp/ccA7VsRU.s:1790   .text.MX_SPI2_Init:0000000000000060 $d
     /tmp/ccA7VsRU.s:1796   .text.MX_SPI3_Init:0000000000000000 $t
     /tmp/ccA7VsRU.s:1888   .text.MX_SPI3_Init:0000000000000074 $d
     /tmp/ccA7VsRU.s:1894   .text.MX_USART1_UART_Init:0000000000000000 $t
     /tmp/ccA7VsRU.s:2006   .text.MX_USART1_UART_Init:0000000000000090 $d
     /tmp/ccA7VsRU.s:2012   .text.MX_DMA_Init:0000000000000000 $t
     /tmp/ccA7VsRU.s:2090   .text.MX_DMA_Init:0000000000000060 $d
     /tmp/ccA7VsRU.s:2095   .text.MX_GPIO_Init:0000000000000000 $t
     /tmp/ccA7VsRU.s:2301   .text.MX_GPIO_Init:0000000000000148 $d
     /tmp/ccA7VsRU.s:2309   .text.Error_Handler:0000000000000000 $t

UNDEFINED SYMBOLS
init
HAL_Init
init_param_from_flash
param
fast_loop_set_param
ARM GAS  /tmp/ccA7VsRU.s 			page 59


main_loop_set_param
MX_USB_Device_Init
HAL_ADC_Start
HAL_SPI_TransmitReceive
HAL_HRTIM_SimplePWMStart
memset
HAL_PWREx_ControlVoltageScaling
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_RCCEx_PeriphCLKConfig
HAL_RCCEx_CRSConfig
HAL_ADC_Init
HAL_ADCEx_MultiModeConfigChannel
HAL_ADCEx_InjectedConfigChannel
HAL_ADC_ConfigChannel
HAL_HRTIM_Init
HAL_HRTIM_DLLCalibrationStart
HAL_HRTIM_PollForDLLCalibration
HAL_HRTIM_ADCTriggerConfig
HAL_HRTIM_ADCPostScalerConfig
HAL_HRTIM_TimeBaseConfig
HAL_HRTIM_WaveformTimerControl
HAL_HRTIM_RollOverModeConfig
HAL_HRTIM_SimpleOCChannelConfig
HAL_HRTIM_MspPostInit
HAL_SPI_Init
HAL_UART_Init
HAL_UARTEx_SetTxFifoThreshold
HAL_UARTEx_SetRxFifoThreshold
HAL_UARTEx_DisableFifoMode
HAL_NVIC_SetPriority
HAL_NVIC_EnableIRQ
HAL_GPIO_WritePin
HAL_GPIO_Init
