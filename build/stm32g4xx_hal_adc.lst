ARM GAS  /tmp/ccZ0TYFG.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"stm32g4xx_hal_adc.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.LL_ADC_SetCommonClock,"ax",%progbits
  18              		.align	1
  19              		.arch armv7e-m
  20              		.syntax unified
  21              		.thumb
  22              		.thumb_func
  23              		.fpu fpv4-sp-d16
  25              	LL_ADC_SetCommonClock:
  26              	.LFB131:
  27              		.file 1 "Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h"
   1:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /**
   2:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   ******************************************************************************
   3:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @file    stm32g4xx_ll_adc.h
   4:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @author  MCD Application Team
   5:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @brief   Header file of ADC LL module.
   6:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   ******************************************************************************
   7:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @attention
   8:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *
   9:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * <h2><center>&copy; Copyright (c) 2019 STMicroelectronics.
  10:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * All rights reserved.</center></h2>
  11:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *
  12:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * This software component is licensed by ST under BSD 3-Clause license,
  13:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * the "License"; You may not use this file except in compliance with the
  14:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * License. You may obtain a copy of the License at:
  15:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *                        opensource.org/licenses/BSD-3-Clause
  16:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *
  17:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   ******************************************************************************
  18:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
  19:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
  20:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /* Define to prevent recursive inclusion -------------------------------------*/
  21:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #ifndef STM32G4xx_LL_ADC_H
  22:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define STM32G4xx_LL_ADC_H
  23:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
  24:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #ifdef __cplusplus
  25:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** extern "C" {
  26:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #endif
  27:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
  28:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /* Includes ------------------------------------------------------------------*/
  29:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #include "stm32g4xx.h"
  30:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
  31:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /** @addtogroup STM32G4xx_LL_Driver
ARM GAS  /tmp/ccZ0TYFG.s 			page 2


  32:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @{
  33:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
  34:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
  35:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #if defined (ADC1) || defined (ADC2) || defined (ADC3) || defined (ADC4) || defined (ADC5)
  36:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
  37:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /** @defgroup ADC_LL ADC
  38:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @{
  39:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
  40:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
  41:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /* Private types -------------------------------------------------------------*/
  42:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /* Private variables ---------------------------------------------------------*/
  43:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
  44:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /* Private constants ---------------------------------------------------------*/
  45:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /** @defgroup ADC_LL_Private_Constants ADC Private Constants
  46:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @{
  47:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
  48:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
  49:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /* Internal mask for ADC group regular sequencer:                             */
  50:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /* To select into literal LL_ADC_REG_RANK_x the relevant bits for:            */
  51:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /* - sequencer register offset                                                */
  52:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /* - sequencer rank bits position into the selected register                  */
  53:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
  54:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /* Internal register offset for ADC group regular sequencer configuration */
  55:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /* (offset placed into a spare area of literal definition) */
  56:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define ADC_SQR1_REGOFFSET                 (0x00000000UL)
  57:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define ADC_SQR2_REGOFFSET                 (0x00000100UL)
  58:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define ADC_SQR3_REGOFFSET                 (0x00000200UL)
  59:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define ADC_SQR4_REGOFFSET                 (0x00000300UL)
  60:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
  61:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define ADC_REG_SQRX_REGOFFSET_MASK        (ADC_SQR1_REGOFFSET | ADC_SQR2_REGOFFSET | ADC_SQR3_REGO
  62:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define ADC_SQRX_REGOFFSET_POS             (8UL) /* Position of bits ADC_SQRx_REGOFFSET in ADC_REG_
  63:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define ADC_REG_RANK_ID_SQRX_MASK          (ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0)
  64:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
  65:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /* Definition of ADC group regular sequencer bits information to be inserted  */
  66:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /* into ADC group regular sequencer ranks literals definition.                */
  67:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define ADC_REG_RANK_1_SQRX_BITOFFSET_POS  (ADC_SQR1_SQ1_Pos)
  68:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define ADC_REG_RANK_2_SQRX_BITOFFSET_POS  (ADC_SQR1_SQ2_Pos)
  69:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define ADC_REG_RANK_3_SQRX_BITOFFSET_POS  (ADC_SQR1_SQ3_Pos)
  70:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define ADC_REG_RANK_4_SQRX_BITOFFSET_POS  (ADC_SQR1_SQ4_Pos)
  71:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define ADC_REG_RANK_5_SQRX_BITOFFSET_POS  (ADC_SQR2_SQ5_Pos)
  72:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define ADC_REG_RANK_6_SQRX_BITOFFSET_POS  (ADC_SQR2_SQ6_Pos)
  73:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define ADC_REG_RANK_7_SQRX_BITOFFSET_POS  (ADC_SQR2_SQ7_Pos)
  74:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define ADC_REG_RANK_8_SQRX_BITOFFSET_POS  (ADC_SQR2_SQ8_Pos)
  75:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define ADC_REG_RANK_9_SQRX_BITOFFSET_POS  (ADC_SQR2_SQ9_Pos)
  76:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define ADC_REG_RANK_10_SQRX_BITOFFSET_POS (ADC_SQR3_SQ10_Pos)
  77:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define ADC_REG_RANK_11_SQRX_BITOFFSET_POS (ADC_SQR3_SQ11_Pos)
  78:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define ADC_REG_RANK_12_SQRX_BITOFFSET_POS (ADC_SQR3_SQ12_Pos)
  79:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define ADC_REG_RANK_13_SQRX_BITOFFSET_POS (ADC_SQR3_SQ13_Pos)
  80:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define ADC_REG_RANK_14_SQRX_BITOFFSET_POS (ADC_SQR3_SQ14_Pos)
  81:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define ADC_REG_RANK_15_SQRX_BITOFFSET_POS (ADC_SQR4_SQ15_Pos)
  82:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define ADC_REG_RANK_16_SQRX_BITOFFSET_POS (ADC_SQR4_SQ16_Pos)
  83:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
  84:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
  85:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
  86:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /* Internal mask for ADC group injected sequencer:                            */
  87:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /* To select into literal LL_ADC_INJ_RANK_x the relevant bits for:            */
  88:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /* - data register offset                                                     */
ARM GAS  /tmp/ccZ0TYFG.s 			page 3


  89:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /* - sequencer rank bits position into the selected register                  */
  90:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
  91:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /* Internal register offset for ADC group injected data register */
  92:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /* (offset placed into a spare area of literal definition) */
  93:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define ADC_JDR1_REGOFFSET                 (0x00000000UL)
  94:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define ADC_JDR2_REGOFFSET                 (0x00000100UL)
  95:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define ADC_JDR3_REGOFFSET                 (0x00000200UL)
  96:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define ADC_JDR4_REGOFFSET                 (0x00000300UL)
  97:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
  98:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define ADC_INJ_JDRX_REGOFFSET_MASK        (ADC_JDR1_REGOFFSET | ADC_JDR2_REGOFFSET | ADC_JDR3_REGO
  99:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define ADC_INJ_RANK_ID_JSQR_MASK          (ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0)
 100:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define ADC_JDRX_REGOFFSET_POS             (8UL) /* Position of bits ADC_JDRx_REGOFFSET in ADC_INJ_
 101:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
 102:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /* Definition of ADC group injected sequencer bits information to be inserted */
 103:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /* into ADC group injected sequencer ranks literals definition.               */
 104:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define ADC_INJ_RANK_1_JSQR_BITOFFSET_POS  (ADC_JSQR_JSQ1_Pos)
 105:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define ADC_INJ_RANK_2_JSQR_BITOFFSET_POS  (ADC_JSQR_JSQ2_Pos)
 106:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define ADC_INJ_RANK_3_JSQR_BITOFFSET_POS  (ADC_JSQR_JSQ3_Pos)
 107:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define ADC_INJ_RANK_4_JSQR_BITOFFSET_POS  (ADC_JSQR_JSQ4_Pos)
 108:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
 109:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
 110:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
 111:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /* Internal mask for ADC group regular trigger:                               */
 112:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /* To select into literal LL_ADC_REG_TRIG_x the relevant bits for:            */
 113:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /* - regular trigger source                                                   */
 114:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /* - regular trigger edge                                                     */
 115:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define ADC_REG_TRIG_EXT_EDGE_DEFAULT       (ADC_CFGR_EXTEN_0) /* Trigger edge set to rising edge (
 116:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
 117:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /* Mask containing trigger source masks for each of possible                  */
 118:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /* trigger edge selection duplicated with shifts [0; 4; 8; 12]                */
 119:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /* corresponding to {SW start; ext trigger; ext trigger; ext trigger}.        */
 120:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define ADC_REG_TRIG_SOURCE_MASK            (((LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTSEL) << (4U *
 121:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****                                              ((ADC_CFGR_EXTSEL)                            << (4U *
 122:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****                                              ((ADC_CFGR_EXTSEL)                            << (4U *
 123:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****                                              ((ADC_CFGR_EXTSEL)                            << (4U *
 124:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
 125:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /* Mask containing trigger edge masks for each of possible                    */
 126:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /* trigger edge selection duplicated with shifts [0; 4; 8; 12]                */
 127:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /* corresponding to {SW start; ext trigger; ext trigger; ext trigger}.        */
 128:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define ADC_REG_TRIG_EDGE_MASK              (((LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN) << (4U * 
 129:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****                                              ((ADC_REG_TRIG_EXT_EDGE_DEFAULT)             << (4U * 
 130:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****                                              ((ADC_REG_TRIG_EXT_EDGE_DEFAULT)             << (4U * 
 131:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****                                              ((ADC_REG_TRIG_EXT_EDGE_DEFAULT)             << (4U * 
 132:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
 133:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /* Definition of ADC group regular trigger bits information.                  */
 134:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define ADC_REG_TRIG_EXTSEL_BITOFFSET_POS  (ADC_CFGR_EXTSEL_Pos)
 135:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define ADC_REG_TRIG_EXTEN_BITOFFSET_POS   (ADC_CFGR_EXTEN_Pos)
 136:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
 137:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
 138:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
 139:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /* Internal mask for ADC group injected trigger:                              */
 140:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /* To select into literal LL_ADC_INJ_TRIG_x the relevant bits for:            */
 141:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /* - injected trigger source                                                  */
 142:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /* - injected trigger edge                                                    */
 143:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define ADC_INJ_TRIG_EXT_EDGE_DEFAULT      (ADC_JSQR_JEXTEN_0) /* Trigger edge set to rising edge (
 144:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
 145:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /* Mask containing trigger source masks for each of possible                  */
ARM GAS  /tmp/ccZ0TYFG.s 			page 4


 146:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /* trigger edge selection duplicated with shifts [0; 4; 8; 12]                */
 147:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /* corresponding to {SW start; ext trigger; ext trigger; ext trigger}.        */
 148:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define ADC_INJ_TRIG_SOURCE_MASK            (((LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTSEL)  << (4U
 149:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****                                              ((ADC_JSQR_JEXTSEL)                             << (4U
 150:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****                                              ((ADC_JSQR_JEXTSEL)                             << (4U
 151:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****                                              ((ADC_JSQR_JEXTSEL)                             << (4U
 152:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
 153:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /* Mask containing trigger edge masks for each of possible                    */
 154:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /* trigger edge selection duplicated with shifts [0; 4; 8; 12]                */
 155:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /* corresponding to {SW start; ext trigger; ext trigger; ext trigger}.        */
 156:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define ADC_INJ_TRIG_EDGE_MASK              (((LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN) << (4U *
 157:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****                                              ((ADC_INJ_TRIG_EXT_EDGE_DEFAULT)              << (4U *
 158:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****                                              ((ADC_INJ_TRIG_EXT_EDGE_DEFAULT)              << (4U *
 159:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****                                              ((ADC_INJ_TRIG_EXT_EDGE_DEFAULT)              << (4U *
 160:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
 161:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /* Definition of ADC group injected trigger bits information.                 */
 162:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define ADC_INJ_TRIG_EXTSEL_BITOFFSET_POS  (ADC_JSQR_JEXTSEL_Pos)
 163:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define ADC_INJ_TRIG_EXTEN_BITOFFSET_POS   (ADC_JSQR_JEXTEN_Pos)
 164:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
 165:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
 166:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
 167:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
 168:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
 169:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
 170:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /* Internal mask for ADC channel:                                             */
 171:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /* To select into literal LL_ADC_CHANNEL_x the relevant bits for:             */
 172:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /* - channel identifier defined by number                                     */
 173:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /* - channel identifier defined by bitfield                                   */
 174:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /* - channel differentiation between external channels (connected to          */
 175:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /*   GPIO pins) and internal channels (connected to internal paths)           */
 176:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /* - channel sampling time defined by SMPRx register offset                   */
 177:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /*   and SMPx bits positions into SMPRx register                              */
 178:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define ADC_CHANNEL_ID_NUMBER_MASK         (ADC_CFGR_AWD1CH)
 179:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define ADC_CHANNEL_ID_BITFIELD_MASK       (ADC_AWD2CR_AWD2CH)
 180:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS (ADC_CFGR_AWD1CH_Pos)
 181:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define ADC_CHANNEL_ID_MASK                (ADC_CHANNEL_ID_NUMBER_MASK | ADC_CHANNEL_ID_BITFIELD_MA
 182:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /* Equivalent mask of ADC_CHANNEL_NUMBER_MASK aligned on register LSB (bit 0) */
 183:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 (ADC_SQR2_SQ5) /* Equivalent to shift: (ADC_CHANNEL_NUMB
 184:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
 185:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /* Channel differentiation between external and internal channels */
 186:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define ADC_CHANNEL_ID_INTERNAL_CH         (0x80000000UL) /* Marker of internal channel */
 187:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define ADC_CHANNEL_ID_INTERNAL_CH_2       (0x00080000UL) /* Marker of internal channel for other A
 188:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define ADC_CHANNEL_ID_INTERNAL_CH_MASK    (ADC_CHANNEL_ID_INTERNAL_CH | ADC_CHANNEL_ID_INTERNAL_CH
 189:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
 190:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /* Internal register offset for ADC channel sampling time configuration */
 191:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /* (offset placed into a spare area of literal definition) */
 192:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define ADC_SMPR1_REGOFFSET                (0x00000000UL)
 193:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define ADC_SMPR2_REGOFFSET                (0x02000000UL)
 194:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define ADC_CHANNEL_SMPRX_REGOFFSET_MASK   (ADC_SMPR1_REGOFFSET | ADC_SMPR2_REGOFFSET)
 195:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define ADC_SMPRX_REGOFFSET_POS            (25UL) /* Position of bits ADC_SMPRx_REGOFFSET in ADC_CH
 196:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
 197:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define ADC_CHANNEL_SMPx_BITOFFSET_MASK    (0x01F00000UL)
 198:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define ADC_CHANNEL_SMPx_BITOFFSET_POS     (20UL)           /* Value equivalent to bitfield "ADC_CH
 199:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
 200:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /* Definition of channels ID number information to be inserted into           */
 201:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /* channels literals definition.                                              */
 202:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define ADC_CHANNEL_0_NUMBER               (0x00000000UL)
ARM GAS  /tmp/ccZ0TYFG.s 			page 5


 203:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define ADC_CHANNEL_1_NUMBER               (                                                       
 204:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define ADC_CHANNEL_2_NUMBER               (                                                       
 205:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define ADC_CHANNEL_3_NUMBER               (                                                       
 206:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define ADC_CHANNEL_4_NUMBER               (                                        ADC_CFGR_AWD1CH
 207:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define ADC_CHANNEL_5_NUMBER               (                                        ADC_CFGR_AWD1CH
 208:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define ADC_CHANNEL_6_NUMBER               (                                        ADC_CFGR_AWD1CH
 209:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define ADC_CHANNEL_7_NUMBER               (                                        ADC_CFGR_AWD1CH
 210:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define ADC_CHANNEL_8_NUMBER               (                    ADC_CFGR_AWD1CH_3                  
 211:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define ADC_CHANNEL_9_NUMBER               (                    ADC_CFGR_AWD1CH_3                  
 212:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define ADC_CHANNEL_10_NUMBER              (                    ADC_CFGR_AWD1CH_3                  
 213:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define ADC_CHANNEL_11_NUMBER              (                    ADC_CFGR_AWD1CH_3                  
 214:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define ADC_CHANNEL_12_NUMBER              (                    ADC_CFGR_AWD1CH_3 | ADC_CFGR_AWD1CH
 215:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define ADC_CHANNEL_13_NUMBER              (                    ADC_CFGR_AWD1CH_3 | ADC_CFGR_AWD1CH
 216:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define ADC_CHANNEL_14_NUMBER              (                    ADC_CFGR_AWD1CH_3 | ADC_CFGR_AWD1CH
 217:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define ADC_CHANNEL_15_NUMBER              (                    ADC_CFGR_AWD1CH_3 | ADC_CFGR_AWD1CH
 218:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define ADC_CHANNEL_16_NUMBER              (ADC_CFGR_AWD1CH_4                                      
 219:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define ADC_CHANNEL_17_NUMBER              (ADC_CFGR_AWD1CH_4                                      
 220:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define ADC_CHANNEL_18_NUMBER              (ADC_CFGR_AWD1CH_4                                      
 221:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
 222:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /* Definition of channels ID bitfield information to be inserted into         */
 223:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /* channels literals definition.                                              */
 224:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define ADC_CHANNEL_0_BITFIELD             (ADC_AWD2CR_AWD2CH_0)
 225:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define ADC_CHANNEL_1_BITFIELD             (ADC_AWD2CR_AWD2CH_1)
 226:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define ADC_CHANNEL_2_BITFIELD             (ADC_AWD2CR_AWD2CH_2)
 227:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define ADC_CHANNEL_3_BITFIELD             (ADC_AWD2CR_AWD2CH_3)
 228:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define ADC_CHANNEL_4_BITFIELD             (ADC_AWD2CR_AWD2CH_4)
 229:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define ADC_CHANNEL_5_BITFIELD             (ADC_AWD2CR_AWD2CH_5)
 230:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define ADC_CHANNEL_6_BITFIELD             (ADC_AWD2CR_AWD2CH_6)
 231:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define ADC_CHANNEL_7_BITFIELD             (ADC_AWD2CR_AWD2CH_7)
 232:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define ADC_CHANNEL_8_BITFIELD             (ADC_AWD2CR_AWD2CH_8)
 233:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define ADC_CHANNEL_9_BITFIELD             (ADC_AWD2CR_AWD2CH_9)
 234:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define ADC_CHANNEL_10_BITFIELD            (ADC_AWD2CR_AWD2CH_10)
 235:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define ADC_CHANNEL_11_BITFIELD            (ADC_AWD2CR_AWD2CH_11)
 236:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define ADC_CHANNEL_12_BITFIELD            (ADC_AWD2CR_AWD2CH_12)
 237:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define ADC_CHANNEL_13_BITFIELD            (ADC_AWD2CR_AWD2CH_13)
 238:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define ADC_CHANNEL_14_BITFIELD            (ADC_AWD2CR_AWD2CH_14)
 239:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define ADC_CHANNEL_15_BITFIELD            (ADC_AWD2CR_AWD2CH_15)
 240:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define ADC_CHANNEL_16_BITFIELD            (ADC_AWD2CR_AWD2CH_16)
 241:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define ADC_CHANNEL_17_BITFIELD            (ADC_AWD2CR_AWD2CH_17)
 242:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define ADC_CHANNEL_18_BITFIELD            (ADC_AWD2CR_AWD2CH_18)
 243:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
 244:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /* Definition of channels sampling time information to be inserted into       */
 245:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /* channels literals definition.                                              */
 246:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define ADC_CHANNEL_0_SMP                  (ADC_SMPR1_REGOFFSET | (( 0UL) << ADC_CHANNEL_SMPx_BITOF
 247:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define ADC_CHANNEL_1_SMP                  (ADC_SMPR1_REGOFFSET | (( 3UL) << ADC_CHANNEL_SMPx_BITOF
 248:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define ADC_CHANNEL_2_SMP                  (ADC_SMPR1_REGOFFSET | (( 6UL) << ADC_CHANNEL_SMPx_BITOF
 249:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define ADC_CHANNEL_3_SMP                  (ADC_SMPR1_REGOFFSET | (( 9UL) << ADC_CHANNEL_SMPx_BITOF
 250:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define ADC_CHANNEL_4_SMP                  (ADC_SMPR1_REGOFFSET | ((12UL) << ADC_CHANNEL_SMPx_BITOF
 251:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define ADC_CHANNEL_5_SMP                  (ADC_SMPR1_REGOFFSET | ((15UL) << ADC_CHANNEL_SMPx_BITOF
 252:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define ADC_CHANNEL_6_SMP                  (ADC_SMPR1_REGOFFSET | ((18UL) << ADC_CHANNEL_SMPx_BITOF
 253:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define ADC_CHANNEL_7_SMP                  (ADC_SMPR1_REGOFFSET | ((21UL) << ADC_CHANNEL_SMPx_BITOF
 254:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define ADC_CHANNEL_8_SMP                  (ADC_SMPR1_REGOFFSET | ((24UL) << ADC_CHANNEL_SMPx_BITOF
 255:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define ADC_CHANNEL_9_SMP                  (ADC_SMPR1_REGOFFSET | ((27UL) << ADC_CHANNEL_SMPx_BITOF
 256:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define ADC_CHANNEL_10_SMP                 (ADC_SMPR2_REGOFFSET | (( 0UL) << ADC_CHANNEL_SMPx_BITOF
 257:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define ADC_CHANNEL_11_SMP                 (ADC_SMPR2_REGOFFSET | (( 3UL) << ADC_CHANNEL_SMPx_BITOF
 258:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define ADC_CHANNEL_12_SMP                 (ADC_SMPR2_REGOFFSET | (( 6UL) << ADC_CHANNEL_SMPx_BITOF
 259:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define ADC_CHANNEL_13_SMP                 (ADC_SMPR2_REGOFFSET | (( 9UL) << ADC_CHANNEL_SMPx_BITOF
ARM GAS  /tmp/ccZ0TYFG.s 			page 6


 260:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define ADC_CHANNEL_14_SMP                 (ADC_SMPR2_REGOFFSET | ((12UL) << ADC_CHANNEL_SMPx_BITOF
 261:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define ADC_CHANNEL_15_SMP                 (ADC_SMPR2_REGOFFSET | ((15UL) << ADC_CHANNEL_SMPx_BITOF
 262:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define ADC_CHANNEL_16_SMP                 (ADC_SMPR2_REGOFFSET | ((18UL) << ADC_CHANNEL_SMPx_BITOF
 263:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define ADC_CHANNEL_17_SMP                 (ADC_SMPR2_REGOFFSET | ((21UL) << ADC_CHANNEL_SMPx_BITOF
 264:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define ADC_CHANNEL_18_SMP                 (ADC_SMPR2_REGOFFSET | ((24UL) << ADC_CHANNEL_SMPx_BITOF
 265:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
 266:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
 267:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /* Internal mask for ADC mode single or differential ended:                   */
 268:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /* To select into literals LL_ADC_SINGLE_ENDED or LL_ADC_SINGLE_DIFFERENTIAL  */
 269:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /* the relevant bits for:                                                     */
 270:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /* (concatenation of multiple bits used in different registers)               */
 271:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /* - ADC calibration: calibration start, calibration factor get or set        */
 272:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /* - ADC channels: set each ADC channel ending mode                           */
 273:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define ADC_SINGLEDIFF_CALIB_START_MASK    (ADC_CR_ADCALDIF)
 274:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define ADC_SINGLEDIFF_CALIB_FACTOR_MASK   (ADC_CALFACT_CALFACT_D | ADC_CALFACT_CALFACT_S)
 275:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define ADC_SINGLEDIFF_CHANNEL_MASK        (ADC_CHANNEL_ID_BITFIELD_MASK) /* Equivalent to ADC_DIFS
 276:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK  (ADC_CALFACT_CALFACT_S_4 | ADC_CALFACT_CALFACT_S_3) /* B
 277:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define ADC_SINGLEDIFF_CALIB_F_BIT_D_MASK   (0x00010000UL)                           /* Selection o
 278:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define ADC_SINGLEDIFF_CALIB_F_BIT_D_POS    (16UL)                                   /* Selection o
 279:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define ADC_SINGLEDIFF_CALIB_F_BIT_D_SHIFT4 (ADC_SINGLEDIFF_CALIB_F_BIT_D_POS - 4UL) /* Shift of bi
 280:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
 281:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /* Internal mask for ADC analog watchdog:                                     */
 282:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /* To select into literals LL_ADC_AWD_CHANNELx_xxx the relevant bits for:     */
 283:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /* (concatenation of multiple bits used in different analog watchdogs,        */
 284:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /* (feature of several watchdogs not available on all STM32 families)).       */
 285:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /* - analog watchdog 1: monitored channel defined by number,                  */
 286:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /*   selection of ADC group (ADC groups regular and-or injected).             */
 287:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /* - analog watchdog 2 and 3: monitored channel defined by bitfield, no       */
 288:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /*   selection on groups.                                                     */
 289:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
 290:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /* Internal register offset for ADC analog watchdog channel configuration */
 291:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define ADC_AWD_CR1_REGOFFSET              (0x00000000UL)
 292:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define ADC_AWD_CR2_REGOFFSET              (0x00100000UL)
 293:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define ADC_AWD_CR3_REGOFFSET              (0x00200000UL)
 294:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
 295:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /* Register offset gap between AWD1 and AWD2-AWD3 configuration registers */
 296:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /* (Set separately as ADC_AWD_CRX_REGOFFSET to spare 32 bits space */
 297:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define ADC_AWD_CR12_REGOFFSETGAP_MASK     (ADC_AWD2CR_AWD2CH_0)
 298:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define ADC_AWD_CR12_REGOFFSETGAP_VAL      (0x00000024UL)
 299:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
 300:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define ADC_AWD_CRX_REGOFFSET_MASK         (ADC_AWD_CR1_REGOFFSET | ADC_AWD_CR2_REGOFFSET | ADC_AWD
 301:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
 302:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define ADC_AWD_CR1_CHANNEL_MASK           (ADC_CFGR_AWD1CH | ADC_CFGR_JAWD1EN | ADC_CFGR_AWD1EN | 
 303:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define ADC_AWD_CR23_CHANNEL_MASK          (ADC_AWD2CR_AWD2CH)
 304:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define ADC_AWD_CR_ALL_CHANNEL_MASK        (ADC_AWD_CR1_CHANNEL_MASK | ADC_AWD_CR23_CHANNEL_MASK)
 305:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
 306:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define ADC_AWD_CRX_REGOFFSET_POS          (20UL) /* Position of bits ADC_AWD_CRx_REGOFFSET in ADC_
 307:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
 308:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /* Internal register offset for ADC analog watchdog threshold configuration */
 309:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define ADC_AWD_TR1_REGOFFSET              (ADC_AWD_CR1_REGOFFSET)
 310:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define ADC_AWD_TR2_REGOFFSET              (ADC_AWD_CR2_REGOFFSET)
 311:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define ADC_AWD_TR3_REGOFFSET              (ADC_AWD_CR3_REGOFFSET)
 312:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define ADC_AWD_TRX_REGOFFSET_MASK         (ADC_AWD_TR1_REGOFFSET | ADC_AWD_TR2_REGOFFSET | ADC_AWD
 313:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define ADC_AWD_TRX_REGOFFSET_POS          (ADC_AWD_CRX_REGOFFSET_POS)     /* Position of bits ADC_
 314:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define ADC_AWD_TRX_BIT_HIGH_MASK          (0x00010000UL)                   /* Selection of 1 bit t
 315:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define ADC_AWD_TRX_BIT_HIGH_POS           (16UL)                           /* Selection of 1 bit t
 316:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define ADC_AWD_TRX_BIT_HIGH_SHIFT4        (ADC_AWD_TRX_BIT_HIGH_POS - 4UL) /* Shift of bit ADC_AWD
ARM GAS  /tmp/ccZ0TYFG.s 			page 7


 317:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
 318:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /* Internal mask for ADC offset:                                              */
 319:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /* Internal register offset for ADC offset number configuration */
 320:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define ADC_OFR1_REGOFFSET                 (0x00000000UL)
 321:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define ADC_OFR2_REGOFFSET                 (0x00000001UL)
 322:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define ADC_OFR3_REGOFFSET                 (0x00000002UL)
 323:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define ADC_OFR4_REGOFFSET                 (0x00000003UL)
 324:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define ADC_OFRx_REGOFFSET_MASK            (ADC_OFR1_REGOFFSET | ADC_OFR2_REGOFFSET | ADC_OFR3_REGO
 325:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
 326:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
 327:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /* ADC registers bits positions */
 328:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define ADC_CFGR_RES_BITOFFSET_POS         (ADC_CFGR_RES_Pos)
 329:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define ADC_CFGR_AWD1SGL_BITOFFSET_POS     (ADC_CFGR_AWD1SGL_Pos)
 330:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define ADC_CFGR_AWD1EN_BITOFFSET_POS      (ADC_CFGR_AWD1EN_Pos)
 331:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define ADC_CFGR_JAWD1EN_BITOFFSET_POS     (ADC_CFGR_JAWD1EN_Pos)
 332:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define ADC_TR1_HT1_BITOFFSET_POS          (ADC_TR1_HT1_Pos)
 333:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
 334:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
 335:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /* ADC registers bits groups */
 336:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define ADC_CR_BITS_PROPERTY_RS            (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JA
 337:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
 338:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
 339:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /* ADC internal channels related definitions */
 340:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /* Internal voltage reference VrefInt */
 341:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define VREFINT_CAL_ADDR                   ((uint16_t*) (0x1FFF75AAUL)) /* Internal voltage referen
 342:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define VREFINT_CAL_VREF                   (3000UL)                     /* Analog voltage reference
 343:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /* Temperature sensor */
 344:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define TEMPSENSOR_CAL1_ADDR               ((uint16_t*) (0x1FFF75A8UL)) /* Internal temperature sen
 345:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define TEMPSENSOR_CAL2_ADDR               ((uint16_t*) (0x1FFF75CAUL)) /* Internal temperature sen
 346:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define TEMPSENSOR_CAL1_TEMP               (30L)                        /* Internal temperature sen
 347:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define TEMPSENSOR_CAL2_TEMP               (110L)                       /* Internal temperature sen
 348:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define TEMPSENSOR_CAL_VREFANALOG          (3000UL)                     /* Analog voltage reference
 349:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
 350:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
 351:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /**
 352:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @}
 353:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
 354:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
 355:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
 356:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /* Private macros ------------------------------------------------------------*/
 357:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /** @defgroup ADC_LL_Private_Macros ADC Private Macros
 358:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @{
 359:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
 360:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
 361:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /**
 362:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @brief  Driver macro reserved for internal use: set a pointer to
 363:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         a register from a register basis from which an offset
 364:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         is applied.
 365:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @param  __REG__ Register basis from which the offset is applied.
 366:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @param  __REG_OFFFSET__ Offset to be applied (unit: number of registers).
 367:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @retval Pointer to register address
 368:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
 369:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define __ADC_PTR_REG_OFFSET(__REG__, __REG_OFFFSET__)                         \
 370:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   ((__IO uint32_t *)((uint32_t) ((uint32_t)(&(__REG__)) + ((__REG_OFFFSET__) << 2UL))))
 371:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
 372:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /**
 373:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @}
ARM GAS  /tmp/ccZ0TYFG.s 			page 8


 374:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
 375:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
 376:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
 377:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /* Exported types ------------------------------------------------------------*/
 378:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #if defined(USE_FULL_LL_DRIVER)
 379:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /** @defgroup ADC_LL_ES_INIT ADC Exported Init structure
 380:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @{
 381:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
 382:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
 383:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /**
 384:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @brief  Structure definition of some features of ADC common parameters
 385:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         and multimode
 386:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         (all ADC instances belonging to the same ADC common instance).
 387:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @note   The setting of these parameters by function @ref LL_ADC_CommonInit()
 388:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         is conditioned to ADC instances state (all ADC instances
 389:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         sharing the same ADC common instance):
 390:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         All ADC instances sharing the same ADC common instance must be
 391:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         disabled.
 392:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
 393:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** typedef struct
 394:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** {
 395:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   uint32_t CommonClock;                 /*!< Set parameter common to several ADC: Clock source and 
 396:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****                                              This parameter can be a value of @ref ADC_LL_EC_COMMON
 397:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****                                              @note On this STM32 serie, if ADC group injected is us
 398:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****                                                    clock ratio constraints between ADC clock and AH
 399:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****                                                    must be respected. Refer to reference manual.
 400:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
 401:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****                                              This feature can be modified afterwards using unitary 
 402:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
 403:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #if defined(ADC_MULTIMODE_SUPPORT)
 404:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   uint32_t Multimode;                   /*!< Set ADC multimode configuration to operate in independ
 405:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****                                              This parameter can be a value of @ref ADC_LL_EC_MULTI_
 406:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
 407:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****                                              This feature can be modified afterwards using unitary 
 408:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
 409:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   uint32_t MultiDMATransfer;            /*!< Set ADC multimode conversion data transfer: no transfe
 410:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****                                              This parameter can be a value of @ref ADC_LL_EC_MULTI_
 411:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
 412:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****                                              This feature can be modified afterwards using unitary 
 413:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
 414:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   uint32_t MultiTwoSamplingDelay;       /*!< Set ADC multimode delay between 2 sampling phases.
 415:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****                                              This parameter can be a value of @ref ADC_LL_EC_MULTI_
 416:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
 417:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****                                              This feature can be modified afterwards using unitary 
 418:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #endif /* ADC_MULTIMODE_SUPPORT */
 419:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
 420:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** } LL_ADC_CommonInitTypeDef;
 421:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
 422:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /**
 423:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @brief  Structure definition of some features of ADC instance.
 424:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @note   These parameters have an impact on ADC scope: ADC instance.
 425:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         Affects both group regular and group injected (availability
 426:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         of ADC group injected depends on STM32 families).
 427:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         Refer to corresponding unitary functions into
 428:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @ref ADC_LL_EF_Configuration_ADC_Instance .
 429:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @note   The setting of these parameters by function @ref LL_ADC_Init()
 430:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         is conditioned to ADC state:
ARM GAS  /tmp/ccZ0TYFG.s 			page 9


 431:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         ADC instance must be disabled.
 432:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         This condition is applied to all ADC features, for efficiency
 433:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         and compatibility over all STM32 families. However, the different
 434:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         features can be set under different ADC state conditions
 435:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         (setting possible with ADC enabled without conversion on going,
 436:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         ADC enabled with conversion on going, ...)
 437:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         Each feature can be updated afterwards with a unitary function
 438:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         and potentially with ADC in a different state than disabled,
 439:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         refer to description of each function for setting
 440:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         conditioned to ADC state.
 441:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
 442:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** typedef struct
 443:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** {
 444:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   uint32_t Resolution;                  /*!< Set ADC resolution.
 445:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****                                              This parameter can be a value of @ref ADC_LL_EC_RESOLU
 446:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
 447:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****                                              This feature can be modified afterwards using unitary 
 448:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
 449:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   uint32_t DataAlignment;               /*!< Set ADC conversion data alignment.
 450:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****                                              This parameter can be a value of @ref ADC_LL_EC_DATA_A
 451:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
 452:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****                                              This feature can be modified afterwards using unitary 
 453:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
 454:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   uint32_t LowPowerMode;                /*!< Set ADC low power mode.
 455:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****                                              This parameter can be a value of @ref ADC_LL_EC_LP_MOD
 456:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
 457:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****                                              This feature can be modified afterwards using unitary 
 458:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
 459:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** } LL_ADC_InitTypeDef;
 460:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
 461:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /**
 462:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @brief  Structure definition of some features of ADC group regular.
 463:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @note   These parameters have an impact on ADC scope: ADC group regular.
 464:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         Refer to corresponding unitary functions into
 465:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @ref ADC_LL_EF_Configuration_ADC_Group_Regular
 466:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         (functions with prefix "REG").
 467:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @note   The setting of these parameters by function @ref LL_ADC_REG_Init()
 468:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         is conditioned to ADC state:
 469:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         ADC instance must be disabled.
 470:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         This condition is applied to all ADC features, for efficiency
 471:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         and compatibility over all STM32 families. However, the different
 472:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         features can be set under different ADC state conditions
 473:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         (setting possible with ADC enabled without conversion on going,
 474:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         ADC enabled with conversion on going, ...)
 475:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         Each feature can be updated afterwards with a unitary function
 476:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         and potentially with ADC in a different state than disabled,
 477:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         refer to description of each function for setting
 478:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         conditioned to ADC state.
 479:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
 480:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** typedef struct
 481:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** {
 482:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   uint32_t TriggerSource;               /*!< Set ADC group regular conversion trigger source: inter
 483:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****                                              This parameter can be a value of @ref ADC_LL_EC_REG_TR
 484:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****                                              @note On this STM32 serie, setting trigger source to e
 485:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****                                                    (default setting for compatibility with some ADC
 486:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****                                                    In case of need to modify trigger edge, use func
 487:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
ARM GAS  /tmp/ccZ0TYFG.s 			page 10


 488:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****                                              This feature can be modified afterwards using unitary 
 489:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
 490:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   uint32_t SequencerLength;             /*!< Set ADC group regular sequencer length.
 491:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****                                              This parameter can be a value of @ref ADC_LL_EC_REG_SE
 492:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
 493:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****                                              This feature can be modified afterwards using unitary 
 494:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
 495:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   uint32_t SequencerDiscont;            /*!< Set ADC group regular sequencer discontinuous mode: se
 496:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****                                              This parameter can be a value of @ref ADC_LL_EC_REG_SE
 497:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****                                              @note This parameter has an effect only if group regul
 498:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****                                                    (scan length of 2 ranks or more).
 499:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
 500:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****                                              This feature can be modified afterwards using unitary 
 501:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
 502:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   uint32_t ContinuousMode;              /*!< Set ADC continuous conversion mode on ADC group regula
 503:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****                                              This parameter can be a value of @ref ADC_LL_EC_REG_CO
 504:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****                                              Note: It is not possible to enable both ADC group regu
 505:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
 506:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****                                              This feature can be modified afterwards using unitary 
 507:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
 508:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   uint32_t DMATransfer;                 /*!< Set ADC group regular conversion data transfer: no tra
 509:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****                                              This parameter can be a value of @ref ADC_LL_EC_REG_DM
 510:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
 511:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****                                              This feature can be modified afterwards using unitary 
 512:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
 513:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   uint32_t Overrun;                     /*!< Set ADC group regular behavior in case of overrun:
 514:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****                                              data preserved or overwritten.
 515:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****                                              This parameter can be a value of @ref ADC_LL_EC_REG_OV
 516:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
 517:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****                                              This feature can be modified afterwards using unitary 
 518:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
 519:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** } LL_ADC_REG_InitTypeDef;
 520:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
 521:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /**
 522:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @brief  Structure definition of some features of ADC group injected.
 523:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @note   These parameters have an impact on ADC scope: ADC group injected.
 524:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         Refer to corresponding unitary functions into
 525:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @ref ADC_LL_EF_Configuration_ADC_Group_Regular
 526:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         (functions with prefix "INJ").
 527:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @note   The setting of these parameters by function @ref LL_ADC_INJ_Init()
 528:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         is conditioned to ADC state:
 529:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         ADC instance must be disabled.
 530:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         This condition is applied to all ADC features, for efficiency
 531:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         and compatibility over all STM32 families. However, the different
 532:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         features can be set under different ADC state conditions
 533:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         (setting possible with ADC enabled without conversion on going,
 534:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         ADC enabled with conversion on going, ...)
 535:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         Each feature can be updated afterwards with a unitary function
 536:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         and potentially with ADC in a different state than disabled,
 537:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         refer to description of each function for setting
 538:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         conditioned to ADC state.
 539:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
 540:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** typedef struct
 541:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** {
 542:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   uint32_t TriggerSource;               /*!< Set ADC group injected conversion trigger source: inte
 543:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****                                              This parameter can be a value of @ref ADC_LL_EC_INJ_TR
 544:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****                                              @note On this STM32 serie, setting trigger source to e
ARM GAS  /tmp/ccZ0TYFG.s 			page 11


 545:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****                                                    (default setting for compatibility with some ADC
 546:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****                                                    In case of need to modify trigger edge, use func
 547:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
 548:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****                                              This feature can be modified afterwards using unitary 
 549:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
 550:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   uint32_t SequencerLength;             /*!< Set ADC group injected sequencer length.
 551:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****                                              This parameter can be a value of @ref ADC_LL_EC_INJ_SE
 552:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
 553:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****                                              This feature can be modified afterwards using unitary 
 554:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
 555:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   uint32_t SequencerDiscont;            /*!< Set ADC group injected sequencer discontinuous mode: s
 556:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****                                              This parameter can be a value of @ref ADC_LL_EC_INJ_SE
 557:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****                                              @note This parameter has an effect only if group injec
 558:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****                                                    (scan length of 2 ranks or more).
 559:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
 560:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****                                              This feature can be modified afterwards using unitary 
 561:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
 562:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   uint32_t TrigAuto;                    /*!< Set ADC group injected conversion trigger: independent
 563:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****                                              This parameter can be a value of @ref ADC_LL_EC_INJ_TR
 564:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****                                              Note: This parameter must be set to set to independent
 565:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
 566:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****                                              This feature can be modified afterwards using unitary 
 567:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
 568:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** } LL_ADC_INJ_InitTypeDef;
 569:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
 570:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /**
 571:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @}
 572:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
 573:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #endif /* USE_FULL_LL_DRIVER */
 574:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
 575:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /* Exported constants --------------------------------------------------------*/
 576:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /** @defgroup ADC_LL_Exported_Constants ADC Exported Constants
 577:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @{
 578:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
 579:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
 580:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /** @defgroup ADC_LL_EC_FLAG ADC flags
 581:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @brief    Flags defines which can be used with LL_ADC_ReadReg function
 582:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @{
 583:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
 584:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_FLAG_ADRDY                  ADC_ISR_ADRDY      /*!< ADC flag ADC instance ready */
 585:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_FLAG_EOC                    ADC_ISR_EOC        /*!< ADC flag ADC group regular end o
 586:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_FLAG_EOS                    ADC_ISR_EOS        /*!< ADC flag ADC group regular end o
 587:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_FLAG_OVR                    ADC_ISR_OVR        /*!< ADC flag ADC group regular overr
 588:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_FLAG_EOSMP                  ADC_ISR_EOSMP      /*!< ADC flag ADC group regular end o
 589:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_FLAG_JEOC                   ADC_ISR_JEOC       /*!< ADC flag ADC group injected end 
 590:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_FLAG_JEOS                   ADC_ISR_JEOS       /*!< ADC flag ADC group injected end 
 591:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_FLAG_JQOVF                  ADC_ISR_JQOVF      /*!< ADC flag ADC group injected cont
 592:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_FLAG_AWD1                   ADC_ISR_AWD1       /*!< ADC flag ADC analog watchdog 1 *
 593:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_FLAG_AWD2                   ADC_ISR_AWD2       /*!< ADC flag ADC analog watchdog 2 *
 594:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_FLAG_AWD3                   ADC_ISR_AWD3       /*!< ADC flag ADC analog watchdog 3 *
 595:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #if defined(ADC_MULTIMODE_SUPPORT)
 596:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_FLAG_ADRDY_MST              ADC_CSR_ADRDY_MST  /*!< ADC flag ADC multimode master in
 597:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_FLAG_ADRDY_SLV              ADC_CSR_ADRDY_SLV  /*!< ADC flag ADC multimode slave ins
 598:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_FLAG_EOC_MST                ADC_CSR_EOC_MST    /*!< ADC flag ADC multimode master gr
 599:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_FLAG_EOC_SLV                ADC_CSR_EOC_SLV    /*!< ADC flag ADC multimode slave gro
 600:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_FLAG_EOS_MST                ADC_CSR_EOS_MST    /*!< ADC flag ADC multimode master gr
 601:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_FLAG_EOS_SLV                ADC_CSR_EOS_SLV    /*!< ADC flag ADC multimode slave gro
ARM GAS  /tmp/ccZ0TYFG.s 			page 12


 602:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_FLAG_OVR_MST                ADC_CSR_OVR_MST    /*!< ADC flag ADC multimode master gr
 603:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_FLAG_OVR_SLV                ADC_CSR_OVR_SLV    /*!< ADC flag ADC multimode slave gro
 604:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_FLAG_EOSMP_MST              ADC_CSR_EOSMP_MST  /*!< ADC flag ADC multimode master gr
 605:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_FLAG_EOSMP_SLV              ADC_CSR_EOSMP_SLV  /*!< ADC flag ADC multimode slave gro
 606:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_FLAG_JEOC_MST               ADC_CSR_JEOC_MST   /*!< ADC flag ADC multimode master gr
 607:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_FLAG_JEOC_SLV               ADC_CSR_JEOC_SLV   /*!< ADC flag ADC multimode slave gro
 608:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_FLAG_JEOS_MST               ADC_CSR_JEOS_MST   /*!< ADC flag ADC multimode master gr
 609:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_FLAG_JEOS_SLV               ADC_CSR_JEOS_SLV   /*!< ADC flag ADC multimode slave gro
 610:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_FLAG_JQOVF_MST              ADC_CSR_JQOVF_MST  /*!< ADC flag ADC multimode master gr
 611:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_FLAG_JQOVF_SLV              ADC_CSR_JQOVF_SLV  /*!< ADC flag ADC multimode slave gro
 612:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_FLAG_AWD1_MST               ADC_CSR_AWD1_MST   /*!< ADC flag ADC multimode master an
 613:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_FLAG_AWD1_SLV               ADC_CSR_AWD1_SLV   /*!< ADC flag ADC multimode slave ana
 614:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_FLAG_AWD2_MST               ADC_CSR_AWD2_MST   /*!< ADC flag ADC multimode master an
 615:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_FLAG_AWD2_SLV               ADC_CSR_AWD2_SLV   /*!< ADC flag ADC multimode slave ana
 616:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_FLAG_AWD3_MST               ADC_CSR_AWD3_MST   /*!< ADC flag ADC multimode master an
 617:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_FLAG_AWD3_SLV               ADC_CSR_AWD3_SLV   /*!< ADC flag ADC multimode slave ana
 618:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #endif
 619:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /**
 620:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @}
 621:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
 622:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
 623:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /** @defgroup ADC_LL_EC_IT ADC interruptions for configuration (interruption enable or disable)
 624:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @brief    IT defines which can be used with LL_ADC_ReadReg and  LL_ADC_WriteReg functions
 625:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @{
 626:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
 627:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_IT_ADRDY                    ADC_IER_ADRDYIE    /*!< ADC interruption ADC instance re
 628:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_IT_EOC                      ADC_IER_EOCIE      /*!< ADC interruption ADC group regul
 629:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_IT_EOS                      ADC_IER_EOSIE      /*!< ADC interruption ADC group regul
 630:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_IT_OVR                      ADC_IER_OVRIE      /*!< ADC interruption ADC group regul
 631:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_IT_EOSMP                    ADC_IER_EOSMPIE    /*!< ADC interruption ADC group regul
 632:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_IT_JEOC                     ADC_IER_JEOCIE     /*!< ADC interruption ADC group injec
 633:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_IT_JEOS                     ADC_IER_JEOSIE     /*!< ADC interruption ADC group injec
 634:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_IT_JQOVF                    ADC_IER_JQOVFIE    /*!< ADC interruption ADC group injec
 635:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_IT_AWD1                     ADC_IER_AWD1IE     /*!< ADC interruption ADC analog watc
 636:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_IT_AWD2                     ADC_IER_AWD2IE     /*!< ADC interruption ADC analog watc
 637:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_IT_AWD3                     ADC_IER_AWD3IE     /*!< ADC interruption ADC analog watc
 638:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /**
 639:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @}
 640:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
 641:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
 642:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /** @defgroup ADC_LL_EC_REGISTERS  ADC registers compliant with specific purpose
 643:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @{
 644:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
 645:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /* List of ADC registers intended to be used (most commonly) with             */
 646:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /* DMA transfer.                                                              */
 647:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /* Refer to function @ref LL_ADC_DMA_GetRegAddr().                            */
 648:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_DMA_REG_REGULAR_DATA          (0x00000000UL) /* ADC group regular conversion data re
 649:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #if defined(ADC_MULTIMODE_SUPPORT)
 650:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_DMA_REG_REGULAR_DATA_MULTI    (0x00000001UL) /* ADC group regular conversion data re
 651:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #endif
 652:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /**
 653:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @}
 654:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
 655:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
 656:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /** @defgroup ADC_LL_EC_COMMON_CLOCK_SOURCE  ADC common - Clock source
 657:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @{
 658:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
ARM GAS  /tmp/ccZ0TYFG.s 			page 13


 659:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_CLOCK_SYNC_PCLK_DIV1        (ADC_CCR_CKMODE_0)                                    /*
 660:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_CLOCK_SYNC_PCLK_DIV2        (ADC_CCR_CKMODE_1                   )                 /*
 661:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_CLOCK_SYNC_PCLK_DIV4        (ADC_CCR_CKMODE_1 | ADC_CCR_CKMODE_0)                 /*
 662:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_CLOCK_ASYNC_DIV1            (0x00000000UL)                                        /*
 663:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_CLOCK_ASYNC_DIV2            (ADC_CCR_PRESC_0)                                     /*
 664:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_CLOCK_ASYNC_DIV4            (ADC_CCR_PRESC_1                  )                   /*
 665:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_CLOCK_ASYNC_DIV6            (ADC_CCR_PRESC_1 | ADC_CCR_PRESC_0)                   /*
 666:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_CLOCK_ASYNC_DIV8            (ADC_CCR_PRESC_2                                    ) /*
 667:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_CLOCK_ASYNC_DIV10           (ADC_CCR_PRESC_2                   | ADC_CCR_PRESC_0) /*
 668:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_CLOCK_ASYNC_DIV12           (ADC_CCR_PRESC_2 | ADC_CCR_PRESC_1                  ) /*
 669:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_CLOCK_ASYNC_DIV16           (ADC_CCR_PRESC_2 | ADC_CCR_PRESC_1 | ADC_CCR_PRESC_0) /*
 670:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_CLOCK_ASYNC_DIV32           (ADC_CCR_PRESC_3)                                     /*
 671:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_CLOCK_ASYNC_DIV64           (ADC_CCR_PRESC_3 | ADC_CCR_PRESC_0)                   /*
 672:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_CLOCK_ASYNC_DIV128          (ADC_CCR_PRESC_3 | ADC_CCR_PRESC_1)                   /*
 673:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_CLOCK_ASYNC_DIV256          (ADC_CCR_PRESC_3 | ADC_CCR_PRESC_1 | ADC_CCR_PRESC_0) /*
 674:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /**
 675:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @}
 676:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
 677:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
 678:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /** @defgroup ADC_LL_EC_COMMON_PATH_INTERNAL  ADC common - Measurement path to internal channels
 679:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @{
 680:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
 681:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /* Note: Other measurement paths to internal channels may be available        */
 682:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /*       (connections to other peripherals).                                  */
 683:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /*       If they are not listed below, they do not require any specific       */
 684:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /*       path enable. In this case, Access to measurement path is done        */
 685:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /*       only by selecting the corresponding ADC internal channel.            */
 686:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_PATH_INTERNAL_NONE          (0x00000000UL)         /*!< ADC measurement pathes all d
 687:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_PATH_INTERNAL_VREFINT       (ADC_CCR_VREFEN)       /*!< ADC measurement path to inte
 688:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_PATH_INTERNAL_TEMPSENSOR    (ADC_CCR_VSENSESEL)    /*!< ADC measurement path to inte
 689:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_PATH_INTERNAL_VBAT          (ADC_CCR_VBATSEL)      /*!< ADC measurement path to inte
 690:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /**
 691:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @}
 692:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
 693:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
 694:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /** @defgroup ADC_LL_EC_RESOLUTION  ADC instance - Resolution
 695:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @{
 696:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
 697:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_RESOLUTION_12B              (0x00000000UL)                      /*!< ADC resolution 
 698:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_RESOLUTION_10B              (                 ADC_CFGR_RES_0)   /*!< ADC resolution 
 699:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_RESOLUTION_8B               (ADC_CFGR_RES_1                 )   /*!< ADC resolution 
 700:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_RESOLUTION_6B               (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)   /*!< ADC resolution 
 701:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /**
 702:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @}
 703:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
 704:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
 705:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /** @defgroup ADC_LL_EC_DATA_ALIGN  ADC instance - Data alignment
 706:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @{
 707:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
 708:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_DATA_ALIGN_RIGHT            (0x00000000UL)         /*!< ADC conversion data alignmen
 709:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_DATA_ALIGN_LEFT             (ADC_CFGR_ALIGN)       /*!< ADC conversion data alignmen
 710:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /**
 711:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @}
 712:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
 713:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
 714:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /** @defgroup ADC_LL_EC_LP_MODE  ADC instance - Low power mode
 715:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @{
ARM GAS  /tmp/ccZ0TYFG.s 			page 14


 716:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
 717:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_LP_MODE_NONE                (0x00000000UL)                      /*!< No ADC low powe
 718:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_LP_AUTOWAIT                 (ADC_CFGR_AUTDLY)                   /*!< ADC low power m
 719:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /**
 720:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @}
 721:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
 722:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
 723:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /** @defgroup ADC_LL_EC_OFFSET_NB  ADC instance - Offset number
 724:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @{
 725:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
 726:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_OFFSET_1                    ADC_OFR1_REGOFFSET /*!< ADC offset number 1: ADC channel
 727:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_OFFSET_2                    ADC_OFR2_REGOFFSET /*!< ADC offset number 2: ADC channel
 728:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_OFFSET_3                    ADC_OFR3_REGOFFSET /*!< ADC offset number 3: ADC channel
 729:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_OFFSET_4                    ADC_OFR4_REGOFFSET /*!< ADC offset number 4: ADC channel
 730:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /**
 731:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @}
 732:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
 733:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
 734:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /** @defgroup ADC_LL_EC_OFFSET_STATE ADC instance - Offset state
 735:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @{
 736:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
 737:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_OFFSET_DISABLE              (0x00000000UL)         /*!< ADC offset disabled (among A
 738:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_OFFSET_ENABLE               (ADC_OFR1_OFFSET1_EN)  /*!< ADC offset enabled (among AD
 739:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /**
 740:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @}
 741:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
 742:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
 743:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /** @defgroup ADC_LL_EC_OFFSET_SIGN ADC instance - Offset sign
 744:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @{
 745:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
 746:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_OFFSET_SIGN_NEGATIVE        (0x00000000UL)       /*!< ADC offset is negative (among 
 747:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_OFFSET_SIGN_POSITIVE        (ADC_OFR1_OFFSETPOS) /*!< ADC offset is positive (among 
 748:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /**
 749:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @}
 750:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
 751:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
 752:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /** @defgroup ADC_LL_EC_OFFSET_SATURATION ADC instance - Offset saturation mode
 753:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @{
 754:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
 755:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_OFFSET_SATURATION_DISABLE   (0x00000000UL)          /*!< ADC offset saturation is di
 756:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_OFFSET_SATURATION_ENABLE    (ADC_OFR1_SATEN)        /*!< ADC offset saturation is en
 757:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /**
 758:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @}
 759:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
 760:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /** @defgroup ADC_LL_EC_GROUPS  ADC instance - Groups
 761:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @{
 762:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
 763:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_GROUP_REGULAR               (0x00000001UL) /*!< ADC group regular (available on all 
 764:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_GROUP_INJECTED              (0x00000002UL) /*!< ADC group injected (not available on
 765:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_GROUP_REGULAR_INJECTED      (0x00000003UL) /*!< ADC both groups regular and injected
 766:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /**
 767:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @}
 768:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
 769:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
 770:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /** @defgroup ADC_LL_EC_CHANNEL  ADC instance - Channel number
 771:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @{
 772:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
ARM GAS  /tmp/ccZ0TYFG.s 			page 15


 773:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_CHANNEL_0                   (ADC_CHANNEL_0_NUMBER  | ADC_CHANNEL_0_SMP  | ADC_CHANNE
 774:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_CHANNEL_1                   (ADC_CHANNEL_1_NUMBER  | ADC_CHANNEL_1_SMP  | ADC_CHANNE
 775:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_CHANNEL_2                   (ADC_CHANNEL_2_NUMBER  | ADC_CHANNEL_2_SMP  | ADC_CHANNE
 776:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_CHANNEL_3                   (ADC_CHANNEL_3_NUMBER  | ADC_CHANNEL_3_SMP  | ADC_CHANNE
 777:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_CHANNEL_4                   (ADC_CHANNEL_4_NUMBER  | ADC_CHANNEL_4_SMP  | ADC_CHANNE
 778:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_CHANNEL_5                   (ADC_CHANNEL_5_NUMBER  | ADC_CHANNEL_5_SMP  | ADC_CHANNE
 779:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_CHANNEL_6                   (ADC_CHANNEL_6_NUMBER  | ADC_CHANNEL_6_SMP  | ADC_CHANNE
 780:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_CHANNEL_7                   (ADC_CHANNEL_7_NUMBER  | ADC_CHANNEL_7_SMP  | ADC_CHANNE
 781:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_CHANNEL_8                   (ADC_CHANNEL_8_NUMBER  | ADC_CHANNEL_8_SMP  | ADC_CHANNE
 782:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_CHANNEL_9                   (ADC_CHANNEL_9_NUMBER  | ADC_CHANNEL_9_SMP  | ADC_CHANNE
 783:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_CHANNEL_10                  (ADC_CHANNEL_10_NUMBER | ADC_CHANNEL_10_SMP | ADC_CHANNE
 784:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_CHANNEL_11                  (ADC_CHANNEL_11_NUMBER | ADC_CHANNEL_11_SMP | ADC_CHANNE
 785:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_CHANNEL_12                  (ADC_CHANNEL_12_NUMBER | ADC_CHANNEL_12_SMP | ADC_CHANNE
 786:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_CHANNEL_13                  (ADC_CHANNEL_13_NUMBER | ADC_CHANNEL_13_SMP | ADC_CHANNE
 787:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_CHANNEL_14                  (ADC_CHANNEL_14_NUMBER | ADC_CHANNEL_14_SMP | ADC_CHANNE
 788:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_CHANNEL_15                  (ADC_CHANNEL_15_NUMBER | ADC_CHANNEL_15_SMP | ADC_CHANNE
 789:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_CHANNEL_16                  (ADC_CHANNEL_16_NUMBER | ADC_CHANNEL_16_SMP | ADC_CHANNE
 790:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_CHANNEL_17                  (ADC_CHANNEL_17_NUMBER | ADC_CHANNEL_17_SMP | ADC_CHANNE
 791:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_CHANNEL_18                  (ADC_CHANNEL_18_NUMBER | ADC_CHANNEL_18_SMP | ADC_CHANNE
 792:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_CHANNEL_VREFINT             (LL_ADC_CHANNEL_18 | ADC_CHANNEL_ID_INTERNAL_CH) /*!< AD
 793:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_CHANNEL_TEMPSENSOR_ADC1     (LL_ADC_CHANNEL_16 | ADC_CHANNEL_ID_INTERNAL_CH) /*!< AD
 794:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_CHANNEL_TEMPSENSOR_ADC5     (LL_ADC_CHANNEL_4  | ADC_CHANNEL_ID_INTERNAL_CH) /*!< AD
 795:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_CHANNEL_VBAT                (LL_ADC_CHANNEL_17 | ADC_CHANNEL_ID_INTERNAL_CH) /*!< AD
 796:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_CHANNEL_VOPAMP1             (LL_ADC_CHANNEL_13 | ADC_CHANNEL_ID_INTERNAL_CH) /*!< AD
 797:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_CHANNEL_VOPAMP2             (LL_ADC_CHANNEL_16 | ADC_CHANNEL_ID_INTERNAL_CH | ADC_CH
 798:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_CHANNEL_VOPAMP3_ADC2        (LL_ADC_CHANNEL_18 | ADC_CHANNEL_ID_INTERNAL_CH | ADC_CH
 799:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_CHANNEL_VOPAMP3_ADC3        (LL_ADC_CHANNEL_13 | ADC_CHANNEL_ID_INTERNAL_CH | ADC_CH
 800:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_CHANNEL_VOPAMP4             (LL_ADC_CHANNEL_5  | ADC_CHANNEL_ID_INTERNAL_CH) /*!< AD
 801:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_CHANNEL_VOPAMP5             (LL_ADC_CHANNEL_3  | ADC_CHANNEL_ID_INTERNAL_CH) /*!< AD
 802:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_CHANNEL_VOPAMP6             (LL_ADC_CHANNEL_17 | ADC_CHANNEL_ID_INTERNAL_CH | ADC_CH
 803:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /**
 804:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @}
 805:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
 806:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
 807:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /** @defgroup ADC_LL_EC_REG_TRIGGER_SOURCE  ADC group regular - Trigger source
 808:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @{
 809:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
 810:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_REG_TRIG_SOFTWARE           (0x00000000UL)                                          
 811:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****                                            ADC group regular conversion trigger internal: SW start.
 812:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_REG_TRIG_EXT_TIM1_TRGO      (ADC_CFGR_EXTSEL_3 | ADC_CFGR_EXTSEL_0 | ADC_REG_TRIG_EX
 813:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****                                            ADC group regular conversion trigger from external perip
 814:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_REG_TRIG_EXT_TIM1_TRGO2     (ADC_CFGR_EXTSEL_3 | ADC_CFGR_EXTSEL_1 | ADC_REG_TRIG_EX
 815:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****                                            ADC group regular conversion trigger from external perip
 816:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_REG_TRIG_EXT_TIM1_CH1       (ADC_REG_TRIG_EXT_EDGE_DEFAULT)                         
 817:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****                                            ADC group regular conversion trigger from external perip
 818:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****                                            Note: On this STM32 serie, this trigger is available onl
 819:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_REG_TRIG_EXT_TIM1_CH2       (ADC_CFGR_EXTSEL_0 | ADC_REG_TRIG_EXT_EDGE_DEFAULT)     
 820:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****                                            ADC group regular conversion trigger from external perip
 821:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****                                            Note: On this STM32 serie, this trigger is available onl
 822:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_REG_TRIG_EXT_TIM1_CH3       (ADC_CFGR_EXTSEL_1 | ADC_REG_TRIG_EXT_EDGE_DEFAULT)     
 823:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****                                            ADC group regular conversion trigger from external perip
 824:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_REG_TRIG_EXT_TIM2_TRGO      (ADC_CFGR_EXTSEL_3 | ADC_CFGR_EXTSEL_1 | ADC_CFGR_EXTSEL
 825:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****                                            ADC group regular conversion trigger from external perip
 826:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_REG_TRIG_EXT_TIM2_CH1       (ADC_CFGR_EXTSEL_3 | ADC_CFGR_EXTSEL_2 | ADC_CFGR_EXTSEL
 827:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****                                            ADC group regular conversion trigger from external perip
 828:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****                                            Note: On this STM32 serie, this trigger is available onl
 829:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_REG_TRIG_EXT_TIM2_CH2       (ADC_CFGR_EXTSEL_1 | ADC_CFGR_EXTSEL_0 | ADC_REG_TRIG_EX
ARM GAS  /tmp/ccZ0TYFG.s 			page 16


 830:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****                                            ADC group regular conversion trigger from external perip
 831:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****                                            Note: On this STM32 serie, this trigger is available onl
 832:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_REG_TRIG_EXT_TIM2_CH3       (ADC_CFGR_EXTSEL_0 | ADC_REG_TRIG_EXT_EDGE_DEFAULT)     
 833:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****                                            ADC group regular conversion trigger from external perip
 834:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****                                            Note: On this STM32 serie, this trigger is available onl
 835:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_REG_TRIG_EXT_TIM3_TRGO      (ADC_CFGR_EXTSEL_2 | ADC_REG_TRIG_EXT_EDGE_DEFAULT)     
 836:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****                                            ADC group regular conversion trigger from external perip
 837:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_REG_TRIG_EXT_TIM3_CH1       (ADC_REG_TRIG_EXT_EDGE_DEFAULT)                         
 838:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****                                            ADC group regular conversion trigger from external perip
 839:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****                                            Note: On this STM32 serie, this trigger is available onl
 840:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_REG_TRIG_EXT_TIM3_CH4       (ADC_CFGR_EXTSEL_3 | ADC_CFGR_EXTSEL_2 | ADC_CFGR_EXTSEL
 841:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****                                            ADC group regular conversion trigger from external perip
 842:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****                                            Note: On this STM32 serie, this trigger is available onl
 843:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_REG_TRIG_EXT_TIM4_TRGO      (ADC_CFGR_EXTSEL_3 | ADC_CFGR_EXTSEL_2 | ADC_REG_TRIG_EX
 844:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****                                            ADC group regular conversion trigger from external perip
 845:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_REG_TRIG_EXT_TIM4_CH1       (ADC_CFGR_EXTSEL_2 | ADC_CFGR_EXTSEL_1 | ADC_REG_TRIG_EX
 846:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****                                            ADC group regular conversion trigger from external perip
 847:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****                                            Note: On this STM32 serie, this trigger is available onl
 848:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_REG_TRIG_EXT_TIM4_CH4       (ADC_CFGR_EXTSEL_2 | ADC_CFGR_EXTSEL_0 | ADC_REG_TRIG_EX
 849:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****                                            ADC group regular conversion trigger from external perip
 850:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****                                            Note: On this STM32 serie, this trigger is available onl
 851:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_REG_TRIG_EXT_TIM6_TRGO      (ADC_CFGR_EXTSEL_3 | ADC_CFGR_EXTSEL_2 | ADC_CFGR_EXTSEL
 852:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****                                            ADC group regular conversion trigger from external perip
 853:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_REG_TRIG_EXT_TIM7_TRGO      (ADC_CFGR_EXTSEL_4 | ADC_CFGR_EXTSEL_3 | ADC_CFGR_EXTSEL
 854:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****                                            ADC group regular conversion trigger from external perip
 855:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_REG_TRIG_EXT_TIM8_TRGO      (ADC_CFGR_EXTSEL_2 | ADC_CFGR_EXTSEL_1 | ADC_CFGR_EXTSEL
 856:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****                                            ADC group regular conversion trigger from external perip
 857:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_REG_TRIG_EXT_TIM8_TRGO2     (ADC_CFGR_EXTSEL_3 | ADC_REG_TRIG_EXT_EDGE_DEFAULT)     
 858:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****                                            ADC group regular conversion trigger from external perip
 859:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_REG_TRIG_EXT_TIM8_CH1       (ADC_CFGR_EXTSEL_1 | ADC_CFGR_EXTSEL_0 | ADC_REG_TRIG_EX
 860:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****                                            ADC group regular conversion trigger from external perip
 861:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****                                            Note: On this STM32 serie, this trigger is available onl
 862:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_REG_TRIG_EXT_TIM15_TRGO     (ADC_CFGR_EXTSEL_3 | ADC_CFGR_EXTSEL_2 | ADC_CFGR_EXTSEL
 863:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****                                            ADC group regular conversion trigger from external perip
 864:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_REG_TRIG_EXT_TIM20_TRGO     (ADC_CFGR_EXTSEL_4 | ADC_REG_TRIG_EXT_EDGE_DEFAULT)     
 865:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****                                            ADC group regular conversion trigger from external perip
 866:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****                                            Note: On this STM32 serie, TIM20 is not available on all
 867:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_REG_TRIG_EXT_TIM20_TRGO2    (ADC_CFGR_EXTSEL_4 | ADC_CFGR_EXTSEL_0 | ADC_REG_TRIG_EX
 868:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****                                            ADC group regular conversion trigger from external perip
 869:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****                                            Note: On this STM32 serie, TIM20 is not available on all
 870:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_REG_TRIG_EXT_TIM20_CH1      (ADC_CFGR_EXTSEL_4 | ADC_CFGR_EXTSEL_1 | ADC_REG_TRIG_EX
 871:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****                                            ADC group regular conversion trigger from external perip
 872:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****                                            Note: On this STM32 serie, TIM20 is not available on all
 873:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_REG_TRIG_EXT_TIM20_CH2      (ADC_CFGR_EXTSEL_4 | ADC_CFGR_EXTSEL_1 | ADC_CFGR_EXTSEL
 874:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****                                            ADC group regular conversion trigger from external perip
 875:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****                                            Note: On this STM32 serie, this trigger is available onl
 876:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_REG_TRIG_EXT_TIM20_CH3      (ADC_CFGR_EXTSEL_4 | ADC_CFGR_EXTSEL_2 | ADC_REG_TRIG_EX
 877:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****                                            ADC group regular conversion trigger from external perip
 878:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****                                            Note: On this STM32 serie, this trigger is available onl
 879:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_REG_TRIG_EXT_HRTIM_TRG1     (ADC_CFGR_EXTSEL_4 | ADC_CFGR_EXTSEL_2 | ADC_CFGR_EXTSEL
 880:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****                                            ADC group regular conversion trigger from external perip
 881:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****                                            Note: On this STM32 serie, HRTIM is not available on all
 882:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_REG_TRIG_EXT_HRTIM_TRG2     (ADC_CFGR_EXTSEL_4 | ADC_CFGR_EXTSEL_1 | ADC_CFGR_EXTSEL
 883:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****                                            ADC group regular conversion trigger from external perip
 884:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****                                            Note: On this STM32 serie, this trigger is available onl
 885:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_REG_TRIG_EXT_HRTIM_TRG3     (ADC_CFGR_EXTSEL_4 | ADC_CFGR_EXTSEL_2 | ADC_CFGR_EXTSEL
 886:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****                                            ADC group regular conversion trigger from external perip
ARM GAS  /tmp/ccZ0TYFG.s 			page 17


 887:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****                                            Note: On this STM32 serie, HRTIM is not available on all
 888:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_REG_TRIG_EXT_HRTIM_TRG4     (ADC_CFGR_EXTSEL_4 | ADC_CFGR_EXTSEL_2 | ADC_REG_TRIG_EX
 889:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****                                            ADC group regular conversion trigger from external perip
 890:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****                                            Note: On this STM32 serie, this trigger is available onl
 891:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_REG_TRIG_EXT_HRTIM_TRG5     (ADC_CFGR_EXTSEL_4 | ADC_CFGR_EXTSEL_2 | ADC_CFGR_EXTSEL
 892:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****                                            ADC group regular conversion trigger from external perip
 893:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****                                            Note: On this STM32 serie, HRTIM is not available on all
 894:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_REG_TRIG_EXT_HRTIM_TRG6     (ADC_CFGR_EXTSEL_4 | ADC_CFGR_EXTSEL_3 | ADC_REG_TRIG_EX
 895:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****                                            ADC group regular conversion trigger from external perip
 896:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****                                            Note: On this STM32 serie, HRTIM is not available on all
 897:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_REG_TRIG_EXT_HRTIM_TRG7     (ADC_CFGR_EXTSEL_4 | ADC_CFGR_EXTSEL_3 | ADC_CFGR_EXTSEL
 898:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****                                            ADC group regular conversion trigger from external perip
 899:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****                                            Note: On this STM32 serie, HRTIM is not available on all
 900:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_REG_TRIG_EXT_HRTIM_TRG8     (ADC_CFGR_EXTSEL_4 | ADC_CFGR_EXTSEL_3 | ADC_CFGR_EXTSEL
 901:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****                                            ADC group regular conversion trigger from external perip
 902:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****                                            Note: On this STM32 serie, HRTIM is not available on all
 903:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_REG_TRIG_EXT_HRTIM_TRG9     (ADC_CFGR_EXTSEL_4 | ADC_CFGR_EXTSEL_3 | ADC_CFGR_EXTSEL
 904:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****                                            ADC group regular conversion trigger from external perip
 905:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****                                            Note: On this STM32 serie, HRTIM is not available on all
 906:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_REG_TRIG_EXT_HRTIM_TRG10    (ADC_CFGR_EXTSEL_4 | ADC_CFGR_EXTSEL_3 | ADC_CFGR_EXTSEL
 907:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****                                            ADC group regular conversion trigger from external perip
 908:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****                                            Note: On this STM32 serie, HRTIM is not available on all
 909:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_REG_TRIG_EXT_EXTI_LINE11    (ADC_CFGR_EXTSEL_2 | ADC_CFGR_EXTSEL_1 | ADC_REG_TRIG_EX
 910:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****                                            ADC group regular conversion trigger from external perip
 911:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****                                            Note: On this STM32 serie, this trigger is available onl
 912:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_REG_TRIG_EXT_EXTI_LINE2     (ADC_CFGR_EXTSEL_2 | ADC_CFGR_EXTSEL_0 | ADC_REG_TRIG_EX
 913:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****                                            ADC group regular conversion trigger from external perip
 914:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****                                            Note: On this STM32 serie, this trigger is available onl
 915:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_REG_TRIG_EXT_LPTIM_OUT      (ADC_CFGR_EXTSEL_4 | ADC_CFGR_EXTSEL_3 | ADC_CFGR_EXTSEL
 916:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****                                            ADC group regular conversion trigger from external perip
 917:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /**
 918:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @}
 919:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
 920:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
 921:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /** @defgroup ADC_LL_EC_REG_TRIGGER_EDGE  ADC group regular - Trigger edge
 922:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @{
 923:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
 924:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_REG_TRIG_EXT_RISING         (                   ADC_CFGR_EXTEN_0)   /*!< ADC group r
 925:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_REG_TRIG_EXT_FALLING        (ADC_CFGR_EXTEN_1                   )   /*!< ADC group r
 926:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_REG_TRIG_EXT_RISINGFALLING  (ADC_CFGR_EXTEN_1 | ADC_CFGR_EXTEN_0)   /*!< ADC group r
 927:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /**
 928:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @}
 929:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
 930:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
 931:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /** @defgroup ADC_LL_EC_REG_SAMPLING_MODE  ADC group regular - Sampling mode
 932:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @{
 933:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
 934:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_REG_SAMPLING_MODE_NORMAL               (0x00000000UL)       /*!< ADC conversions sam
 935:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_REG_SAMPLING_MODE_BULB                 (ADC_CFGR2_BULB)     /*!< ADC conversions sam
 936:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****                                                                                 Note: First convers
 937:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_REG_SAMPLING_MODE_TRIGGER_CONTROLED    (ADC_CFGR2_SMPTRIG)  /*!< ADC conversions sam
 938:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****                                                                                  Trigger rising edg
 939:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****                                                                                  Trigger falling ed
 940:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /**
 941:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @}
 942:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
 943:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
ARM GAS  /tmp/ccZ0TYFG.s 			page 18


 944:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /** @defgroup ADC_LL_EC_REG_CONTINUOUS_MODE  ADC group regular - Continuous mode
 945:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @{
 946:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
 947:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_REG_CONV_SINGLE             (0x00000000UL)          /*!< ADC conversions are perform
 948:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_REG_CONV_CONTINUOUS         (ADC_CFGR_CONT)         /*!< ADC conversions are perform
 949:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /**
 950:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @}
 951:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
 952:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
 953:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /** @defgroup ADC_LL_EC_REG_DMA_TRANSFER  ADC group regular - DMA transfer of ADC conversion data
 954:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @{
 955:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
 956:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_REG_DMA_TRANSFER_NONE       (0x00000000UL)                        /*!< ADC conversio
 957:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_REG_DMA_TRANSFER_LIMITED    (                  ADC_CFGR_DMAEN)    /*!< ADC conversio
 958:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_REG_DMA_TRANSFER_UNLIMITED  (ADC_CFGR_DMACFG | ADC_CFGR_DMAEN)    /*!< ADC conversio
 959:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /**
 960:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @}
 961:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
 962:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
 963:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #if defined(ADC_SMPR1_SMPPLUS)
 964:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /** @defgroup ADC_LL_EC_SAMPLINGTIME_COMMON_CONFIG ADC instance - ADC sampling time common configur
 965:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @{
 966:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
 967:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_SAMPLINGTIME_COMMON_DEFAULT      (0x00000000UL)      /*!< ADC sampling time let to d
 968:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5 (ADC_SMPR1_SMPPLUS) /*!< ADC additional sampling ti
 969:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /**
 970:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @}
 971:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
 972:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #endif
 973:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
 974:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /** @defgroup ADC_LL_EC_REG_OVR_DATA_BEHAVIOR  ADC group regular - Overrun behavior on conversion d
 975:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @{
 976:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
 977:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_REG_OVR_DATA_PRESERVED      (0x00000000UL)         /*!< ADC group regular behavior i
 978:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_REG_OVR_DATA_OVERWRITTEN    (ADC_CFGR_OVRMOD)      /*!< ADC group regular behavior i
 979:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /**
 980:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @}
 981:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
 982:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
 983:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /** @defgroup ADC_LL_EC_REG_SEQ_SCAN_LENGTH  ADC group regular - Sequencer scan length
 984:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @{
 985:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
 986:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_REG_SEQ_SCAN_DISABLE        (0x00000000UL)                                          
 987:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_REG_SEQ_SCAN_ENABLE_2RANKS  (                                             ADC_SQR1_L
 988:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_REG_SEQ_SCAN_ENABLE_3RANKS  (                              ADC_SQR1_L_1             
 989:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_REG_SEQ_SCAN_ENABLE_4RANKS  (                              ADC_SQR1_L_1 | ADC_SQR1_L
 990:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_REG_SEQ_SCAN_ENABLE_5RANKS  (               ADC_SQR1_L_2                            
 991:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_REG_SEQ_SCAN_ENABLE_6RANKS  (               ADC_SQR1_L_2                | ADC_SQR1_L
 992:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_REG_SEQ_SCAN_ENABLE_7RANKS  (               ADC_SQR1_L_2 | ADC_SQR1_L_1             
 993:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_REG_SEQ_SCAN_ENABLE_8RANKS  (               ADC_SQR1_L_2 | ADC_SQR1_L_1 | ADC_SQR1_L
 994:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_REG_SEQ_SCAN_ENABLE_9RANKS  (ADC_SQR1_L_3                                           
 995:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_REG_SEQ_SCAN_ENABLE_10RANKS (ADC_SQR1_L_3                               | ADC_SQR1_L
 996:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_REG_SEQ_SCAN_ENABLE_11RANKS (ADC_SQR1_L_3                | ADC_SQR1_L_1             
 997:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_REG_SEQ_SCAN_ENABLE_12RANKS (ADC_SQR1_L_3                | ADC_SQR1_L_1 | ADC_SQR1_L
 998:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_REG_SEQ_SCAN_ENABLE_13RANKS (ADC_SQR1_L_3 | ADC_SQR1_L_2                            
 999:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_REG_SEQ_SCAN_ENABLE_14RANKS (ADC_SQR1_L_3 | ADC_SQR1_L_2                | ADC_SQR1_L
1000:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_REG_SEQ_SCAN_ENABLE_15RANKS (ADC_SQR1_L_3 | ADC_SQR1_L_2 | ADC_SQR1_L_1             
ARM GAS  /tmp/ccZ0TYFG.s 			page 19


1001:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_REG_SEQ_SCAN_ENABLE_16RANKS (ADC_SQR1_L_3 | ADC_SQR1_L_2 | ADC_SQR1_L_1 | ADC_SQR1_L
1002:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /**
1003:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @}
1004:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
1005:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
1006:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /** @defgroup ADC_LL_EC_REG_SEQ_DISCONT_MODE  ADC group regular - Sequencer discontinuous mode
1007:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @{
1008:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
1009:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_REG_SEQ_DISCONT_DISABLE     (0x00000000UL)                                          
1010:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_REG_SEQ_DISCONT_1RANK       (                                                       
1011:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_REG_SEQ_DISCONT_2RANKS      (                                          ADC_CFGR_DISC
1012:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_REG_SEQ_DISCONT_3RANKS      (                     ADC_CFGR_DISCNUM_1                
1013:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_REG_SEQ_DISCONT_4RANKS      (                     ADC_CFGR_DISCNUM_1 | ADC_CFGR_DISC
1014:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_REG_SEQ_DISCONT_5RANKS      (ADC_CFGR_DISCNUM_2                                     
1015:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_REG_SEQ_DISCONT_6RANKS      (ADC_CFGR_DISCNUM_2                      | ADC_CFGR_DISC
1016:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_REG_SEQ_DISCONT_7RANKS      (ADC_CFGR_DISCNUM_2 | ADC_CFGR_DISCNUM_1                
1017:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_REG_SEQ_DISCONT_8RANKS      (ADC_CFGR_DISCNUM_2 | ADC_CFGR_DISCNUM_1 | ADC_CFGR_DISC
1018:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /**
1019:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @}
1020:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
1021:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
1022:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /** @defgroup ADC_LL_EC_REG_SEQ_RANKS  ADC group regular - Sequencer ranks
1023:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @{
1024:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
1025:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_REG_RANK_1                  (ADC_SQR1_REGOFFSET | ADC_REG_RANK_1_SQRX_BITOFFSET_POS)
1026:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_REG_RANK_2                  (ADC_SQR1_REGOFFSET | ADC_REG_RANK_2_SQRX_BITOFFSET_POS)
1027:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_REG_RANK_3                  (ADC_SQR1_REGOFFSET | ADC_REG_RANK_3_SQRX_BITOFFSET_POS)
1028:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_REG_RANK_4                  (ADC_SQR1_REGOFFSET | ADC_REG_RANK_4_SQRX_BITOFFSET_POS)
1029:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_REG_RANK_5                  (ADC_SQR2_REGOFFSET | ADC_REG_RANK_5_SQRX_BITOFFSET_POS)
1030:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_REG_RANK_6                  (ADC_SQR2_REGOFFSET | ADC_REG_RANK_6_SQRX_BITOFFSET_POS)
1031:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_REG_RANK_7                  (ADC_SQR2_REGOFFSET | ADC_REG_RANK_7_SQRX_BITOFFSET_POS)
1032:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_REG_RANK_8                  (ADC_SQR2_REGOFFSET | ADC_REG_RANK_8_SQRX_BITOFFSET_POS)
1033:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_REG_RANK_9                  (ADC_SQR2_REGOFFSET | ADC_REG_RANK_9_SQRX_BITOFFSET_POS)
1034:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_REG_RANK_10                 (ADC_SQR3_REGOFFSET | ADC_REG_RANK_10_SQRX_BITOFFSET_POS
1035:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_REG_RANK_11                 (ADC_SQR3_REGOFFSET | ADC_REG_RANK_11_SQRX_BITOFFSET_POS
1036:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_REG_RANK_12                 (ADC_SQR3_REGOFFSET | ADC_REG_RANK_12_SQRX_BITOFFSET_POS
1037:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_REG_RANK_13                 (ADC_SQR3_REGOFFSET | ADC_REG_RANK_13_SQRX_BITOFFSET_POS
1038:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_REG_RANK_14                 (ADC_SQR3_REGOFFSET | ADC_REG_RANK_14_SQRX_BITOFFSET_POS
1039:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_REG_RANK_15                 (ADC_SQR4_REGOFFSET | ADC_REG_RANK_15_SQRX_BITOFFSET_POS
1040:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_REG_RANK_16                 (ADC_SQR4_REGOFFSET | ADC_REG_RANK_16_SQRX_BITOFFSET_POS
1041:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /**
1042:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @}
1043:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
1044:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
1045:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /** @defgroup ADC_LL_EC_INJ_TRIGGER_SOURCE  ADC group injected - Trigger source
1046:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @{
1047:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
1048:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_INJ_TRIG_SOFTWARE           (0x00000000UL)                                          
1049:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****                                            ADC group injected conversion trigger internal: SW start
1050:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_INJ_TRIG_EXT_TIM1_TRGO      (ADC_INJ_TRIG_EXT_EDGE_DEFAULT)                         
1051:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****                                            ADC group injected conversion trigger from external peri
1052:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_INJ_TRIG_EXT_TIM1_TRGO2     (ADC_JSQR_JEXTSEL_3 | ADC_INJ_TRIG_EXT_EDGE_DEFAULT)    
1053:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****                                            ADC group injected conversion trigger from external peri
1054:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_INJ_TRIG_EXT_TIM1_CH3       (ADC_JSQR_JEXTSEL_3 | ADC_JSQR_JEXTSEL_1 | ADC_JSQR_JEXT
1055:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****                                            ADC group injected conversion trigger from external peri
1056:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****                                            Note: On this STM32 serie, this trigger is available onl
1057:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_INJ_TRIG_EXT_TIM1_CH4       (ADC_JSQR_JEXTSEL_0 | ADC_INJ_TRIG_EXT_EDGE_DEFAULT)    
ARM GAS  /tmp/ccZ0TYFG.s 			page 20


1058:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****                                            ADC group injected conversion trigger from external peri
1059:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_INJ_TRIG_EXT_TIM2_TRGO      (ADC_JSQR_JEXTSEL_1 | ADC_INJ_TRIG_EXT_EDGE_DEFAULT)    
1060:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****                                            ADC group injected conversion trigger from external peri
1061:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_INJ_TRIG_EXT_TIM2_CH1       (ADC_JSQR_JEXTSEL_1 | ADC_JSQR_JEXTSEL_0 | ADC_INJ_TRIG_
1062:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****                                            ADC group injected conversion trigger from external peri
1063:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****                                            Note: On this STM32 serie, this trigger is available onl
1064:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_INJ_TRIG_EXT_TIM3_TRGO      (ADC_JSQR_JEXTSEL_3 | ADC_JSQR_JEXTSEL_2 | ADC_INJ_TRIG_
1065:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****                                            ADC group injected conversion trigger from external peri
1066:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_INJ_TRIG_EXT_TIM3_CH1       (ADC_JSQR_JEXTSEL_3 | ADC_JSQR_JEXTSEL_2 | ADC_JSQR_JEXT
1067:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****                                            ADC group injected conversion trigger from external peri
1068:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****                                            Note: On this STM32 serie, this trigger is available onl
1069:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_INJ_TRIG_EXT_TIM3_CH3       (ADC_JSQR_JEXTSEL_3 | ADC_JSQR_JEXTSEL_1 | ADC_JSQR_JEXT
1070:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****                                            ADC group injected conversion trigger from external peri
1071:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****                                            Note: On this STM32 serie, this trigger is available onl
1072:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_INJ_TRIG_EXT_TIM3_CH4       (ADC_JSQR_JEXTSEL_2 | ADC_INJ_TRIG_EXT_EDGE_DEFAULT)    
1073:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****                                            ADC group injected conversion trigger from external peri
1074:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****                                            Note: On this STM32 serie, this trigger is available onl
1075:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_INJ_TRIG_EXT_TIM4_TRGO      (ADC_JSQR_JEXTSEL_2 | ADC_JSQR_JEXTSEL_0 | ADC_INJ_TRIG_
1076:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****                                            ADC group injected conversion trigger from external peri
1077:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_INJ_TRIG_EXT_TIM4_CH3       (ADC_JSQR_JEXTSEL_2 | ADC_INJ_TRIG_EXT_EDGE_DEFAULT)    
1078:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****                                            ADC group injected conversion trigger from external peri
1079:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****                                            Note: On this STM32 serie, this trigger is available onl
1080:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_INJ_TRIG_EXT_TIM4_CH4       (ADC_JSQR_JEXTSEL_2 | ADC_JSQR_JEXTSEL_1 | ADC_INJ_TRIG_
1081:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****                                            ADC group injected conversion trigger from external peri
1082:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****                                            Note: On this STM32 serie, this trigger is available onl
1083:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_INJ_TRIG_EXT_TIM6_TRGO      (ADC_JSQR_JEXTSEL_3 | ADC_JSQR_JEXTSEL_2 | ADC_JSQR_JEXT
1084:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****                                            ADC group injected conversion trigger from external peri
1085:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_INJ_TRIG_EXT_TIM7_TRGO      (ADC_JSQR_JEXTSEL_4 | ADC_JSQR_JEXTSEL_3 | ADC_JSQR_JEXT
1086:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****                                            ADC group injected conversion trigger from external peri
1087:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_INJ_TRIG_EXT_TIM8_TRGO      (ADC_JSQR_JEXTSEL_3 | ADC_JSQR_JEXTSEL_0 | ADC_INJ_TRIG_
1088:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****                                            ADC group injected conversion trigger from external peri
1089:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_INJ_TRIG_EXT_TIM8_TRGO2     (ADC_JSQR_JEXTSEL_3 | ADC_JSQR_JEXTSEL_1 | ADC_INJ_TRIG_
1090:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****                                            ADC group injected conversion trigger from external peri
1091:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_INJ_TRIG_EXT_TIM8_CH2       (ADC_JSQR_JEXTSEL_1 | ADC_JSQR_JEXTSEL_0 | ADC_INJ_TRIG_
1092:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****                                            ADC group injected conversion trigger from external peri
1093:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****                                            Note: On this STM32 serie, this trigger is available onl
1094:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_INJ_TRIG_EXT_TIM8_CH4       (ADC_JSQR_JEXTSEL_2 | ADC_JSQR_JEXTSEL_1 | ADC_JSQR_JEXT
1095:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****                                            ADC group injected conversion trigger from external peri
1096:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_INJ_TRIG_EXT_TIM15_TRGO     (ADC_JSQR_JEXTSEL_3 | ADC_JSQR_JEXTSEL_2 | ADC_JSQR_JEXT
1097:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****                                            ADC group injected conversion trigger from external peri
1098:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_INJ_TRIG_EXT_TIM16_CH1      (ADC_JSQR_JEXTSEL_4 | ADC_JSQR_JEXTSEL_3 | ADC_JSQR_JEXT
1099:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****                                            ADC group injected conversion trigger from external peri
1100:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****                                            Note: On this STM32 serie, this trigger is available onl
1101:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_INJ_TRIG_EXT_TIM20_TRGO     (ADC_JSQR_JEXTSEL_4 | ADC_INJ_TRIG_EXT_EDGE_DEFAULT)    
1102:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****                                            ADC group injected conversion trigger from external peri
1103:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****                                            Note: On this STM32 serie, TIM20 is not available on all
1104:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_INJ_TRIG_EXT_TIM20_TRGO2    (ADC_JSQR_JEXTSEL_4 | ADC_JSQR_JEXTSEL_0 | ADC_INJ_TRIG_
1105:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****                                            ADC group injected conversion trigger from external peri
1106:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****                                            Note: On this STM32 serie, TIM20 is not available on all
1107:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_INJ_TRIG_EXT_TIM20_CH2      (ADC_JSQR_JEXTSEL_4 | ADC_JSQR_JEXTSEL_1 | ADC_INJ_TRIG_
1108:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****                                            ADC group injected conversion trigger from external peri
1109:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****                                            Trigger available only on ADC3/4/5 instances. On this ST
1110:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_INJ_TRIG_EXT_TIM20_CH4      (ADC_JSQR_JEXTSEL_4 | ADC_JSQR_JEXTSEL_1 | ADC_INJ_TRIG_
1111:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****                                            ADC group injected conversion trigger from external peri
1112:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****                                            Trigger available only on ADC1/2 instances. On this STM3
1113:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_INJ_TRIG_EXT_HRTIM_TRG1     (ADC_JSQR_JEXTSEL_4 | ADC_JSQR_JEXTSEL_3 | ADC_JSQR_JEXT
1114:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****                                            ADC group injected conversion trigger from external peri
ARM GAS  /tmp/ccZ0TYFG.s 			page 21


1115:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****                                            Note: On this STM32 serie, this trigger is available onl
1116:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_INJ_TRIG_EXT_HRTIM_TRG2     (ADC_JSQR_JEXTSEL_4 | ADC_JSQR_JEXTSEL_1 | ADC_JSQR_JEXT
1117:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****                                            ADC group injected conversion trigger from external peri
1118:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****                                            Note: On this STM32 serie, HRTIM is not available on all
1119:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_INJ_TRIG_EXT_HRTIM_TRG3     (ADC_JSQR_JEXTSEL_4 | ADC_JSQR_JEXTSEL_3 | ADC_JSQR_JEXT
1120:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****                                            ADC group injected conversion trigger from external peri
1121:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****                                            Note: On this STM32 serie, this trigger is available onl
1122:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_INJ_TRIG_EXT_HRTIM_TRG4     (ADC_JSQR_JEXTSEL_4 | ADC_JSQR_JEXTSEL_2 | ADC_INJ_TRIG_
1123:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****                                            ADC group injected conversion trigger from external peri
1124:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****                                            Note: On this STM32 serie, HRTIM is not available on all
1125:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_INJ_TRIG_EXT_HRTIM_TRG5     (ADC_JSQR_JEXTSEL_4 | ADC_JSQR_JEXTSEL_2 | ADC_JSQR_JEXT
1126:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****                                            ADC group injected conversion trigger from external peri
1127:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****                                            Note: On this STM32 serie, HRTIM is not available on all
1128:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_INJ_TRIG_EXT_HRTIM_TRG6     (ADC_JSQR_JEXTSEL_4 | ADC_JSQR_JEXTSEL_2 | ADC_JSQR_JEXT
1129:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****                                            ADC group injected conversion trigger from external peri
1130:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****                                            Note: On this STM32 serie, HRTIM is not available on all
1131:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_INJ_TRIG_EXT_HRTIM_TRG7     (ADC_JSQR_JEXTSEL_4 | ADC_JSQR_JEXTSEL_2 | ADC_JSQR_JEXT
1132:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****                                            ADC group injected conversion trigger from external peri
1133:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****                                            Note: On this STM32 serie, HRTIM is not available on all
1134:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_INJ_TRIG_EXT_HRTIM_TRG8     (ADC_JSQR_JEXTSEL_4 | ADC_JSQR_JEXTSEL_3 | ADC_INJ_TRIG_
1135:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****                                            ADC group injected conversion trigger from external peri
1136:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****                                            Note: On this STM32 serie, HRTIM is not available on all
1137:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_INJ_TRIG_EXT_HRTIM_TRG9     (ADC_JSQR_JEXTSEL_4 | ADC_JSQR_JEXTSEL_3 | ADC_JSQR_JEXT
1138:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****                                            ADC group injected conversion trigger from external peri
1139:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****                                            Note: On this STM32 serie, HRTIM is not available on all
1140:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_INJ_TRIG_EXT_HRTIM_TRG10    (ADC_JSQR_JEXTSEL_4 | ADC_JSQR_JEXTSEL_3 | ADC_JSQR_JEXT
1141:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****                                            ADC group injected conversion trigger from external peri
1142:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****                                            Note: On this STM32 serie, HRTIM is not available on all
1143:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_INJ_TRIG_EXT_EXTI_LINE3     (ADC_JSQR_JEXTSEL_3 | ADC_JSQR_JEXTSEL_2 | ADC_JSQR_JEXT
1144:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****                                            ADC group injected conversion trigger from external peri
1145:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****                                            Note: On this STM32 serie, this trigger is available onl
1146:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_INJ_TRIG_EXT_EXTI_LINE15    (ADC_JSQR_JEXTSEL_2 | ADC_JSQR_JEXTSEL_1 | ADC_INJ_TRIG_
1147:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****                                            ADC group injected conversion trigger from external peri
1148:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****                                            Note: On this STM32 serie, this trigger is available onl
1149:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_INJ_TRIG_EXT_LPTIM_OUT      (ADC_JSQR_JEXTSEL_4 | ADC_JSQR_JEXTSEL_3 | ADC_JSQR_JEXT
1150:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****                                            ADC group injected conversion trigger from external peri
1151:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /**
1152:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @}
1153:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
1154:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
1155:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /** @defgroup ADC_LL_EC_INJ_TRIGGER_EDGE  ADC group injected - Trigger edge
1156:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @{
1157:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
1158:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_INJ_TRIG_EXT_RISING         (                    ADC_JSQR_JEXTEN_0) /*!< ADC group i
1159:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_INJ_TRIG_EXT_FALLING        (ADC_JSQR_JEXTEN_1                    ) /*!< ADC group i
1160:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_INJ_TRIG_EXT_RISINGFALLING  (ADC_JSQR_JEXTEN_1 | ADC_JSQR_JEXTEN_0) /*!< ADC group i
1161:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /**
1162:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @}
1163:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
1164:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
1165:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /** @defgroup ADC_LL_EC_INJ_TRIG_AUTO  ADC group injected - Automatic trigger mode
1166:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @{
1167:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
1168:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_INJ_TRIG_INDEPENDENT        (0x00000000UL)         /*!< ADC group injected conversio
1169:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_INJ_TRIG_FROM_GRP_REGULAR   (ADC_CFGR_JAUTO)       /*!< ADC group injected conversio
1170:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /**
1171:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @}
ARM GAS  /tmp/ccZ0TYFG.s 			page 22


1172:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
1173:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
1174:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /** @defgroup ADC_LL_EC_INJ_CONTEXT_QUEUE  ADC group injected - Context queue mode
1175:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @{
1176:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
1177:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_INJ_QUEUE_2CONTEXTS_LAST_ACTIVE (0x00000000UL)         /* Group injected sequence co
1178:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_INJ_QUEUE_2CONTEXTS_END_EMPTY   (ADC_CFGR_JQM)         /* Group injected sequence co
1179:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_INJ_QUEUE_DISABLE               (ADC_CFGR_JQDIS)       /* Group injected sequence co
1180:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /**
1181:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @}
1182:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
1183:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
1184:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /** @defgroup ADC_LL_EC_INJ_SEQ_SCAN_LENGTH  ADC group injected - Sequencer scan length
1185:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @{
1186:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
1187:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_INJ_SEQ_SCAN_DISABLE        (0x00000000UL)                  /*!< ADC group injected 
1188:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_INJ_SEQ_SCAN_ENABLE_2RANKS  (                ADC_JSQR_JL_0) /*!< ADC group injected 
1189:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_INJ_SEQ_SCAN_ENABLE_3RANKS  (ADC_JSQR_JL_1                ) /*!< ADC group injected 
1190:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_INJ_SEQ_SCAN_ENABLE_4RANKS  (ADC_JSQR_JL_1 | ADC_JSQR_JL_0) /*!< ADC group injected 
1191:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /**
1192:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @}
1193:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
1194:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
1195:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /** @defgroup ADC_LL_EC_INJ_SEQ_DISCONT_MODE  ADC group injected - Sequencer discontinuous mode
1196:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @{
1197:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
1198:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_INJ_SEQ_DISCONT_DISABLE     (0x00000000UL)         /*!< ADC group injected sequencer
1199:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_INJ_SEQ_DISCONT_1RANK       (ADC_CFGR_JDISCEN)     /*!< ADC group injected sequencer
1200:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /**
1201:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @}
1202:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
1203:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
1204:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /** @defgroup ADC_LL_EC_INJ_SEQ_RANKS  ADC group injected - Sequencer ranks
1205:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @{
1206:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
1207:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_INJ_RANK_1                  (ADC_JDR1_REGOFFSET | ADC_INJ_RANK_1_JSQR_BITOFFSET_POS)
1208:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_INJ_RANK_2                  (ADC_JDR2_REGOFFSET | ADC_INJ_RANK_2_JSQR_BITOFFSET_POS)
1209:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_INJ_RANK_3                  (ADC_JDR3_REGOFFSET | ADC_INJ_RANK_3_JSQR_BITOFFSET_POS)
1210:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_INJ_RANK_4                  (ADC_JDR4_REGOFFSET | ADC_INJ_RANK_4_JSQR_BITOFFSET_POS)
1211:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /**
1212:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @}
1213:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
1214:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
1215:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /** @defgroup ADC_LL_EC_CHANNEL_SAMPLINGTIME  Channel - Sampling time
1216:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @{
1217:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
1218:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_SAMPLINGTIME_2CYCLES_5      (0x00000000UL)                                          
1219:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_SAMPLINGTIME_6CYCLES_5      (                                        ADC_SMPR2_SMP10
1220:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_SAMPLINGTIME_12CYCLES_5     (                    ADC_SMPR2_SMP10_1                  
1221:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_SAMPLINGTIME_24CYCLES_5     (                    ADC_SMPR2_SMP10_1 | ADC_SMPR2_SMP10
1222:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_SAMPLINGTIME_47CYCLES_5     (ADC_SMPR2_SMP10_2                                      
1223:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_SAMPLINGTIME_92CYCLES_5     (ADC_SMPR2_SMP10_2                     | ADC_SMPR2_SMP10
1224:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_SAMPLINGTIME_247CYCLES_5    (ADC_SMPR2_SMP10_2 | ADC_SMPR2_SMP10_1                  
1225:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_SAMPLINGTIME_640CYCLES_5    (ADC_SMPR2_SMP10_2 | ADC_SMPR2_SMP10_1 | ADC_SMPR2_SMP10
1226:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /**
1227:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @}
1228:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
ARM GAS  /tmp/ccZ0TYFG.s 			page 23


1229:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
1230:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /** @defgroup ADC_LL_EC_CHANNEL_SINGLE_DIFF_ENDING  Channel - Single or differential ending
1231:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @{
1232:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
1233:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_SINGLE_ENDED                (                  ADC_CALFACT_CALFACT_S)         /*!< A
1234:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_DIFFERENTIAL_ENDED          (ADC_CR_ADCALDIF | ADC_CALFACT_CALFACT_D)         /*!< A
1235:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_BOTH_SINGLE_DIFF_ENDED      (LL_ADC_SINGLE_ENDED | LL_ADC_DIFFERENTIAL_ENDED) /*!< A
1236:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /**
1237:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @}
1238:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
1239:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
1240:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /** @defgroup ADC_LL_EC_AWD_NUMBER Analog watchdog - Analog watchdog number
1241:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @{
1242:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
1243:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD1                        (ADC_AWD_CR1_CHANNEL_MASK  | ADC_AWD_CR1_REGOFFSET) /*!<
1244:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD2                        (ADC_AWD_CR23_CHANNEL_MASK | ADC_AWD_CR2_REGOFFSET) /*!<
1245:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD3                        (ADC_AWD_CR23_CHANNEL_MASK | ADC_AWD_CR3_REGOFFSET) /*!<
1246:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /**
1247:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @}
1248:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
1249:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
1250:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /** @defgroup ADC_LL_EC_AWD_CHANNELS  Analog watchdog - Monitored channels
1251:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @{
1252:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
1253:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD_DISABLE                 (0x00000000UL)                                          
1254:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD_ALL_CHANNELS_REG        (ADC_AWD_CR23_CHANNEL_MASK                              
1255:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD_ALL_CHANNELS_INJ        (ADC_AWD_CR23_CHANNEL_MASK                 | ADC_CFGR_JA
1256:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD_ALL_CHANNELS_REG_INJ    (ADC_AWD_CR23_CHANNEL_MASK                 | ADC_CFGR_JA
1257:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_0_REG           ((LL_ADC_CHANNEL_0  & ADC_CHANNEL_ID_MASK)              
1258:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_0_INJ           ((LL_ADC_CHANNEL_0  & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JA
1259:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_0_REG_INJ       ((LL_ADC_CHANNEL_0  & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JA
1260:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_1_REG           ((LL_ADC_CHANNEL_1  & ADC_CHANNEL_ID_MASK)              
1261:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_1_INJ           ((LL_ADC_CHANNEL_1  & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JA
1262:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_1_REG_INJ       ((LL_ADC_CHANNEL_1  & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JA
1263:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_2_REG           ((LL_ADC_CHANNEL_2  & ADC_CHANNEL_ID_MASK)              
1264:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_2_INJ           ((LL_ADC_CHANNEL_2  & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JA
1265:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_2_REG_INJ       ((LL_ADC_CHANNEL_2  & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JA
1266:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_3_REG           ((LL_ADC_CHANNEL_3  & ADC_CHANNEL_ID_MASK)              
1267:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_3_INJ           ((LL_ADC_CHANNEL_3  & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JA
1268:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_3_REG_INJ       ((LL_ADC_CHANNEL_3  & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JA
1269:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_4_REG           ((LL_ADC_CHANNEL_4  & ADC_CHANNEL_ID_MASK)              
1270:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_4_INJ           ((LL_ADC_CHANNEL_4  & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JA
1271:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_4_REG_INJ       ((LL_ADC_CHANNEL_4  & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JA
1272:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_5_REG           ((LL_ADC_CHANNEL_5  & ADC_CHANNEL_ID_MASK)              
1273:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_5_INJ           ((LL_ADC_CHANNEL_5  & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JA
1274:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_5_REG_INJ       ((LL_ADC_CHANNEL_5  & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JA
1275:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_6_REG           ((LL_ADC_CHANNEL_6  & ADC_CHANNEL_ID_MASK)              
1276:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_6_INJ           ((LL_ADC_CHANNEL_6  & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JA
1277:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_6_REG_INJ       ((LL_ADC_CHANNEL_6  & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JA
1278:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_7_REG           ((LL_ADC_CHANNEL_7  & ADC_CHANNEL_ID_MASK)              
1279:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_7_INJ           ((LL_ADC_CHANNEL_7  & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JA
1280:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_7_REG_INJ       ((LL_ADC_CHANNEL_7  & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JA
1281:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_8_REG           ((LL_ADC_CHANNEL_8  & ADC_CHANNEL_ID_MASK)              
1282:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_8_INJ           ((LL_ADC_CHANNEL_8  & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JA
1283:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_8_REG_INJ       ((LL_ADC_CHANNEL_8  & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JA
1284:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_9_REG           ((LL_ADC_CHANNEL_9  & ADC_CHANNEL_ID_MASK)              
1285:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_9_INJ           ((LL_ADC_CHANNEL_9  & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JA
ARM GAS  /tmp/ccZ0TYFG.s 			page 24


1286:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_9_REG_INJ       ((LL_ADC_CHANNEL_9  & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JA
1287:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_10_REG          ((LL_ADC_CHANNEL_10 & ADC_CHANNEL_ID_MASK)              
1288:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_10_INJ          ((LL_ADC_CHANNEL_10 & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JA
1289:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_10_REG_INJ      ((LL_ADC_CHANNEL_10 & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JA
1290:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_11_REG          ((LL_ADC_CHANNEL_11 & ADC_CHANNEL_ID_MASK)              
1291:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_11_INJ          ((LL_ADC_CHANNEL_11 & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JA
1292:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_11_REG_INJ      ((LL_ADC_CHANNEL_11 & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JA
1293:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_12_REG          ((LL_ADC_CHANNEL_12 & ADC_CHANNEL_ID_MASK)              
1294:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_12_INJ          ((LL_ADC_CHANNEL_12 & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JA
1295:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_12_REG_INJ      ((LL_ADC_CHANNEL_12 & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JA
1296:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_13_REG          ((LL_ADC_CHANNEL_13 & ADC_CHANNEL_ID_MASK)              
1297:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_13_INJ          ((LL_ADC_CHANNEL_13 & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JA
1298:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_13_REG_INJ      ((LL_ADC_CHANNEL_13 & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JA
1299:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_14_REG          ((LL_ADC_CHANNEL_14 & ADC_CHANNEL_ID_MASK)              
1300:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_14_INJ          ((LL_ADC_CHANNEL_14 & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JA
1301:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_14_REG_INJ      ((LL_ADC_CHANNEL_14 & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JA
1302:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_15_REG          ((LL_ADC_CHANNEL_15 & ADC_CHANNEL_ID_MASK)              
1303:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_15_INJ          ((LL_ADC_CHANNEL_15 & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JA
1304:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_15_REG_INJ      ((LL_ADC_CHANNEL_15 & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JA
1305:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_16_REG          ((LL_ADC_CHANNEL_16 & ADC_CHANNEL_ID_MASK)              
1306:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_16_INJ          ((LL_ADC_CHANNEL_16 & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JA
1307:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_16_REG_INJ      ((LL_ADC_CHANNEL_16 & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JA
1308:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_17_REG          ((LL_ADC_CHANNEL_17 & ADC_CHANNEL_ID_MASK)              
1309:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_17_INJ          ((LL_ADC_CHANNEL_17 & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JA
1310:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_17_REG_INJ      ((LL_ADC_CHANNEL_17 & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JA
1311:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_18_REG          ((LL_ADC_CHANNEL_18 & ADC_CHANNEL_ID_MASK)              
1312:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_18_INJ          ((LL_ADC_CHANNEL_18 & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JA
1313:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_18_REG_INJ      ((LL_ADC_CHANNEL_18 & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JA
1314:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD_CH_VREFINT_REG          ((LL_ADC_CHANNEL_VREFINT       & ADC_CHANNEL_ID_MASK)   
1315:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD_CH_VREFINT_INJ          ((LL_ADC_CHANNEL_VREFINT       & ADC_CHANNEL_ID_MASK) | 
1316:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD_CH_VREFINT_REG_INJ      ((LL_ADC_CHANNEL_VREFINT       & ADC_CHANNEL_ID_MASK) | 
1317:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD_CH_TEMPSENSOR_ADC1_REG       ((LL_ADC_CHANNEL_TEMPSENSOR_ADC1 & ADC_CHANNEL_ID_M
1318:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD_CH_TEMPSENSOR_ADC1_INJ       ((LL_ADC_CHANNEL_TEMPSENSOR_ADC1 & ADC_CHANNEL_ID_M
1319:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD_CH_TEMPSENSOR_ADC1_REG_INJ   ((LL_ADC_CHANNEL_TEMPSENSOR_ADC1 & ADC_CHANNEL_ID_M
1320:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD_CH_TEMPSENSOR_ADC5_REG       ((LL_ADC_CHANNEL_TEMPSENSOR_ADC5 & ADC_CHANNEL_ID_M
1321:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD_CH_TEMPSENSOR_ADC5_INJ       ((LL_ADC_CHANNEL_TEMPSENSOR_ADC5 & ADC_CHANNEL_ID_M
1322:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD_CH_TEMPSENSOR_ADC5_REG_INJ   ((LL_ADC_CHANNEL_TEMPSENSOR_ADC5 & ADC_CHANNEL_ID_M
1323:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD_CH_VBAT_REG             ((LL_ADC_CHANNEL_VBAT          & ADC_CHANNEL_ID_MASK)   
1324:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD_CH_VBAT_INJ             ((LL_ADC_CHANNEL_VBAT          & ADC_CHANNEL_ID_MASK) | 
1325:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD_CH_VBAT_REG_INJ         ((LL_ADC_CHANNEL_VBAT          & ADC_CHANNEL_ID_MASK) | 
1326:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD_CH_VOPAMP1_REG          ((LL_ADC_CHANNEL_VOPAMP1       & ADC_CHANNEL_ID_MASK)   
1327:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD_CH_VOPAMP1_INJ          ((LL_ADC_CHANNEL_VOPAMP1       & ADC_CHANNEL_ID_MASK) | 
1328:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD_CH_VOPAMP1_REG_INJ      ((LL_ADC_CHANNEL_VOPAMP1       & ADC_CHANNEL_ID_MASK) | 
1329:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD_CH_VOPAMP2_REG          ((LL_ADC_CHANNEL_VOPAMP2       & ADC_CHANNEL_ID_MASK)   
1330:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD_CH_VOPAMP2_INJ          ((LL_ADC_CHANNEL_VOPAMP2       & ADC_CHANNEL_ID_MASK) | 
1331:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD_CH_VOPAMP2_REG_INJ      ((LL_ADC_CHANNEL_VOPAMP2       & ADC_CHANNEL_ID_MASK) | 
1332:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD_CH_VOPAMP3_ADC2_REG     ((LL_ADC_CHANNEL_VOPAMP3_ADC2  & ADC_CHANNEL_ID_MASK)   
1333:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD_CH_VOPAMP3_ADC2_INJ     ((LL_ADC_CHANNEL_VOPAMP3_ADC2  & ADC_CHANNEL_ID_MASK) | 
1334:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD_CH_VOPAMP3_ADC2_REG_INJ ((LL_ADC_CHANNEL_VOPAMP3_ADC2  & ADC_CHANNEL_ID_MASK) | 
1335:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD_CH_VOPAMP3_ADC3_REG     ((LL_ADC_CHANNEL_VOPAMP3_ADC3  & ADC_CHANNEL_ID_MASK)   
1336:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD_CH_VOPAMP3_ADC3_INJ     ((LL_ADC_CHANNEL_VOPAMP3_ADC3  & ADC_CHANNEL_ID_MASK) | 
1337:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD_CH_VOPAMP3_ADC3_REG_INJ ((LL_ADC_CHANNEL_VOPAMP3_ADC3  & ADC_CHANNEL_ID_MASK) | 
1338:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD_CH_VOPAMP4_REG          ((LL_ADC_CHANNEL_VOPAMP4       & ADC_CHANNEL_ID_MASK)   
1339:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD_CH_VOPAMP4_INJ          ((LL_ADC_CHANNEL_VOPAMP4       & ADC_CHANNEL_ID_MASK) | 
1340:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD_CH_VOPAMP4_REG_INJ      ((LL_ADC_CHANNEL_VOPAMP4       & ADC_CHANNEL_ID_MASK) | 
1341:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD_CH_VOPAMP5_REG          ((LL_ADC_CHANNEL_VOPAMP5       & ADC_CHANNEL_ID_MASK)   
1342:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD_CH_VOPAMP5_INJ          ((LL_ADC_CHANNEL_VOPAMP5       & ADC_CHANNEL_ID_MASK) | 
ARM GAS  /tmp/ccZ0TYFG.s 			page 25


1343:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD_CH_VOPAMP5_REG_INJ      ((LL_ADC_CHANNEL_VOPAMP5       & ADC_CHANNEL_ID_MASK) | 
1344:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD_CH_VOPAMP6_REG          ((LL_ADC_CHANNEL_VOPAMP6       & ADC_CHANNEL_ID_MASK)   
1345:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD_CH_VOPAMP6_INJ          ((LL_ADC_CHANNEL_VOPAMP6       & ADC_CHANNEL_ID_MASK) | 
1346:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD_CH_VOPAMP6_REG_INJ      ((LL_ADC_CHANNEL_VOPAMP6       & ADC_CHANNEL_ID_MASK) | 
1347:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /**
1348:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @}
1349:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
1350:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
1351:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /** @defgroup ADC_LL_EC_AWD_THRESHOLDS  Analog watchdog - Thresholds
1352:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @{
1353:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
1354:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD_THRESHOLD_HIGH          (ADC_TR1_HT1              ) /*!< ADC analog watchdog thr
1355:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD_THRESHOLD_LOW           (              ADC_TR1_LT1) /*!< ADC analog watchdog thr
1356:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD_THRESHOLDS_HIGH_LOW     (ADC_TR1_HT1 | ADC_TR1_LT1) /*!< ADC analog watchdog bot
1357:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /**
1358:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @}
1359:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
1360:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
1361:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /** @defgroup ADC_LL_EC_AWD_FILTERING_CONFIG  Analog watchdog - filtering config
1362:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @{
1363:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
1364:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD_FILTERING_NONE          (0x00000000UL)                                          
1365:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD_FILTERING_2SAMPLES      (                                        ADC_TR1_AWDFILT
1366:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD_FILTERING_3SAMPLES      (                    ADC_TR1_AWDFILT_1                  
1367:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD_FILTERING_4SAMPLES      (                    ADC_TR1_AWDFILT_1 | ADC_TR1_AWDFILT
1368:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD_FILTERING_5SAMPLES      (ADC_TR1_AWDFILT_2                                      
1369:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD_FILTERING_6SAMPLES      (ADC_TR1_AWDFILT_2 |                     ADC_TR1_AWDFILT
1370:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD_FILTERING_7SAMPLES      (ADC_TR1_AWDFILT_2 | ADC_TR1_AWDFILT_1                  
1371:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_AWD_FILTERING_8SAMPLES      (ADC_TR1_AWDFILT_2 | ADC_TR1_AWDFILT_1 | ADC_TR1_AWDFILT
1372:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /**
1373:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @}
1374:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
1375:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
1376:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /** @defgroup ADC_LL_EC_OVS_SCOPE  Oversampling - Oversampling scope
1377:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @{
1378:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
1379:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_OVS_DISABLE                 (0x00000000UL)                                        /*
1380:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_OVS_GRP_REGULAR_CONTINUED   (                                    ADC_CFGR2_ROVSE) /*
1381:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_OVS_GRP_REGULAR_RESUMED     (ADC_CFGR2_ROVSM |                   ADC_CFGR2_ROVSE) /*
1382:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_OVS_GRP_INJECTED            (                  ADC_CFGR2_JOVSE                  ) /*
1383:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_OVS_GRP_INJ_REG_RESUMED     (                  ADC_CFGR2_JOVSE | ADC_CFGR2_ROVSE) /*
1384:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /**
1385:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @}
1386:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
1387:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
1388:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /** @defgroup ADC_LL_EC_OVS_DISCONT_MODE  Oversampling - Discontinuous mode
1389:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @{
1390:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
1391:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_OVS_REG_CONT                (0x00000000UL)         /*!< ADC oversampling discontinuo
1392:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_OVS_REG_DISCONT             (ADC_CFGR2_TROVS)      /*!< ADC oversampling discontinuo
1393:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /**
1394:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @}
1395:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
1396:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
1397:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /** @defgroup ADC_LL_EC_OVS_RATIO  Oversampling - Ratio
1398:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @{
1399:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
ARM GAS  /tmp/ccZ0TYFG.s 			page 26


1400:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_OVS_RATIO_2                 (0x00000000UL)                                          
1401:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_OVS_RATIO_4                 (                                      ADC_CFGR2_OVSR_0)
1402:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_OVS_RATIO_8                 (                   ADC_CFGR2_OVSR_1                   )
1403:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_OVS_RATIO_16                (                   ADC_CFGR2_OVSR_1 | ADC_CFGR2_OVSR_0)
1404:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_OVS_RATIO_32                (ADC_CFGR2_OVSR_2                                      )
1405:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_OVS_RATIO_64                (ADC_CFGR2_OVSR_2                    | ADC_CFGR2_OVSR_0)
1406:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_OVS_RATIO_128               (ADC_CFGR2_OVSR_2 | ADC_CFGR2_OVSR_1                   )
1407:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_OVS_RATIO_256               (ADC_CFGR2_OVSR_2 | ADC_CFGR2_OVSR_1 | ADC_CFGR2_OVSR_0)
1408:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /**
1409:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @}
1410:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
1411:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
1412:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /** @defgroup ADC_LL_EC_OVS_SHIFT  Oversampling - Data shift
1413:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @{
1414:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
1415:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_OVS_SHIFT_NONE              (0x00000000UL)                                          
1416:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_OVS_SHIFT_RIGHT_1           (                                                       
1417:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_OVS_SHIFT_RIGHT_2           (                                      ADC_CFGR2_OVSS_1 
1418:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_OVS_SHIFT_RIGHT_3           (                                      ADC_CFGR2_OVSS_1 
1419:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_OVS_SHIFT_RIGHT_4           (                   ADC_CFGR2_OVSS_2                    
1420:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_OVS_SHIFT_RIGHT_5           (                   ADC_CFGR2_OVSS_2                    
1421:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_OVS_SHIFT_RIGHT_6           (                   ADC_CFGR2_OVSS_2 | ADC_CFGR2_OVSS_1 
1422:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_OVS_SHIFT_RIGHT_7           (                   ADC_CFGR2_OVSS_2 | ADC_CFGR2_OVSS_1 
1423:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_OVS_SHIFT_RIGHT_8           (ADC_CFGR2_OVSS_3                                       
1424:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /**
1425:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @}
1426:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
1427:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
1428:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #if defined(ADC_MULTIMODE_SUPPORT)
1429:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /** @defgroup ADC_LL_EC_MULTI_MODE  Multimode - Mode
1430:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @{
1431:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
1432:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_MULTI_INDEPENDENT           (0x00000000UL)                                          
1433:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_MULTI_DUAL_REG_SIMULT       (                 ADC_CCR_DUAL_2 | ADC_CCR_DUAL_1       
1434:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_MULTI_DUAL_REG_INTERL       (                 ADC_CCR_DUAL_2 | ADC_CCR_DUAL_1 | ADC_
1435:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_MULTI_DUAL_INJ_SIMULT       (                 ADC_CCR_DUAL_2                  | ADC_
1436:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_MULTI_DUAL_INJ_ALTERN       (ADC_CCR_DUAL_3                                   | ADC_
1437:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM  (                                                   ADC_
1438:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT  (                                  ADC_CCR_DUAL_1       
1439:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM  (                                  ADC_CCR_DUAL_1 | ADC_
1440:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /**
1441:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @}
1442:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
1443:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
1444:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /** @defgroup ADC_LL_EC_MULTI_DMA_TRANSFER  Multimode - DMA transfer
1445:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @{
1446:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
1447:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_MULTI_REG_DMA_EACH_ADC        (0x00000000UL)                                     /*!
1448:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_MULTI_REG_DMA_LIMIT_RES12_10B (                 ADC_CCR_MDMA_1                 ) /*!
1449:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B   (                 ADC_CCR_MDMA_1 | ADC_CCR_MDMA_0) /*!
1450:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B (ADC_CCR_DMACFG | ADC_CCR_MDMA_1                 ) /*!
1451:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B   (ADC_CCR_DMACFG | ADC_CCR_MDMA_1 | ADC_CCR_MDMA_0) /*!
1452:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /**
1453:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @}
1454:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
1455:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
1456:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /** @defgroup ADC_LL_EC_MULTI_TWOSMP_DELAY  Multimode - Delay between two sampling phases
ARM GAS  /tmp/ccZ0TYFG.s 			page 27


1457:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @{
1458:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
1459:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_MULTI_TWOSMP_DELAY_1CYCLE   (0x00000000UL)                                          
1460:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_MULTI_TWOSMP_DELAY_2CYCLES  (                                                      A
1461:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_MULTI_TWOSMP_DELAY_3CYCLES  (                                    ADC_CCR_DELAY_1    
1462:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_MULTI_TWOSMP_DELAY_4CYCLES  (                                    ADC_CCR_DELAY_1 | A
1463:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_MULTI_TWOSMP_DELAY_5CYCLES  (                  ADC_CCR_DELAY_2                      
1464:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_MULTI_TWOSMP_DELAY_6CYCLES  (                  ADC_CCR_DELAY_2                   | A
1465:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_MULTI_TWOSMP_DELAY_7CYCLES  (                  ADC_CCR_DELAY_2 | ADC_CCR_DELAY_1    
1466:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_MULTI_TWOSMP_DELAY_8CYCLES  (                  ADC_CCR_DELAY_2 | ADC_CCR_DELAY_1 | A
1467:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_MULTI_TWOSMP_DELAY_9CYCLES  (ADC_CCR_DELAY_3                                        
1468:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_MULTI_TWOSMP_DELAY_10CYCLES (ADC_CCR_DELAY_3                                     | A
1469:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_MULTI_TWOSMP_DELAY_11CYCLES (ADC_CCR_DELAY_3                   | ADC_CCR_DELAY_1    
1470:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_MULTI_TWOSMP_DELAY_12CYCLES (ADC_CCR_DELAY_3                   | ADC_CCR_DELAY_1 | A
1471:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /**
1472:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @}
1473:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
1474:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
1475:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /** @defgroup ADC_LL_EC_MULTI_MASTER_SLAVE  Multimode - ADC master or slave
1476:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @{
1477:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
1478:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_MULTI_MASTER                (                    ADC_CDR_RDATA_MST) /*!< In multimod
1479:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_MULTI_SLAVE                 (ADC_CDR_RDATA_SLV                    ) /*!< In multimod
1480:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_MULTI_MASTER_SLAVE          (ADC_CDR_RDATA_SLV | ADC_CDR_RDATA_MST) /*!< In multimod
1481:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /**
1482:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @}
1483:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
1484:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
1485:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #endif /* ADC_MULTIMODE_SUPPORT */
1486:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
1487:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
1488:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /** @defgroup ADC_LL_EC_HW_DELAYS  Definitions of ADC hardware constraints delays
1489:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @note   Only ADC peripheral HW delays are defined in ADC LL driver driver,
1490:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         not timeout values.
1491:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         For details on delays values, refer to descriptions in source code
1492:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         above each literal definition.
1493:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @{
1494:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
1495:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
1496:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /* Note: Only ADC peripheral HW delays are defined in ADC LL driver driver,   */
1497:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /*       not timeout values.                                                  */
1498:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /*       Timeout values for ADC operations are dependent to device clock      */
1499:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /*       configuration (system clock versus ADC clock),                       */
1500:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /*       and therefore must be defined in user application.                   */
1501:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /*       Indications for estimation of ADC timeout delays, for this           */
1502:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /*       STM32 serie:                                                         */
1503:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /*       - ADC calibration time: maximum delay is 112/fADC.                   */
1504:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /*         (refer to device datasheet, parameter "tCAL")                      */
1505:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /*       - ADC enable time: maximum delay is 1 conversion cycle.              */
1506:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /*         (refer to device datasheet, parameter "tSTAB")                     */
1507:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /*       - ADC disable time: maximum delay should be a few ADC clock cycles   */
1508:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /*       - ADC stop conversion time: maximum delay should be a few ADC clock  */
1509:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /*         cycles                                                             */
1510:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /*       - ADC conversion time: duration depending on ADC clock and ADC       */
1511:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /*         configuration.                                                     */
1512:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /*         (refer to device reference manual, section "Timing")               */
1513:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
ARM GAS  /tmp/ccZ0TYFG.s 			page 28


1514:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /* Delay for ADC stabilization time (ADC voltage regulator start-up time)     */
1515:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /* Delay set to maximum value (refer to device datasheet,                     */
1516:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /* parameter "tADCVREG_STUP").                                                */
1517:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /* Unit: us                                                                   */
1518:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_DELAY_INTERNAL_REGUL_STAB_US ( 10UL)  /*!< Delay for ADC stabilization time (ADC vol
1519:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
1520:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /* Delay for internal voltage reference stabilization time.                   */
1521:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /* Delay set to maximum value (refer to device datasheet,                     */
1522:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /* parameter "tstart_vrefint").                                               */
1523:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /* Unit: us                                                                   */
1524:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_DELAY_VREFINT_STAB_US       ( 12UL)  /*!< Delay for internal voltage reference stabi
1525:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
1526:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /* Delay for temperature sensor stabilization time.                           */
1527:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /* Literal set to maximum value (refer to device datasheet,                   */
1528:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /* parameter "tSTART").                                                       */
1529:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /* Unit: us                                                                   */
1530:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_DELAY_TEMPSENSOR_STAB_US    (120UL)  /*!< Delay for temperature sensor stabilization
1531:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
1532:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /* Delay required between ADC end of calibration and ADC enable.              */
1533:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /* Note: On this STM32 serie, a minimum number of ADC clock cycles            */
1534:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /*       are required between ADC end of calibration and ADC enable.          */
1535:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /*       Wait time can be computed in user application by waiting for the     */
1536:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /*       equivalent number of CPU cycles, by taking into account              */
1537:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /*       ratio of CPU clock versus ADC clock prescalers.                      */
1538:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /* Unit: ADC clock cycles.                                                    */
1539:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_DELAY_CALIB_ENABLE_ADC_CYCLES (  4UL)  /*!< Delay required between ADC end of calibr
1540:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
1541:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /**
1542:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @}
1543:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
1544:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
1545:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /**
1546:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @}
1547:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
1548:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
1549:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
1550:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /* Exported macro ------------------------------------------------------------*/
1551:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /** @defgroup ADC_LL_Exported_Macros ADC Exported Macros
1552:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @{
1553:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
1554:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
1555:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /** @defgroup ADC_LL_EM_WRITE_READ Common write and read registers Macros
1556:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @{
1557:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
1558:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
1559:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /**
1560:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @brief  Write a value in ADC register
1561:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @param  __INSTANCE__ ADC Instance
1562:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @param  __REG__ Register to be written
1563:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @param  __VALUE__ Value to be written in the register
1564:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @retval None
1565:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
1566:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_WriteReg(__INSTANCE__, __REG__, __VALUE__) WRITE_REG(__INSTANCE__->__REG__, (__VALUE
1567:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
1568:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /**
1569:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @brief  Read a value in ADC register
1570:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @param  __INSTANCE__ ADC Instance
ARM GAS  /tmp/ccZ0TYFG.s 			page 29


1571:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @param  __REG__ Register to be read
1572:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @retval Register value
1573:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
1574:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define LL_ADC_ReadReg(__INSTANCE__, __REG__) READ_REG(__INSTANCE__->__REG__)
1575:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /**
1576:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @}
1577:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
1578:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
1579:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /** @defgroup ADC_LL_EM_HELPER_MACRO ADC helper macro
1580:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @{
1581:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
1582:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
1583:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /**
1584:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @brief  Helper macro to get ADC channel number in decimal format
1585:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         from literals LL_ADC_CHANNEL_x.
1586:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @note   Example:
1587:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *           __LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_CHANNEL_4)
1588:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *           will return decimal number "4".
1589:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @note   The input can be a value from functions where a channel
1590:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         number is returned, either defined with number
1591:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         or with bitfield (only one bit must be set).
1592:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @param  __CHANNEL__ This parameter can be one of the following values:
1593:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_0
1594:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_1                 (8)
1595:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_2                 (8)
1596:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_3                 (8)
1597:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_4                 (8)
1598:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_5                 (8)
1599:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_6
1600:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_7
1601:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_8
1602:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_9
1603:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_10
1604:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_11
1605:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_12
1606:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_13
1607:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_14
1608:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_15
1609:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_16
1610:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_17
1611:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_18
1612:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VREFINT           (7)
1613:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_TEMPSENSOR_ADC1   (1)
1614:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_TEMPSENSOR_ADC5   (5)
1615:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VBAT              (6)
1616:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP1           (1)
1617:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP2           (2)
1618:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP3_ADC2      (2)
1619:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP3_ADC3      (3)
1620:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP4           (5)
1621:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP5           (5)
1622:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP6           (4)
1623:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *
1624:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         (1) On STM32G4, parameter available only on ADC instance: ADC1.\n
1625:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         (2) On STM32G4, parameter available only on ADC instance: ADC2.\n
1626:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         (3) On STM32G4, parameter available only on ADC instance: ADC3.\n
1627:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         (4) On STM32G4, parameter available only on ADC instance: ADC4.\n
ARM GAS  /tmp/ccZ0TYFG.s 			page 30


1628:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         (5) On STM32G4, parameter available only on ADC instance: ADC5.\n
1629:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         (6) On STM32G4, parameter available only on ADC instances: ADC1, ADC3, ADC5.\n
1630:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         (7) On STM32G4, parameter available only on ADC instances: ADC1, ADC3, ADC4, ADC5.\n
1631:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *          -  On this STM32 serie, all ADCx are not available on all devices. Refer to device dat
1632:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock 
1633:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 A
1634:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @retval Value between Min_Data=0 and Max_Data=18
1635:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
1636:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define __LL_ADC_CHANNEL_TO_DECIMAL_NB(__CHANNEL__)                                        \
1637:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   ((((__CHANNEL__) & ADC_CHANNEL_ID_BITFIELD_MASK) == 0UL)                                 \
1638:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****    ? (                                                                                     \
1639:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****        ((__CHANNEL__) & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS \
1640:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****      )                                                                                     \
1641:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****    :                                                                                       \
1642:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****    (                                                                                       \
1643:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****        (uint32_t)POSITION_VAL((__CHANNEL__))                                               \
1644:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****    )                                                                                       \
1645:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   )
1646:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
1647:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /**
1648:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @brief  Helper macro to get ADC channel in literal format LL_ADC_CHANNEL_x
1649:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         from number in decimal format.
1650:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @note   Example:
1651:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *           __LL_ADC_DECIMAL_NB_TO_CHANNEL(4)
1652:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *           will return a data equivalent to "LL_ADC_CHANNEL_4".
1653:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @param  __DECIMAL_NB__ Value between Min_Data=0 and Max_Data=18
1654:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
1655:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_0
1656:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_1                 (8)
1657:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_2                 (8)
1658:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_3                 (8)
1659:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_4                 (8)
1660:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_5                 (8)
1661:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_6
1662:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_7
1663:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_8
1664:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_9
1665:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_10
1666:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_11
1667:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_12
1668:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_13
1669:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_14
1670:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_15
1671:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_16
1672:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_17
1673:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_18
1674:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VREFINT           (7)
1675:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_TEMPSENSOR_ADC1   (1)
1676:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_TEMPSENSOR_ADC5   (5)
1677:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VBAT              (6)
1678:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP1           (1)
1679:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP2           (2)
1680:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP3_ADC2      (2)
1681:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP3_ADC3      (3)
1682:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP4           (5)
1683:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP5           (5)
1684:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP6           (4)
ARM GAS  /tmp/ccZ0TYFG.s 			page 31


1685:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *
1686:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         (1) On STM32G4, parameter available only on ADC instance: ADC1.\n
1687:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         (2) On STM32G4, parameter available only on ADC instance: ADC2.\n
1688:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         (3) On STM32G4, parameter available only on ADC instance: ADC3.\n
1689:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         (4) On STM32G4, parameter available only on ADC instance: ADC4.\n
1690:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         (5) On STM32G4, parameter available only on ADC instance: ADC5.\n
1691:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         (6) On STM32G4, parameter available only on ADC instances: ADC1, ADC3, ADC5.\n
1692:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         (7) On STM32G4, parameter available only on ADC instances: ADC1, ADC3, ADC4, ADC5.\n
1693:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *          -  On this STM32 serie, all ADCx are not available on all devices. Refer to device dat
1694:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock 
1695:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 A
1696:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
1697:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *                      comparison with internal channel parameter to be done
1698:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
1699:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
1700:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define __LL_ADC_DECIMAL_NB_TO_CHANNEL(__DECIMAL_NB__)                                             
1701:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   (((__DECIMAL_NB__) <= 9UL)                                                                       
1702:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****    ? (                                                                                             
1703:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****        ((__DECIMAL_NB__) << ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)                             |     
1704:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****        (ADC_AWD2CR_AWD2CH_0 << (__DECIMAL_NB__))                                             |     
1705:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****        (ADC_SMPR1_REGOFFSET | (((3UL * (__DECIMAL_NB__))) << ADC_CHANNEL_SMPx_BITOFFSET_POS))      
1706:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****      )                                                                                             
1707:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****    :                                                                                               
1708:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****    (                                                                                               
1709:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****        ((__DECIMAL_NB__) << ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)                                   
1710:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****        (ADC_AWD2CR_AWD2CH_0 << (__DECIMAL_NB__))                                                   
1711:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****        (ADC_SMPR2_REGOFFSET | (((3UL * ((__DECIMAL_NB__) - 10UL))) << ADC_CHANNEL_SMPx_BITOFFSET_PO
1712:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****    )                                                                                               
1713:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   )
1714:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
1715:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /**
1716:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @brief  Helper macro to determine whether the selected channel
1717:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         corresponds to literal definitions of driver.
1718:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @note   The different literal definitions of ADC channels are:
1719:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         - ADC internal channel:
1720:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *           LL_ADC_CHANNEL_VREFINT, LL_ADC_CHANNEL_TEMPSENSOR, ...
1721:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         - ADC external channel (channel connected to a GPIO pin):
1722:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *           LL_ADC_CHANNEL_1, LL_ADC_CHANNEL_2, ...
1723:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @note   The channel parameter must be a value defined from literal
1724:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         definition of a ADC internal channel (LL_ADC_CHANNEL_VREFINT,
1725:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         LL_ADC_CHANNEL_TEMPSENSOR, ...),
1726:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         ADC external channel (LL_ADC_CHANNEL_1, LL_ADC_CHANNEL_2, ...),
1727:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         must not be a value from functions where a channel number is
1728:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         returned from ADC registers,
1729:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         because internal and external channels share the same channel
1730:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         number in ADC registers. The differentiation is made only with
1731:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         parameters definitions of driver.
1732:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @param  __CHANNEL__ This parameter can be one of the following values:
1733:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_0
1734:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_1                 (8)
1735:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_2                 (8)
1736:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_3                 (8)
1737:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_4                 (8)
1738:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_5                 (8)
1739:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_6
1740:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_7
1741:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_8
ARM GAS  /tmp/ccZ0TYFG.s 			page 32


1742:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_9
1743:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_10
1744:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_11
1745:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_12
1746:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_13
1747:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_14
1748:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_15
1749:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_16
1750:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_17
1751:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_18
1752:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VREFINT           (7)
1753:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_TEMPSENSOR_ADC1   (1)
1754:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_TEMPSENSOR_ADC5   (5)
1755:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VBAT              (6)
1756:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP1           (1)
1757:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP2           (2)
1758:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP3_ADC2      (2)
1759:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP3_ADC3      (3)
1760:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP4           (5)
1761:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP5           (5)
1762:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP6           (4)
1763:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *
1764:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         (1) On STM32G4, parameter available only on ADC instance: ADC1.\n
1765:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         (2) On STM32G4, parameter available only on ADC instance: ADC2.\n
1766:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         (3) On STM32G4, parameter available only on ADC instance: ADC3.\n
1767:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         (4) On STM32G4, parameter available only on ADC instance: ADC4.\n
1768:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         (5) On STM32G4, parameter available only on ADC instance: ADC5.\n
1769:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         (6) On STM32G4, parameter available only on ADC instances: ADC1, ADC3, ADC5.\n
1770:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         (7) On STM32G4, parameter available only on ADC instances: ADC1, ADC3, ADC4, ADC5.\n
1771:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *          -  On this STM32 serie, all ADCx are not available on all devices. Refer to device dat
1772:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock 
1773:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 A
1774:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @retval Value "0" if the channel corresponds to a parameter definition of a ADC external channe
1775:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         Value "1" if the channel corresponds to a parameter definition of a ADC internal channe
1776:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
1777:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define __LL_ADC_IS_CHANNEL_INTERNAL(__CHANNEL__)                              \
1778:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   (((__CHANNEL__) & ADC_CHANNEL_ID_INTERNAL_CH_MASK) != 0UL)
1779:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
1780:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /**
1781:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @brief  Helper macro to convert a channel defined from parameter
1782:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         definition of a ADC internal channel (LL_ADC_CHANNEL_VREFINT,
1783:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         LL_ADC_CHANNEL_TEMPSENSOR, ...),
1784:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         to its equivalent parameter definition of a ADC external channel
1785:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         (LL_ADC_CHANNEL_1, LL_ADC_CHANNEL_2, ...).
1786:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @note   The channel parameter can be, additionally to a value
1787:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         defined from parameter definition of a ADC internal channel
1788:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         (LL_ADC_CHANNEL_VREFINT, LL_ADC_CHANNEL_TEMPSENSOR, ...),
1789:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         a value defined from parameter definition of
1790:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         ADC external channel (LL_ADC_CHANNEL_1, LL_ADC_CHANNEL_2, ...)
1791:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         or a value from functions where a channel number is returned
1792:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         from ADC registers.
1793:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @param  __CHANNEL__ This parameter can be one of the following values:
1794:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_0
1795:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_1                 (8)
1796:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_2                 (8)
1797:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_3                 (8)
1798:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_4                 (8)
ARM GAS  /tmp/ccZ0TYFG.s 			page 33


1799:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_5                 (8)
1800:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_6
1801:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_7
1802:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_8
1803:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_9
1804:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_10
1805:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_11
1806:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_12
1807:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_13
1808:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_14
1809:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_15
1810:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_16
1811:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_17
1812:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_18
1813:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VREFINT           (7)
1814:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_TEMPSENSOR_ADC1   (1)
1815:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_TEMPSENSOR_ADC5   (5)
1816:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VBAT              (6)
1817:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP1           (1)
1818:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP2           (2)
1819:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP3_ADC2      (2)
1820:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP3_ADC3      (3)
1821:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP4           (5)
1822:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP5           (5)
1823:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP6           (4)
1824:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *
1825:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         (1) On STM32G4, parameter available only on ADC instance: ADC1.\n
1826:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         (2) On STM32G4, parameter available only on ADC instance: ADC2.\n
1827:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         (3) On STM32G4, parameter available only on ADC instance: ADC3.\n
1828:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         (4) On STM32G4, parameter available only on ADC instance: ADC4.\n
1829:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         (5) On STM32G4, parameter available only on ADC instance: ADC5.\n
1830:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         (6) On STM32G4, parameter available only on ADC instances: ADC1, ADC3, ADC5.\n
1831:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         (7) On STM32G4, parameter available only on ADC instances: ADC1, ADC3, ADC4, ADC5.\n
1832:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *          -  On this STM32 serie, all ADCx are not available on all devices. Refer to device dat
1833:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock 
1834:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 A
1835:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
1836:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_0
1837:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_1
1838:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_2
1839:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_3
1840:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_4
1841:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_5
1842:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_6
1843:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_7
1844:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_8
1845:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_9
1846:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_10
1847:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_11
1848:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_12
1849:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_13
1850:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_14
1851:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_15
1852:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_16
1853:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_17
1854:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_18
1855:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
ARM GAS  /tmp/ccZ0TYFG.s 			page 34


1856:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL(__CHANNEL__)                     \
1857:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   ((__CHANNEL__) & ~ADC_CHANNEL_ID_INTERNAL_CH_MASK)
1858:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
1859:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /**
1860:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @brief  Helper macro to determine whether the internal channel
1861:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         selected is available on the ADC instance selected.
1862:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @note   The channel parameter must be a value defined from parameter
1863:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         definition of a ADC internal channel (LL_ADC_CHANNEL_VREFINT,
1864:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         LL_ADC_CHANNEL_TEMPSENSOR, ...),
1865:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         must not be a value defined from parameter definition of
1866:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         ADC external channel (LL_ADC_CHANNEL_1, LL_ADC_CHANNEL_2, ...)
1867:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         or a value from functions where a channel number is
1868:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         returned from ADC registers,
1869:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         because internal and external channels share the same channel
1870:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         number in ADC registers. The differentiation is made only with
1871:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         parameters definitions of driver.
1872:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @param  __ADC_INSTANCE__ ADC instance
1873:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @param  __CHANNEL__ This parameter can be one of the following values:
1874:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VREFINT           (7)
1875:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_TEMPSENSOR_ADC1   (1)
1876:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_TEMPSENSOR_ADC5   (5)
1877:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VBAT              (6)
1878:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP1           (1)
1879:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP2           (2)
1880:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP3_ADC2      (2)
1881:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP3_ADC3      (3)
1882:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP4           (5)
1883:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP5           (5)
1884:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP6           (4)
1885:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *
1886:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         (1) On STM32G4, parameter available only on ADC instance: ADC1.\n
1887:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         (2) On STM32G4, parameter available only on ADC instance: ADC2.\n
1888:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         (3) On STM32G4, parameter available only on ADC instance: ADC3.\n
1889:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         (4) On STM32G4, parameter available only on ADC instance: ADC4.\n
1890:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         (5) On STM32G4, parameter available only on ADC instance: ADC5.\n
1891:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         (6) On STM32G4, parameter available only on ADC instances: ADC1, ADC3, ADC5.\n
1892:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         (7) On STM32G4, parameter available only on ADC instances: ADC1, ADC3, ADC4, ADC5.\n
1893:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *          -  On this STM32 serie, all ADCx are not available on all devices. Refer to device dat
1894:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @retval Value "0" if the internal channel selected is not available on the ADC instance selecte
1895:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         Value "1" if the internal channel selected is available on the ADC instance selected.
1896:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
1897:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
1898:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define __LL_ADC_IS_CHANNEL_INTERNAL_AVAILABLE(__ADC_INSTANCE__, __CHANNEL__)  \
1899:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   ((((__ADC_INSTANCE__) == ADC1)                                               \
1900:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****     &&(                                                                        \
1901:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****        ((__CHANNEL__) == LL_ADC_CHANNEL_VOPAMP1)         ||                    \
1902:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****        ((__CHANNEL__) == LL_ADC_CHANNEL_TEMPSENSOR_ADC1) ||                    \
1903:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****        ((__CHANNEL__) == LL_ADC_CHANNEL_VBAT)            ||                    \
1904:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****        ((__CHANNEL__) == LL_ADC_CHANNEL_VREFINT)                               \
1905:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****       )                                                                        \
1906:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****    )                                                                           \
1907:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****    ||                                                                          \
1908:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****    (((__ADC_INSTANCE__) == ADC2)                                               \
1909:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****     &&(                                                                        \
1910:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****        ((__CHANNEL__) == LL_ADC_CHANNEL_VOPAMP2)         ||                    \
1911:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****        ((__CHANNEL__) == LL_ADC_CHANNEL_VOPAMP3_ADC2)                          \
1912:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****       )                                                                        \
ARM GAS  /tmp/ccZ0TYFG.s 			page 35


1913:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****    )                                                                           \
1914:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****    ||                                                                          \
1915:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****    (((__ADC_INSTANCE__) == ADC3)                                               \
1916:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****     &&(                                                                        \
1917:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****        ((__CHANNEL__) == LL_ADC_CHANNEL_VOPAMP3_ADC3)    ||                    \
1918:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****        ((__CHANNEL__) == LL_ADC_CHANNEL_VBAT)            ||                    \
1919:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****        ((__CHANNEL__) == LL_ADC_CHANNEL_VREFINT)                               \
1920:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****       )                                                                        \
1921:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****    )                                                                           \
1922:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****    ||                                                                          \
1923:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****    (((__ADC_INSTANCE__) == ADC4)                                               \
1924:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****     &&(                                                                        \
1925:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****        ((__CHANNEL__) == LL_ADC_CHANNEL_VOPAMP6)         ||                    \
1926:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****        ((__CHANNEL__) == LL_ADC_CHANNEL_VREFINT)                               \
1927:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****       )                                                                        \
1928:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****    )                                                                           \
1929:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****    ||                                                                          \
1930:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****    (((__ADC_INSTANCE__) == ADC5)                                               \
1931:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****     &&(                                                                        \
1932:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****        ((__CHANNEL__) == LL_ADC_CHANNEL_VOPAMP5)         ||                    \
1933:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****        ((__CHANNEL__) == LL_ADC_CHANNEL_TEMPSENSOR_ADC5) ||                    \
1934:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****        ((__CHANNEL__) == LL_ADC_CHANNEL_VOPAMP4)         ||                    \
1935:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****        ((__CHANNEL__) == LL_ADC_CHANNEL_VBAT)            ||                    \
1936:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****        ((__CHANNEL__) == LL_ADC_CHANNEL_VREFINT)                               \
1937:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****       )                                                                        \
1938:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****    )                                                                           \
1939:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   )
1940:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #elif defined(STM32G471xx)
1941:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define __LL_ADC_IS_CHANNEL_INTERNAL_AVAILABLE(__ADC_INSTANCE__, __CHANNEL__)  \
1942:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   ((((__ADC_INSTANCE__) == ADC1)                                               \
1943:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****     &&(                                                                        \
1944:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****        ((__CHANNEL__) == LL_ADC_CHANNEL_VOPAMP1)         ||                    \
1945:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****        ((__CHANNEL__) == LL_ADC_CHANNEL_TEMPSENSOR_ADC1) ||                    \
1946:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****        ((__CHANNEL__) == LL_ADC_CHANNEL_VBAT)            ||                    \
1947:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****        ((__CHANNEL__) == LL_ADC_CHANNEL_VREFINT)                               \
1948:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****       )                                                                        \
1949:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****    )                                                                           \
1950:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****    ||                                                                          \
1951:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****    (((__ADC_INSTANCE__) == ADC2)                                               \
1952:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****     &&(                                                                        \
1953:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****        ((__CHANNEL__) == LL_ADC_CHANNEL_VOPAMP2)         ||                    \
1954:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****        ((__CHANNEL__) == LL_ADC_CHANNEL_VOPAMP3_ADC2)                          \
1955:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****       )                                                                        \
1956:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****    )                                                                           \
1957:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****    ||                                                                          \
1958:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****    (((__ADC_INSTANCE__) == ADC3)                                               \
1959:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****     &&(                                                                        \
1960:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****        ((__CHANNEL__) == LL_ADC_CHANNEL_VOPAMP3_ADC3)    ||                    \
1961:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****        ((__CHANNEL__) == LL_ADC_CHANNEL_VBAT)            ||                    \
1962:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****        ((__CHANNEL__) == LL_ADC_CHANNEL_VREFINT)                               \
1963:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****       )                                                                        \
1964:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****    )                                                                           \
1965:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   )
1966:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #elif defined(STM32GBK1CB) || defined(STM32G431xx) || defined(STM32G441xx)
1967:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define __LL_ADC_IS_CHANNEL_INTERNAL_AVAILABLE(__ADC_INSTANCE__, __CHANNEL__)  \
1968:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   ((((__ADC_INSTANCE__) == ADC1)                                               \
1969:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****     &&(                                                                        \
ARM GAS  /tmp/ccZ0TYFG.s 			page 36


1970:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****        ((__CHANNEL__) == LL_ADC_CHANNEL_VOPAMP1)         ||                    \
1971:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****        ((__CHANNEL__) == LL_ADC_CHANNEL_TEMPSENSOR_ADC1) ||                    \
1972:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****        ((__CHANNEL__) == LL_ADC_CHANNEL_VBAT)            ||                    \
1973:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****        ((__CHANNEL__) == LL_ADC_CHANNEL_VREFINT)                               \
1974:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****       )                                                                        \
1975:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****    )                                                                           \
1976:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****    ||                                                                          \
1977:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****    (((__ADC_INSTANCE__) == ADC2)                                               \
1978:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****     &&(                                                                        \
1979:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****        ((__CHANNEL__) == LL_ADC_CHANNEL_VOPAMP2)         ||                    \
1980:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****        ((__CHANNEL__) == LL_ADC_CHANNEL_VOPAMP3_ADC2)                          \
1981:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****       )                                                                        \
1982:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****    )                                                                           \
1983:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   )
1984:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #endif
1985:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
1986:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /**
1987:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @brief  Helper macro to define ADC analog watchdog parameter:
1988:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         define a single channel to monitor with analog watchdog
1989:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         from sequencer channel and groups definition.
1990:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @note   To be used with function @ref LL_ADC_SetAnalogWDMonitChannels().
1991:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         Example:
1992:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *           LL_ADC_SetAnalogWDMonitChannels(
1993:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *             ADC1, LL_ADC_AWD1,
1994:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *             __LL_ADC_ANALOGWD_CHANNEL_GROUP(LL_ADC_CHANNEL4, LL_ADC_GROUP_REGULAR))
1995:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @param  __CHANNEL__ This parameter can be one of the following values:
1996:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_0
1997:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_1                 (8)
1998:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_2                 (8)
1999:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_3                 (8)
2000:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_4                 (8)
2001:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_5                 (8)
2002:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_6
2003:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_7
2004:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_8
2005:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_9
2006:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_10
2007:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_11
2008:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_12
2009:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_13
2010:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_14
2011:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_15
2012:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_16
2013:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_17
2014:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_18
2015:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VREFINT           (7)
2016:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_TEMPSENSOR_ADC1   (1)
2017:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_TEMPSENSOR_ADC5   (5)
2018:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VBAT              (6)
2019:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP1           (1)
2020:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP2           (2)
2021:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP3_ADC2      (2)
2022:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP3_ADC3      (3)
2023:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP4           (5)
2024:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP5           (5)
2025:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP6           (4)
2026:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *
ARM GAS  /tmp/ccZ0TYFG.s 			page 37


2027:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         (1) On STM32G4, parameter available only on ADC instance: ADC1.\n
2028:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         (2) On STM32G4, parameter available only on ADC instance: ADC2.\n
2029:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         (3) On STM32G4, parameter available only on ADC instance: ADC3.\n
2030:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         (4) On STM32G4, parameter available only on ADC instance: ADC4.\n
2031:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         (5) On STM32G4, parameter available only on ADC instance: ADC5.\n
2032:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         (6) On STM32G4, parameter available only on ADC instances: ADC1, ADC3, ADC5.\n
2033:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         (7) On STM32G4, parameter available only on ADC instances: ADC1, ADC3, ADC4, ADC5.\n
2034:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *          -  On this STM32 serie, all ADCx are not available on all devices. Refer to device dat
2035:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock 
2036:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 A
2037:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
2038:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *                      comparison with internal channel parameter to be done
2039:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
2040:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @param  __GROUP__ This parameter can be one of the following values:
2041:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_GROUP_REGULAR
2042:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_GROUP_INJECTED
2043:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_GROUP_REGULAR_INJECTED
2044:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
2045:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_DISABLE
2046:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_ALL_CHANNELS_REG        (0)
2047:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_ALL_CHANNELS_INJ        (0)
2048:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_ALL_CHANNELS_REG_INJ
2049:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_0_REG           (0)
2050:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_0_INJ           (0)
2051:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_0_REG_INJ
2052:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_1_REG           (0)
2053:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_1_INJ           (0)
2054:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_1_REG_INJ
2055:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_2_REG           (0)
2056:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_2_INJ           (0)
2057:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_2_REG_INJ
2058:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_3_REG           (0)
2059:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_3_INJ           (0)
2060:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_3_REG_INJ
2061:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_4_REG           (0)
2062:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_4_INJ           (0)
2063:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_4_REG_INJ
2064:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_5_REG           (0)
2065:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_5_INJ           (0)
2066:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_5_REG_INJ
2067:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_6_REG           (0)
2068:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_6_INJ           (0)
2069:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_6_REG_INJ
2070:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_7_REG           (0)
2071:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_7_INJ           (0)
2072:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_7_REG_INJ
2073:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_8_REG           (0)
2074:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_8_INJ           (0)
2075:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_8_REG_INJ
2076:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_9_REG           (0)
2077:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_9_INJ           (0)
2078:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_9_REG_INJ
2079:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_10_REG          (0)
2080:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_10_INJ          (0)
2081:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_10_REG_INJ
2082:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_11_REG          (0)
2083:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_11_INJ          (0)
ARM GAS  /tmp/ccZ0TYFG.s 			page 38


2084:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_11_REG_INJ
2085:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_12_REG          (0)
2086:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_12_INJ          (0)
2087:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_12_REG_INJ
2088:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_13_REG          (0)
2089:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_13_INJ          (0)
2090:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_13_REG_INJ
2091:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_14_REG          (0)
2092:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_14_INJ          (0)
2093:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_14_REG_INJ
2094:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_15_REG          (0)
2095:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_15_INJ          (0)
2096:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_15_REG_INJ
2097:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_16_REG          (0)
2098:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_16_INJ          (0)
2099:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_16_REG_INJ
2100:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_17_REG          (0)
2101:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_17_INJ          (0)
2102:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_17_REG_INJ
2103:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_18_REG          (0)
2104:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_18_INJ          (0)
2105:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_18_REG_INJ
2106:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_VREFINT_REG          (0)
2107:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_VREFINT_INJ          (0)
2108:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_VREFINT_REG_INJ
2109:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_TEMPSENSOR_ADC1_REG  (0)(1)
2110:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_TEMPSENSOR_ADC1_INJ  (0)(1)
2111:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_TEMPSENSOR_ADC1_REG_INJ (1)
2112:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_TEMPSENSOR_ADC5_REG  (0)(5)
2113:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_TEMPSENSOR_ADC5_INJ  (0)(5)
2114:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_TEMPSENSOR_ADC5_REG_INJ (5)
2115:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_VBAT_REG             (0)(6)
2116:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_VBAT_INJ             (0)(6)
2117:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_VBAT_REG_INJ            (6)
2118:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_VOPAMP1_REG          (0)(1)
2119:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_VOPAMP1_INJ          (0)(1)
2120:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_VOPAMP1_REG_INJ         (1)
2121:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_VOPAMP2_REG          (0)(2)
2122:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_VOPAMP2_INJ          (0)(2)
2123:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_VOPAMP2_REG_INJ         (2)
2124:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_VOPAMP3_ADC2_REG     (0)(2)
2125:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_VOPAMP3_ADC2_INJ     (0)(2)
2126:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_VOPAMP3_ADC2_REG_INJ    (2)
2127:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_VOPAMP3_ADC3_REG     (0)(3)
2128:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_VOPAMP3_ADC3_INJ     (0)(3)
2129:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_VOPAMP3_ADC3_REG_INJ    (3)
2130:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_VOPAMP4_REG          (0)(5)
2131:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_VOPAMP4_INJ          (0)(5)
2132:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_VOPAMP4_REG_INJ         (5)
2133:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_VOPAMP5_REG          (0)(5)
2134:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_VOPAMP5_INJ          (0)(5)
2135:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_VOPAMP5_REG_INJ         (5)
2136:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_VOPAMP6_REG          (0)(4)
2137:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_VOPAMP6_INJ          (0)(4)
2138:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_VOPAMP6_REG_INJ         (4)
2139:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *
2140:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         (0) On STM32G4, parameter available only on analog watchdog number: AWD1.\n
ARM GAS  /tmp/ccZ0TYFG.s 			page 39


2141:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         (1) On STM32G4, parameter available only on ADC instance: ADC1.\n
2142:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         (2) On STM32G4, parameter available only on ADC instance: ADC2.\n
2143:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         (3) On STM32G4, parameter available only on ADC instance: ADC3.\n
2144:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         (4) On STM32G4, parameter available only on ADC instance: ADC4.\n
2145:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         (5) On STM32G4, parameter available only on ADC instance: ADC5.\n
2146:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         (6) On STM32G4, parameter available only on ADC instances: ADC1, ADC3, ADC5.\n
2147:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         (7) On STM32G4, parameter available only on ADC instances: ADC1, ADC3, ADC4, ADC5.\n
2148:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *          -  On this STM32 serie, all ADCx are not available on all devices. Refer to device dat
2149:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
2150:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define __LL_ADC_ANALOGWD_CHANNEL_GROUP(__CHANNEL__, __GROUP__)                                    
2151:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   (((__GROUP__) == LL_ADC_GROUP_REGULAR)                                                           
2152:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****    ? (((__CHANNEL__) & ADC_CHANNEL_ID_MASK) | ADC_CFGR_AWD1EN | ADC_CFGR_AWD1SGL)                  
2153:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****    :                                                                                               
2154:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****    ((__GROUP__) == LL_ADC_GROUP_INJECTED)                                                          
2155:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****    ? (((__CHANNEL__) & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JAWD1EN | ADC_CFGR_AWD1SGL)                 
2156:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****    :                                                                                               
2157:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****    (((__CHANNEL__) & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JAWD1EN | ADC_CFGR_AWD1EN | ADC_CFGR_AWD1SGL) 
2158:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   )
2159:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
2160:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /**
2161:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @brief  Helper macro to set the value of ADC analog watchdog threshold high
2162:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         or low in function of ADC resolution, when ADC resolution is
2163:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         different of 12 bits.
2164:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @note   To be used with function @ref LL_ADC_ConfigAnalogWDThresholds()
2165:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         or @ref LL_ADC_SetAnalogWDThresholds().
2166:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         Example, with a ADC resolution of 8 bits, to set the value of
2167:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         analog watchdog threshold high (on 8 bits):
2168:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *           LL_ADC_SetAnalogWDThresholds
2169:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *            (< ADCx param >,
2170:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *             __LL_ADC_ANALOGWD_SET_THRESHOLD_RESOLUTION(LL_ADC_RESOLUTION_8B, <threshold_value_8
2171:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *            );
2172:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @param  __ADC_RESOLUTION__ This parameter can be one of the following values:
2173:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_12B
2174:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_10B
2175:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_8B
2176:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_6B
2177:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @param  __AWD_THRESHOLD__ Value between Min_Data=0x000 and Max_Data=0xFFF
2178:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @retval Value between Min_Data=0x000 and Max_Data=0xFFF
2179:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
2180:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define __LL_ADC_ANALOGWD_SET_THRESHOLD_RESOLUTION(__ADC_RESOLUTION__, __AWD_THRESHOLD__) \
2181:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   ((__AWD_THRESHOLD__) << ((__ADC_RESOLUTION__) >> (ADC_CFGR_RES_BITOFFSET_POS - 1U )))
2182:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
2183:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /**
2184:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @brief  Helper macro to get the value of ADC analog watchdog threshold high
2185:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         or low in function of ADC resolution, when ADC resolution is
2186:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         different of 12 bits.
2187:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @note   To be used with function @ref LL_ADC_GetAnalogWDThresholds().
2188:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         Example, with a ADC resolution of 8 bits, to get the value of
2189:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         analog watchdog threshold high (on 8 bits):
2190:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *           < threshold_value_6_bits > = __LL_ADC_ANALOGWD_GET_THRESHOLD_RESOLUTION
2191:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *            (LL_ADC_RESOLUTION_8B,
2192:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *             LL_ADC_GetAnalogWDThresholds(<ADCx param>, LL_ADC_AWD_THRESHOLD_HIGH)
2193:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *            );
2194:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @param  __ADC_RESOLUTION__ This parameter can be one of the following values:
2195:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_12B
2196:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_10B
2197:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_8B
ARM GAS  /tmp/ccZ0TYFG.s 			page 40


2198:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_6B
2199:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @param  __AWD_THRESHOLD_12_BITS__ Value between Min_Data=0x000 and Max_Data=0xFFF
2200:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @retval Value between Min_Data=0x000 and Max_Data=0xFFF
2201:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
2202:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define __LL_ADC_ANALOGWD_GET_THRESHOLD_RESOLUTION(__ADC_RESOLUTION__, __AWD_THRESHOLD_12_BITS__) \
2203:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   ((__AWD_THRESHOLD_12_BITS__) >> ((__ADC_RESOLUTION__) >> (ADC_CFGR_RES_BITOFFSET_POS - 1U )))
2204:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
2205:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /**
2206:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @brief  Helper macro to get the ADC analog watchdog threshold high
2207:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         or low from raw value containing both thresholds concatenated.
2208:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @note   To be used with function @ref LL_ADC_GetAnalogWDThresholds().
2209:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         Example, to get analog watchdog threshold high from the register raw value:
2210:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *           __LL_ADC_ANALOGWD_THRESHOLDS_HIGH_LOW(LL_ADC_AWD_THRESHOLD_HIGH, <raw_value_with_both
2211:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @param  __AWD_THRESHOLD_TYPE__ This parameter can be one of the following values:
2212:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_THRESHOLD_HIGH
2213:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_THRESHOLD_LOW
2214:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @param  __AWD_THRESHOLDS__ Value between Min_Data=0x00000000 and Max_Data=0xFFFFFFFF
2215:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @retval Value between Min_Data=0x000 and Max_Data=0xFFF
2216:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
2217:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define __LL_ADC_ANALOGWD_THRESHOLDS_HIGH_LOW(__AWD_THRESHOLD_TYPE__, __AWD_THRESHOLDS__)       \
2218:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   (((__AWD_THRESHOLDS__) >> (((__AWD_THRESHOLD_TYPE__) & ADC_AWD_TRX_BIT_HIGH_MASK) >> ADC_AWD_TRX_
2219:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
2220:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /**
2221:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @brief  Helper macro to set the ADC calibration value with both single ended
2222:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         and differential modes calibration factors concatenated.
2223:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @note   To be used with function @ref LL_ADC_SetCalibrationFactor().
2224:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         Example, to set calibration factors single ended to 0x55
2225:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         and differential ended to 0x2A:
2226:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *           LL_ADC_SetCalibrationFactor(
2227:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *             ADC1,
2228:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *             __LL_ADC_CALIB_FACTOR_SINGLE_DIFF(0x55, 0x2A))
2229:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @param  __CALIB_FACTOR_SINGLE_ENDED__ Value between Min_Data=0x00 and Max_Data=0x7F
2230:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @param  __CALIB_FACTOR_DIFFERENTIAL__ Value between Min_Data=0x00 and Max_Data=0x7F
2231:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @retval Value between Min_Data=0x00000000 and Max_Data=0xFFFFFFFF
2232:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
2233:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define __LL_ADC_CALIB_FACTOR_SINGLE_DIFF(__CALIB_FACTOR_SINGLE_ENDED__, __CALIB_FACTOR_DIFFERENTIA
2234:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   (((__CALIB_FACTOR_DIFFERENTIAL__) << ADC_CALFACT_CALFACT_D_Pos) | (__CALIB_FACTOR_SINGLE_ENDED__)
2235:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
2236:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #if defined(ADC_MULTIMODE_SUPPORT)
2237:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /**
2238:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @brief  Helper macro to get the ADC multimode conversion data of ADC master
2239:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         or ADC slave from raw value with both ADC conversion data concatenated.
2240:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @note   This macro is intended to be used when multimode transfer by DMA
2241:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         is enabled: refer to function @ref LL_ADC_SetMultiDMATransfer().
2242:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         In this case the transferred data need to processed with this macro
2243:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         to separate the conversion data of ADC master and ADC slave.
2244:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @param  __ADC_MULTI_MASTER_SLAVE__ This parameter can be one of the following values:
2245:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_MASTER
2246:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_SLAVE
2247:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @param  __ADC_MULTI_CONV_DATA__ Value between Min_Data=0x000 and Max_Data=0xFFF
2248:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @retval Value between Min_Data=0x000 and Max_Data=0xFFF
2249:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
2250:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define __LL_ADC_MULTI_CONV_DATA_MASTER_SLAVE(__ADC_MULTI_MASTER_SLAVE__, __ADC_MULTI_CONV_DATA__) 
2251:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   (((__ADC_MULTI_CONV_DATA__) >> ((ADC_CDR_RDATA_SLV_Pos) & ~(__ADC_MULTI_MASTER_SLAVE__))) & ADC_C
2252:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #endif
2253:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
2254:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #if defined(ADC_MULTIMODE_SUPPORT)
ARM GAS  /tmp/ccZ0TYFG.s 			page 41


2255:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /**
2256:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @brief  Helper macro to select, from a ADC instance, to which ADC instance
2257:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         it has a dependence in multimode (ADC master of the corresponding
2258:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         ADC common instance).
2259:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @note   In case of device with multimode available and a mix of
2260:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         ADC instances compliant and not compliant with multimode feature,
2261:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         ADC instances not compliant with multimode feature are
2262:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         considered as master instances (do not depend to
2263:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         any other ADC instance).
2264:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @param  __ADCx__ ADC instance
2265:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @retval __ADCx__ ADC instance master of the corresponding ADC common instance
2266:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
2267:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #if defined(ADC5)
2268:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define __LL_ADC_MULTI_INSTANCE_MASTER(__ADCx__) \
2269:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   ( ( ((__ADCx__) == ADC2)                                                     \
2270:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****     )?                                                                         \
2271:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****     (ADC1)                                                                     \
2272:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****     :                                                                          \
2273:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****     ( ( ((__ADCx__) == ADC4)                                                   \
2274:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****       )?                                                                       \
2275:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****       (ADC3)                                                                   \
2276:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****       :                                                                        \
2277:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****       (__ADCx__)                                                               \
2278:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****     )                                                                          \
2279:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   )
2280:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #else
2281:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define __LL_ADC_MULTI_INSTANCE_MASTER(__ADCx__) \
2282:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   ( ( ((__ADCx__) == ADC2)                                                     \
2283:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****     )?                                                                         \
2284:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****     (ADC1)                                                                     \
2285:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****     :                                                                          \
2286:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****     (__ADCx__)                                                                 \
2287:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   )
2288:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #endif
2289:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #endif
2290:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
2291:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /**
2292:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @brief  Helper macro to select the ADC common instance
2293:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         to which is belonging the selected ADC instance.
2294:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @note   ADC common register instance can be used for:
2295:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         - Set parameters common to several ADC instances
2296:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         - Multimode (for devices with several ADC instances)
2297:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         Refer to functions having argument "ADCxy_COMMON" as parameter.
2298:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @param  __ADCx__ ADC instance
2299:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @retval ADC common register instance
2300:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
2301:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #if defined(ADC345_COMMON)
2302:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define __LL_ADC_COMMON_INSTANCE(__ADCx__)                                     \
2303:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   ((((__ADCx__) == ADC1) || ((__ADCx__) == ADC2))                              \
2304:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****     ? (                                                                        \
2305:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****        (ADC12_COMMON)                                                          \
2306:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****       )                                                                        \
2307:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****       :                                                                        \
2308:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****       (                                                                        \
2309:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****        (ADC345_COMMON)                                                         \
2310:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****       )                                                                        \
2311:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   )
ARM GAS  /tmp/ccZ0TYFG.s 			page 42


2312:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #else
2313:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define __LL_ADC_COMMON_INSTANCE(__ADCx__)  (ADC12_COMMON)
2314:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #endif
2315:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /**
2316:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @brief  Helper macro to check if all ADC instances sharing the same
2317:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         ADC common instance are disabled.
2318:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @note   This check is required by functions with setting conditioned to
2319:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         ADC state:
2320:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         All ADC instances of the ADC common group must be disabled.
2321:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         Refer to functions having argument "ADCxy_COMMON" as parameter.
2322:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @note   On devices with only 1 ADC common instance, parameter of this macro
2323:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         is useless and can be ignored (parameter kept for compatibility
2324:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         with devices featuring several ADC common instances).
2325:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @param  __ADCXY_COMMON__ ADC common instance
2326:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         (can be set directly from CMSIS definition or by using helper macro @ref __LL_ADC_COMMO
2327:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @retval Value "0" if all ADC instances sharing the same ADC common instance
2328:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         are disabled.
2329:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         Value "1" if at least one ADC instance sharing the same ADC common instance
2330:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         is enabled.
2331:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
2332:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #if defined(ADC345_COMMON)
2333:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #if defined(ADC4) &&  defined(ADC5)
2334:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define __LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__ADCXY_COMMON__)              \
2335:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   (((__ADCXY_COMMON__) == ADC12_COMMON)                                        \
2336:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****     ? (                                                                        \
2337:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****        (LL_ADC_IsEnabled(ADC1) |                                               \
2338:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****         LL_ADC_IsEnabled(ADC2)  )                                              \
2339:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****       )                                                                        \
2340:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****       :                                                                        \
2341:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****       (                                                                        \
2342:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****        (LL_ADC_IsEnabled(ADC3) |                                               \
2343:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****         LL_ADC_IsEnabled(ADC4) |                                               \
2344:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****         LL_ADC_IsEnabled(ADC5)  )                                              \
2345:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****       )                                                                        \
2346:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   )
2347:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #else
2348:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define __LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__ADCXY_COMMON__)              \
2349:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   (((__ADCXY_COMMON__) == ADC12_COMMON)                                        \
2350:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****     ? (                                                                        \
2351:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****        (LL_ADC_IsEnabled(ADC1) |                                               \
2352:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****         LL_ADC_IsEnabled(ADC2)  )                                              \
2353:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****       )                                                                        \
2354:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****       :                                                                        \
2355:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****       (LL_ADC_IsEnabled(ADC3))                                                 \
2356:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   )
2357:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #endif /* ADC4 && ADC5 */
2358:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #else
2359:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define __LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__ADCXY_COMMON__)              \
2360:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   (LL_ADC_IsEnabled(ADC1) | LL_ADC_IsEnabled(ADC2))
2361:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #endif
2362:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
2363:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /**
2364:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @brief  Helper macro to define the ADC conversion data full-scale digital
2365:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         value corresponding to the selected ADC resolution.
2366:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @note   ADC conversion data full-scale corresponds to voltage range
2367:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         determined by analog voltage references Vref+ and Vref-
2368:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         (refer to reference manual).
ARM GAS  /tmp/ccZ0TYFG.s 			page 43


2369:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @param  __ADC_RESOLUTION__ This parameter can be one of the following values:
2370:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_12B
2371:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_10B
2372:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_8B
2373:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_6B
2374:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @retval ADC conversion data full-scale digital value (unit: digital value of ADC conversion dat
2375:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
2376:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define __LL_ADC_DIGITAL_SCALE(__ADC_RESOLUTION__)                             \
2377:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   (0xFFFUL >> ((__ADC_RESOLUTION__) >> (ADC_CFGR_RES_BITOFFSET_POS - 1UL)))
2378:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
2379:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /**
2380:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @brief  Helper macro to convert the ADC conversion data from
2381:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         a resolution to another resolution.
2382:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @param  __DATA__ ADC conversion data to be converted
2383:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @param  __ADC_RESOLUTION_CURRENT__ Resolution of the data to be converted
2384:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         This parameter can be one of the following values:
2385:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_12B
2386:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_10B
2387:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_8B
2388:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_6B
2389:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @param  __ADC_RESOLUTION_TARGET__ Resolution of the data after conversion
2390:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         This parameter can be one of the following values:
2391:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_12B
2392:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_10B
2393:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_8B
2394:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_6B
2395:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @retval ADC conversion data to the requested resolution
2396:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
2397:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define __LL_ADC_CONVERT_DATA_RESOLUTION(__DATA__,\
2398:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****                                          __ADC_RESOLUTION_CURRENT__,\
2399:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****                                          __ADC_RESOLUTION_TARGET__)            \
2400:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   (((__DATA__)                                                                 \
2401:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****     << ((__ADC_RESOLUTION_CURRENT__) >> (ADC_CFGR_RES_BITOFFSET_POS - 1UL)))   \
2402:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****    >> ((__ADC_RESOLUTION_TARGET__) >> (ADC_CFGR_RES_BITOFFSET_POS - 1UL))      \
2403:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   )
2404:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
2405:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /**
2406:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @brief  Helper macro to calculate the voltage (unit: mVolt)
2407:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         corresponding to a ADC conversion data (unit: digital value).
2408:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @note   Analog reference voltage (Vref+) must be either known from
2409:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         user board environment or can be calculated using ADC measurement
2410:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         and ADC helper macro @ref __LL_ADC_CALC_VREFANALOG_VOLTAGE().
2411:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @param  __VREFANALOG_VOLTAGE__ Analog reference voltage (unit: mV)
2412:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @param  __ADC_DATA__ ADC conversion data (resolution 12 bits)
2413:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *                       (unit: digital value).
2414:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @param  __ADC_RESOLUTION__ This parameter can be one of the following values:
2415:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_12B
2416:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_10B
2417:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_8B
2418:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_6B
2419:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @retval ADC conversion data equivalent voltage value (unit: mVolt)
2420:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
2421:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define __LL_ADC_CALC_DATA_TO_VOLTAGE(__VREFANALOG_VOLTAGE__,\
2422:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****                                       __ADC_DATA__,\
2423:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****                                       __ADC_RESOLUTION__)                      \
2424:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   ((__ADC_DATA__) * (__VREFANALOG_VOLTAGE__)                                   \
2425:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****    / __LL_ADC_DIGITAL_SCALE(__ADC_RESOLUTION__)                                \
ARM GAS  /tmp/ccZ0TYFG.s 			page 44


2426:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   )
2427:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
2428:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /**
2429:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @brief  Helper macro to calculate analog reference voltage (Vref+)
2430:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         (unit: mVolt) from ADC conversion data of internal voltage
2431:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         reference VrefInt.
2432:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @note   Computation is using VrefInt calibration value
2433:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         stored in system memory for each device during production.
2434:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @note   This voltage depends on user board environment: voltage level
2435:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         connected to pin Vref+.
2436:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         On devices with small package, the pin Vref+ is not present
2437:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         and internally bonded to pin Vdda.
2438:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @note   On this STM32 serie, calibration data of internal voltage reference
2439:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         VrefInt corresponds to a resolution of 12 bits,
2440:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         this is the recommended ADC resolution to convert voltage of
2441:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         internal voltage reference VrefInt.
2442:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         Otherwise, this macro performs the processing to scale
2443:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         ADC conversion data to 12 bits.
2444:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @param  __VREFINT_ADC_DATA__ ADC conversion data (resolution 12 bits)
2445:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         of internal voltage reference VrefInt (unit: digital value).
2446:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @param  __ADC_RESOLUTION__ This parameter can be one of the following values:
2447:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_12B
2448:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_10B
2449:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_8B
2450:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_6B
2451:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @retval Analog reference voltage (unit: mV)
2452:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
2453:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define __LL_ADC_CALC_VREFANALOG_VOLTAGE(__VREFINT_ADC_DATA__,\
2454:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****                                          __ADC_RESOLUTION__)                   \
2455:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   (((uint32_t)(*VREFINT_CAL_ADDR) * VREFINT_CAL_VREF)                          \
2456:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****    / __LL_ADC_CONVERT_DATA_RESOLUTION((__VREFINT_ADC_DATA__),                  \
2457:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****                                       (__ADC_RESOLUTION__),                    \
2458:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****                                       LL_ADC_RESOLUTION_12B))
2459:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
2460:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /**
2461:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @brief  Helper macro to calculate the temperature (unit: degree Celsius)
2462:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         from ADC conversion data of internal temperature sensor.
2463:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @note   Computation is using temperature sensor calibration values
2464:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         stored in system memory for each device during production.
2465:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @note   Calculation formula:
2466:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *           Temperature = ((TS_ADC_DATA - TS_CAL1)
2467:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *                           * (TS_CAL2_TEMP - TS_CAL1_TEMP))
2468:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *                         / (TS_CAL2 - TS_CAL1) + TS_CAL1_TEMP
2469:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *           with TS_ADC_DATA = temperature sensor raw data measured by ADC
2470:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *                Avg_Slope = (TS_CAL2 - TS_CAL1)
2471:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *                            / (TS_CAL2_TEMP - TS_CAL1_TEMP)
2472:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *                TS_CAL1   = equivalent TS_ADC_DATA at temperature
2473:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *                            TEMP_DEGC_CAL1 (calibrated in factory)
2474:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *                TS_CAL2   = equivalent TS_ADC_DATA at temperature
2475:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *                            TEMP_DEGC_CAL2 (calibrated in factory)
2476:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         Caution: Calculation relevancy under reserve that calibration
2477:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *                  parameters are correct (address and data).
2478:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *                  To calculate temperature using temperature sensor
2479:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *                  datasheet typical values (generic values less, therefore
2480:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *                  less accurate than calibrated values),
2481:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *                  use helper macro @ref __LL_ADC_CALC_TEMPERATURE_TYP_PARAMS().
2482:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @note   As calculation input, the analog reference voltage (Vref+) must be
ARM GAS  /tmp/ccZ0TYFG.s 			page 45


2483:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         defined as it impacts the ADC LSB equivalent voltage.
2484:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @note   Analog reference voltage (Vref+) must be either known from
2485:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         user board environment or can be calculated using ADC measurement
2486:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         and ADC helper macro @ref __LL_ADC_CALC_VREFANALOG_VOLTAGE().
2487:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @note   On this STM32 serie, calibration data of temperature sensor
2488:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         corresponds to a resolution of 12 bits,
2489:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         this is the recommended ADC resolution to convert voltage of
2490:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         temperature sensor.
2491:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         Otherwise, this macro performs the processing to scale
2492:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         ADC conversion data to 12 bits.
2493:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @param  __VREFANALOG_VOLTAGE__  Analog reference voltage (unit: mV)
2494:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @param  __TEMPSENSOR_ADC_DATA__ ADC conversion data of internal
2495:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *                                 temperature sensor (unit: digital value).
2496:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @param  __ADC_RESOLUTION__      ADC resolution at which internal temperature
2497:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *                                 sensor voltage has been measured.
2498:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         This parameter can be one of the following values:
2499:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_12B
2500:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_10B
2501:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_8B
2502:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_6B
2503:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @retval Temperature (unit: degree Celsius)
2504:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
2505:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define __LL_ADC_CALC_TEMPERATURE(__VREFANALOG_VOLTAGE__,\
2506:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****                                   __TEMPSENSOR_ADC_DATA__,\
2507:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****                                   __ADC_RESOLUTION__)                              \
2508:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   (((( ((int32_t)((__LL_ADC_CONVERT_DATA_RESOLUTION((__TEMPSENSOR_ADC_DATA__),     \
2509:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****                                                     (__ADC_RESOLUTION__),          \
2510:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****                                                     LL_ADC_RESOLUTION_12B)         \
2511:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****                    * (__VREFANALOG_VOLTAGE__))                                     \
2512:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****                   / TEMPSENSOR_CAL_VREFANALOG)                                     \
2513:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****         - (int32_t) *TEMPSENSOR_CAL1_ADDR)                                         \
2514:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****      ) * (int32_t)(TEMPSENSOR_CAL2_TEMP - TEMPSENSOR_CAL1_TEMP)                    \
2515:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****     ) / (int32_t)((int32_t)*TEMPSENSOR_CAL2_ADDR - (int32_t)*TEMPSENSOR_CAL1_ADDR) \
2516:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****    ) + TEMPSENSOR_CAL1_TEMP                                                        \
2517:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   )
2518:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
2519:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /**
2520:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @brief  Helper macro to calculate the temperature (unit: degree Celsius)
2521:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         from ADC conversion data of internal temperature sensor.
2522:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @note   Computation is using temperature sensor typical values
2523:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         (refer to device datasheet).
2524:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @note   Calculation formula:
2525:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *           Temperature = (TS_TYP_CALx_VOLT(uV) - TS_ADC_DATA * Conversion_uV)
2526:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *                         / Avg_Slope + CALx_TEMP
2527:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *           with TS_ADC_DATA      = temperature sensor raw data measured by ADC
2528:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *                                   (unit: digital value)
2529:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *                Avg_Slope        = temperature sensor slope
2530:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *                                   (unit: uV/Degree Celsius)
2531:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *                TS_TYP_CALx_VOLT = temperature sensor digital value at
2532:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *                                   temperature CALx_TEMP (unit: mV)
2533:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         Caution: Calculation relevancy under reserve the temperature sensor
2534:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *                  of the current device has characteristics in line with
2535:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *                  datasheet typical values.
2536:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *                  If temperature sensor calibration values are available on
2537:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *                  on this device (presence of macro __LL_ADC_CALC_TEMPERATURE()),
2538:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *                  temperature calculation will be more accurate using
2539:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *                  helper macro @ref __LL_ADC_CALC_TEMPERATURE().
ARM GAS  /tmp/ccZ0TYFG.s 			page 46


2540:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @note   As calculation input, the analog reference voltage (Vref+) must be
2541:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         defined as it impacts the ADC LSB equivalent voltage.
2542:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @note   Analog reference voltage (Vref+) must be either known from
2543:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         user board environment or can be calculated using ADC measurement
2544:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         and ADC helper macro @ref __LL_ADC_CALC_VREFANALOG_VOLTAGE().
2545:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @note   ADC measurement data must correspond to a resolution of 12 bits
2546:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         (full scale digital value 4095). If not the case, the data must be
2547:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         preliminarily rescaled to an equivalent resolution of 12 bits.
2548:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @param  __TEMPSENSOR_TYP_AVGSLOPE__   Device datasheet data: Temperature sensor slope typical v
2549:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *                                       On STM32G4, refer to device datasheet parameter "Avg_Slop
2550:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @param  __TEMPSENSOR_TYP_CALX_V__     Device datasheet data: Temperature sensor voltage typical
2551:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *                                       On STM32G4, refer to device datasheet parameter "V30" (co
2552:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @param  __TEMPSENSOR_CALX_TEMP__      Device datasheet data: Temperature at which temperature s
2553:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @param  __VREFANALOG_VOLTAGE__        Analog voltage reference (Vref+) voltage (unit: mV)
2554:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @param  __TEMPSENSOR_ADC_DATA__       ADC conversion data of internal temperature sensor (unit:
2555:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @param  __ADC_RESOLUTION__            ADC resolution at which internal temperature sensor volta
2556:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         This parameter can be one of the following values:
2557:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_12B
2558:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_10B
2559:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_8B
2560:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_6B
2561:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @retval Temperature (unit: degree Celsius)
2562:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
2563:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #define __LL_ADC_CALC_TEMPERATURE_TYP_PARAMS(__TEMPSENSOR_TYP_AVGSLOPE__,\
2564:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****                                              __TEMPSENSOR_TYP_CALX_V__,\
2565:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****                                              __TEMPSENSOR_CALX_TEMP__,\
2566:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****                                              __VREFANALOG_VOLTAGE__,\
2567:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****                                              __TEMPSENSOR_ADC_DATA__,\
2568:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****                                              __ADC_RESOLUTION__)               \
2569:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   ((( (                                                                        \
2570:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****        (int32_t)((((__TEMPSENSOR_ADC_DATA__) * (__VREFANALOG_VOLTAGE__))       \
2571:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****                   / __LL_ADC_DIGITAL_SCALE(__ADC_RESOLUTION__))                \
2572:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****                  * 1000UL)                                                     \
2573:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****        -                                                                       \
2574:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****        (int32_t)(((__TEMPSENSOR_TYP_CALX_V__))                                 \
2575:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****                  * 1000UL)                                                     \
2576:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****       )                                                                        \
2577:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****     ) / (int32_t)(__TEMPSENSOR_TYP_AVGSLOPE__)                                 \
2578:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****    ) + (int32_t)(__TEMPSENSOR_CALX_TEMP__)                                     \
2579:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   )
2580:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
2581:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /**
2582:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @}
2583:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
2584:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
2585:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /**
2586:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @}
2587:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
2588:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
2589:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
2590:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /* Exported functions --------------------------------------------------------*/
2591:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /** @defgroup ADC_LL_Exported_Functions ADC Exported Functions
2592:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @{
2593:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
2594:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
2595:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /** @defgroup ADC_LL_EF_DMA_Management ADC DMA management
2596:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @{
ARM GAS  /tmp/ccZ0TYFG.s 			page 47


2597:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
2598:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /* Note: LL ADC functions to set DMA transfer are located into sections of    */
2599:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /*       configuration of ADC instance, groups and multimode (if available):  */
2600:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /*       @ref LL_ADC_REG_SetDMATransfer(), ...                                */
2601:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
2602:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /**
2603:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @brief  Function to help to configure DMA transfer from ADC: retrieve the
2604:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         ADC register address from ADC instance and a list of ADC registers
2605:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         intended to be used (most commonly) with DMA transfer.
2606:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @note   These ADC registers are data registers:
2607:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         when ADC conversion data is available in ADC data registers,
2608:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         ADC generates a DMA transfer request.
2609:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @note   This macro is intended to be used with LL DMA driver, refer to
2610:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         function "LL_DMA_ConfigAddresses()".
2611:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         Example:
2612:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *           LL_DMA_ConfigAddresses(DMA1,
2613:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *                                  LL_DMA_CHANNEL_1,
2614:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *                                  LL_ADC_DMA_GetRegAddr(ADC1, LL_ADC_DMA_REG_REGULAR_DATA),
2615:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *                                  (uint32_t)&< array or variable >,
2616:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *                                  LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
2617:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @note   For devices with several ADC: in multimode, some devices
2618:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         use a different data register outside of ADC instance scope
2619:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         (common data register). This macro manages this register difference,
2620:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         only ADC instance has to be set as parameter.
2621:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @rmtoll DR       RDATA          LL_ADC_DMA_GetRegAddr\n
2622:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         CDR      RDATA_MST      LL_ADC_DMA_GetRegAddr\n
2623:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         CDR      RDATA_SLV      LL_ADC_DMA_GetRegAddr
2624:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
2625:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @param  Register This parameter can be one of the following values:
2626:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_DMA_REG_REGULAR_DATA
2627:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_DMA_REG_REGULAR_DATA_MULTI (1)
2628:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *
2629:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         (1) Available on devices with several ADC instances.
2630:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @retval ADC register address
2631:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
2632:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #if defined(ADC_MULTIMODE_SUPPORT)
2633:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_DMA_GetRegAddr(ADC_TypeDef *ADCx, uint32_t Register)
2634:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** {
2635:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   register uint32_t data_reg_addr;
2636:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
2637:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   if (Register == LL_ADC_DMA_REG_REGULAR_DATA)
2638:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   {
2639:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****     /* Retrieve address of register DR */
2640:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****     data_reg_addr = (uint32_t) &(ADCx->DR);
2641:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   }
2642:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   else /* (Register == LL_ADC_DMA_REG_REGULAR_DATA_MULTI) */
2643:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   {
2644:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****     /* Retrieve address of register CDR */
2645:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****     data_reg_addr = (uint32_t) &((__LL_ADC_COMMON_INSTANCE(ADCx))->CDR);
2646:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   }
2647:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
2648:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   return data_reg_addr;
2649:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** }
2650:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #else
2651:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_DMA_GetRegAddr(ADC_TypeDef *ADCx, uint32_t Register)
2652:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** {
2653:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   /* Prevent unused argument(s) compilation warning */
ARM GAS  /tmp/ccZ0TYFG.s 			page 48


2654:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   (void)(Register);
2655:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
2656:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   /* Retrieve address of register DR */
2657:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   return (uint32_t) &(ADCx->DR);
2658:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** }
2659:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #endif
2660:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
2661:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /**
2662:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @}
2663:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
2664:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
2665:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /** @defgroup ADC_LL_EF_Configuration_ADC_Common Configuration of ADC hierarchical scope: common to
2666:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @{
2667:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
2668:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
2669:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /**
2670:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @brief  Set parameter common to several ADC: Clock source and prescaler.
2671:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @note   On this STM32 serie, if ADC group injected is used, some
2672:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         clock ratio constraints between ADC clock and AHB clock
2673:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         must be respected.
2674:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         Refer to reference manual.
2675:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @note   On this STM32 serie, setting of this feature is conditioned to
2676:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         ADC state:
2677:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         All ADC instances of the ADC common group must be disabled.
2678:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         This check can be done with function @ref LL_ADC_IsEnabled() for each
2679:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         ADC instance or by using helper macro helper macro
2680:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @ref __LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE().
2681:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @rmtoll CCR      CKMODE         LL_ADC_SetCommonClock\n
2682:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         CCR      PRESC          LL_ADC_SetCommonClock
2683:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @param  ADCxy_COMMON ADC common instance
2684:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         (can be set directly from CMSIS definition or by using helper macro @ref __LL_ADC_COMMO
2685:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @param  CommonClock This parameter can be one of the following values:
2686:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CLOCK_SYNC_PCLK_DIV1
2687:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CLOCK_SYNC_PCLK_DIV2
2688:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CLOCK_SYNC_PCLK_DIV4
2689:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV1
2690:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV2
2691:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV4
2692:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV6
2693:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV8
2694:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV10
2695:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV12
2696:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV16
2697:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV32
2698:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV64
2699:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
2700:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
2701:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @retval None
2702:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
2703:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
2704:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** {
  28              		.loc 1 2704 1
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 8
  31              		@ frame_needed = 1, uses_anonymous_args = 0
  32              		@ link register save eliminated.
  33 0000 80B4     		push	{r7}
ARM GAS  /tmp/ccZ0TYFG.s 			page 49


  34              	.LCFI0:
  35              		.cfi_def_cfa_offset 4
  36              		.cfi_offset 7, -4
  37 0002 83B0     		sub	sp, sp, #12
  38              	.LCFI1:
  39              		.cfi_def_cfa_offset 16
  40 0004 00AF     		add	r7, sp, #0
  41              	.LCFI2:
  42              		.cfi_def_cfa_register 7
  43 0006 7860     		str	r0, [r7, #4]
  44 0008 3960     		str	r1, [r7]
2705:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
  45              		.loc 1 2705 3
  46 000a 7B68     		ldr	r3, [r7, #4]
  47 000c 9B68     		ldr	r3, [r3, #8]
  48 000e 23F47C12 		bic	r2, r3, #4128768
  49 0012 3B68     		ldr	r3, [r7]
  50 0014 1A43     		orrs	r2, r2, r3
  51 0016 7B68     		ldr	r3, [r7, #4]
  52 0018 9A60     		str	r2, [r3, #8]
2706:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** }
  53              		.loc 1 2706 1
  54 001a 00BF     		nop
  55 001c 0C37     		adds	r7, r7, #12
  56              	.LCFI3:
  57              		.cfi_def_cfa_offset 4
  58 001e BD46     		mov	sp, r7
  59              	.LCFI4:
  60              		.cfi_def_cfa_register 13
  61              		@ sp needed
  62 0020 5DF8047B 		ldr	r7, [sp], #4
  63              	.LCFI5:
  64              		.cfi_restore 7
  65              		.cfi_def_cfa_offset 0
  66 0024 7047     		bx	lr
  67              		.cfi_endproc
  68              	.LFE131:
  70              		.section	.text.LL_ADC_SetCommonPathInternalCh,"ax",%progbits
  71              		.align	1
  72              		.syntax unified
  73              		.thumb
  74              		.thumb_func
  75              		.fpu fpv4-sp-d16
  77              	LL_ADC_SetCommonPathInternalCh:
  78              	.LFB133:
2707:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
2708:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /**
2709:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @brief  Get parameter common to several ADC: Clock source and prescaler.
2710:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @rmtoll CCR      CKMODE         LL_ADC_GetCommonClock\n
2711:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         CCR      PRESC          LL_ADC_GetCommonClock
2712:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @param  ADCxy_COMMON ADC common instance
2713:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         (can be set directly from CMSIS definition or by using helper macro @ref __LL_ADC_COMMO
2714:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
2715:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CLOCK_SYNC_PCLK_DIV1
2716:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CLOCK_SYNC_PCLK_DIV2
2717:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CLOCK_SYNC_PCLK_DIV4
2718:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV1
ARM GAS  /tmp/ccZ0TYFG.s 			page 50


2719:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV2
2720:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV4
2721:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV6
2722:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV8
2723:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV10
2724:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV12
2725:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV16
2726:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV32
2727:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV64
2728:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
2729:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
2730:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
2731:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_GetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON)
2732:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** {
2733:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC));
2734:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** }
2735:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
2736:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /**
2737:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @brief  Set parameter common to several ADC: measurement path to internal
2738:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         channels (VrefInt, temperature sensor, ...).
2739:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @note   One or several values can be selected.
2740:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         Example: (LL_ADC_PATH_INTERNAL_VREFINT |
2741:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *                   LL_ADC_PATH_INTERNAL_TEMPSENSOR)
2742:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @note   Stabilization time of measurement path to internal channel:
2743:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         After enabling internal paths, before starting ADC conversion,
2744:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         a delay is required for internal voltage reference and
2745:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         temperature sensor stabilization time.
2746:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         Refer to device datasheet.
2747:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         Refer to literal @ref LL_ADC_DELAY_VREFINT_STAB_US.
2748:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         Refer to literal @ref LL_ADC_DELAY_TEMPSENSOR_STAB_US.
2749:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @note   ADC internal channel sampling time constraint:
2750:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         For ADC conversion of internal channels,
2751:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         a sampling time minimum value is required.
2752:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         Refer to device datasheet.
2753:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @rmtoll CCR      VREFEN         LL_ADC_SetCommonPathInternalCh\n
2754:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         CCR      VSENSESEL      LL_ADC_SetCommonPathInternalCh\n
2755:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         CCR      VBATSEL        LL_ADC_SetCommonPathInternalCh
2756:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @param  ADCxy_COMMON ADC common instance
2757:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         (can be set directly from CMSIS definition or by using helper macro @ref __LL_ADC_COMMO
2758:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @param  PathInternal This parameter can be a combination of the following values:
2759:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_PATH_INTERNAL_NONE
2760:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
2761:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
2762:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
2763:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @retval None
2764:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
2765:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t Path
2766:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** {
  79              		.loc 1 2766 1
  80              		.cfi_startproc
  81              		@ args = 0, pretend = 0, frame = 8
  82              		@ frame_needed = 1, uses_anonymous_args = 0
  83              		@ link register save eliminated.
  84 0000 80B4     		push	{r7}
  85              	.LCFI6:
  86              		.cfi_def_cfa_offset 4
  87              		.cfi_offset 7, -4
ARM GAS  /tmp/ccZ0TYFG.s 			page 51


  88 0002 83B0     		sub	sp, sp, #12
  89              	.LCFI7:
  90              		.cfi_def_cfa_offset 16
  91 0004 00AF     		add	r7, sp, #0
  92              	.LCFI8:
  93              		.cfi_def_cfa_register 7
  94 0006 7860     		str	r0, [r7, #4]
  95 0008 3960     		str	r1, [r7]
2767:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal)
  96              		.loc 1 2767 3
  97 000a 7B68     		ldr	r3, [r7, #4]
  98 000c 9B68     		ldr	r3, [r3, #8]
  99 000e 23F0E072 		bic	r2, r3, #29360128
 100 0012 3B68     		ldr	r3, [r7]
 101 0014 1A43     		orrs	r2, r2, r3
 102 0016 7B68     		ldr	r3, [r7, #4]
 103 0018 9A60     		str	r2, [r3, #8]
2768:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** }
 104              		.loc 1 2768 1
 105 001a 00BF     		nop
 106 001c 0C37     		adds	r7, r7, #12
 107              	.LCFI9:
 108              		.cfi_def_cfa_offset 4
 109 001e BD46     		mov	sp, r7
 110              	.LCFI10:
 111              		.cfi_def_cfa_register 13
 112              		@ sp needed
 113 0020 5DF8047B 		ldr	r7, [sp], #4
 114              	.LCFI11:
 115              		.cfi_restore 7
 116              		.cfi_def_cfa_offset 0
 117 0024 7047     		bx	lr
 118              		.cfi_endproc
 119              	.LFE133:
 121              		.section	.text.LL_ADC_GetCommonPathInternalCh,"ax",%progbits
 122              		.align	1
 123              		.syntax unified
 124              		.thumb
 125              		.thumb_func
 126              		.fpu fpv4-sp-d16
 128              	LL_ADC_GetCommonPathInternalCh:
 129              	.LFB134:
2769:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
2770:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /**
2771:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @brief  Get parameter common to several ADC: measurement path to internal
2772:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         channels (VrefInt, temperature sensor, ...).
2773:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @note   One or several values can be selected.
2774:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         Example: (LL_ADC_PATH_INTERNAL_VREFINT |
2775:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *                   LL_ADC_PATH_INTERNAL_TEMPSENSOR)
2776:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @rmtoll CCR      VREFEN         LL_ADC_GetCommonPathInternalCh\n
2777:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         CCR      VSENSESEL      LL_ADC_GetCommonPathInternalCh\n
2778:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         CCR      VBATSEL        LL_ADC_GetCommonPathInternalCh
2779:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @param  ADCxy_COMMON ADC common instance
2780:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         (can be set directly from CMSIS definition or by using helper macro @ref __LL_ADC_COMMO
2781:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @retval Returned value can be a combination of the following values:
2782:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_PATH_INTERNAL_NONE
2783:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
ARM GAS  /tmp/ccZ0TYFG.s 			page 52


2784:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
2785:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
2786:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
2787:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
2788:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** {
 130              		.loc 1 2788 1
 131              		.cfi_startproc
 132              		@ args = 0, pretend = 0, frame = 8
 133              		@ frame_needed = 1, uses_anonymous_args = 0
 134              		@ link register save eliminated.
 135 0000 80B4     		push	{r7}
 136              	.LCFI12:
 137              		.cfi_def_cfa_offset 4
 138              		.cfi_offset 7, -4
 139 0002 83B0     		sub	sp, sp, #12
 140              	.LCFI13:
 141              		.cfi_def_cfa_offset 16
 142 0004 00AF     		add	r7, sp, #0
 143              	.LCFI14:
 144              		.cfi_def_cfa_register 7
 145 0006 7860     		str	r0, [r7, #4]
2789:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSE
 146              		.loc 1 2789 21
 147 0008 7B68     		ldr	r3, [r7, #4]
 148 000a 9B68     		ldr	r3, [r3, #8]
 149              		.loc 1 2789 10
 150 000c 03F0E073 		and	r3, r3, #29360128
2790:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** }
 151              		.loc 1 2790 1
 152 0010 1846     		mov	r0, r3
 153 0012 0C37     		adds	r7, r7, #12
 154              	.LCFI15:
 155              		.cfi_def_cfa_offset 4
 156 0014 BD46     		mov	sp, r7
 157              	.LCFI16:
 158              		.cfi_def_cfa_register 13
 159              		@ sp needed
 160 0016 5DF8047B 		ldr	r7, [sp], #4
 161              	.LCFI17:
 162              		.cfi_restore 7
 163              		.cfi_def_cfa_offset 0
 164 001a 7047     		bx	lr
 165              		.cfi_endproc
 166              	.LFE134:
 168              		.section	.text.LL_ADC_SetOffset,"ax",%progbits
 169              		.align	1
 170              		.syntax unified
 171              		.thumb
 172              		.thumb_func
 173              		.fpu fpv4-sp-d16
 175              	LL_ADC_SetOffset:
 176              	.LFB143:
2791:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
2792:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /**
2793:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @}
2794:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
2795:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
ARM GAS  /tmp/ccZ0TYFG.s 			page 53


2796:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /** @defgroup ADC_LL_EF_Configuration_ADC_Instance Configuration of ADC hierarchical scope: ADC ins
2797:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @{
2798:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
2799:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
2800:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /**
2801:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @brief  Set ADC calibration factor in the mode single-ended
2802:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         or differential (for devices with differential mode available).
2803:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @note   This function is intended to set calibration parameters
2804:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         without having to perform a new calibration using
2805:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @ref LL_ADC_StartCalibration().
2806:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @note   For devices with differential mode available:
2807:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         Calibration of offset is specific to each of
2808:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         single-ended and differential modes
2809:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         (calibration factor must be specified for each of these
2810:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         differential modes, if used afterwards and if the application
2811:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         requires their calibration).
2812:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @note   In case of setting calibration factors of both modes single ended
2813:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         and differential (parameter LL_ADC_BOTH_SINGLE_DIFF_ENDED):
2814:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         both calibration factors must be concatenated.
2815:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         To perform this processing, use helper macro
2816:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @ref __LL_ADC_CALIB_FACTOR_SINGLE_DIFF().
2817:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @note   On this STM32 serie, setting of this feature is conditioned to
2818:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         ADC state:
2819:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         ADC must be enabled, without calibration on going, without conversion
2820:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         on going on group regular.
2821:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @rmtoll CALFACT  CALFACT_S      LL_ADC_SetCalibrationFactor\n
2822:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         CALFACT  CALFACT_D      LL_ADC_SetCalibrationFactor
2823:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
2824:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @param  SingleDiff This parameter can be one of the following values:
2825:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_SINGLE_ENDED
2826:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
2827:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_BOTH_SINGLE_DIFF_ENDED
2828:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @param  CalibrationFactor Value between Min_Data=0x00 and Max_Data=0x7F
2829:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @retval None
2830:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
2831:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_SetCalibrationFactor(ADC_TypeDef *ADCx, uint32_t SingleDiff, uint32_t C
2832:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** {
2833:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   MODIFY_REG(ADCx->CALFACT,
2834:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****              SingleDiff & ADC_SINGLEDIFF_CALIB_FACTOR_MASK,
2835:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****              CalibrationFactor << (((SingleDiff & ADC_SINGLEDIFF_CALIB_F_BIT_D_MASK) >> ADC_SINGLED
2836:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** }
2837:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
2838:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /**
2839:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @brief  Get ADC calibration factor in the mode single-ended
2840:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         or differential (for devices with differential mode available).
2841:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @note   Calibration factors are set by hardware after performing
2842:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         a calibration run using function @ref LL_ADC_StartCalibration().
2843:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @note   For devices with differential mode available:
2844:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         Calibration of offset is specific to each of
2845:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         single-ended and differential modes
2846:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @rmtoll CALFACT  CALFACT_S      LL_ADC_GetCalibrationFactor\n
2847:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         CALFACT  CALFACT_D      LL_ADC_GetCalibrationFactor
2848:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
2849:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @param  SingleDiff This parameter can be one of the following values:
2850:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_SINGLE_ENDED
2851:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
2852:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @retval Value between Min_Data=0x00 and Max_Data=0x7F
ARM GAS  /tmp/ccZ0TYFG.s 			page 54


2853:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
2854:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_GetCalibrationFactor(ADC_TypeDef *ADCx, uint32_t SingleDiff)
2855:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** {
2856:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   /* Retrieve bits with position in register depending on parameter           */
2857:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   /* "SingleDiff".                                                            */
2858:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   /* Parameter used with mask "ADC_SINGLEDIFF_CALIB_FACTOR_MASK" because      */
2859:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   /* containing other bits reserved for other purpose.                        */
2860:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   return (uint32_t)(READ_BIT(ADCx->CALFACT, (SingleDiff & ADC_SINGLEDIFF_CALIB_FACTOR_MASK)) >> ((S
2861:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** }
2862:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
2863:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /**
2864:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @brief  Set ADC resolution.
2865:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         Refer to reference manual for alignments formats
2866:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         dependencies to ADC resolutions.
2867:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @note   On this STM32 serie, setting of this feature is conditioned to
2868:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         ADC state:
2869:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         ADC must be disabled or enabled without conversion on going
2870:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         on either groups regular or injected.
2871:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @rmtoll CFGR     RES            LL_ADC_SetResolution
2872:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
2873:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @param  Resolution This parameter can be one of the following values:
2874:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_12B
2875:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_10B
2876:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_8B
2877:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_6B
2878:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @retval None
2879:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
2880:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_SetResolution(ADC_TypeDef *ADCx, uint32_t Resolution)
2881:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** {
2882:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   MODIFY_REG(ADCx->CFGR, ADC_CFGR_RES, Resolution);
2883:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** }
2884:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
2885:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /**
2886:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @brief  Get ADC resolution.
2887:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         Refer to reference manual for alignments formats
2888:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         dependencies to ADC resolutions.
2889:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @rmtoll CFGR     RES            LL_ADC_GetResolution
2890:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
2891:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
2892:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_12B
2893:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_10B
2894:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_8B
2895:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_6B
2896:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
2897:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_GetResolution(ADC_TypeDef *ADCx)
2898:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** {
2899:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   return (uint32_t)(READ_BIT(ADCx->CFGR, ADC_CFGR_RES));
2900:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** }
2901:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
2902:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /**
2903:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @brief  Set ADC conversion data alignment.
2904:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @note   Refer to reference manual for alignments formats
2905:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         dependencies to ADC resolutions.
2906:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @note   On this STM32 serie, setting of this feature is conditioned to
2907:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         ADC state:
2908:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         ADC must be disabled or enabled without conversion on going
2909:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         on either groups regular or injected.
ARM GAS  /tmp/ccZ0TYFG.s 			page 55


2910:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @rmtoll CFGR     ALIGN          LL_ADC_SetDataAlignment
2911:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
2912:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @param  DataAlignment This parameter can be one of the following values:
2913:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_DATA_ALIGN_RIGHT
2914:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_DATA_ALIGN_LEFT
2915:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @retval None
2916:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
2917:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_SetDataAlignment(ADC_TypeDef *ADCx, uint32_t DataAlignment)
2918:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** {
2919:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   MODIFY_REG(ADCx->CFGR, ADC_CFGR_ALIGN, DataAlignment);
2920:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** }
2921:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
2922:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /**
2923:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @brief  Get ADC conversion data alignment.
2924:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @note   Refer to reference manual for alignments formats
2925:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         dependencies to ADC resolutions.
2926:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @rmtoll CFGR     ALIGN          LL_ADC_GetDataAlignment
2927:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
2928:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
2929:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_DATA_ALIGN_RIGHT
2930:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_DATA_ALIGN_LEFT
2931:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
2932:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_GetDataAlignment(ADC_TypeDef *ADCx)
2933:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** {
2934:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   return (uint32_t)(READ_BIT(ADCx->CFGR, ADC_CFGR_ALIGN));
2935:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** }
2936:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
2937:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /**
2938:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @brief  Set ADC low power mode.
2939:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @note   Description of ADC low power modes:
2940:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         - ADC low power mode "auto wait": Dynamic low power mode,
2941:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *           ADC conversions occurrences are limited to the minimum necessary
2942:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *           in order to reduce power consumption.
2943:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *           New ADC conversion starts only when the previous
2944:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *           unitary conversion data (for ADC group regular)
2945:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *           or previous sequence conversions data (for ADC group injected)
2946:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *           has been retrieved by user software.
2947:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *           In the meantime, ADC remains idle: does not performs any
2948:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *           other conversion.
2949:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *           This mode allows to automatically adapt the ADC conversions
2950:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *           triggers to the speed of the software that reads the data.
2951:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *           Moreover, this avoids risk of overrun for low frequency
2952:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *           applications.
2953:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *           How to use this low power mode:
2954:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *           - Do not use with interruption or DMA since these modes
2955:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *             have to clear immediately the EOC flag to free the
2956:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *             IRQ vector sequencer.
2957:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *           - Do use with polling: 1. Start conversion,
2958:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *             2. Later on, when conversion data is needed: poll for end of
2959:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *             conversion  to ensure that conversion is completed and
2960:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *             retrieve ADC conversion data. This will trig another
2961:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *             ADC conversion start.
2962:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         - ADC low power mode "auto power-off" (feature available on
2963:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *           this device if parameter LL_ADC_LP_AUTOPOWEROFF is available):
2964:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *           the ADC automatically powers-off after a conversion and
2965:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *           automatically wakes up when a new conversion is triggered
2966:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *           (with startup time between trigger and start of sampling).
ARM GAS  /tmp/ccZ0TYFG.s 			page 56


2967:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *           This feature can be combined with low power mode "auto wait".
2968:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @note   With ADC low power mode "auto wait", the ADC conversion data read
2969:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         is corresponding to previous ADC conversion start, independently
2970:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         of delay during which ADC was idle.
2971:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         Therefore, the ADC conversion data may be outdated: does not
2972:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         correspond to the current voltage level on the selected
2973:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         ADC channel.
2974:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @note   On this STM32 serie, setting of this feature is conditioned to
2975:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         ADC state:
2976:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         ADC must be disabled or enabled without conversion on going
2977:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         on either groups regular or injected.
2978:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @rmtoll CFGR     AUTDLY         LL_ADC_SetLowPowerMode
2979:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
2980:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @param  LowPowerMode This parameter can be one of the following values:
2981:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_LP_MODE_NONE
2982:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_LP_AUTOWAIT
2983:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @retval None
2984:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
2985:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_SetLowPowerMode(ADC_TypeDef *ADCx, uint32_t LowPowerMode)
2986:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** {
2987:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   MODIFY_REG(ADCx->CFGR, ADC_CFGR_AUTDLY, LowPowerMode);
2988:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** }
2989:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
2990:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /**
2991:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @brief  Get ADC low power mode:
2992:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @note   Description of ADC low power modes:
2993:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         - ADC low power mode "auto wait": Dynamic low power mode,
2994:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *           ADC conversions occurrences are limited to the minimum necessary
2995:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *           in order to reduce power consumption.
2996:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *           New ADC conversion starts only when the previous
2997:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *           unitary conversion data (for ADC group regular)
2998:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *           or previous sequence conversions data (for ADC group injected)
2999:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *           has been retrieved by user software.
3000:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *           In the meantime, ADC remains idle: does not performs any
3001:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *           other conversion.
3002:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *           This mode allows to automatically adapt the ADC conversions
3003:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *           triggers to the speed of the software that reads the data.
3004:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *           Moreover, this avoids risk of overrun for low frequency
3005:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *           applications.
3006:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *           How to use this low power mode:
3007:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *           - Do not use with interruption or DMA since these modes
3008:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *             have to clear immediately the EOC flag to free the
3009:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *             IRQ vector sequencer.
3010:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *           - Do use with polling: 1. Start conversion,
3011:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *             2. Later on, when conversion data is needed: poll for end of
3012:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *             conversion  to ensure that conversion is completed and
3013:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *             retrieve ADC conversion data. This will trig another
3014:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *             ADC conversion start.
3015:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         - ADC low power mode "auto power-off" (feature available on
3016:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *           this device if parameter LL_ADC_LP_AUTOPOWEROFF is available):
3017:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *           the ADC automatically powers-off after a conversion and
3018:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *           automatically wakes up when a new conversion is triggered
3019:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *           (with startup time between trigger and start of sampling).
3020:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *           This feature can be combined with low power mode "auto wait".
3021:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @note   With ADC low power mode "auto wait", the ADC conversion data read
3022:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         is corresponding to previous ADC conversion start, independently
3023:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         of delay during which ADC was idle.
ARM GAS  /tmp/ccZ0TYFG.s 			page 57


3024:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         Therefore, the ADC conversion data may be outdated: does not
3025:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         correspond to the current voltage level on the selected
3026:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         ADC channel.
3027:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @rmtoll CFGR     AUTDLY         LL_ADC_GetLowPowerMode
3028:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
3029:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
3030:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_LP_MODE_NONE
3031:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_LP_AUTOWAIT
3032:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
3033:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_GetLowPowerMode(ADC_TypeDef *ADCx)
3034:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** {
3035:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   return (uint32_t)(READ_BIT(ADCx->CFGR, ADC_CFGR_AUTDLY));
3036:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** }
3037:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
3038:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /**
3039:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @brief  Set ADC selected offset number 1, 2, 3 or 4.
3040:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @note   This function set the 2 items of offset configuration:
3041:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         - ADC channel to which the offset programmed will be applied
3042:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *           (independently of channel mapped on ADC group regular
3043:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *           or group injected)
3044:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         - Offset level (offset to be subtracted from the raw
3045:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *           converted data).
3046:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @note   Caution: Offset format is dependent to ADC resolution:
3047:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         offset has to be left-aligned on bit 11, the LSB (right bits)
3048:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         are set to 0.
3049:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @note   This function enables the offset, by default. It can be forced
3050:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         to disable state using function LL_ADC_SetOffsetState().
3051:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @note   If a channel is mapped on several offsets numbers, only the offset
3052:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         with the lowest value is considered for the subtraction.
3053:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @note   On this STM32 serie, setting of this feature is conditioned to
3054:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         ADC state:
3055:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         ADC must be disabled or enabled without conversion on going
3056:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         on either groups regular or injected.
3057:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @note   On STM32G4, some fast channels are available: fast analog inputs
3058:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         coming from GPIO pads (ADC_IN1..5).
3059:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @rmtoll OFR1     OFFSET1_CH     LL_ADC_SetOffset\n
3060:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         OFR1     OFFSET1        LL_ADC_SetOffset\n
3061:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         OFR1     OFFSET1_EN     LL_ADC_SetOffset\n
3062:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         OFR2     OFFSET2_CH     LL_ADC_SetOffset\n
3063:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         OFR2     OFFSET2        LL_ADC_SetOffset\n
3064:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         OFR2     OFFSET2_EN     LL_ADC_SetOffset\n
3065:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         OFR3     OFFSET3_CH     LL_ADC_SetOffset\n
3066:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         OFR3     OFFSET3        LL_ADC_SetOffset\n
3067:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         OFR3     OFFSET3_EN     LL_ADC_SetOffset\n
3068:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         OFR4     OFFSET4_CH     LL_ADC_SetOffset\n
3069:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         OFR4     OFFSET4        LL_ADC_SetOffset\n
3070:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         OFR4     OFFSET4_EN     LL_ADC_SetOffset
3071:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
3072:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @param  Offsety This parameter can be one of the following values:
3073:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_1
3074:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_2
3075:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_3
3076:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_4
3077:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @param  Channel This parameter can be one of the following values:
3078:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_0
3079:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_1                 (8)
3080:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_2                 (8)
ARM GAS  /tmp/ccZ0TYFG.s 			page 58


3081:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_3                 (8)
3082:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_4                 (8)
3083:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_5                 (8)
3084:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_6
3085:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_7
3086:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_8
3087:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_9
3088:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_10
3089:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_11
3090:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_12
3091:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_13
3092:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_14
3093:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_15
3094:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_16
3095:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_17
3096:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_18
3097:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VREFINT           (7)
3098:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_TEMPSENSOR_ADC1   (1)
3099:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_TEMPSENSOR_ADC5   (5)
3100:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VBAT              (6)
3101:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP1           (1)
3102:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP2           (2)
3103:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP3_ADC2      (2)
3104:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP3_ADC3      (3)
3105:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP4           (5)
3106:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP5           (5)
3107:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP6           (4)
3108:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *
3109:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         (1) On STM32G4, parameter available only on ADC instance: ADC1.\n
3110:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         (2) On STM32G4, parameter available only on ADC instance: ADC2.\n
3111:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         (3) On STM32G4, parameter available only on ADC instance: ADC3.\n
3112:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         (4) On STM32G4, parameter available only on ADC instance: ADC4.\n
3113:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         (5) On STM32G4, parameter available only on ADC instance: ADC5.\n
3114:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         (6) On STM32G4, parameter available only on ADC instances: ADC1, ADC3, ADC5.\n
3115:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         (7) On STM32G4, parameter available only on ADC instances: ADC1, ADC3, ADC4, ADC5.\n
3116:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *          -  On this STM32 serie, all ADCx are not available on all devices. Refer to device dat
3117:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock 
3118:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 A
3119:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
3120:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @retval None
3121:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
3122:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32
3123:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** {
 177              		.loc 1 3123 1
 178              		.cfi_startproc
 179              		@ args = 0, pretend = 0, frame = 16
 180              		@ frame_needed = 1, uses_anonymous_args = 0
 181              		@ link register save eliminated.
 182 0000 90B4     		push	{r4, r7}
 183              	.LCFI18:
 184              		.cfi_def_cfa_offset 8
 185              		.cfi_offset 4, -8
 186              		.cfi_offset 7, -4
 187 0002 84B0     		sub	sp, sp, #16
 188              	.LCFI19:
 189              		.cfi_def_cfa_offset 24
 190 0004 00AF     		add	r7, sp, #0
ARM GAS  /tmp/ccZ0TYFG.s 			page 59


 191              	.LCFI20:
 192              		.cfi_def_cfa_register 7
 193 0006 F860     		str	r0, [r7, #12]
 194 0008 B960     		str	r1, [r7, #8]
 195 000a 7A60     		str	r2, [r7, #4]
 196 000c 3B60     		str	r3, [r7]
3124:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 197              		.loc 1 3124 34
 198 000e FB68     		ldr	r3, [r7, #12]
 199 0010 6033     		adds	r3, r3, #96
 200 0012 1A46     		mov	r2, r3
 201 0014 BB68     		ldr	r3, [r7, #8]
 202 0016 9B00     		lsls	r3, r3, #2
 203 0018 1344     		add	r3, r3, r2
 204              		.loc 1 3124 27
 205 001a 1C46     		mov	r4, r3
3125:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
3126:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   MODIFY_REG(*preg,
 206              		.loc 1 3126 3
 207 001c 2268     		ldr	r2, [r4]
 208 001e 084B     		ldr	r3, .L6
 209 0020 1340     		ands	r3, r3, r2
 210 0022 7A68     		ldr	r2, [r7, #4]
 211 0024 02F0F841 		and	r1, r2, #2080374784
 212 0028 3A68     		ldr	r2, [r7]
 213 002a 0A43     		orrs	r2, r2, r1
 214 002c 1343     		orrs	r3, r3, r2
 215 002e 43F00043 		orr	r3, r3, #-2147483648
 216 0032 2360     		str	r3, [r4]
3127:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****              ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
3128:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****              ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
3129:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** }
 217              		.loc 1 3129 1
 218 0034 00BF     		nop
 219 0036 1037     		adds	r7, r7, #16
 220              	.LCFI21:
 221              		.cfi_def_cfa_offset 8
 222 0038 BD46     		mov	sp, r7
 223              	.LCFI22:
 224              		.cfi_def_cfa_register 13
 225              		@ sp needed
 226 003a 90BC     		pop	{r4, r7}
 227              	.LCFI23:
 228              		.cfi_restore 7
 229              		.cfi_restore 4
 230              		.cfi_def_cfa_offset 0
 231 003c 7047     		bx	lr
 232              	.L7:
 233 003e 00BF     		.align	2
 234              	.L6:
 235 0040 00F0FF03 		.word	67104768
 236              		.cfi_endproc
 237              	.LFE143:
 239              		.section	.text.LL_ADC_GetOffsetChannel,"ax",%progbits
 240              		.align	1
 241              		.syntax unified
 242              		.thumb
ARM GAS  /tmp/ccZ0TYFG.s 			page 60


 243              		.thumb_func
 244              		.fpu fpv4-sp-d16
 246              	LL_ADC_GetOffsetChannel:
 247              	.LFB144:
3130:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
3131:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /**
3132:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @brief  Get for the ADC selected offset number 1, 2, 3 or 4:
3133:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         Channel to which the offset programmed will be applied
3134:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         (independently of channel mapped on ADC group regular
3135:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         or group injected)
3136:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @note   Usage of the returned channel number:
3137:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         - To reinject this channel into another function LL_ADC_xxx:
3138:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *           the returned channel number is only partly formatted on definition
3139:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *           of literals LL_ADC_CHANNEL_x. Therefore, it has to be compared
3140:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *           with parts of literals LL_ADC_CHANNEL_x or using
3141:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *           helper macro @ref __LL_ADC_CHANNEL_TO_DECIMAL_NB().
3142:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *           Then the selected literal LL_ADC_CHANNEL_x can be used
3143:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *           as parameter for another function.
3144:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         - To get the channel number in decimal format:
3145:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *           process the returned value with the helper macro
3146:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *           @ref __LL_ADC_CHANNEL_TO_DECIMAL_NB().
3147:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @note   On STM32G4, some fast channels are available: fast analog inputs
3148:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         coming from GPIO pads (ADC_IN1..5).
3149:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @rmtoll OFR1     OFFSET1_CH     LL_ADC_GetOffsetChannel\n
3150:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         OFR2     OFFSET2_CH     LL_ADC_GetOffsetChannel\n
3151:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         OFR3     OFFSET3_CH     LL_ADC_GetOffsetChannel\n
3152:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         OFR4     OFFSET4_CH     LL_ADC_GetOffsetChannel
3153:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
3154:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @param  Offsety This parameter can be one of the following values:
3155:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_1
3156:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_2
3157:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_3
3158:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_4
3159:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
3160:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_0
3161:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_1                 (8)
3162:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_2                 (8)
3163:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_3                 (8)
3164:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_4                 (8)
3165:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_5                 (8)
3166:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_6
3167:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_7
3168:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_8
3169:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_9
3170:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_10
3171:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_11
3172:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_12
3173:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_13
3174:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_14
3175:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_15
3176:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_16
3177:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_17
3178:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_18
3179:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VREFINT           (7)
3180:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_TEMPSENSOR_ADC1   (1)
3181:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_TEMPSENSOR_ADC5   (5)
3182:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VBAT              (6)
ARM GAS  /tmp/ccZ0TYFG.s 			page 61


3183:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP1           (1)
3184:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP2           (2)
3185:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP3_ADC2      (2)
3186:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP3_ADC3      (3)
3187:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP4           (5)
3188:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP5           (5)
3189:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP6           (4)
3190:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *
3191:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         (1) On STM32G4, parameter available only on ADC instance: ADC1.\n
3192:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         (2) On STM32G4, parameter available only on ADC instance: ADC2.\n
3193:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         (3) On STM32G4, parameter available only on ADC instance: ADC3.\n
3194:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         (4) On STM32G4, parameter available only on ADC instance: ADC4.\n
3195:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         (5) On STM32G4, parameter available only on ADC instance: ADC5.\n
3196:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         (6) On STM32G4, parameter available only on ADC instances: ADC1, ADC3, ADC5.\n
3197:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         (7) On STM32G4, parameter available only on ADC instances: ADC1, ADC3, ADC4, ADC5.\n
3198:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *          -  On this STM32 serie, all ADCx are not available on all devices. Refer to device dat
3199:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock 
3200:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 A
3201:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
3202:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *                      comparison with internal channel parameter to be done
3203:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
3204:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
3205:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
3206:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** {
 248              		.loc 1 3206 1
 249              		.cfi_startproc
 250              		@ args = 0, pretend = 0, frame = 8
 251              		@ frame_needed = 1, uses_anonymous_args = 0
 252              		@ link register save eliminated.
 253 0000 90B4     		push	{r4, r7}
 254              	.LCFI24:
 255              		.cfi_def_cfa_offset 8
 256              		.cfi_offset 4, -8
 257              		.cfi_offset 7, -4
 258 0002 82B0     		sub	sp, sp, #8
 259              	.LCFI25:
 260              		.cfi_def_cfa_offset 16
 261 0004 00AF     		add	r7, sp, #0
 262              	.LCFI26:
 263              		.cfi_def_cfa_register 7
 264 0006 7860     		str	r0, [r7, #4]
 265 0008 3960     		str	r1, [r7]
3207:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   register const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 266              		.loc 1 3207 40
 267 000a 7B68     		ldr	r3, [r7, #4]
 268 000c 6033     		adds	r3, r3, #96
 269 000e 1A46     		mov	r2, r3
 270 0010 3B68     		ldr	r3, [r7]
 271 0012 9B00     		lsls	r3, r3, #2
 272 0014 1344     		add	r3, r3, r2
 273              		.loc 1 3207 33
 274 0016 1C46     		mov	r4, r3
3208:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
3209:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 275              		.loc 1 3209 10
 276 0018 2368     		ldr	r3, [r4]
 277 001a 03F0F843 		and	r3, r3, #2080374784
ARM GAS  /tmp/ccZ0TYFG.s 			page 62


3210:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** }
 278              		.loc 1 3210 1
 279 001e 1846     		mov	r0, r3
 280 0020 0837     		adds	r7, r7, #8
 281              	.LCFI27:
 282              		.cfi_def_cfa_offset 8
 283 0022 BD46     		mov	sp, r7
 284              	.LCFI28:
 285              		.cfi_def_cfa_register 13
 286              		@ sp needed
 287 0024 90BC     		pop	{r4, r7}
 288              	.LCFI29:
 289              		.cfi_restore 7
 290              		.cfi_restore 4
 291              		.cfi_def_cfa_offset 0
 292 0026 7047     		bx	lr
 293              		.cfi_endproc
 294              	.LFE144:
 296              		.section	.text.LL_ADC_SetOffsetState,"ax",%progbits
 297              		.align	1
 298              		.syntax unified
 299              		.thumb
 300              		.thumb_func
 301              		.fpu fpv4-sp-d16
 303              	LL_ADC_SetOffsetState:
 304              	.LFB146:
3211:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
3212:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /**
3213:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @brief  Get for the ADC selected offset number 1, 2, 3 or 4:
3214:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         Offset level (offset to be subtracted from the raw
3215:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         converted data).
3216:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @note   Caution: Offset format is dependent to ADC resolution:
3217:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         offset has to be left-aligned on bit 11, the LSB (right bits)
3218:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         are set to 0.
3219:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @rmtoll OFR1     OFFSET1        LL_ADC_GetOffsetLevel\n
3220:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         OFR2     OFFSET2        LL_ADC_GetOffsetLevel\n
3221:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         OFR3     OFFSET3        LL_ADC_GetOffsetLevel\n
3222:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         OFR4     OFFSET4        LL_ADC_GetOffsetLevel
3223:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
3224:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @param  Offsety This parameter can be one of the following values:
3225:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_1
3226:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_2
3227:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_3
3228:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_4
3229:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @retval Value between Min_Data=0x000 and Max_Data=0xFFF
3230:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
3231:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_GetOffsetLevel(ADC_TypeDef *ADCx, uint32_t Offsety)
3232:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** {
3233:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   register const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
3234:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
3235:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1);
3236:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** }
3237:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
3238:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /**
3239:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @brief  Set for the ADC selected offset number 1, 2, 3 or 4:
3240:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         force offset state disable or enable
3241:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         without modifying offset channel or offset value.
ARM GAS  /tmp/ccZ0TYFG.s 			page 63


3242:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @note   This function should be needed only in case of offset to be
3243:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         enabled-disabled dynamically, and should not be needed in other cases:
3244:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         function LL_ADC_SetOffset() automatically enables the offset.
3245:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @note   On this STM32 serie, setting of this feature is conditioned to
3246:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         ADC state:
3247:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         ADC must be disabled or enabled without conversion on going
3248:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         on either groups regular or injected.
3249:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @rmtoll OFR1     OFFSET1_EN     LL_ADC_SetOffsetState\n
3250:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         OFR2     OFFSET2_EN     LL_ADC_SetOffsetState\n
3251:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         OFR3     OFFSET3_EN     LL_ADC_SetOffsetState\n
3252:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         OFR4     OFFSET4_EN     LL_ADC_SetOffsetState
3253:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
3254:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @param  Offsety This parameter can be one of the following values:
3255:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_1
3256:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_2
3257:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_3
3258:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_4
3259:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @param  OffsetState This parameter can be one of the following values:
3260:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_DISABLE
3261:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_ENABLE
3262:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @retval None
3263:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
3264:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetStat
3265:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** {
 305              		.loc 1 3265 1
 306              		.cfi_startproc
 307              		@ args = 0, pretend = 0, frame = 16
 308              		@ frame_needed = 1, uses_anonymous_args = 0
 309              		@ link register save eliminated.
 310 0000 90B4     		push	{r4, r7}
 311              	.LCFI30:
 312              		.cfi_def_cfa_offset 8
 313              		.cfi_offset 4, -8
 314              		.cfi_offset 7, -4
 315 0002 84B0     		sub	sp, sp, #16
 316              	.LCFI31:
 317              		.cfi_def_cfa_offset 24
 318 0004 00AF     		add	r7, sp, #0
 319              	.LCFI32:
 320              		.cfi_def_cfa_register 7
 321 0006 F860     		str	r0, [r7, #12]
 322 0008 B960     		str	r1, [r7, #8]
 323 000a 7A60     		str	r2, [r7, #4]
3266:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 324              		.loc 1 3266 34
 325 000c FB68     		ldr	r3, [r7, #12]
 326 000e 6033     		adds	r3, r3, #96
 327 0010 1A46     		mov	r2, r3
 328 0012 BB68     		ldr	r3, [r7, #8]
 329 0014 9B00     		lsls	r3, r3, #2
 330 0016 1344     		add	r3, r3, r2
 331              		.loc 1 3266 27
 332 0018 1C46     		mov	r4, r3
3267:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
3268:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   MODIFY_REG(*preg,
 333              		.loc 1 3268 3
 334 001a 2368     		ldr	r3, [r4]
ARM GAS  /tmp/ccZ0TYFG.s 			page 64


 335 001c 23F00042 		bic	r2, r3, #-2147483648
 336 0020 7B68     		ldr	r3, [r7, #4]
 337 0022 1343     		orrs	r3, r3, r2
 338 0024 2360     		str	r3, [r4]
3269:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****              ADC_OFR1_OFFSET1_EN,
3270:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****              OffsetState);
3271:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** }
 339              		.loc 1 3271 1
 340 0026 00BF     		nop
 341 0028 1037     		adds	r7, r7, #16
 342              	.LCFI33:
 343              		.cfi_def_cfa_offset 8
 344 002a BD46     		mov	sp, r7
 345              	.LCFI34:
 346              		.cfi_def_cfa_register 13
 347              		@ sp needed
 348 002c 90BC     		pop	{r4, r7}
 349              	.LCFI35:
 350              		.cfi_restore 7
 351              		.cfi_restore 4
 352              		.cfi_def_cfa_offset 0
 353 002e 7047     		bx	lr
 354              		.cfi_endproc
 355              	.LFE146:
 357              		.section	.text.LL_ADC_SetOffsetSign,"ax",%progbits
 358              		.align	1
 359              		.syntax unified
 360              		.thumb
 361              		.thumb_func
 362              		.fpu fpv4-sp-d16
 364              	LL_ADC_SetOffsetSign:
 365              	.LFB148:
3272:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
3273:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /**
3274:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @brief  Get for the ADC selected offset number 1, 2, 3 or 4:
3275:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         offset state disabled or enabled.
3276:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @rmtoll OFR1     OFFSET1_EN     LL_ADC_GetOffsetState\n
3277:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         OFR2     OFFSET2_EN     LL_ADC_GetOffsetState\n
3278:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         OFR3     OFFSET3_EN     LL_ADC_GetOffsetState\n
3279:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         OFR4     OFFSET4_EN     LL_ADC_GetOffsetState
3280:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
3281:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @param  Offsety This parameter can be one of the following values:
3282:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_1
3283:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_2
3284:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_3
3285:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_4
3286:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
3287:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_DISABLE
3288:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_ENABLE
3289:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
3290:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_GetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety)
3291:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** {
3292:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   register const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
3293:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
3294:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_EN);
3295:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** }
3296:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
ARM GAS  /tmp/ccZ0TYFG.s 			page 65


3297:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /**
3298:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @brief  Set for the ADC selected offset number 1, 2, 3 or 4:
3299:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         choose offset sign.
3300:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @note   On this STM32 serie, setting of this feature is conditioned to
3301:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         ADC state:
3302:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         ADC must be disabled or enabled without conversion on going
3303:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         on either groups regular or injected.
3304:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @rmtoll OFR1     OFFSETPOS      LL_ADC_SetOffsetSign\n
3305:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         OFR2     OFFSETPOS      LL_ADC_SetOffsetSign\n
3306:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         OFR3     OFFSETPOS      LL_ADC_SetOffsetSign\n
3307:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         OFR4     OFFSETPOS      LL_ADC_SetOffsetSign
3308:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
3309:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @param  Offsety This parameter can be one of the following values:
3310:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_1
3311:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_2
3312:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_3
3313:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_4
3314:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @param  OffsetSign This parameter can be one of the following values:
3315:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
3316:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
3317:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @retval None
3318:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
3319:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
3320:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** {
 366              		.loc 1 3320 1
 367              		.cfi_startproc
 368              		@ args = 0, pretend = 0, frame = 16
 369              		@ frame_needed = 1, uses_anonymous_args = 0
 370              		@ link register save eliminated.
 371 0000 90B4     		push	{r4, r7}
 372              	.LCFI36:
 373              		.cfi_def_cfa_offset 8
 374              		.cfi_offset 4, -8
 375              		.cfi_offset 7, -4
 376 0002 84B0     		sub	sp, sp, #16
 377              	.LCFI37:
 378              		.cfi_def_cfa_offset 24
 379 0004 00AF     		add	r7, sp, #0
 380              	.LCFI38:
 381              		.cfi_def_cfa_register 7
 382 0006 F860     		str	r0, [r7, #12]
 383 0008 B960     		str	r1, [r7, #8]
 384 000a 7A60     		str	r2, [r7, #4]
3321:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 385              		.loc 1 3321 34
 386 000c FB68     		ldr	r3, [r7, #12]
 387 000e 6033     		adds	r3, r3, #96
 388 0010 1A46     		mov	r2, r3
 389 0012 BB68     		ldr	r3, [r7, #8]
 390 0014 9B00     		lsls	r3, r3, #2
 391 0016 1344     		add	r3, r3, r2
 392              		.loc 1 3321 27
 393 0018 1C46     		mov	r4, r3
3322:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
3323:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   MODIFY_REG(*preg,
 394              		.loc 1 3323 3
 395 001a 2368     		ldr	r3, [r4]
ARM GAS  /tmp/ccZ0TYFG.s 			page 66


 396 001c 23F08072 		bic	r2, r3, #16777216
 397 0020 7B68     		ldr	r3, [r7, #4]
 398 0022 1343     		orrs	r3, r3, r2
 399 0024 2360     		str	r3, [r4]
3324:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****              ADC_OFR1_OFFSETPOS,
3325:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****              OffsetSign);
3326:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** }
 400              		.loc 1 3326 1
 401 0026 00BF     		nop
 402 0028 1037     		adds	r7, r7, #16
 403              	.LCFI39:
 404              		.cfi_def_cfa_offset 8
 405 002a BD46     		mov	sp, r7
 406              	.LCFI40:
 407              		.cfi_def_cfa_register 13
 408              		@ sp needed
 409 002c 90BC     		pop	{r4, r7}
 410              	.LCFI41:
 411              		.cfi_restore 7
 412              		.cfi_restore 4
 413              		.cfi_def_cfa_offset 0
 414 002e 7047     		bx	lr
 415              		.cfi_endproc
 416              	.LFE148:
 418              		.section	.text.LL_ADC_SetOffsetSaturation,"ax",%progbits
 419              		.align	1
 420              		.syntax unified
 421              		.thumb
 422              		.thumb_func
 423              		.fpu fpv4-sp-d16
 425              	LL_ADC_SetOffsetSaturation:
 426              	.LFB150:
3327:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
3328:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /**
3329:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @brief  Get for the ADC selected offset number 1, 2, 3 or 4:
3330:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         offset sign if positive or negative.
3331:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @rmtoll OFR1     OFFSETPOS      LL_ADC_GetOffsetSign\n
3332:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         OFR2     OFFSETPOS      LL_ADC_GetOffsetSign\n
3333:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         OFR3     OFFSETPOS      LL_ADC_GetOffsetSign\n
3334:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         OFR4     OFFSETPOS      LL_ADC_GetOffsetSign
3335:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
3336:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @param  Offsety This parameter can be one of the following values:
3337:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_1
3338:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_2
3339:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_3
3340:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_4
3341:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
3342:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
3343:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
3344:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
3345:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_GetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety)
3346:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** {
3347:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   register const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
3348:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
3349:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSETPOS);
3350:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** }
3351:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
ARM GAS  /tmp/ccZ0TYFG.s 			page 67


3352:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /**
3353:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @brief  Set for the ADC selected offset number 1, 2, 3 or 4:
3354:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         choose offset saturation mode.
3355:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @note   On this STM32 serie, setting of this feature is conditioned to
3356:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         ADC state:
3357:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         ADC must be disabled or enabled without conversion on going
3358:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         on either groups regular or injected.
3359:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @rmtoll OFR1     SATEN          LL_ADC_SetOffsetSaturation\n
3360:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         OFR2     SATEN          LL_ADC_SetOffsetSaturation\n
3361:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         OFR3     SATEN          LL_ADC_SetOffsetSaturation\n
3362:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         OFR4     SATEN          LL_ADC_SetOffsetSaturation
3363:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
3364:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @param  Offsety This parameter can be one of the following values:
3365:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_1
3366:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_2
3367:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_3
3368:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_4
3369:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @param  OffsetSaturation This parameter can be one of the following values:
3370:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
3371:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
3372:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @retval None
3373:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
3374:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Offse
3375:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** {
 427              		.loc 1 3375 1
 428              		.cfi_startproc
 429              		@ args = 0, pretend = 0, frame = 16
 430              		@ frame_needed = 1, uses_anonymous_args = 0
 431              		@ link register save eliminated.
 432 0000 90B4     		push	{r4, r7}
 433              	.LCFI42:
 434              		.cfi_def_cfa_offset 8
 435              		.cfi_offset 4, -8
 436              		.cfi_offset 7, -4
 437 0002 84B0     		sub	sp, sp, #16
 438              	.LCFI43:
 439              		.cfi_def_cfa_offset 24
 440 0004 00AF     		add	r7, sp, #0
 441              	.LCFI44:
 442              		.cfi_def_cfa_register 7
 443 0006 F860     		str	r0, [r7, #12]
 444 0008 B960     		str	r1, [r7, #8]
 445 000a 7A60     		str	r2, [r7, #4]
3376:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 446              		.loc 1 3376 34
 447 000c FB68     		ldr	r3, [r7, #12]
 448 000e 6033     		adds	r3, r3, #96
 449 0010 1A46     		mov	r2, r3
 450 0012 BB68     		ldr	r3, [r7, #8]
 451 0014 9B00     		lsls	r3, r3, #2
 452 0016 1344     		add	r3, r3, r2
 453              		.loc 1 3376 27
 454 0018 1C46     		mov	r4, r3
3377:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
3378:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   MODIFY_REG(*preg,
 455              		.loc 1 3378 3
 456 001a 2368     		ldr	r3, [r4]
ARM GAS  /tmp/ccZ0TYFG.s 			page 68


 457 001c 23F00072 		bic	r2, r3, #33554432
 458 0020 7B68     		ldr	r3, [r7, #4]
 459 0022 1343     		orrs	r3, r3, r2
 460 0024 2360     		str	r3, [r4]
3379:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****              ADC_OFR1_SATEN,
3380:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****              OffsetSaturation);
3381:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** }
 461              		.loc 1 3381 1
 462 0026 00BF     		nop
 463 0028 1037     		adds	r7, r7, #16
 464              	.LCFI45:
 465              		.cfi_def_cfa_offset 8
 466 002a BD46     		mov	sp, r7
 467              	.LCFI46:
 468              		.cfi_def_cfa_register 13
 469              		@ sp needed
 470 002c 90BC     		pop	{r4, r7}
 471              	.LCFI47:
 472              		.cfi_restore 7
 473              		.cfi_restore 4
 474              		.cfi_def_cfa_offset 0
 475 002e 7047     		bx	lr
 476              		.cfi_endproc
 477              	.LFE150:
 479              		.section	.text.LL_ADC_SetSamplingTimeCommonConfig,"ax",%progbits
 480              		.align	1
 481              		.syntax unified
 482              		.thumb
 483              		.thumb_func
 484              		.fpu fpv4-sp-d16
 486              	LL_ADC_SetSamplingTimeCommonConfig:
 487              	.LFB154:
3382:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
3383:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /**
3384:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @brief  Get for the ADC selected offset number 1, 2, 3 or 4:
3385:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         offset saturation if enabled or disabled.
3386:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @rmtoll OFR1     SATEN          LL_ADC_GetOffsetSaturation\n
3387:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         OFR2     SATEN          LL_ADC_GetOffsetSaturation\n
3388:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         OFR3     SATEN          LL_ADC_GetOffsetSaturation\n
3389:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         OFR4     SATEN          LL_ADC_GetOffsetSaturation
3390:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
3391:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @param  Offsety This parameter can be one of the following values:
3392:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_1
3393:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_2
3394:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_3
3395:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_4
3396:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
3397:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
3398:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
3399:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
3400:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_GetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety)
3401:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** {
3402:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   register const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
3403:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
3404:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   return (uint32_t) READ_BIT(*preg, ADC_OFR1_SATEN);
3405:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** }
3406:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
ARM GAS  /tmp/ccZ0TYFG.s 			page 69


3407:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /**
3408:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @brief  Set ADC gain compensation.
3409:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @note   This function set the gain compensation coefficient
3410:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         that is applied to raw converted data using the formula:
3411:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *           DATA = DATA(raw) * (gain compensation coef) / 4096
3412:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @note   This function enables the gain compensation if given
3413:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         coefficient is above 0, otherwise it disables it.
3414:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @note   Gain compensation when enabled is appied to all channels.
3415:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @note   On this STM32 serie, setting of this feature is conditioned to
3416:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         ADC state:
3417:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         ADC must be disabled or enabled without conversion on going
3418:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         on either groups regular or injected.
3419:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @rmtoll GCOMP    GCOMPCOEFF     LL_ADC_SetGainCompensation\n
3420:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         CFGR2    GCOMP          LL_ADC_SetGainCompensation
3421:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
3422:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @param  GainCompensation This parameter can be:
3423:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         0           Gain compensation will be disabled and value set to 0
3424:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         1 -> 16393  Gain compensation will be enabled with specified value
3425:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @retval None
3426:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
3427:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_SetGainCompensation(ADC_TypeDef *ADCx, uint32_t GainCompensation)
3428:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** {
3429:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   MODIFY_REG(ADCx->GCOMP, ADC_GCOMP_GCOMPCOEFF, GainCompensation);
3430:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   MODIFY_REG(ADCx->CFGR2, ADC_CFGR2_GCOMP, ((GainCompensation == 0UL) ? 0UL : 1UL) << ADC_CFGR2_GCO
3431:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** }
3432:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
3433:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /**
3434:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @brief  Get the ADC gain compensation value
3435:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @rmtoll GCOMP    GCOMPCOEFF     LL_ADC_GetGainCompensation\n
3436:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         CFGR2    GCOMP          LL_ADC_GetGainCompensation
3437:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
3438:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @retval Returned value can be:
3439:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         0           Gain compensation is disabled
3440:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         1 -> 16393  Gain compensation is enabled with returned value
3441:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
3442:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_GetGainCompensation(ADC_TypeDef *ADCx)
3443:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** {
3444:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   return ((READ_BIT(ADCx->CFGR2, ADC_CFGR2_GCOMP) == ADC_CFGR2_GCOMP) ? READ_BIT(ADCx->GCOMP, ADC_G
3445:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** }
3446:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
3447:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #if defined(ADC_SMPR1_SMPPLUS)
3448:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /**
3449:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @brief  Set ADC sampling time common configuration impacting
3450:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         settings of sampling time channel wise.
3451:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @note   On this STM32 serie, setting of this feature is conditioned to
3452:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         ADC state:
3453:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         ADC must be disabled or enabled without conversion on going
3454:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         on either groups regular or injected.
3455:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @rmtoll SMPR1    SMPPLUS        LL_ADC_SetSamplingTimeCommonConfig
3456:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
3457:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @param  SamplingTimeCommonConfig This parameter can be one of the following values:
3458:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
3459:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
3460:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @retval None
3461:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
3462:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCom
3463:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** {
ARM GAS  /tmp/ccZ0TYFG.s 			page 70


 488              		.loc 1 3463 1
 489              		.cfi_startproc
 490              		@ args = 0, pretend = 0, frame = 8
 491              		@ frame_needed = 1, uses_anonymous_args = 0
 492              		@ link register save eliminated.
 493 0000 80B4     		push	{r7}
 494              	.LCFI48:
 495              		.cfi_def_cfa_offset 4
 496              		.cfi_offset 7, -4
 497 0002 83B0     		sub	sp, sp, #12
 498              	.LCFI49:
 499              		.cfi_def_cfa_offset 16
 500 0004 00AF     		add	r7, sp, #0
 501              	.LCFI50:
 502              		.cfi_def_cfa_register 7
 503 0006 7860     		str	r0, [r7, #4]
 504 0008 3960     		str	r1, [r7]
3464:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 505              		.loc 1 3464 3
 506 000a 7B68     		ldr	r3, [r7, #4]
 507 000c 5B69     		ldr	r3, [r3, #20]
 508 000e 23F00042 		bic	r2, r3, #-2147483648
 509 0012 3B68     		ldr	r3, [r7]
 510 0014 1A43     		orrs	r2, r2, r3
 511 0016 7B68     		ldr	r3, [r7, #4]
 512 0018 5A61     		str	r2, [r3, #20]
3465:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** }
 513              		.loc 1 3465 1
 514 001a 00BF     		nop
 515 001c 0C37     		adds	r7, r7, #12
 516              	.LCFI51:
 517              		.cfi_def_cfa_offset 4
 518 001e BD46     		mov	sp, r7
 519              	.LCFI52:
 520              		.cfi_def_cfa_register 13
 521              		@ sp needed
 522 0020 5DF8047B 		ldr	r7, [sp], #4
 523              	.LCFI53:
 524              		.cfi_restore 7
 525              		.cfi_def_cfa_offset 0
 526 0024 7047     		bx	lr
 527              		.cfi_endproc
 528              	.LFE154:
 530              		.section	.text.LL_ADC_REG_IsTriggerSourceSWStart,"ax",%progbits
 531              		.align	1
 532              		.syntax unified
 533              		.thumb
 534              		.thumb_func
 535              		.fpu fpv4-sp-d16
 537              	LL_ADC_REG_IsTriggerSourceSWStart:
 538              	.LFB158:
3466:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
3467:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /**
3468:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @brief  Get ADC sampling time common configuration impacting
3469:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         settings of sampling time channel wise.
3470:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @rmtoll SMPR1    SMPPLUS        LL_ADC_GetSamplingTimeCommonConfig
3471:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
ARM GAS  /tmp/ccZ0TYFG.s 			page 71


3472:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
3473:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
3474:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
3475:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
3476:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonConfig(ADC_TypeDef *ADCx)
3477:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** {
3478:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   return (uint32_t)(READ_BIT(ADCx->SMPR1, ADC_SMPR1_SMPPLUS));
3479:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** }
3480:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #endif /* ADC_SMPR1_SMPPLUS */
3481:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
3482:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /**
3483:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @}
3484:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
3485:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
3486:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /** @defgroup ADC_LL_EF_Configuration_ADC_Group_Regular Configuration of ADC hierarchical scope: gr
3487:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @{
3488:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
3489:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
3490:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /**
3491:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @brief  Set ADC group regular conversion trigger source:
3492:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         internal (SW start) or from external peripheral (timer event,
3493:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         external interrupt line).
3494:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @note   On this STM32 serie, setting trigger source to external trigger
3495:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         also set trigger polarity to rising edge
3496:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         (default setting for compatibility with some ADC on other
3497:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         STM32 families having this setting set by HW default value).
3498:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         In case of need to modify trigger edge, use
3499:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         function @ref LL_ADC_REG_SetTriggerEdge().
3500:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @note   Availability of parameters of trigger sources from timer
3501:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         depends on timers availability on the selected device.
3502:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @note   On this STM32 serie, setting of this feature is conditioned to
3503:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         ADC state:
3504:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         ADC must be disabled or enabled without conversion on going
3505:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         on group regular.
3506:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @rmtoll CFGR     EXTSEL         LL_ADC_REG_SetTriggerSource\n
3507:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         CFGR     EXTEN          LL_ADC_REG_SetTriggerSource
3508:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
3509:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @param  TriggerSource This parameter can be one of the following values:
3510:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_SOFTWARE
3511:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM1_TRGO
3512:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM1_TRGO2
3513:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM1_CH1        (1)
3514:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM1_CH2        (1)
3515:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM1_CH3
3516:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM2_TRGO
3517:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM2_CH1        (2)
3518:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM2_CH2        (1)
3519:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM2_CH3        (2)
3520:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM3_TRGO
3521:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM3_CH1        (2)
3522:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM3_CH4        (1)
3523:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM4_TRGO
3524:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM4_CH1        (2)
3525:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM4_CH4        (1)
3526:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM6_TRGO
3527:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM7_TRGO
3528:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM8_TRGO
ARM GAS  /tmp/ccZ0TYFG.s 			page 72


3529:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM8_TRGO2
3530:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM8_CH1        (2)
3531:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM15_TRGO
3532:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM20_TRGO
3533:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM20_TRGO2
3534:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM20_CH1
3535:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM20_CH2       (1)
3536:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM20_CH3       (1)
3537:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_HRTIM_TRG1
3538:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_HRTIM_TRG2      (2)
3539:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_HRTIM_TRG3
3540:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_HRTIM_TRG4      (2)
3541:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_HRTIM_TRG5
3542:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_HRTIM_TRG6
3543:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_HRTIM_TRG7
3544:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_HRTIM_TRG8
3545:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_HRTIM_TRG9
3546:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_HRTIM_TRG10
3547:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_EXTI_LINE11     (1)
3548:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_EXTI_LINE2      (2)
3549:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_LPTIM_OUT
3550:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *
3551:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         (1) On STM32G4 serie, parameter not available on all ADC instances: ADC1, ADC2.\n
3552:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         (2) On STM32G4 serie, parameter not available on all ADC instances: ADC3, ADC4, ADC5.
3553:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *             On this STM32 serie, all ADCx are not available on all devices. Refer to device dat
3554:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @retval None
3555:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
3556:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_REG_SetTriggerSource(ADC_TypeDef *ADCx, uint32_t TriggerSource)
3557:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** {
3558:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   MODIFY_REG(ADCx->CFGR, ADC_CFGR_EXTEN | ADC_CFGR_EXTSEL, TriggerSource);
3559:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** }
3560:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
3561:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /**
3562:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @brief  Get ADC group regular conversion trigger source:
3563:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         internal (SW start) or from external peripheral (timer event,
3564:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         external interrupt line).
3565:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @note   To determine whether group regular trigger source is
3566:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         internal (SW start) or external, without detail
3567:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         of which peripheral is selected as external trigger,
3568:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         (equivalent to
3569:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         "if(LL_ADC_REG_GetTriggerSource(ADC1) == LL_ADC_REG_TRIG_SOFTWARE)")
3570:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         use function @ref LL_ADC_REG_IsTriggerSourceSWStart.
3571:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @note   Availability of parameters of trigger sources from timer
3572:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         depends on timers availability on the selected device.
3573:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @rmtoll CFGR     EXTSEL         LL_ADC_REG_GetTriggerSource\n
3574:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         CFGR     EXTEN          LL_ADC_REG_GetTriggerSource
3575:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
3576:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
3577:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_SOFTWARE
3578:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM1_TRGO
3579:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM1_TRGO2
3580:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM1_CH1        (1)
3581:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM1_CH2        (1)
3582:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM1_CH3
3583:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM2_TRGO
3584:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM2_CH1        (2)
3585:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM2_CH2        (1)
ARM GAS  /tmp/ccZ0TYFG.s 			page 73


3586:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM2_CH3        (2)
3587:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM3_TRGO
3588:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM3_CH1        (2)
3589:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM3_CH4        (1)
3590:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM4_TRGO
3591:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM4_CH1        (2)
3592:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM4_CH4        (1)
3593:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM6_TRGO
3594:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM7_TRGO
3595:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM8_TRGO
3596:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM8_TRGO2
3597:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM8_CH1        (2)
3598:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM15_TRGO
3599:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM20_TRGO
3600:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM20_TRGO2
3601:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM20_CH1
3602:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM20_CH2       (1)
3603:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM20_CH3       (1)
3604:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_HRTIM_TRG1
3605:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_HRTIM_TRG2      (2)
3606:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_HRTIM_TRG3
3607:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_HRTIM_TRG4      (2)
3608:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_HRTIM_TRG5
3609:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_HRTIM_TRG6
3610:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_HRTIM_TRG7
3611:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_HRTIM_TRG8
3612:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_HRTIM_TRG9
3613:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_HRTIM_TRG10
3614:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_EXTI_LINE11     (1)
3615:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_EXTI_LINE2      (2)
3616:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_LPTIM_OUT
3617:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *
3618:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         (1) On STM32G4 serie, parameter not available on all ADC instances: ADC1, ADC2.\n
3619:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         (2) On STM32G4 serie, parameter not available on all ADC instances: ADC3, ADC4, ADC5.
3620:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *             On this STM32 serie, all ADCx are not available on all devices. Refer to device dat
3621:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
3622:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_REG_GetTriggerSource(ADC_TypeDef *ADCx)
3623:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** {
3624:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   register __IO uint32_t TriggerSource = READ_BIT(ADCx->CFGR, ADC_CFGR_EXTSEL | ADC_CFGR_EXTEN);
3625:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
3626:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   /* Value for shift of {0; 4; 8; 12} depending on value of bitfield          */
3627:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   /* corresponding to ADC_CFGR_EXTEN {0; 1; 2; 3}.                            */
3628:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   register uint32_t ShiftExten = ((TriggerSource & ADC_CFGR_EXTEN) >> (ADC_REG_TRIG_EXTEN_BITOFFSET
3629:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
3630:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   /* Set bitfield corresponding to ADC_CFGR_EXTEN and ADC_CFGR_EXTSEL         */
3631:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   /* to match with triggers literals definition.                              */
3632:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   return ((TriggerSource
3633:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****            & (ADC_REG_TRIG_SOURCE_MASK >> ShiftExten) & ADC_CFGR_EXTSEL)
3634:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****           | ((ADC_REG_TRIG_EDGE_MASK >> ShiftExten) & ADC_CFGR_EXTEN)
3635:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****          );
3636:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** }
3637:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
3638:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /**
3639:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @brief  Get ADC group regular conversion trigger source internal (SW start)
3640:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         or external.
3641:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @note   In case of group regular trigger source set to external trigger,
3642:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         to determine which peripheral is selected as external trigger,
ARM GAS  /tmp/ccZ0TYFG.s 			page 74


3643:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         use function @ref LL_ADC_REG_GetTriggerSource().
3644:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @rmtoll CFGR     EXTEN          LL_ADC_REG_IsTriggerSourceSWStart
3645:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
3646:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @retval Value "0" if trigger source external trigger
3647:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         Value "1" if trigger source SW start.
3648:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
3649:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
3650:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** {
 539              		.loc 1 3650 1
 540              		.cfi_startproc
 541              		@ args = 0, pretend = 0, frame = 8
 542              		@ frame_needed = 1, uses_anonymous_args = 0
 543              		@ link register save eliminated.
 544 0000 80B4     		push	{r7}
 545              	.LCFI54:
 546              		.cfi_def_cfa_offset 4
 547              		.cfi_offset 7, -4
 548 0002 83B0     		sub	sp, sp, #12
 549              	.LCFI55:
 550              		.cfi_def_cfa_offset 16
 551 0004 00AF     		add	r7, sp, #0
 552              	.LCFI56:
 553              		.cfi_def_cfa_register 7
 554 0006 7860     		str	r0, [r7, #4]
3651:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1
 555              		.loc 1 3651 12
 556 0008 7B68     		ldr	r3, [r7, #4]
 557 000a DB68     		ldr	r3, [r3, #12]
 558 000c 03F44063 		and	r3, r3, #3072
 559              		.loc 1 3651 103
 560 0010 002B     		cmp	r3, #0
 561 0012 01D1     		bne	.L15
 562              		.loc 1 3651 103 is_stmt 0 discriminator 1
 563 0014 0123     		movs	r3, #1
 564 0016 00E0     		b	.L17
 565              	.L15:
 566              		.loc 1 3651 103 discriminator 2
 567 0018 0023     		movs	r3, #0
 568              	.L17:
3652:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** }
 569              		.loc 1 3652 1 is_stmt 1 discriminator 5
 570 001a 1846     		mov	r0, r3
 571 001c 0C37     		adds	r7, r7, #12
 572              	.LCFI57:
 573              		.cfi_def_cfa_offset 4
 574 001e BD46     		mov	sp, r7
 575              	.LCFI58:
 576              		.cfi_def_cfa_register 13
 577              		@ sp needed
 578 0020 5DF8047B 		ldr	r7, [sp], #4
 579              	.LCFI59:
 580              		.cfi_restore 7
 581              		.cfi_def_cfa_offset 0
 582 0024 7047     		bx	lr
 583              		.cfi_endproc
 584              	.LFE158:
 586              		.section	.text.LL_ADC_REG_SetSequencerRanks,"ax",%progbits
ARM GAS  /tmp/ccZ0TYFG.s 			page 75


 587              		.align	1
 588              		.syntax unified
 589              		.thumb
 590              		.thumb_func
 591              		.fpu fpv4-sp-d16
 593              	LL_ADC_REG_SetSequencerRanks:
 594              	.LFB167:
3653:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
3654:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /**
3655:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @brief  Set ADC group regular conversion trigger polarity.
3656:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @note   Applicable only for trigger source set to external trigger.
3657:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @note   On this STM32 serie, setting of this feature is conditioned to
3658:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         ADC state:
3659:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         ADC must be disabled or enabled without conversion on going
3660:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         on group regular.
3661:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @rmtoll CFGR     EXTEN          LL_ADC_REG_SetTriggerEdge
3662:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
3663:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @param  ExternalTriggerEdge This parameter can be one of the following values:
3664:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_RISING
3665:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_FALLING
3666:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_RISINGFALLING
3667:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @retval None
3668:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
3669:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_REG_SetTriggerEdge(ADC_TypeDef *ADCx, uint32_t ExternalTriggerEdge)
3670:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** {
3671:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   MODIFY_REG(ADCx->CFGR, ADC_CFGR_EXTEN, ExternalTriggerEdge);
3672:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** }
3673:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
3674:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /**
3675:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @brief  Get ADC group regular conversion trigger polarity.
3676:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @note   Applicable only for trigger source set to external trigger.
3677:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @rmtoll CFGR     EXTEN          LL_ADC_REG_GetTriggerEdge
3678:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
3679:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
3680:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_RISING
3681:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_FALLING
3682:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_RISINGFALLING
3683:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
3684:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_REG_GetTriggerEdge(ADC_TypeDef *ADCx)
3685:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** {
3686:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   return (uint32_t)(READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN));
3687:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** }
3688:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
3689:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /**
3690:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @brief  Set ADC sampling mode.
3691:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @note   This function set the ADC conversion sampling mode
3692:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @note   This mode applies to regular group only.
3693:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @note   Set sampling mode is appied to all conversion of regular group.
3694:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @note   On this STM32 serie, setting of this feature is conditioned to
3695:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         ADC state:
3696:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         ADC must be disabled or enabled without conversion on going
3697:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         on group regular.
3698:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @rmtoll CFGR2    BULB           LL_ADC_REG_SetSamplingMode\n
3699:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         CFGR2    SMPTRIG        LL_ADC_REG_SetSamplingMode
3700:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
3701:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @param  SamplingMode This parameter can be one of the following values:
3702:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SAMPLING_MODE_NORMAL
ARM GAS  /tmp/ccZ0TYFG.s 			page 76


3703:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SAMPLING_MODE_BULB
3704:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SAMPLING_MODE_TRIGGER_CONTROLED
3705:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @retval None
3706:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
3707:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_REG_SetSamplingMode(ADC_TypeDef *ADCx, uint32_t SamplingMode)
3708:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** {
3709:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   MODIFY_REG(ADCx->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, SamplingMode);
3710:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** }
3711:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
3712:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /**
3713:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @brief  Get the ADC sampling mode
3714:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @rmtoll CFGR2    BULB           LL_ADC_REG_GetSamplingMode\n
3715:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         CFGR2    SMPTRIG        LL_ADC_REG_GetSamplingMode
3716:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
3717:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
3718:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SAMPLING_MODE_NORMAL
3719:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SAMPLING_MODE_BULB
3720:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SAMPLING_MODE_TRIGGER_CONTROLED
3721:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
3722:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_REG_GetSamplingMode(ADC_TypeDef *ADCx)
3723:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** {
3724:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   return (uint32_t)(READ_BIT(ADCx->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG));
3725:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** }
3726:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
3727:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /**
3728:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @brief  Set ADC group regular sequencer length and scan direction.
3729:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @note   Description of ADC group regular sequencer features:
3730:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         - For devices with sequencer fully configurable
3731:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *           (function "LL_ADC_REG_SetSequencerRanks()" available):
3732:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *           sequencer length and each rank affectation to a channel
3733:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *           are configurable.
3734:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *           This function performs configuration of:
3735:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *           - Sequence length: Number of ranks in the scan sequence.
3736:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *           - Sequence direction: Unless specified in parameters, sequencer
3737:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *             scan direction is forward (from rank 1 to rank n).
3738:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *           Sequencer ranks are selected using
3739:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *           function "LL_ADC_REG_SetSequencerRanks()".
3740:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         - For devices with sequencer not fully configurable
3741:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *           (function "LL_ADC_REG_SetSequencerChannels()" available):
3742:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *           sequencer length and each rank affectation to a channel
3743:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *           are defined by channel number.
3744:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *           This function performs configuration of:
3745:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *           - Sequence length: Number of ranks in the scan sequence is
3746:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *             defined by number of channels set in the sequence,
3747:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *             rank of each channel is fixed by channel HW number.
3748:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *             (channel 0 fixed on rank 0, channel 1 fixed on rank1, ...).
3749:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *           - Sequence direction: Unless specified in parameters, sequencer
3750:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *             scan direction is forward (from lowest channel number to
3751:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *             highest channel number).
3752:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *           Sequencer ranks are selected using
3753:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *           function "LL_ADC_REG_SetSequencerChannels()".
3754:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @note   Sequencer disabled is equivalent to sequencer of 1 rank:
3755:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         ADC conversion on only 1 channel.
3756:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @note   On this STM32 serie, setting of this feature is conditioned to
3757:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         ADC state:
3758:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         ADC must be disabled or enabled without conversion on going
3759:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         on group regular.
ARM GAS  /tmp/ccZ0TYFG.s 			page 77


3760:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @rmtoll SQR1     L              LL_ADC_REG_SetSequencerLength
3761:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
3762:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @param  SequencerNbRanks This parameter can be one of the following values:
3763:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_DISABLE
3764:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_2RANKS
3765:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_3RANKS
3766:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_4RANKS
3767:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_5RANKS
3768:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_6RANKS
3769:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_7RANKS
3770:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_8RANKS
3771:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_9RANKS
3772:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_10RANKS
3773:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_11RANKS
3774:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_12RANKS
3775:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_13RANKS
3776:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_14RANKS
3777:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_15RANKS
3778:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_16RANKS
3779:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @retval None
3780:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
3781:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_REG_SetSequencerLength(ADC_TypeDef *ADCx, uint32_t SequencerNbRanks)
3782:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** {
3783:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
3784:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** }
3785:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
3786:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /**
3787:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @brief  Get ADC group regular sequencer length and scan direction.
3788:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @note   Description of ADC group regular sequencer features:
3789:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         - For devices with sequencer fully configurable
3790:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *           (function "LL_ADC_REG_SetSequencerRanks()" available):
3791:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *           sequencer length and each rank affectation to a channel
3792:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *           are configurable.
3793:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *           This function retrieves:
3794:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *           - Sequence length: Number of ranks in the scan sequence.
3795:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *           - Sequence direction: Unless specified in parameters, sequencer
3796:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *             scan direction is forward (from rank 1 to rank n).
3797:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *           Sequencer ranks are selected using
3798:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *           function "LL_ADC_REG_SetSequencerRanks()".
3799:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         - For devices with sequencer not fully configurable
3800:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *           (function "LL_ADC_REG_SetSequencerChannels()" available):
3801:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *           sequencer length and each rank affectation to a channel
3802:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *           are defined by channel number.
3803:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *           This function retrieves:
3804:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *           - Sequence length: Number of ranks in the scan sequence is
3805:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *             defined by number of channels set in the sequence,
3806:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *             rank of each channel is fixed by channel HW number.
3807:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *             (channel 0 fixed on rank 0, channel 1 fixed on rank1, ...).
3808:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *           - Sequence direction: Unless specified in parameters, sequencer
3809:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *             scan direction is forward (from lowest channel number to
3810:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *             highest channel number).
3811:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *           Sequencer ranks are selected using
3812:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *           function "LL_ADC_REG_SetSequencerChannels()".
3813:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @note   Sequencer disabled is equivalent to sequencer of 1 rank:
3814:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         ADC conversion on only 1 channel.
3815:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @rmtoll SQR1     L              LL_ADC_REG_GetSequencerLength
3816:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
ARM GAS  /tmp/ccZ0TYFG.s 			page 78


3817:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
3818:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_DISABLE
3819:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_2RANKS
3820:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_3RANKS
3821:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_4RANKS
3822:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_5RANKS
3823:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_6RANKS
3824:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_7RANKS
3825:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_8RANKS
3826:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_9RANKS
3827:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_10RANKS
3828:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_11RANKS
3829:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_12RANKS
3830:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_13RANKS
3831:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_14RANKS
3832:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_15RANKS
3833:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_16RANKS
3834:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
3835:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_REG_GetSequencerLength(ADC_TypeDef *ADCx)
3836:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** {
3837:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   return (uint32_t)(READ_BIT(ADCx->SQR1, ADC_SQR1_L));
3838:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** }
3839:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
3840:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /**
3841:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @brief  Set ADC group regular sequencer discontinuous mode:
3842:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         sequence subdivided and scan conversions interrupted every selected
3843:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         number of ranks.
3844:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @note   It is not possible to enable both ADC group regular
3845:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         continuous mode and sequencer discontinuous mode.
3846:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @note   It is not possible to enable both ADC auto-injected mode
3847:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         and ADC group regular sequencer discontinuous mode.
3848:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @note   On this STM32 serie, setting of this feature is conditioned to
3849:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         ADC state:
3850:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         ADC must be disabled or enabled without conversion on going
3851:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         on group regular.
3852:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @rmtoll CFGR     DISCEN         LL_ADC_REG_SetSequencerDiscont\n
3853:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         CFGR     DISCNUM        LL_ADC_REG_SetSequencerDiscont
3854:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
3855:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @param  SeqDiscont This parameter can be one of the following values:
3856:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_DISCONT_DISABLE
3857:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_DISCONT_1RANK
3858:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_DISCONT_2RANKS
3859:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_DISCONT_3RANKS
3860:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_DISCONT_4RANKS
3861:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_DISCONT_5RANKS
3862:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_DISCONT_6RANKS
3863:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_DISCONT_7RANKS
3864:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_DISCONT_8RANKS
3865:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @retval None
3866:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
3867:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_REG_SetSequencerDiscont(ADC_TypeDef *ADCx, uint32_t SeqDiscont)
3868:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** {
3869:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   MODIFY_REG(ADCx->CFGR, ADC_CFGR_DISCEN | ADC_CFGR_DISCNUM, SeqDiscont);
3870:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** }
3871:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
3872:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /**
3873:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @brief  Get ADC group regular sequencer discontinuous mode:
ARM GAS  /tmp/ccZ0TYFG.s 			page 79


3874:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         sequence subdivided and scan conversions interrupted every selected
3875:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         number of ranks.
3876:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @rmtoll CFGR     DISCEN         LL_ADC_REG_GetSequencerDiscont\n
3877:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         CFGR     DISCNUM        LL_ADC_REG_GetSequencerDiscont
3878:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
3879:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
3880:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_DISCONT_DISABLE
3881:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_DISCONT_1RANK
3882:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_DISCONT_2RANKS
3883:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_DISCONT_3RANKS
3884:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_DISCONT_4RANKS
3885:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_DISCONT_5RANKS
3886:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_DISCONT_6RANKS
3887:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_DISCONT_7RANKS
3888:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_DISCONT_8RANKS
3889:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
3890:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_REG_GetSequencerDiscont(ADC_TypeDef *ADCx)
3891:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** {
3892:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   return (uint32_t)(READ_BIT(ADCx->CFGR, ADC_CFGR_DISCEN | ADC_CFGR_DISCNUM));
3893:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** }
3894:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
3895:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /**
3896:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @brief  Set ADC group regular sequence: channel on the selected
3897:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         scan sequence rank.
3898:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @note   This function performs configuration of:
3899:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         - Channels ordering into each rank of scan sequence:
3900:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *           whatever channel can be placed into whatever rank.
3901:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @note   On this STM32 serie, ADC group regular sequencer is
3902:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         fully configurable: sequencer length and each rank
3903:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         affectation to a channel are configurable.
3904:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         Refer to description of function @ref LL_ADC_REG_SetSequencerLength().
3905:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @note   Depending on devices and packages, some channels may not be available.
3906:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         Refer to device datasheet for channels availability.
3907:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @note   On this STM32 serie, to measure internal channels (VrefInt,
3908:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         TempSensor, ...), measurement paths to internal channels must be
3909:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         enabled separately.
3910:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         This can be done using function @ref LL_ADC_SetCommonPathInternalCh().
3911:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @note   On this STM32 serie, setting of this feature is conditioned to
3912:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         ADC state:
3913:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         ADC must be disabled or enabled without conversion on going
3914:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         on group regular.
3915:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @rmtoll SQR1     SQ1            LL_ADC_REG_SetSequencerRanks\n
3916:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         SQR1     SQ2            LL_ADC_REG_SetSequencerRanks\n
3917:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         SQR1     SQ3            LL_ADC_REG_SetSequencerRanks\n
3918:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         SQR1     SQ4            LL_ADC_REG_SetSequencerRanks\n
3919:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         SQR2     SQ5            LL_ADC_REG_SetSequencerRanks\n
3920:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         SQR2     SQ6            LL_ADC_REG_SetSequencerRanks\n
3921:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         SQR2     SQ7            LL_ADC_REG_SetSequencerRanks\n
3922:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         SQR2     SQ8            LL_ADC_REG_SetSequencerRanks\n
3923:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         SQR2     SQ9            LL_ADC_REG_SetSequencerRanks\n
3924:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         SQR3     SQ10           LL_ADC_REG_SetSequencerRanks\n
3925:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         SQR3     SQ11           LL_ADC_REG_SetSequencerRanks\n
3926:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         SQR3     SQ12           LL_ADC_REG_SetSequencerRanks\n
3927:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         SQR3     SQ13           LL_ADC_REG_SetSequencerRanks\n
3928:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         SQR3     SQ14           LL_ADC_REG_SetSequencerRanks\n
3929:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         SQR4     SQ15           LL_ADC_REG_SetSequencerRanks\n
3930:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         SQR4     SQ16           LL_ADC_REG_SetSequencerRanks
ARM GAS  /tmp/ccZ0TYFG.s 			page 80


3931:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
3932:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @param  Rank This parameter can be one of the following values:
3933:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_RANK_1
3934:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_RANK_2
3935:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_RANK_3
3936:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_RANK_4
3937:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_RANK_5
3938:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_RANK_6
3939:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_RANK_7
3940:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_RANK_8
3941:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_RANK_9
3942:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_RANK_10
3943:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_RANK_11
3944:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_RANK_12
3945:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_RANK_13
3946:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_RANK_14
3947:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_RANK_15
3948:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_RANK_16
3949:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @param  Channel This parameter can be one of the following values:
3950:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_0
3951:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_1                 (8)
3952:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_2                 (8)
3953:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_3                 (8)
3954:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_4                 (8)
3955:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_5                 (8)
3956:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_6
3957:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_7
3958:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_8
3959:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_9
3960:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_10
3961:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_11
3962:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_12
3963:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_13
3964:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_14
3965:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_15
3966:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_16
3967:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_17
3968:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_18
3969:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VREFINT           (7)
3970:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_TEMPSENSOR_ADC1   (1)
3971:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_TEMPSENSOR_ADC5   (5)
3972:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VBAT              (6)
3973:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP1           (1)
3974:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP2           (2)
3975:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP3_ADC2      (2)
3976:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP3_ADC3      (3)
3977:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP4           (5)
3978:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP5           (5)
3979:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP6           (4)
3980:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *
3981:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         (1) On STM32G4, parameter available only on ADC instance: ADC1.\n
3982:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         (2) On STM32G4, parameter available only on ADC instance: ADC2.\n
3983:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         (3) On STM32G4, parameter available only on ADC instance: ADC3.\n
3984:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         (4) On STM32G4, parameter available only on ADC instance: ADC4.\n
3985:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         (5) On STM32G4, parameter available only on ADC instance: ADC5.\n
3986:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         (6) On STM32G4, parameter available only on ADC instances: ADC1, ADC3, ADC5.\n
3987:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         (7) On STM32G4, parameter available only on ADC instances: ADC1, ADC3, ADC4, ADC5.\n
ARM GAS  /tmp/ccZ0TYFG.s 			page 81


3988:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *          -  On this STM32 serie, all ADCx are not available on all devices. Refer to device dat
3989:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock 
3990:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 A
3991:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @retval None
3992:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
3993:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channe
3994:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** {
 595              		.loc 1 3994 1
 596              		.cfi_startproc
 597              		@ args = 0, pretend = 0, frame = 16
 598              		@ frame_needed = 1, uses_anonymous_args = 0
 599              		@ link register save eliminated.
 600 0000 90B4     		push	{r4, r7}
 601              	.LCFI60:
 602              		.cfi_def_cfa_offset 8
 603              		.cfi_offset 4, -8
 604              		.cfi_offset 7, -4
 605 0002 84B0     		sub	sp, sp, #16
 606              	.LCFI61:
 607              		.cfi_def_cfa_offset 24
 608 0004 00AF     		add	r7, sp, #0
 609              	.LCFI62:
 610              		.cfi_def_cfa_register 7
 611 0006 F860     		str	r0, [r7, #12]
 612 0008 B960     		str	r1, [r7, #8]
 613 000a 7A60     		str	r2, [r7, #4]
3995:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   /* Set bits with content of parameter "Channel" with bits position          */
3996:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   /* in register and register position depending on parameter "Rank".         */
3997:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   /* Parameters "Rank" and "Channel" are used with masks because containing   */
3998:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   /* other bits reserved for other purpose.                                   */
3999:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_M
 614              		.loc 1 3999 34
 615 000c FB68     		ldr	r3, [r7, #12]
 616 000e 3033     		adds	r3, r3, #48
 617 0010 1A46     		mov	r2, r3
 618 0012 BB68     		ldr	r3, [r7, #8]
 619 0014 1B0A     		lsrs	r3, r3, #8
 620 0016 9B00     		lsls	r3, r3, #2
 621 0018 03F00C03 		and	r3, r3, #12
 622 001c 1344     		add	r3, r3, r2
 623              		.loc 1 3999 27
 624 001e 1C46     		mov	r4, r3
4000:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
4001:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   MODIFY_REG(*preg,
 625              		.loc 1 4001 3
 626 0020 2268     		ldr	r2, [r4]
 627 0022 BB68     		ldr	r3, [r7, #8]
 628 0024 03F01F03 		and	r3, r3, #31
 629 0028 1F21     		movs	r1, #31
 630 002a 01FA03F3 		lsl	r3, r1, r3
 631 002e DB43     		mvns	r3, r3
 632 0030 1A40     		ands	r2, r2, r3
 633 0032 7B68     		ldr	r3, [r7, #4]
 634 0034 9B0E     		lsrs	r3, r3, #26
 635 0036 03F01F01 		and	r1, r3, #31
 636 003a BB68     		ldr	r3, [r7, #8]
 637 003c 03F01F03 		and	r3, r3, #31
ARM GAS  /tmp/ccZ0TYFG.s 			page 82


 638 0040 01FA03F3 		lsl	r3, r1, r3
 639 0044 1343     		orrs	r3, r3, r2
 640 0046 2360     		str	r3, [r4]
4002:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****              ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
4003:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****              ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Ra
4004:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** }
 641              		.loc 1 4004 1
 642 0048 00BF     		nop
 643 004a 1037     		adds	r7, r7, #16
 644              	.LCFI63:
 645              		.cfi_def_cfa_offset 8
 646 004c BD46     		mov	sp, r7
 647              	.LCFI64:
 648              		.cfi_def_cfa_register 13
 649              		@ sp needed
 650 004e 90BC     		pop	{r4, r7}
 651              	.LCFI65:
 652              		.cfi_restore 7
 653              		.cfi_restore 4
 654              		.cfi_def_cfa_offset 0
 655 0050 7047     		bx	lr
 656              		.cfi_endproc
 657              	.LFE167:
 659              		.section	.text.LL_ADC_INJ_IsTriggerSourceSWStart,"ax",%progbits
 660              		.align	1
 661              		.syntax unified
 662              		.thumb
 663              		.thumb_func
 664              		.fpu fpv4-sp-d16
 666              	LL_ADC_INJ_IsTriggerSourceSWStart:
 667              	.LFB177:
4005:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
4006:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /**
4007:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @brief  Get ADC group regular sequence: channel on the selected
4008:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         scan sequence rank.
4009:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @note   On this STM32 serie, ADC group regular sequencer is
4010:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         fully configurable: sequencer length and each rank
4011:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         affectation to a channel are configurable.
4012:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         Refer to description of function @ref LL_ADC_REG_SetSequencerLength().
4013:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @note   Depending on devices and packages, some channels may not be available.
4014:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         Refer to device datasheet for channels availability.
4015:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @note   Usage of the returned channel number:
4016:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         - To reinject this channel into another function LL_ADC_xxx:
4017:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *           the returned channel number is only partly formatted on definition
4018:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *           of literals LL_ADC_CHANNEL_x. Therefore, it has to be compared
4019:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *           with parts of literals LL_ADC_CHANNEL_x or using
4020:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *           helper macro @ref __LL_ADC_CHANNEL_TO_DECIMAL_NB().
4021:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *           Then the selected literal LL_ADC_CHANNEL_x can be used
4022:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *           as parameter for another function.
4023:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         - To get the channel number in decimal format:
4024:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *           process the returned value with the helper macro
4025:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *           @ref __LL_ADC_CHANNEL_TO_DECIMAL_NB().
4026:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @rmtoll SQR1     SQ1            LL_ADC_REG_GetSequencerRanks\n
4027:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         SQR1     SQ2            LL_ADC_REG_GetSequencerRanks\n
4028:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         SQR1     SQ3            LL_ADC_REG_GetSequencerRanks\n
4029:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         SQR1     SQ4            LL_ADC_REG_GetSequencerRanks\n
4030:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         SQR2     SQ5            LL_ADC_REG_GetSequencerRanks\n
ARM GAS  /tmp/ccZ0TYFG.s 			page 83


4031:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         SQR2     SQ6            LL_ADC_REG_GetSequencerRanks\n
4032:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         SQR2     SQ7            LL_ADC_REG_GetSequencerRanks\n
4033:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         SQR2     SQ8            LL_ADC_REG_GetSequencerRanks\n
4034:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         SQR2     SQ9            LL_ADC_REG_GetSequencerRanks\n
4035:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         SQR3     SQ10           LL_ADC_REG_GetSequencerRanks\n
4036:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         SQR3     SQ11           LL_ADC_REG_GetSequencerRanks\n
4037:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         SQR3     SQ12           LL_ADC_REG_GetSequencerRanks\n
4038:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         SQR3     SQ13           LL_ADC_REG_GetSequencerRanks\n
4039:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         SQR3     SQ14           LL_ADC_REG_GetSequencerRanks\n
4040:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         SQR4     SQ15           LL_ADC_REG_GetSequencerRanks\n
4041:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         SQR4     SQ16           LL_ADC_REG_GetSequencerRanks
4042:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
4043:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @param  Rank This parameter can be one of the following values:
4044:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_RANK_1
4045:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_RANK_2
4046:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_RANK_3
4047:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_RANK_4
4048:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_RANK_5
4049:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_RANK_6
4050:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_RANK_7
4051:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_RANK_8
4052:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_RANK_9
4053:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_RANK_10
4054:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_RANK_11
4055:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_RANK_12
4056:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_RANK_13
4057:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_RANK_14
4058:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_RANK_15
4059:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_RANK_16
4060:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
4061:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_0
4062:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_1                 (8)
4063:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_2                 (8)
4064:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_3                 (8)
4065:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_4                 (8)
4066:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_5                 (8)
4067:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_6
4068:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_7
4069:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_8
4070:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_9
4071:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_10
4072:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_11
4073:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_12
4074:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_13
4075:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_14
4076:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_15
4077:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_16
4078:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_17
4079:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_18
4080:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VREFINT           (7)
4081:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_TEMPSENSOR_ADC1   (1)
4082:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_TEMPSENSOR_ADC5   (5)
4083:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VBAT              (6)
4084:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP1           (1)
4085:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP2           (2)
4086:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP3_ADC2      (2)
4087:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP3_ADC3      (3)
ARM GAS  /tmp/ccZ0TYFG.s 			page 84


4088:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP4           (5)
4089:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP5           (5)
4090:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP6           (4)
4091:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *
4092:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         (1) On STM32G4, parameter available only on ADC instance: ADC1.\n
4093:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         (2) On STM32G4, parameter available only on ADC instance: ADC2.\n
4094:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         (3) On STM32G4, parameter available only on ADC instance: ADC3.\n
4095:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         (4) On STM32G4, parameter available only on ADC instance: ADC4.\n
4096:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         (5) On STM32G4, parameter available only on ADC instance: ADC5.\n
4097:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         (6) On STM32G4, parameter available only on ADC instances: ADC1, ADC3, ADC5.\n
4098:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         (7) On STM32G4, parameter available only on ADC instances: ADC1, ADC3, ADC4, ADC5.\n
4099:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *          -  On this STM32 serie, all ADCx are not available on all devices. Refer to device dat
4100:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock 
4101:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 A
4102:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
4103:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *                      comparison with internal channel parameter to be done
4104:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
4105:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
4106:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_REG_GetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank)
4107:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** {
4108:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   register const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOF
4109:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
4110:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   return (uint32_t)((READ_BIT(*preg,
4111:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****                               ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MA
4112:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****                      >> (Rank & ADC_REG_RANK_ID_SQRX_MASK)) << ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS
4113:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****                    );
4114:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** }
4115:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
4116:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /**
4117:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @brief  Set ADC continuous conversion mode on ADC group regular.
4118:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @note   Description of ADC continuous conversion mode:
4119:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         - single mode: one conversion per trigger
4120:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         - continuous mode: after the first trigger, following
4121:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *           conversions launched successively automatically.
4122:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @note   It is not possible to enable both ADC group regular
4123:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         continuous mode and sequencer discontinuous mode.
4124:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @note   On this STM32 serie, setting of this feature is conditioned to
4125:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         ADC state:
4126:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         ADC must be disabled or enabled without conversion on going
4127:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         on group regular.
4128:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @rmtoll CFGR     CONT           LL_ADC_REG_SetContinuousMode
4129:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
4130:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @param  Continuous This parameter can be one of the following values:
4131:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_CONV_SINGLE
4132:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_CONV_CONTINUOUS
4133:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @retval None
4134:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
4135:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_REG_SetContinuousMode(ADC_TypeDef *ADCx, uint32_t Continuous)
4136:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** {
4137:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   MODIFY_REG(ADCx->CFGR, ADC_CFGR_CONT, Continuous);
4138:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** }
4139:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
4140:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /**
4141:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @brief  Get ADC continuous conversion mode on ADC group regular.
4142:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @note   Description of ADC continuous conversion mode:
4143:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         - single mode: one conversion per trigger
4144:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         - continuous mode: after the first trigger, following
ARM GAS  /tmp/ccZ0TYFG.s 			page 85


4145:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *           conversions launched successively automatically.
4146:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @rmtoll CFGR     CONT           LL_ADC_REG_GetContinuousMode
4147:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
4148:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
4149:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_CONV_SINGLE
4150:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_CONV_CONTINUOUS
4151:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
4152:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_REG_GetContinuousMode(ADC_TypeDef *ADCx)
4153:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** {
4154:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   return (uint32_t)(READ_BIT(ADCx->CFGR, ADC_CFGR_CONT));
4155:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** }
4156:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
4157:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /**
4158:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @brief  Set ADC group regular conversion data transfer: no transfer or
4159:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         transfer by DMA, and DMA requests mode.
4160:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @note   If transfer by DMA selected, specifies the DMA requests
4161:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         mode:
4162:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         - Limited mode (One shot mode): DMA transfer requests are stopped
4163:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *           when number of DMA data transfers (number of
4164:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *           ADC conversions) is reached.
4165:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *           This ADC mode is intended to be used with DMA mode non-circular.
4166:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         - Unlimited mode: DMA transfer requests are unlimited,
4167:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *           whatever number of DMA data transfers (number of
4168:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *           ADC conversions).
4169:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *           This ADC mode is intended to be used with DMA mode circular.
4170:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @note   If ADC DMA requests mode is set to unlimited and DMA is set to
4171:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         mode non-circular:
4172:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         when DMA transfers size will be reached, DMA will stop transfers of
4173:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         ADC conversions data ADC will raise an overrun error
4174:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *        (overrun flag and interruption if enabled).
4175:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @note   For devices with several ADC instances: ADC multimode DMA
4176:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         settings are available using function @ref LL_ADC_SetMultiDMATransfer().
4177:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @note   To configure DMA source address (peripheral address),
4178:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         use function @ref LL_ADC_DMA_GetRegAddr().
4179:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @note   On this STM32 serie, setting of this feature is conditioned to
4180:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         ADC state:
4181:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         ADC must be disabled or enabled without conversion on going
4182:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         on either groups regular or injected.
4183:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @rmtoll CFGR     DMAEN          LL_ADC_REG_SetDMATransfer\n
4184:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         CFGR     DMACFG         LL_ADC_REG_SetDMATransfer
4185:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
4186:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @param  DMATransfer This parameter can be one of the following values:
4187:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_DMA_TRANSFER_NONE
4188:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_DMA_TRANSFER_LIMITED
4189:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_DMA_TRANSFER_UNLIMITED
4190:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @retval None
4191:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
4192:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_REG_SetDMATransfer(ADC_TypeDef *ADCx, uint32_t DMATransfer)
4193:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** {
4194:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMAEN | ADC_CFGR_DMACFG, DMATransfer);
4195:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** }
4196:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
4197:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /**
4198:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @brief  Get ADC group regular conversion data transfer: no transfer or
4199:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         transfer by DMA, and DMA requests mode.
4200:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @note   If transfer by DMA selected, specifies the DMA requests
4201:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         mode:
ARM GAS  /tmp/ccZ0TYFG.s 			page 86


4202:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         - Limited mode (One shot mode): DMA transfer requests are stopped
4203:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *           when number of DMA data transfers (number of
4204:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *           ADC conversions) is reached.
4205:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *           This ADC mode is intended to be used with DMA mode non-circular.
4206:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         - Unlimited mode: DMA transfer requests are unlimited,
4207:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *           whatever number of DMA data transfers (number of
4208:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *           ADC conversions).
4209:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *           This ADC mode is intended to be used with DMA mode circular.
4210:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @note   If ADC DMA requests mode is set to unlimited and DMA is set to
4211:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         mode non-circular:
4212:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         when DMA transfers size will be reached, DMA will stop transfers of
4213:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         ADC conversions data ADC will raise an overrun error
4214:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         (overrun flag and interruption if enabled).
4215:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @note   For devices with several ADC instances: ADC multimode DMA
4216:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         settings are available using function @ref LL_ADC_GetMultiDMATransfer().
4217:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @note   To configure DMA source address (peripheral address),
4218:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         use function @ref LL_ADC_DMA_GetRegAddr().
4219:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @rmtoll CFGR     DMAEN          LL_ADC_REG_GetDMATransfer\n
4220:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         CFGR     DMACFG         LL_ADC_REG_GetDMATransfer
4221:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
4222:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
4223:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_DMA_TRANSFER_NONE
4224:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_DMA_TRANSFER_LIMITED
4225:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_DMA_TRANSFER_UNLIMITED
4226:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
4227:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_REG_GetDMATransfer(ADC_TypeDef *ADCx)
4228:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** {
4229:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   return (uint32_t)(READ_BIT(ADCx->CFGR, ADC_CFGR_DMAEN | ADC_CFGR_DMACFG));
4230:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** }
4231:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
4232:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /**
4233:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @brief  Set ADC group regular behavior in case of overrun:
4234:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         data preserved or overwritten.
4235:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @note   Compatibility with devices without feature overrun:
4236:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         other devices without this feature have a behavior
4237:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         equivalent to data overwritten.
4238:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         The default setting of overrun is data preserved.
4239:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         Therefore, for compatibility with all devices, parameter
4240:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         overrun should be set to data overwritten.
4241:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @note   On this STM32 serie, setting of this feature is conditioned to
4242:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         ADC state:
4243:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         ADC must be disabled or enabled without conversion on going
4244:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         on group regular.
4245:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @rmtoll CFGR     OVRMOD         LL_ADC_REG_SetOverrun
4246:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
4247:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @param  Overrun This parameter can be one of the following values:
4248:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_OVR_DATA_PRESERVED
4249:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_OVR_DATA_OVERWRITTEN
4250:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @retval None
4251:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
4252:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_REG_SetOverrun(ADC_TypeDef *ADCx, uint32_t Overrun)
4253:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** {
4254:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   MODIFY_REG(ADCx->CFGR, ADC_CFGR_OVRMOD, Overrun);
4255:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** }
4256:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
4257:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /**
4258:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @brief  Get ADC group regular behavior in case of overrun:
ARM GAS  /tmp/ccZ0TYFG.s 			page 87


4259:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         data preserved or overwritten.
4260:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @rmtoll CFGR     OVRMOD         LL_ADC_REG_GetOverrun
4261:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
4262:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
4263:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_OVR_DATA_PRESERVED
4264:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_OVR_DATA_OVERWRITTEN
4265:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
4266:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_REG_GetOverrun(ADC_TypeDef *ADCx)
4267:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** {
4268:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   return (uint32_t)(READ_BIT(ADCx->CFGR, ADC_CFGR_OVRMOD));
4269:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** }
4270:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
4271:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /**
4272:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @}
4273:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
4274:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
4275:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /** @defgroup ADC_LL_EF_Configuration_ADC_Group_Injected Configuration of ADC hierarchical scope: g
4276:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @{
4277:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
4278:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
4279:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /**
4280:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @brief  Set ADC group injected conversion trigger source:
4281:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         internal (SW start) or from external peripheral (timer event,
4282:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         external interrupt line).
4283:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @note   On this STM32 serie, setting trigger source to external trigger
4284:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         also set trigger polarity to rising edge
4285:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         (default setting for compatibility with some ADC on other
4286:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         STM32 families having this setting set by HW default value).
4287:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         In case of need to modify trigger edge, use
4288:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         function @ref LL_ADC_INJ_SetTriggerEdge().
4289:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @note   Availability of parameters of trigger sources from timer
4290:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         depends on timers availability on the selected device.
4291:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @note   On this STM32 serie, setting of this feature is conditioned to
4292:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         ADC state:
4293:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         ADC must not be disabled. Can be enabled with or without conversion
4294:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         on going on either groups regular or injected.
4295:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @rmtoll JSQR     JEXTSEL        LL_ADC_INJ_SetTriggerSource\n
4296:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         JSQR     JEXTEN         LL_ADC_INJ_SetTriggerSource
4297:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
4298:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @param  TriggerSource This parameter can be one of the following values:
4299:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_SOFTWARE
4300:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM1_TRGO
4301:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM1_TRGO2
4302:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM1_CH3         (2)
4303:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM1_CH4
4304:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM2_TRGO
4305:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM2_CH1         (1)
4306:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM3_TRGO
4307:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM3_CH1         (1)
4308:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM3_CH3         (1)
4309:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM3_CH4         (1)
4310:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM4_TRGO
4311:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM4_CH3         (2)
4312:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM4_CH4         (2)
4313:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM6_TRGO
4314:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM7_TRGO
4315:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM8_TRGO
ARM GAS  /tmp/ccZ0TYFG.s 			page 88


4316:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM8_TRGO2
4317:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM8_CH2         (2)
4318:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM8_CH4
4319:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM15_TRGO
4320:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM16_CH1        (1)
4321:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM20_TRGO
4322:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM20_TRGO2
4323:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM20_CH2        (2)
4324:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM20_CH4        (1)
4325:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_HRTIM_TRG1       (2)
4326:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_HRTIM_TRG2
4327:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_HRTIM_TRG3       (2)
4328:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_HRTIM_TRG4
4329:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_HRTIM_TRG5
4330:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_HRTIM_TRG6
4331:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_HRTIM_TRG7
4332:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_HRTIM_TRG8
4333:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_HRTIM_TRG9
4334:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_HRTIM_TRG10
4335:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_EXTI_LINE3       (2)
4336:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_EXTI_LINE15      (1)
4337:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_LPTIM_OUT
4338:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *
4339:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         (1) On STM32G4 serie, parameter not available on all ADC instances: ADC1, ADC2.\n
4340:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         (2) On STM32G4 serie, parameter not available on all ADC instances: ADC3, ADC4, ADC5.
4341:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *             On this STM32 serie, all ADCx are not available on all devices. Refer to device dat
4342:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @retval None
4343:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
4344:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_INJ_SetTriggerSource(ADC_TypeDef *ADCx, uint32_t TriggerSource)
4345:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** {
4346:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   MODIFY_REG(ADCx->JSQR, ADC_JSQR_JEXTSEL | ADC_JSQR_JEXTEN, TriggerSource);
4347:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** }
4348:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
4349:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /**
4350:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @brief  Get ADC group injected conversion trigger source:
4351:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         internal (SW start) or from external peripheral (timer event,
4352:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         external interrupt line).
4353:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @note   To determine whether group injected trigger source is
4354:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         internal (SW start) or external, without detail
4355:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         of which peripheral is selected as external trigger,
4356:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         (equivalent to
4357:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         "if(LL_ADC_INJ_GetTriggerSource(ADC1) == LL_ADC_INJ_TRIG_SOFTWARE)")
4358:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         use function @ref LL_ADC_INJ_IsTriggerSourceSWStart.
4359:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @note   Availability of parameters of trigger sources from timer
4360:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         depends on timers availability on the selected device.
4361:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @rmtoll JSQR     JEXTSEL        LL_ADC_INJ_GetTriggerSource\n
4362:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         JSQR     JEXTEN         LL_ADC_INJ_GetTriggerSource
4363:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
4364:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
4365:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_SOFTWARE
4366:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM1_TRGO
4367:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM1_TRGO2
4368:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM1_CH3         (2)
4369:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM1_CH4
4370:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM2_TRGO
4371:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM2_CH1         (1)
4372:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM3_TRGO
ARM GAS  /tmp/ccZ0TYFG.s 			page 89


4373:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM3_CH1         (1)
4374:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM3_CH3         (1)
4375:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM3_CH4         (1)
4376:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM4_TRGO
4377:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM4_CH3         (2)
4378:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM4_CH4         (2)
4379:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM6_TRGO
4380:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM7_TRGO
4381:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM8_TRGO
4382:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM8_TRGO2
4383:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM8_CH2         (2)
4384:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM8_CH4
4385:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM15_TRGO
4386:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM16_CH1        (1)
4387:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM20_TRGO
4388:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM20_TRGO2
4389:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM20_CH2        (2)
4390:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM20_CH4        (1)
4391:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_HRTIM_TRG1       (2)
4392:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_HRTIM_TRG2
4393:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_HRTIM_TRG3       (2)
4394:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_HRTIM_TRG4
4395:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_HRTIM_TRG5
4396:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_HRTIM_TRG6
4397:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_HRTIM_TRG7
4398:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_HRTIM_TRG8
4399:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_HRTIM_TRG9
4400:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_HRTIM_TRG10
4401:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_EXTI_LINE3       (2)
4402:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_EXTI_LINE15      (1)
4403:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_LPTIM_OUT
4404:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *
4405:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         (1) On STM32G4 serie, parameter not available on all ADC instances: ADC1, ADC2.\n
4406:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         (2) On STM32G4 serie, parameter not available on all ADC instances: ADC3, ADC4, ADC5.
4407:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *             On this STM32 serie, all ADCx are not available on all devices. Refer to device dat
4408:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
4409:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_INJ_GetTriggerSource(ADC_TypeDef *ADCx)
4410:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** {
4411:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   register __IO uint32_t TriggerSource = READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTSEL | ADC_JSQR_JEXTEN);
4412:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
4413:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   /* Value for shift of {0; 4; 8; 12} depending on value of bitfield          */
4414:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   /* corresponding to ADC_JSQR_JEXTEN {0; 1; 2; 3}.                           */
4415:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   register uint32_t ShiftJexten = ((TriggerSource & ADC_JSQR_JEXTEN) >> (ADC_INJ_TRIG_EXTEN_BITOFFS
4416:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
4417:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   /* Set bitfield corresponding to ADC_JSQR_JEXTEN and ADC_JSQR_JEXTSEL       */
4418:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   /* to match with triggers literals definition.                              */
4419:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   return ((TriggerSource
4420:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****            & (ADC_INJ_TRIG_SOURCE_MASK >> ShiftJexten) & ADC_JSQR_JEXTSEL)
4421:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****           | ((ADC_INJ_TRIG_EDGE_MASK >> ShiftJexten) & ADC_JSQR_JEXTEN)
4422:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****          );
4423:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** }
4424:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
4425:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /**
4426:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @brief  Get ADC group injected conversion trigger source internal (SW start)
4427:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****             or external
4428:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @note   In case of group injected trigger source set to external trigger,
4429:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         to determine which peripheral is selected as external trigger,
ARM GAS  /tmp/ccZ0TYFG.s 			page 90


4430:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         use function @ref LL_ADC_INJ_GetTriggerSource.
4431:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @rmtoll JSQR     JEXTEN         LL_ADC_INJ_IsTriggerSourceSWStart
4432:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
4433:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @retval Value "0" if trigger source external trigger
4434:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         Value "1" if trigger source SW start.
4435:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
4436:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
4437:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** {
 668              		.loc 1 4437 1
 669              		.cfi_startproc
 670              		@ args = 0, pretend = 0, frame = 8
 671              		@ frame_needed = 1, uses_anonymous_args = 0
 672              		@ link register save eliminated.
 673 0000 80B4     		push	{r7}
 674              	.LCFI66:
 675              		.cfi_def_cfa_offset 4
 676              		.cfi_offset 7, -4
 677 0002 83B0     		sub	sp, sp, #12
 678              	.LCFI67:
 679              		.cfi_def_cfa_offset 16
 680 0004 00AF     		add	r7, sp, #0
 681              	.LCFI68:
 682              		.cfi_def_cfa_register 7
 683 0006 7860     		str	r0, [r7, #4]
4438:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ?
 684              		.loc 1 4438 12
 685 0008 7B68     		ldr	r3, [r7, #4]
 686 000a DB6C     		ldr	r3, [r3, #76]
 687 000c 03F4C073 		and	r3, r3, #384
 688              		.loc 1 4438 105
 689 0010 002B     		cmp	r3, #0
 690 0012 01D1     		bne	.L20
 691              		.loc 1 4438 105 is_stmt 0 discriminator 1
 692 0014 0123     		movs	r3, #1
 693 0016 00E0     		b	.L22
 694              	.L20:
 695              		.loc 1 4438 105 discriminator 2
 696 0018 0023     		movs	r3, #0
 697              	.L22:
4439:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** }
 698              		.loc 1 4439 1 is_stmt 1 discriminator 5
 699 001a 1846     		mov	r0, r3
 700 001c 0C37     		adds	r7, r7, #12
 701              	.LCFI69:
 702              		.cfi_def_cfa_offset 4
 703 001e BD46     		mov	sp, r7
 704              	.LCFI70:
 705              		.cfi_def_cfa_register 13
 706              		@ sp needed
 707 0020 5DF8047B 		ldr	r7, [sp], #4
 708              	.LCFI71:
 709              		.cfi_restore 7
 710              		.cfi_def_cfa_offset 0
 711 0024 7047     		bx	lr
 712              		.cfi_endproc
 713              	.LFE177:
 715              		.section	.text.LL_ADC_SetChannelSamplingTime,"ax",%progbits
ARM GAS  /tmp/ccZ0TYFG.s 			page 91


 716              		.align	1
 717              		.syntax unified
 718              		.thumb
 719              		.thumb_func
 720              		.fpu fpv4-sp-d16
 722              	LL_ADC_SetChannelSamplingTime:
 723              	.LFB191:
4440:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
4441:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /**
4442:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @brief  Set ADC group injected conversion trigger polarity.
4443:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         Applicable only for trigger source set to external trigger.
4444:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @note   On this STM32 serie, setting of this feature is conditioned to
4445:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         ADC state:
4446:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         ADC must not be disabled. Can be enabled with or without conversion
4447:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         on going on either groups regular or injected.
4448:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @rmtoll JSQR     JEXTEN         LL_ADC_INJ_SetTriggerEdge
4449:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
4450:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @param  ExternalTriggerEdge This parameter can be one of the following values:
4451:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_RISING
4452:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_FALLING
4453:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_RISINGFALLING
4454:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @retval None
4455:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
4456:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_INJ_SetTriggerEdge(ADC_TypeDef *ADCx, uint32_t ExternalTriggerEdge)
4457:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** {
4458:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   MODIFY_REG(ADCx->JSQR, ADC_JSQR_JEXTEN, ExternalTriggerEdge);
4459:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** }
4460:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
4461:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /**
4462:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @brief  Get ADC group injected conversion trigger polarity.
4463:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         Applicable only for trigger source set to external trigger.
4464:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @rmtoll JSQR     JEXTEN         LL_ADC_INJ_GetTriggerEdge
4465:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
4466:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
4467:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_RISING
4468:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_FALLING
4469:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_RISINGFALLING
4470:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
4471:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_INJ_GetTriggerEdge(ADC_TypeDef *ADCx)
4472:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** {
4473:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   return (uint32_t)(READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN));
4474:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** }
4475:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
4476:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /**
4477:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @brief  Set ADC group injected sequencer length and scan direction.
4478:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @note   This function performs configuration of:
4479:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         - Sequence length: Number of ranks in the scan sequence.
4480:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         - Sequence direction: Unless specified in parameters, sequencer
4481:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *           scan direction is forward (from rank 1 to rank n).
4482:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @note   Sequencer disabled is equivalent to sequencer of 1 rank:
4483:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         ADC conversion on only 1 channel.
4484:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @note   On this STM32 serie, setting of this feature is conditioned to
4485:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         ADC state:
4486:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         ADC must not be disabled. Can be enabled with or without conversion
4487:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         on going on either groups regular or injected.
4488:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @rmtoll JSQR     JL             LL_ADC_INJ_SetSequencerLength
4489:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
ARM GAS  /tmp/ccZ0TYFG.s 			page 92


4490:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @param  SequencerNbRanks This parameter can be one of the following values:
4491:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_SEQ_SCAN_DISABLE
4492:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_SEQ_SCAN_ENABLE_2RANKS
4493:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_SEQ_SCAN_ENABLE_3RANKS
4494:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_SEQ_SCAN_ENABLE_4RANKS
4495:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @retval None
4496:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
4497:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_INJ_SetSequencerLength(ADC_TypeDef *ADCx, uint32_t SequencerNbRanks)
4498:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** {
4499:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   MODIFY_REG(ADCx->JSQR, ADC_JSQR_JL, SequencerNbRanks);
4500:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** }
4501:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
4502:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /**
4503:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @brief  Get ADC group injected sequencer length and scan direction.
4504:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @note   This function retrieves:
4505:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         - Sequence length: Number of ranks in the scan sequence.
4506:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         - Sequence direction: Unless specified in parameters, sequencer
4507:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *           scan direction is forward (from rank 1 to rank n).
4508:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @note   Sequencer disabled is equivalent to sequencer of 1 rank:
4509:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         ADC conversion on only 1 channel.
4510:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @rmtoll JSQR     JL             LL_ADC_INJ_GetSequencerLength
4511:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
4512:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
4513:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_SEQ_SCAN_DISABLE
4514:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_SEQ_SCAN_ENABLE_2RANKS
4515:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_SEQ_SCAN_ENABLE_3RANKS
4516:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_SEQ_SCAN_ENABLE_4RANKS
4517:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
4518:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_INJ_GetSequencerLength(ADC_TypeDef *ADCx)
4519:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** {
4520:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   return (uint32_t)(READ_BIT(ADCx->JSQR, ADC_JSQR_JL));
4521:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** }
4522:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
4523:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /**
4524:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @brief  Set ADC group injected sequencer discontinuous mode:
4525:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         sequence subdivided and scan conversions interrupted every selected
4526:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         number of ranks.
4527:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @note   It is not possible to enable both ADC group injected
4528:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         auto-injected mode and sequencer discontinuous mode.
4529:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @rmtoll CFGR     JDISCEN        LL_ADC_INJ_SetSequencerDiscont
4530:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
4531:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @param  SeqDiscont This parameter can be one of the following values:
4532:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_SEQ_DISCONT_DISABLE
4533:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_SEQ_DISCONT_1RANK
4534:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @retval None
4535:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
4536:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_INJ_SetSequencerDiscont(ADC_TypeDef *ADCx, uint32_t SeqDiscont)
4537:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** {
4538:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   MODIFY_REG(ADCx->CFGR, ADC_CFGR_JDISCEN, SeqDiscont);
4539:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** }
4540:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
4541:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /**
4542:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @brief  Get ADC group injected sequencer discontinuous mode:
4543:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         sequence subdivided and scan conversions interrupted every selected
4544:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         number of ranks.
4545:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @rmtoll CFGR     JDISCEN        LL_ADC_INJ_GetSequencerDiscont
4546:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
ARM GAS  /tmp/ccZ0TYFG.s 			page 93


4547:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
4548:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_SEQ_DISCONT_DISABLE
4549:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_SEQ_DISCONT_1RANK
4550:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
4551:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_INJ_GetSequencerDiscont(ADC_TypeDef *ADCx)
4552:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** {
4553:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   return (uint32_t)(READ_BIT(ADCx->CFGR, ADC_CFGR_JDISCEN));
4554:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** }
4555:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
4556:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /**
4557:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @brief  Set ADC group injected sequence: channel on the selected
4558:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         sequence rank.
4559:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @note   Depending on devices and packages, some channels may not be available.
4560:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         Refer to device datasheet for channels availability.
4561:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @note   On this STM32 serie, to measure internal channels (VrefInt,
4562:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         TempSensor, ...), measurement paths to internal channels must be
4563:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         enabled separately.
4564:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         This can be done using function @ref LL_ADC_SetCommonPathInternalCh().
4565:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @note   On STM32G4, some fast channels are available: fast analog inputs
4566:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         coming from GPIO pads (ADC_IN1..5).
4567:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @note   On this STM32 serie, setting of this feature is conditioned to
4568:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         ADC state:
4569:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         ADC must not be disabled. Can be enabled with or without conversion
4570:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         on going on either groups regular or injected.
4571:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @rmtoll JSQR     JSQ1           LL_ADC_INJ_SetSequencerRanks\n
4572:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         JSQR     JSQ2           LL_ADC_INJ_SetSequencerRanks\n
4573:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         JSQR     JSQ3           LL_ADC_INJ_SetSequencerRanks\n
4574:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         JSQR     JSQ4           LL_ADC_INJ_SetSequencerRanks
4575:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
4576:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @param  Rank This parameter can be one of the following values:
4577:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_RANK_1
4578:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_RANK_2
4579:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_RANK_3
4580:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_RANK_4
4581:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @param  Channel This parameter can be one of the following values:
4582:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_0
4583:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_1                 (8)
4584:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_2                 (8)
4585:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_3                 (8)
4586:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_4                 (8)
4587:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_5                 (8)
4588:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_6
4589:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_7
4590:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_8
4591:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_9
4592:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_10
4593:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_11
4594:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_12
4595:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_13
4596:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_14
4597:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_15
4598:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_16
4599:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_17
4600:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_18
4601:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VREFINT           (7)
4602:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_TEMPSENSOR_ADC1   (1)
4603:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_TEMPSENSOR_ADC5   (5)
ARM GAS  /tmp/ccZ0TYFG.s 			page 94


4604:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VBAT              (6)
4605:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP1           (1)
4606:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP2           (2)
4607:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP3_ADC2      (2)
4608:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP3_ADC3      (3)
4609:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP4           (5)
4610:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP5           (5)
4611:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP6           (4)
4612:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *
4613:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         (1) On STM32G4, parameter available only on ADC instance: ADC1.\n
4614:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         (2) On STM32G4, parameter available only on ADC instance: ADC2.\n
4615:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         (3) On STM32G4, parameter available only on ADC instance: ADC3.\n
4616:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         (4) On STM32G4, parameter available only on ADC instance: ADC4.\n
4617:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         (5) On STM32G4, parameter available only on ADC instance: ADC5.\n
4618:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         (6) On STM32G4, parameter available only on ADC instances: ADC1, ADC3, ADC5.\n
4619:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         (7) On STM32G4, parameter available only on ADC instances: ADC1, ADC3, ADC4, ADC5.\n
4620:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *          -  On this STM32 serie, all ADCx are not available on all devices. Refer to device dat
4621:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock 
4622:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 A
4623:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @retval None
4624:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
4625:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_INJ_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channe
4626:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** {
4627:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   /* Set bits with content of parameter "Channel" with bits position          */
4628:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   /* in register depending on parameter "Rank".                               */
4629:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   /* Parameters "Rank" and "Channel" are used with masks because containing   */
4630:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   /* other bits reserved for other purpose.                                   */
4631:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   MODIFY_REG(ADCx->JSQR,
4632:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****              (ADC_CHANNEL_ID_NUMBER_MASK >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_INJ
4633:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****              ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Ra
4634:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** }
4635:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
4636:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /**
4637:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @brief  Get ADC group injected sequence: channel on the selected
4638:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         sequence rank.
4639:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @note   Depending on devices and packages, some channels may not be available.
4640:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         Refer to device datasheet for channels availability.
4641:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @note   Usage of the returned channel number:
4642:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         - To reinject this channel into another function LL_ADC_xxx:
4643:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *           the returned channel number is only partly formatted on definition
4644:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *           of literals LL_ADC_CHANNEL_x. Therefore, it has to be compared
4645:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *           with parts of literals LL_ADC_CHANNEL_x or using
4646:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *           helper macro @ref __LL_ADC_CHANNEL_TO_DECIMAL_NB().
4647:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *           Then the selected literal LL_ADC_CHANNEL_x can be used
4648:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *           as parameter for another function.
4649:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         - To get the channel number in decimal format:
4650:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *           process the returned value with the helper macro
4651:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *           @ref __LL_ADC_CHANNEL_TO_DECIMAL_NB().
4652:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @rmtoll JSQR     JSQ1           LL_ADC_INJ_GetSequencerRanks\n
4653:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         JSQR     JSQ2           LL_ADC_INJ_GetSequencerRanks\n
4654:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         JSQR     JSQ3           LL_ADC_INJ_GetSequencerRanks\n
4655:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         JSQR     JSQ4           LL_ADC_INJ_GetSequencerRanks
4656:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
4657:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @param  Rank This parameter can be one of the following values:
4658:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_RANK_1
4659:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_RANK_2
4660:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_RANK_3
ARM GAS  /tmp/ccZ0TYFG.s 			page 95


4661:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_RANK_4
4662:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
4663:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_0
4664:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_1                 (8)
4665:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_2                 (8)
4666:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_3                 (8)
4667:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_4                 (8)
4668:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_5                 (8)
4669:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_6
4670:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_7
4671:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_8
4672:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_9
4673:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_10
4674:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_11
4675:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_12
4676:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_13
4677:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_14
4678:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_15
4679:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_16
4680:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_17
4681:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_18
4682:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VREFINT           (7)
4683:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_TEMPSENSOR_ADC1   (1)
4684:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_TEMPSENSOR_ADC5   (5)
4685:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VBAT              (6)
4686:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP1           (1)
4687:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP2           (2)
4688:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP3_ADC2      (2)
4689:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP3_ADC3      (3)
4690:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP4           (5)
4691:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP5           (5)
4692:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP6           (4)
4693:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *
4694:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         (1) On STM32G4, parameter available only on ADC instance: ADC1.\n
4695:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         (2) On STM32G4, parameter available only on ADC instance: ADC2.\n
4696:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         (3) On STM32G4, parameter available only on ADC instance: ADC3.\n
4697:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         (4) On STM32G4, parameter available only on ADC instance: ADC4.\n
4698:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         (5) On STM32G4, parameter available only on ADC instance: ADC5.\n
4699:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         (6) On STM32G4, parameter available only on ADC instances: ADC1, ADC3, ADC5.\n
4700:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         (7) On STM32G4, parameter available only on ADC instances: ADC1, ADC3, ADC4, ADC5.\n
4701:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *          -  On this STM32 serie, all ADCx are not available on all devices. Refer to device dat
4702:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock 
4703:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 A
4704:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
4705:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *                      comparison with internal channel parameter to be done
4706:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
4707:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
4708:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_INJ_GetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank)
4709:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** {
4710:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   return (uint32_t)((READ_BIT(ADCx->JSQR,
4711:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****                               (ADC_CHANNEL_ID_NUMBER_MASK >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) <
4712:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****                      >> (Rank & ADC_INJ_RANK_ID_JSQR_MASK)) << ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS
4713:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****                    );
4714:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** }
4715:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
4716:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /**
4717:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @brief  Set ADC group injected conversion trigger:
ARM GAS  /tmp/ccZ0TYFG.s 			page 96


4718:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         independent or from ADC group regular.
4719:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @note   This mode can be used to extend number of data registers
4720:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         updated after one ADC conversion trigger and with data
4721:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         permanently kept (not erased by successive conversions of scan of
4722:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         ADC sequencer ranks), up to 5 data registers:
4723:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         1 data register on ADC group regular, 4 data registers
4724:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         on ADC group injected.
4725:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @note   If ADC group injected injected trigger source is set to an
4726:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         external trigger, this feature must be must be set to
4727:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         independent trigger.
4728:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         ADC group injected automatic trigger is compliant only with
4729:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         group injected trigger source set to SW start, without any
4730:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         further action on  ADC group injected conversion start or stop:
4731:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         in this case, ADC group injected is controlled only
4732:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         from ADC group regular.
4733:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @note   It is not possible to enable both ADC group injected
4734:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         auto-injected mode and sequencer discontinuous mode.
4735:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @note   On this STM32 serie, setting of this feature is conditioned to
4736:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         ADC state:
4737:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         ADC must be disabled or enabled without conversion on going
4738:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         on either groups regular or injected.
4739:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @rmtoll CFGR     JAUTO          LL_ADC_INJ_SetTrigAuto
4740:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
4741:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @param  TrigAuto This parameter can be one of the following values:
4742:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_INDEPENDENT
4743:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_FROM_GRP_REGULAR
4744:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @retval None
4745:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
4746:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_INJ_SetTrigAuto(ADC_TypeDef *ADCx, uint32_t TrigAuto)
4747:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** {
4748:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   MODIFY_REG(ADCx->CFGR, ADC_CFGR_JAUTO, TrigAuto);
4749:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** }
4750:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
4751:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /**
4752:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @brief  Get ADC group injected conversion trigger:
4753:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         independent or from ADC group regular.
4754:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @rmtoll CFGR     JAUTO          LL_ADC_INJ_GetTrigAuto
4755:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
4756:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
4757:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_INDEPENDENT
4758:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_FROM_GRP_REGULAR
4759:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
4760:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_INJ_GetTrigAuto(ADC_TypeDef *ADCx)
4761:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** {
4762:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   return (uint32_t)(READ_BIT(ADCx->CFGR, ADC_CFGR_JAUTO));
4763:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** }
4764:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
4765:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /**
4766:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @brief  Set ADC group injected contexts queue mode.
4767:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @note   A context is a setting of group injected sequencer:
4768:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         - group injected trigger
4769:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         - sequencer length
4770:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         - sequencer ranks
4771:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         If contexts queue is disabled:
4772:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         - only 1 sequence can be configured
4773:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *           and is active perpetually.
4774:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         If contexts queue is enabled:
ARM GAS  /tmp/ccZ0TYFG.s 			page 97


4775:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         - up to 2 contexts can be queued
4776:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *           and are checked in and out as a FIFO stack (first-in, first-out).
4777:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         - If a new context is set when queues is full, error is triggered
4778:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *           by interruption "Injected Queue Overflow".
4779:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         - Two behaviors are possible when all contexts have been processed:
4780:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *           the contexts queue can maintain the last context active perpetually
4781:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *           or can be empty and injected group triggers are disabled.
4782:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         - Triggers can be only external (not internal SW start)
4783:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         - Caution: The sequence must be fully configured in one time
4784:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *           (one write of register JSQR makes a check-in of a new context
4785:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *           into the queue).
4786:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *           Therefore functions to set separately injected trigger and
4787:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *           sequencer channels cannot be used, register JSQR must be set
4788:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *           using function @ref LL_ADC_INJ_ConfigQueueContext().
4789:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @note   This parameter can be modified only when no conversion is on going
4790:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         on either groups regular or injected.
4791:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @note   A modification of the context mode (bit JQDIS) causes the contexts
4792:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         queue to be flushed and the register JSQR is cleared.
4793:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @note   On this STM32 serie, setting of this feature is conditioned to
4794:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         ADC state:
4795:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         ADC must be disabled or enabled without conversion on going
4796:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         on either groups regular or injected.
4797:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @rmtoll CFGR     JQM            LL_ADC_INJ_SetQueueMode\n
4798:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         CFGR     JQDIS          LL_ADC_INJ_SetQueueMode
4799:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
4800:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @param  QueueMode This parameter can be one of the following values:
4801:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_QUEUE_DISABLE
4802:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_QUEUE_2CONTEXTS_LAST_ACTIVE
4803:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_QUEUE_2CONTEXTS_END_EMPTY
4804:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @retval None
4805:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
4806:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_INJ_SetQueueMode(ADC_TypeDef *ADCx, uint32_t QueueMode)
4807:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** {
4808:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   MODIFY_REG(ADCx->CFGR, ADC_CFGR_JQM | ADC_CFGR_JQDIS, QueueMode);
4809:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** }
4810:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
4811:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /**
4812:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @brief  Get ADC group injected context queue mode.
4813:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @rmtoll CFGR     JQM            LL_ADC_INJ_GetQueueMode\n
4814:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         CFGR     JQDIS          LL_ADC_INJ_GetQueueMode
4815:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
4816:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
4817:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_QUEUE_DISABLE
4818:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_QUEUE_2CONTEXTS_LAST_ACTIVE
4819:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_QUEUE_2CONTEXTS_END_EMPTY
4820:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
4821:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_INJ_GetQueueMode(ADC_TypeDef *ADCx)
4822:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** {
4823:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   return (uint32_t)(READ_BIT(ADCx->CFGR, ADC_CFGR_JQM | ADC_CFGR_JQDIS));
4824:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** }
4825:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
4826:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /**
4827:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @brief  Set one context on ADC group injected that will be checked in
4828:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         contexts queue.
4829:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @note   A context is a setting of group injected sequencer:
4830:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         - group injected trigger
4831:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         - sequencer length
ARM GAS  /tmp/ccZ0TYFG.s 			page 98


4832:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         - sequencer ranks
4833:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         This function is intended to be used when contexts queue is enabled,
4834:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         because the sequence must be fully configured in one time
4835:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         (functions to set separately injected trigger and sequencer channels
4836:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         cannot be used):
4837:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         Refer to function @ref LL_ADC_INJ_SetQueueMode().
4838:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @note   In the contexts queue, only the active context can be read.
4839:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         The parameters of this function can be read using functions:
4840:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_GetTriggerSource()
4841:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_GetTriggerEdge()
4842:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_GetSequencerRanks()
4843:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @note   On this STM32 serie, to measure internal channels (VrefInt,
4844:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         TempSensor, ...), measurement paths to internal channels must be
4845:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         enabled separately.
4846:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         This can be done using function @ref LL_ADC_SetCommonPathInternalCh().
4847:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @note   On STM32G4, some fast channels are available: fast analog inputs
4848:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         coming from GPIO pads (ADC_IN1..5).
4849:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @note   On this STM32 serie, setting of this feature is conditioned to
4850:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         ADC state:
4851:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         ADC must not be disabled. Can be enabled with or without conversion
4852:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         on going on either groups regular or injected.
4853:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @rmtoll JSQR     JEXTSEL        LL_ADC_INJ_ConfigQueueContext\n
4854:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         JSQR     JEXTEN         LL_ADC_INJ_ConfigQueueContext\n
4855:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         JSQR     JL             LL_ADC_INJ_ConfigQueueContext\n
4856:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         JSQR     JSQ1           LL_ADC_INJ_ConfigQueueContext\n
4857:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         JSQR     JSQ2           LL_ADC_INJ_ConfigQueueContext\n
4858:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         JSQR     JSQ3           LL_ADC_INJ_ConfigQueueContext\n
4859:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         JSQR     JSQ4           LL_ADC_INJ_ConfigQueueContext
4860:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
4861:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @param  TriggerSource This parameter can be one of the following values:
4862:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_SOFTWARE
4863:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM1_TRGO
4864:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM1_TRGO2
4865:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM1_CH3         (2)
4866:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM1_CH4
4867:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM2_TRGO
4868:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM2_CH1         (1)
4869:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM3_TRGO
4870:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM3_CH1         (1)
4871:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM3_CH3         (1)
4872:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM3_CH4         (1)
4873:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM4_TRGO
4874:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM4_CH3         (2)
4875:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM4_CH4         (2)
4876:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM6_TRGO
4877:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM7_TRGO
4878:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM8_TRGO
4879:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM8_TRGO2
4880:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM8_CH2         (2)
4881:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM8_CH4
4882:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM15_TRGO
4883:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM16_CH1        (1)
4884:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM20_TRGO
4885:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM20_TRGO2
4886:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM20_CH2        (2)
4887:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM20_CH4        (1)
4888:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_HRTIM_TRG1       (2)
ARM GAS  /tmp/ccZ0TYFG.s 			page 99


4889:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_HRTIM_TRG2
4890:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_HRTIM_TRG3       (2)
4891:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_HRTIM_TRG4
4892:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_HRTIM_TRG5
4893:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_HRTIM_TRG6
4894:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_HRTIM_TRG7
4895:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_HRTIM_TRG8
4896:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_HRTIM_TRG9
4897:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_HRTIM_TRG10
4898:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_EXTI_LINE3       (2)
4899:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_EXTI_LINE15      (1)
4900:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_LPTIM_OUT
4901:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *
4902:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         (1) On STM32G4 serie, parameter not available on all ADC instances: ADC1, ADC2.\n
4903:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         (2) On STM32G4 serie, parameter not available on all ADC instances: ADC3, ADC4, ADC5.
4904:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *             On this STM32 serie, all ADCx are not available on all devices. Refer to device dat
4905:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @param  ExternalTriggerEdge This parameter can be one of the following values:
4906:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_RISING
4907:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_FALLING
4908:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_RISINGFALLING
4909:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *
4910:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         Note: This parameter is discarded in case of SW start:
4911:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *               parameter "TriggerSource" set to "LL_ADC_INJ_TRIG_SOFTWARE".
4912:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @param  SequencerNbRanks This parameter can be one of the following values:
4913:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_SEQ_SCAN_DISABLE
4914:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_SEQ_SCAN_ENABLE_2RANKS
4915:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_SEQ_SCAN_ENABLE_3RANKS
4916:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_SEQ_SCAN_ENABLE_4RANKS
4917:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @param  Rank1_Channel This parameter can be one of the following values:
4918:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_0
4919:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_1                 (8)
4920:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_2                 (8)
4921:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_3                 (8)
4922:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_4                 (8)
4923:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_5                 (8)
4924:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_6
4925:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_7
4926:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_8
4927:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_9
4928:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_10
4929:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_11
4930:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_12
4931:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_13
4932:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_14
4933:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_15
4934:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_16
4935:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_17
4936:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_18
4937:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VREFINT           (7)
4938:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_TEMPSENSOR_ADC1   (1)
4939:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_TEMPSENSOR_ADC5   (5)
4940:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VBAT              (6)
4941:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP1           (1)
4942:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP2           (2)
4943:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP3_ADC2      (2)
4944:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP3_ADC3      (3)
4945:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP4           (5)
ARM GAS  /tmp/ccZ0TYFG.s 			page 100


4946:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP5           (5)
4947:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP6           (4)
4948:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *
4949:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         (1) On STM32G4, parameter available only on ADC instance: ADC1.\n
4950:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         (2) On STM32G4, parameter available only on ADC instance: ADC2.\n
4951:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         (3) On STM32G4, parameter available only on ADC instance: ADC3.\n
4952:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         (4) On STM32G4, parameter available only on ADC instance: ADC4.\n
4953:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         (5) On STM32G4, parameter available only on ADC instance: ADC5.\n
4954:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         (6) On STM32G4, parameter available only on ADC instances: ADC1, ADC3, ADC5.\n
4955:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         (7) On STM32G4, parameter available only on ADC instances: ADC1, ADC3, ADC4, ADC5.\n
4956:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *          -  On this STM32 serie, all ADCx are not available on all devices. Refer to device dat
4957:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock 
4958:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 A
4959:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @param  Rank2_Channel This parameter can be one of the following values:
4960:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_0
4961:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_1                 (8)
4962:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_2                 (8)
4963:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_3                 (8)
4964:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_4                 (8)
4965:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_5                 (8)
4966:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_6
4967:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_7
4968:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_8
4969:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_9
4970:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_10
4971:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_11
4972:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_12
4973:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_13
4974:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_14
4975:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_15
4976:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_16
4977:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_17
4978:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_18
4979:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VREFINT           (7)
4980:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_TEMPSENSOR_ADC1   (1)
4981:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_TEMPSENSOR_ADC5   (5)
4982:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VBAT              (6)
4983:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP1           (1)
4984:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP2           (2)
4985:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP3_ADC2      (2)
4986:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP3_ADC3      (3)
4987:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP4           (5)
4988:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP5           (5)
4989:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP6           (4)
4990:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *
4991:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         (1) On STM32G4, parameter available only on ADC instance: ADC1.\n
4992:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         (2) On STM32G4, parameter available only on ADC instance: ADC2.\n
4993:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         (3) On STM32G4, parameter available only on ADC instance: ADC3.\n
4994:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         (4) On STM32G4, parameter available only on ADC instance: ADC4.\n
4995:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         (5) On STM32G4, parameter available only on ADC instance: ADC5.\n
4996:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         (6) On STM32G4, parameter available only on ADC instances: ADC1, ADC3, ADC5.\n
4997:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         (7) On STM32G4, parameter available only on ADC instances: ADC1, ADC3, ADC4, ADC5.\n
4998:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *          -  On this STM32 serie, all ADCx are not available on all devices. Refer to device dat
4999:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock 
5000:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 A
5001:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @param  Rank3_Channel This parameter can be one of the following values:
5002:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_0
ARM GAS  /tmp/ccZ0TYFG.s 			page 101


5003:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_1                 (8)
5004:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_2                 (8)
5005:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_3                 (8)
5006:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_4                 (8)
5007:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_5                 (8)
5008:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_6
5009:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_7
5010:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_8
5011:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_9
5012:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_10
5013:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_11
5014:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_12
5015:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_13
5016:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_14
5017:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_15
5018:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_16
5019:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_17
5020:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_18
5021:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VREFINT           (7)
5022:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_TEMPSENSOR_ADC1   (1)
5023:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_TEMPSENSOR_ADC5   (5)
5024:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VBAT              (6)
5025:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP1           (1)
5026:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP2           (2)
5027:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP3_ADC2      (2)
5028:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP3_ADC3      (3)
5029:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP4           (5)
5030:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP5           (5)
5031:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP6           (4)
5032:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *
5033:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         (1) On STM32G4, parameter available only on ADC instance: ADC1.\n
5034:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         (2) On STM32G4, parameter available only on ADC instance: ADC2.\n
5035:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         (3) On STM32G4, parameter available only on ADC instance: ADC3.\n
5036:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         (4) On STM32G4, parameter available only on ADC instance: ADC4.\n
5037:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         (5) On STM32G4, parameter available only on ADC instance: ADC5.\n
5038:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         (6) On STM32G4, parameter available only on ADC instances: ADC1, ADC3, ADC5.\n
5039:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         (7) On STM32G4, parameter available only on ADC instances: ADC1, ADC3, ADC4, ADC5.\n
5040:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *          -  On this STM32 serie, all ADCx are not available on all devices. Refer to device dat
5041:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock 
5042:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 A
5043:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @param  Rank4_Channel This parameter can be one of the following values:
5044:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_0
5045:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_1                 (8)
5046:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_2                 (8)
5047:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_3                 (8)
5048:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_4                 (8)
5049:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_5                 (8)
5050:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_6
5051:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_7
5052:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_8
5053:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_9
5054:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_10
5055:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_11
5056:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_12
5057:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_13
5058:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_14
5059:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_15
ARM GAS  /tmp/ccZ0TYFG.s 			page 102


5060:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_16
5061:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_17
5062:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_18
5063:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VREFINT           (7)
5064:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_TEMPSENSOR_ADC1   (1)
5065:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_TEMPSENSOR_ADC5   (5)
5066:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VBAT              (6)
5067:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP1           (1)
5068:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP2           (2)
5069:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP3_ADC2      (2)
5070:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP3_ADC3      (3)
5071:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP4           (5)
5072:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP5           (5)
5073:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP6           (4)
5074:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *
5075:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         (1) On STM32G4, parameter available only on ADC instance: ADC1.\n
5076:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         (2) On STM32G4, parameter available only on ADC instance: ADC2.\n
5077:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         (3) On STM32G4, parameter available only on ADC instance: ADC3.\n
5078:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         (4) On STM32G4, parameter available only on ADC instance: ADC4.\n
5079:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         (5) On STM32G4, parameter available only on ADC instance: ADC5.\n
5080:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         (6) On STM32G4, parameter available only on ADC instances: ADC1, ADC3, ADC5.\n
5081:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         (7) On STM32G4, parameter available only on ADC instances: ADC1, ADC3, ADC4, ADC5.\n
5082:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *          -  On this STM32 serie, all ADCx are not available on all devices. Refer to device dat
5083:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock 
5084:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 A
5085:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @retval None
5086:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
5087:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_INJ_ConfigQueueContext(ADC_TypeDef *ADCx,
5088:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****                                                    uint32_t TriggerSource,
5089:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****                                                    uint32_t ExternalTriggerEdge,
5090:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****                                                    uint32_t SequencerNbRanks,
5091:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****                                                    uint32_t Rank1_Channel,
5092:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****                                                    uint32_t Rank2_Channel,
5093:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****                                                    uint32_t Rank3_Channel,
5094:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****                                                    uint32_t Rank4_Channel)
5095:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** {
5096:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   /* Set bits with content of parameter "Rankx_Channel" with bits position    */
5097:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   /* in register depending on literal "LL_ADC_INJ_RANK_x".                    */
5098:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   /* Parameters "Rankx_Channel" and "LL_ADC_INJ_RANK_x" are used with masks   */
5099:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   /* because containing other bits reserved for other purpose.                */
5100:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   /* If parameter "TriggerSource" is set to SW start, then parameter          */
5101:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   /* "ExternalTriggerEdge" is discarded.                                      */
5102:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   register uint32_t is_trigger_not_sw = (uint32_t)((TriggerSource != LL_ADC_INJ_TRIG_SOFTWARE) ? 1U
5103:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   MODIFY_REG(ADCx->JSQR,
5104:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****              ADC_JSQR_JEXTSEL |
5105:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****              ADC_JSQR_JEXTEN  |
5106:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****              ADC_JSQR_JSQ4    |
5107:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****              ADC_JSQR_JSQ3    |
5108:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****              ADC_JSQR_JSQ2    |
5109:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****              ADC_JSQR_JSQ1    |
5110:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****              ADC_JSQR_JL,
5111:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****              (TriggerSource & ADC_JSQR_JEXTSEL)          |
5112:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****              (ExternalTriggerEdge * (is_trigger_not_sw)) |
5113:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****              (((Rank4_Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
5114:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****              (((Rank3_Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
5115:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****              (((Rank2_Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
5116:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****              (((Rank1_Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
ARM GAS  /tmp/ccZ0TYFG.s 			page 103


5117:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****              SequencerNbRanks
5118:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****             );
5119:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** }
5120:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
5121:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /**
5122:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @}
5123:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
5124:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
5125:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /** @defgroup ADC_LL_EF_Configuration_Channels Configuration of ADC hierarchical scope: channels
5126:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @{
5127:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
5128:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
5129:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /**
5130:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @brief  Set sampling time of the selected ADC channel
5131:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         Unit: ADC clock cycles.
5132:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @note   On this device, sampling time is on channel scope: independently
5133:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         of channel mapped on ADC group regular or injected.
5134:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @note   In case of internal channel (VrefInt, TempSensor, ...) to be
5135:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         converted:
5136:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         sampling time constraints must be respected (sampling time can be
5137:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         adjusted in function of ADC clock frequency and sampling time
5138:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         setting).
5139:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         Refer to device datasheet for timings values (parameters TS_vrefint,
5140:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         TS_temp, ...).
5141:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @note   Conversion time is the addition of sampling time and processing time.
5142:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         On this STM32 serie, ADC processing time is:
5143:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         - 12.5 ADC clock cycles at ADC resolution 12 bits
5144:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         - 10.5 ADC clock cycles at ADC resolution 10 bits
5145:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         - 8.5 ADC clock cycles at ADC resolution 8 bits
5146:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         - 6.5 ADC clock cycles at ADC resolution 6 bits
5147:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @note   In case of ADC conversion of internal channel (VrefInt,
5148:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         temperature sensor, ...), a sampling time minimum value
5149:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         is required.
5150:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         Refer to device datasheet.
5151:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @note   On this STM32 serie, setting of this feature is conditioned to
5152:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         ADC state:
5153:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         ADC must be disabled or enabled without conversion on going
5154:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         on either groups regular or injected.
5155:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @rmtoll SMPR1    SMP0           LL_ADC_SetChannelSamplingTime\n
5156:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         SMPR1    SMP1           LL_ADC_SetChannelSamplingTime\n
5157:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         SMPR1    SMP2           LL_ADC_SetChannelSamplingTime\n
5158:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         SMPR1    SMP3           LL_ADC_SetChannelSamplingTime\n
5159:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         SMPR1    SMP4           LL_ADC_SetChannelSamplingTime\n
5160:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         SMPR1    SMP5           LL_ADC_SetChannelSamplingTime\n
5161:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         SMPR1    SMP6           LL_ADC_SetChannelSamplingTime\n
5162:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         SMPR1    SMP7           LL_ADC_SetChannelSamplingTime\n
5163:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         SMPR1    SMP8           LL_ADC_SetChannelSamplingTime\n
5164:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         SMPR1    SMP9           LL_ADC_SetChannelSamplingTime\n
5165:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         SMPR2    SMP10          LL_ADC_SetChannelSamplingTime\n
5166:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         SMPR2    SMP11          LL_ADC_SetChannelSamplingTime\n
5167:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         SMPR2    SMP12          LL_ADC_SetChannelSamplingTime\n
5168:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         SMPR2    SMP13          LL_ADC_SetChannelSamplingTime\n
5169:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         SMPR2    SMP14          LL_ADC_SetChannelSamplingTime\n
5170:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         SMPR2    SMP15          LL_ADC_SetChannelSamplingTime\n
5171:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         SMPR2    SMP16          LL_ADC_SetChannelSamplingTime\n
5172:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         SMPR2    SMP17          LL_ADC_SetChannelSamplingTime\n
5173:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         SMPR2    SMP18          LL_ADC_SetChannelSamplingTime
ARM GAS  /tmp/ccZ0TYFG.s 			page 104


5174:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
5175:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @param  Channel This parameter can be one of the following values:
5176:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_0
5177:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_1                 (8)
5178:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_2                 (8)
5179:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_3                 (8)
5180:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_4                 (8)
5181:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_5                 (8)
5182:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_6
5183:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_7
5184:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_8
5185:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_9
5186:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_10
5187:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_11
5188:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_12
5189:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_13
5190:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_14
5191:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_15
5192:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_16
5193:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_17
5194:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_18
5195:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VREFINT           (7)
5196:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_TEMPSENSOR_ADC1   (1)
5197:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_TEMPSENSOR_ADC5   (5)
5198:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VBAT              (6)
5199:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP1           (1)
5200:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP2           (2)
5201:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP3_ADC2      (2)
5202:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP3_ADC3      (3)
5203:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP4           (5)
5204:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP5           (5)
5205:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP6           (4)
5206:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *
5207:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         (1) On STM32G4, parameter available only on ADC instance: ADC1.\n
5208:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         (2) On STM32G4, parameter available only on ADC instance: ADC2.\n
5209:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         (3) On STM32G4, parameter available only on ADC instance: ADC3.\n
5210:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         (4) On STM32G4, parameter available only on ADC instance: ADC4.\n
5211:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         (5) On STM32G4, parameter available only on ADC instance: ADC5.\n
5212:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         (6) On STM32G4, parameter available only on ADC instances: ADC1, ADC3, ADC5.\n
5213:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         (7) On STM32G4, parameter available only on ADC instances: ADC1, ADC3, ADC4, ADC5.\n
5214:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *          -  On this STM32 serie, all ADCx are not available on all devices. Refer to device dat
5215:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock 
5216:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 A
5217:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @param  SamplingTime This parameter can be one of the following values:
5218:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_SAMPLINGTIME_2CYCLES_5   (1)
5219:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_SAMPLINGTIME_6CYCLES_5
5220:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_SAMPLINGTIME_12CYCLES_5
5221:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_SAMPLINGTIME_24CYCLES_5
5222:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_SAMPLINGTIME_47CYCLES_5
5223:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_SAMPLINGTIME_92CYCLES_5
5224:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_SAMPLINGTIME_247CYCLES_5
5225:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_SAMPLINGTIME_640CYCLES_5
5226:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *
5227:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         (1) On some devices, ADC sampling time 2.5 ADC clock cycles
5228:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *             can be replaced by 3.5 ADC clock cycles.
5229:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
5230:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @retval None
ARM GAS  /tmp/ccZ0TYFG.s 			page 105


5231:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
5232:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t Sa
5233:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** {
 724              		.loc 1 5233 1
 725              		.cfi_startproc
 726              		@ args = 0, pretend = 0, frame = 16
 727              		@ frame_needed = 1, uses_anonymous_args = 0
 728              		@ link register save eliminated.
 729 0000 90B4     		push	{r4, r7}
 730              	.LCFI72:
 731              		.cfi_def_cfa_offset 8
 732              		.cfi_offset 4, -8
 733              		.cfi_offset 7, -4
 734 0002 84B0     		sub	sp, sp, #16
 735              	.LCFI73:
 736              		.cfi_def_cfa_offset 24
 737 0004 00AF     		add	r7, sp, #0
 738              	.LCFI74:
 739              		.cfi_def_cfa_register 7
 740 0006 F860     		str	r0, [r7, #12]
 741 0008 B960     		str	r1, [r7, #8]
 742 000a 7A60     		str	r2, [r7, #4]
5234:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   /* Set bits with content of parameter "SamplingTime" with bits position     */
5235:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   /* in register and register position depending on parameter "Channel".      */
5236:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   /* Parameter "Channel" is used with masks because containing                */
5237:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   /* other bits reserved for other purpose.                                   */
5238:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_RE
 743              		.loc 1 5238 34
 744 000c FB68     		ldr	r3, [r7, #12]
 745 000e 1433     		adds	r3, r3, #20
 746 0010 1A46     		mov	r2, r3
 747 0012 BB68     		ldr	r3, [r7, #8]
 748 0014 5B0E     		lsrs	r3, r3, #25
 749 0016 9B00     		lsls	r3, r3, #2
 750 0018 03F00403 		and	r3, r3, #4
 751 001c 1344     		add	r3, r3, r2
 752              		.loc 1 5238 27
 753 001e 1C46     		mov	r4, r3
5239:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
5240:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   MODIFY_REG(*preg,
 754              		.loc 1 5240 3
 755 0020 2268     		ldr	r2, [r4]
 756 0022 BB68     		ldr	r3, [r7, #8]
 757 0024 1B0D     		lsrs	r3, r3, #20
 758 0026 03F01F03 		and	r3, r3, #31
 759 002a 0721     		movs	r1, #7
 760 002c 01FA03F3 		lsl	r3, r1, r3
 761 0030 DB43     		mvns	r3, r3
 762 0032 1A40     		ands	r2, r2, r3
 763 0034 BB68     		ldr	r3, [r7, #8]
 764 0036 1B0D     		lsrs	r3, r3, #20
 765 0038 03F01F03 		and	r3, r3, #31
 766 003c 7968     		ldr	r1, [r7, #4]
 767 003e 01FA03F3 		lsl	r3, r1, r3
 768 0042 1343     		orrs	r3, r3, r2
 769 0044 2360     		str	r3, [r4]
5241:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****              ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BIT
ARM GAS  /tmp/ccZ0TYFG.s 			page 106


5242:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****              SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BIT
5243:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** }
 770              		.loc 1 5243 1
 771 0046 00BF     		nop
 772 0048 1037     		adds	r7, r7, #16
 773              	.LCFI75:
 774              		.cfi_def_cfa_offset 8
 775 004a BD46     		mov	sp, r7
 776              	.LCFI76:
 777              		.cfi_def_cfa_register 13
 778              		@ sp needed
 779 004c 90BC     		pop	{r4, r7}
 780              	.LCFI77:
 781              		.cfi_restore 7
 782              		.cfi_restore 4
 783              		.cfi_def_cfa_offset 0
 784 004e 7047     		bx	lr
 785              		.cfi_endproc
 786              	.LFE191:
 788              		.section	.text.LL_ADC_SetChannelSingleDiff,"ax",%progbits
 789              		.align	1
 790              		.syntax unified
 791              		.thumb
 792              		.thumb_func
 793              		.fpu fpv4-sp-d16
 795              	LL_ADC_SetChannelSingleDiff:
 796              	.LFB193:
5244:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
5245:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /**
5246:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @brief  Get sampling time of the selected ADC channel
5247:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         Unit: ADC clock cycles.
5248:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @note   On this device, sampling time is on channel scope: independently
5249:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         of channel mapped on ADC group regular or injected.
5250:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @note   Conversion time is the addition of sampling time and processing time.
5251:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         On this STM32 serie, ADC processing time is:
5252:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         - 12.5 ADC clock cycles at ADC resolution 12 bits
5253:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         - 10.5 ADC clock cycles at ADC resolution 10 bits
5254:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         - 8.5 ADC clock cycles at ADC resolution 8 bits
5255:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         - 6.5 ADC clock cycles at ADC resolution 6 bits
5256:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @rmtoll SMPR1    SMP0           LL_ADC_GetChannelSamplingTime\n
5257:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         SMPR1    SMP1           LL_ADC_GetChannelSamplingTime\n
5258:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         SMPR1    SMP2           LL_ADC_GetChannelSamplingTime\n
5259:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         SMPR1    SMP3           LL_ADC_GetChannelSamplingTime\n
5260:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         SMPR1    SMP4           LL_ADC_GetChannelSamplingTime\n
5261:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         SMPR1    SMP5           LL_ADC_GetChannelSamplingTime\n
5262:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         SMPR1    SMP6           LL_ADC_GetChannelSamplingTime\n
5263:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         SMPR1    SMP7           LL_ADC_GetChannelSamplingTime\n
5264:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         SMPR1    SMP8           LL_ADC_GetChannelSamplingTime\n
5265:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         SMPR1    SMP9           LL_ADC_GetChannelSamplingTime\n
5266:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         SMPR2    SMP10          LL_ADC_GetChannelSamplingTime\n
5267:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         SMPR2    SMP11          LL_ADC_GetChannelSamplingTime\n
5268:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         SMPR2    SMP12          LL_ADC_GetChannelSamplingTime\n
5269:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         SMPR2    SMP13          LL_ADC_GetChannelSamplingTime\n
5270:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         SMPR2    SMP14          LL_ADC_GetChannelSamplingTime\n
5271:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         SMPR2    SMP15          LL_ADC_GetChannelSamplingTime\n
5272:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         SMPR2    SMP16          LL_ADC_GetChannelSamplingTime\n
5273:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         SMPR2    SMP17          LL_ADC_GetChannelSamplingTime\n
ARM GAS  /tmp/ccZ0TYFG.s 			page 107


5274:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         SMPR2    SMP18          LL_ADC_GetChannelSamplingTime
5275:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
5276:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @param  Channel This parameter can be one of the following values:
5277:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_0
5278:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_1                 (8)
5279:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_2                 (8)
5280:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_3                 (8)
5281:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_4                 (8)
5282:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_5                 (8)
5283:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_6
5284:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_7
5285:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_8
5286:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_9
5287:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_10
5288:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_11
5289:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_12
5290:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_13
5291:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_14
5292:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_15
5293:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_16
5294:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_17
5295:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_18
5296:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VREFINT           (7)
5297:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_TEMPSENSOR_ADC1   (1)
5298:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_TEMPSENSOR_ADC5   (5)
5299:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VBAT              (6)
5300:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP1           (1)
5301:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP2           (2)
5302:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP3_ADC2      (2)
5303:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP3_ADC3      (3)
5304:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP4           (5)
5305:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP5           (5)
5306:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VOPAMP6           (4)
5307:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *
5308:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         (1) On STM32G4, parameter available only on ADC instance: ADC1.\n
5309:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         (2) On STM32G4, parameter available only on ADC instance: ADC2.\n
5310:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         (3) On STM32G4, parameter available only on ADC instance: ADC3.\n
5311:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         (4) On STM32G4, parameter available only on ADC instance: ADC4.\n
5312:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         (5) On STM32G4, parameter available only on ADC instance: ADC5.\n
5313:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         (6) On STM32G4, parameter available only on ADC instances: ADC1, ADC3, ADC5.\n
5314:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         (7) On STM32G4, parameter available only on ADC instances: ADC1, ADC3, ADC4, ADC5.\n
5315:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *          -  On this STM32 serie, all ADCx are not available on all devices. Refer to device dat
5316:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock 
5317:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 A
5318:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
5319:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_SAMPLINGTIME_2CYCLES_5   (1)
5320:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_SAMPLINGTIME_6CYCLES_5
5321:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_SAMPLINGTIME_12CYCLES_5
5322:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_SAMPLINGTIME_24CYCLES_5
5323:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_SAMPLINGTIME_47CYCLES_5
5324:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_SAMPLINGTIME_92CYCLES_5
5325:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_SAMPLINGTIME_247CYCLES_5
5326:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_SAMPLINGTIME_640CYCLES_5
5327:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *
5328:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         (1) On some devices, ADC sampling time 2.5 ADC clock cycles
5329:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *             can be replaced by 3.5 ADC clock cycles.
5330:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
ARM GAS  /tmp/ccZ0TYFG.s 			page 108


5331:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
5332:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_GetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel)
5333:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** {
5334:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   register const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SM
5335:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
5336:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   return (uint32_t)(READ_BIT(*preg,
5337:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****                              ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_
5338:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****                     >> ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_P
5339:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****                    );
5340:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** }
5341:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
5342:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /**
5343:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @brief  Set mode single-ended or differential input of the selected
5344:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         ADC channel.
5345:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @note   Channel ending is on channel scope: independently of channel mapped
5346:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         on ADC group regular or injected.
5347:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         In differential mode: Differential measurement is carried out
5348:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         between the selected channel 'i' (positive input) and
5349:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         channel 'i+1' (negative input). Only channel 'i' has to be
5350:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         configured, channel 'i+1' is configured automatically.
5351:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @note   Refer to Reference Manual to ensure the selected channel is
5352:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         available in differential mode.
5353:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         For example, internal channels (VrefInt, TempSensor, ...) are
5354:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         not available in differential mode.
5355:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @note   When configuring a channel 'i' in differential mode,
5356:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         the channel 'i+1' is not usable separately.
5357:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @note   On STM32G4, some channels are internally fixed to single-ended inputs
5358:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         configuration:
5359:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         - ADC1: Channels 12, 15, 16, 17 and 18
5360:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         - ADC2: Channels 15, 17 and 18
5361:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         - ADC3: Channels 12, 16, 17 and 18            (1)
5362:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         - ADC4: Channels 16, 17 and 18                (1)
5363:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         - ADC5: Channels 2, 3, 4, 16, 17 and 18       (1)
5364:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         (1) ADC3/4/5 are not available on all devices, refer to device datasheet
5365:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *             for more details.
5366:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @note   For ADC channels configured in differential mode, both inputs
5367:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         should be biased at (Vref+)/2 +/-200mV.
5368:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         (Vref+ is the analog voltage reference)
5369:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @note   On this STM32 serie, setting of this feature is conditioned to
5370:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         ADC state:
5371:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         ADC must be ADC disabled.
5372:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @note   One or several values can be selected.
5373:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         Example: (LL_ADC_CHANNEL_4 | LL_ADC_CHANNEL_12 | ...)
5374:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @rmtoll DIFSEL   DIFSEL         LL_ADC_SetChannelSingleDiff
5375:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
5376:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @param  Channel This parameter can be one of the following values:
5377:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_1
5378:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_2
5379:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_3
5380:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_4
5381:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_5
5382:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_6
5383:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_7
5384:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_8
5385:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_9
5386:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_10
5387:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_11
ARM GAS  /tmp/ccZ0TYFG.s 			page 109


5388:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_12
5389:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_13
5390:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_14
5391:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_15
5392:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @param  SingleDiff This parameter can be a combination of the following values:
5393:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_SINGLE_ENDED
5394:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
5395:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @retval None
5396:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
5397:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t Sing
5398:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** {
 797              		.loc 1 5398 1
 798              		.cfi_startproc
 799              		@ args = 0, pretend = 0, frame = 16
 800              		@ frame_needed = 1, uses_anonymous_args = 0
 801              		@ link register save eliminated.
 802 0000 80B4     		push	{r7}
 803              	.LCFI78:
 804              		.cfi_def_cfa_offset 4
 805              		.cfi_offset 7, -4
 806 0002 85B0     		sub	sp, sp, #20
 807              	.LCFI79:
 808              		.cfi_def_cfa_offset 24
 809 0004 00AF     		add	r7, sp, #0
 810              	.LCFI80:
 811              		.cfi_def_cfa_register 7
 812 0006 F860     		str	r0, [r7, #12]
 813 0008 B960     		str	r1, [r7, #8]
 814 000a 7A60     		str	r2, [r7, #4]
5399:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   /* Bits of channels in single or differential mode are set only for         */
5400:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   /* differential mode (for single mode, mask of bits allowed to be set is    */
5401:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   /* shifted out of range of bits of channels in single or differential mode. */
5402:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   MODIFY_REG(ADCx->DIFSEL,
 815              		.loc 1 5402 3
 816 000c FB68     		ldr	r3, [r7, #12]
 817 000e D3F8B020 		ldr	r2, [r3, #176]
 818 0012 BB68     		ldr	r3, [r7, #8]
 819 0014 C3F31203 		ubfx	r3, r3, #0, #19
 820 0018 DB43     		mvns	r3, r3
 821 001a 1A40     		ands	r2, r2, r3
 822 001c 7B68     		ldr	r3, [r7, #4]
 823 001e 03F01803 		and	r3, r3, #24
 824 0022 0849     		ldr	r1, .L25
 825 0024 D940     		lsrs	r1, r1, r3
 826 0026 BB68     		ldr	r3, [r7, #8]
 827 0028 0B40     		ands	r3, r3, r1
 828 002a C3F31203 		ubfx	r3, r3, #0, #19
 829 002e 1A43     		orrs	r2, r2, r3
 830 0030 FB68     		ldr	r3, [r7, #12]
 831 0032 C3F8B020 		str	r2, [r3, #176]
5403:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****              Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
5404:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****              (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SING
5405:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** }
 832              		.loc 1 5405 1
 833 0036 00BF     		nop
 834 0038 1437     		adds	r7, r7, #20
 835              	.LCFI81:
ARM GAS  /tmp/ccZ0TYFG.s 			page 110


 836              		.cfi_def_cfa_offset 4
 837 003a BD46     		mov	sp, r7
 838              	.LCFI82:
 839              		.cfi_def_cfa_register 13
 840              		@ sp needed
 841 003c 5DF8047B 		ldr	r7, [sp], #4
 842              	.LCFI83:
 843              		.cfi_restore 7
 844              		.cfi_def_cfa_offset 0
 845 0040 7047     		bx	lr
 846              	.L26:
 847 0042 00BF     		.align	2
 848              	.L25:
 849 0044 FFFF0700 		.word	524287
 850              		.cfi_endproc
 851              	.LFE193:
 853              		.section	.text.LL_ADC_SetAnalogWDMonitChannels,"ax",%progbits
 854              		.align	1
 855              		.syntax unified
 856              		.thumb
 857              		.thumb_func
 858              		.fpu fpv4-sp-d16
 860              	LL_ADC_SetAnalogWDMonitChannels:
 861              	.LFB195:
5406:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
5407:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /**
5408:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @brief  Get mode single-ended or differential input of the selected
5409:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         ADC channel.
5410:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @note   When configuring a channel 'i' in differential mode,
5411:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         the channel 'i+1' is not usable separately.
5412:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         Therefore, to ensure a channel is configured in single-ended mode,
5413:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         the configuration of channel itself and the channel 'i-1' must be
5414:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         read back (to ensure that the selected channel channel has not been
5415:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         configured in differential mode by the previous channel).
5416:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @note   Refer to Reference Manual to ensure the selected channel is
5417:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         available in differential mode.
5418:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         For example, internal channels (VrefInt, TempSensor, ...) are
5419:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         not available in differential mode.
5420:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @note   When configuring a channel 'i' in differential mode,
5421:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         the channel 'i+1' is not usable separately.
5422:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @note   On STM32G4, some channels are internally fixed to single-ended inputs
5423:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         configuration:
5424:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         - ADC1: Channels 12, 15, 16, 17 and 18
5425:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         - ADC2: Channels 15, 17 and 18
5426:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         - ADC3: Channels 12, 16, 17 and 18            (1)
5427:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         - ADC4: Channels 16, 17 and 18                (1)
5428:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         - ADC5: Channels 2, 3, 4, 16, 17 and 18       (1)
5429:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         (1) ADC3/4/5 are not available on all devices, refer to device datasheet
5430:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *             for more details.
5431:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @note   One or several values can be selected. In this case, the value
5432:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         returned is null if all channels are in single ended-mode.
5433:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         Example: (LL_ADC_CHANNEL_4 | LL_ADC_CHANNEL_12 | ...)
5434:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @rmtoll DIFSEL   DIFSEL         LL_ADC_GetChannelSingleDiff
5435:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
5436:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @param  Channel This parameter can be a combination of the following values:
5437:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_1
5438:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_2
ARM GAS  /tmp/ccZ0TYFG.s 			page 111


5439:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_3
5440:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_4
5441:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_5
5442:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_6
5443:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_7
5444:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_8
5445:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_9
5446:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_10
5447:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_11
5448:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_12
5449:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_13
5450:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_14
5451:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_15
5452:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @retval 0: channel in single-ended mode, else: channel in differential mode
5453:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
5454:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_GetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel)
5455:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** {
5456:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   return (uint32_t)(READ_BIT(ADCx->DIFSEL, (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)));
5457:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** }
5458:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
5459:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /**
5460:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @}
5461:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
5462:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
5463:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /** @defgroup ADC_LL_EF_Configuration_ADC_AnalogWatchdog Configuration of ADC transversal scope: an
5464:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @{
5465:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
5466:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
5467:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /**
5468:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @brief  Set ADC analog watchdog monitored channels:
5469:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         a single channel, multiple channels or all channels,
5470:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         on ADC groups regular and-or injected.
5471:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @note   Once monitored channels are selected, analog watchdog
5472:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         is enabled.
5473:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @note   In case of need to define a single channel to monitor
5474:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         with analog watchdog from sequencer channel definition,
5475:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         use helper macro @ref __LL_ADC_ANALOGWD_CHANNEL_GROUP().
5476:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @note   On this STM32 serie, there are 2 kinds of analog watchdog
5477:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         instance:
5478:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         - AWD standard (instance AWD1):
5479:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *           - channels monitored: can monitor 1 channel or all channels.
5480:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *           - groups monitored: ADC groups regular and-or injected.
5481:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *           - resolution: resolution is not limited (corresponds to
5482:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *             ADC resolution configured).
5483:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         - AWD flexible (instances AWD2, AWD3):
5484:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *           - channels monitored: flexible on channels monitored, selection is
5485:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *             channel wise, from from 1 to all channels.
5486:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *             Specificity of this analog watchdog: Multiple channels can
5487:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *             be selected. For example:
5488:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *             (LL_ADC_AWD_CHANNEL4_REG_INJ | LL_ADC_AWD_CHANNEL5_REG_INJ | ...)
5489:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *           - groups monitored: not selection possible (monitoring on both
5490:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *             groups regular and injected).
5491:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *             Channels selected are monitored on groups regular and injected:
5492:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *             LL_ADC_AWD_CHANNELxx_REG_INJ (do not use parameters
5493:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *             LL_ADC_AWD_CHANNELxx_REG and LL_ADC_AWD_CHANNELxx_INJ)
5494:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *           - resolution: resolution is limited to 8 bits: if ADC resolution is
5495:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *             12 bits the 4 LSB are ignored, if ADC resolution is 10 bits
ARM GAS  /tmp/ccZ0TYFG.s 			page 112


5496:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *             the 2 LSB are ignored.
5497:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @note   On this STM32 serie, setting of this feature is conditioned to
5498:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         ADC state:
5499:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         ADC must be disabled or enabled without conversion on going
5500:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         on either groups regular or injected.
5501:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @rmtoll CFGR     AWD1CH         LL_ADC_SetAnalogWDMonitChannels\n
5502:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         CFGR     AWD1SGL        LL_ADC_SetAnalogWDMonitChannels\n
5503:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         CFGR     AWD1EN         LL_ADC_SetAnalogWDMonitChannels\n
5504:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         CFGR     JAWD1EN        LL_ADC_SetAnalogWDMonitChannels\n
5505:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         AWD2CR   AWD2CH         LL_ADC_SetAnalogWDMonitChannels\n
5506:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         AWD3CR   AWD3CH         LL_ADC_SetAnalogWDMonitChannels
5507:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
5508:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @param  AWDy This parameter can be one of the following values:
5509:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD1
5510:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD2
5511:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD3
5512:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @param  AWDChannelGroup This parameter can be one of the following values:
5513:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_DISABLE
5514:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_ALL_CHANNELS_REG        (0)
5515:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_ALL_CHANNELS_INJ        (0)
5516:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_ALL_CHANNELS_REG_INJ
5517:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_0_REG           (0)
5518:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_0_INJ           (0)
5519:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_0_REG_INJ
5520:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_1_REG           (0)
5521:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_1_INJ           (0)
5522:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_1_REG_INJ
5523:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_2_REG           (0)
5524:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_2_INJ           (0)
5525:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_2_REG_INJ
5526:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_3_REG           (0)
5527:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_3_INJ           (0)
5528:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_3_REG_INJ
5529:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_4_REG           (0)
5530:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_4_INJ           (0)
5531:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_4_REG_INJ
5532:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_5_REG           (0)
5533:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_5_INJ           (0)
5534:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_5_REG_INJ
5535:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_6_REG           (0)
5536:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_6_INJ           (0)
5537:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_6_REG_INJ
5538:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_7_REG           (0)
5539:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_7_INJ           (0)
5540:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_7_REG_INJ
5541:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_8_REG           (0)
5542:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_8_INJ           (0)
5543:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_8_REG_INJ
5544:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_9_REG           (0)
5545:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_9_INJ           (0)
5546:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_9_REG_INJ
5547:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_10_REG          (0)
5548:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_10_INJ          (0)
5549:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_10_REG_INJ
5550:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_11_REG          (0)
5551:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_11_INJ          (0)
5552:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_11_REG_INJ
ARM GAS  /tmp/ccZ0TYFG.s 			page 113


5553:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_12_REG          (0)
5554:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_12_INJ          (0)
5555:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_12_REG_INJ
5556:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_13_REG          (0)
5557:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_13_INJ          (0)
5558:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_13_REG_INJ
5559:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_14_REG          (0)
5560:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_14_INJ          (0)
5561:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_14_REG_INJ
5562:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_15_REG          (0)
5563:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_15_INJ          (0)
5564:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_15_REG_INJ
5565:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_16_REG          (0)
5566:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_16_INJ          (0)
5567:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_16_REG_INJ
5568:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_17_REG          (0)
5569:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_17_INJ          (0)
5570:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_17_REG_INJ
5571:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_18_REG          (0)
5572:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_18_INJ          (0)
5573:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_18_REG_INJ
5574:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_VREFINT_REG          (0)
5575:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_VREFINT_INJ          (0)
5576:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_VREFINT_REG_INJ
5577:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_TEMPSENSOR_ADC1_REG  (0)(1)
5578:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_TEMPSENSOR_ADC1_INJ  (0)(1)
5579:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_TEMPSENSOR_ADC1_REG_INJ (1)
5580:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_TEMPSENSOR_ADC5_REG  (0)(5)
5581:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_TEMPSENSOR_ADC5_INJ  (0)(5)
5582:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_TEMPSENSOR_ADC5_REG_INJ (5)
5583:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_VBAT_REG             (0)(6)
5584:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_VBAT_INJ             (0)(6)
5585:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_VBAT_REG_INJ            (6)
5586:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_VOPAMP1_REG          (0)(1)
5587:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_VOPAMP1_INJ          (0)(1)
5588:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_VOPAMP1_REG_INJ         (1)
5589:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_VOPAMP2_REG          (0)(2)
5590:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_VOPAMP2_INJ          (0)(2)
5591:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_VOPAMP2_REG_INJ         (2)
5592:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_VOPAMP3_ADC2_REG     (0)(2)
5593:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_VOPAMP3_ADC2_INJ     (0)(2)
5594:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_VOPAMP3_ADC2_REG_INJ    (2)
5595:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_VOPAMP3_ADC3_REG     (0)(3)
5596:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_VOPAMP3_ADC3_INJ     (0)(3)
5597:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_VOPAMP3_ADC3_REG_INJ    (3)
5598:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_VOPAMP4_REG          (0)(5)
5599:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_VOPAMP4_INJ          (0)(5)
5600:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_VOPAMP4_REG_INJ         (5)
5601:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_VOPAMP5_REG          (0)(5)
5602:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_VOPAMP5_INJ          (0)(5)
5603:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_VOPAMP5_REG_INJ         (5)
5604:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_VOPAMP6_REG          (0)(4)
5605:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_VOPAMP6_INJ          (0)(4)
5606:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_VOPAMP6_REG_INJ         (4)
5607:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *
5608:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         (0) On STM32G4, parameter available only on analog watchdog number: AWD1.\n
5609:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         (1) On STM32G4, parameter available only on ADC instance: ADC1.\n
ARM GAS  /tmp/ccZ0TYFG.s 			page 114


5610:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         (2) On STM32G4, parameter available only on ADC instance: ADC2.\n
5611:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         (3) On STM32G4, parameter available only on ADC instance: ADC3.\n
5612:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         (4) On STM32G4, parameter available only on ADC instance: ADC4.\n
5613:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         (5) On STM32G4, parameter available only on ADC instance: ADC5.\n
5614:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         (6) On STM32G4, parameter available only on ADC instances: ADC1, ADC3, ADC5.\n
5615:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         (7) On STM32G4, parameter available only on ADC instances: ADC1, ADC3, ADC4, ADC5.\n
5616:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *          -  On this STM32 serie, all ADCx are not available on all devices. Refer to device dat
5617:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @retval None
5618:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
5619:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_SetAnalogWDMonitChannels(ADC_TypeDef *ADCx, uint32_t AWDy, uint32_t AWD
5620:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** {
 862              		.loc 1 5620 1
 863              		.cfi_startproc
 864              		@ args = 0, pretend = 0, frame = 16
 865              		@ frame_needed = 1, uses_anonymous_args = 0
 866              		@ link register save eliminated.
 867 0000 90B4     		push	{r4, r7}
 868              	.LCFI84:
 869              		.cfi_def_cfa_offset 8
 870              		.cfi_offset 4, -8
 871              		.cfi_offset 7, -4
 872 0002 84B0     		sub	sp, sp, #16
 873              	.LCFI85:
 874              		.cfi_def_cfa_offset 24
 875 0004 00AF     		add	r7, sp, #0
 876              	.LCFI86:
 877              		.cfi_def_cfa_register 7
 878 0006 F860     		str	r0, [r7, #12]
 879 0008 B960     		str	r1, [r7, #8]
 880 000a 7A60     		str	r2, [r7, #4]
5621:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   /* Set bits with content of parameter "AWDChannelGroup" with bits position  */
5622:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   /* in register and register position depending on parameter "AWDy".         */
5623:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   /* Parameters "AWDChannelGroup" and "AWDy" are used with masks because      */
5624:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   /* containing other bits reserved for other purpose.                        */
5625:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->CFGR, ((AWDy & ADC_AWD_CRX_REGOFFSET_MA
 881              		.loc 1 5625 34
 882 000c FB68     		ldr	r3, [r7, #12]
 883 000e 0C33     		adds	r3, r3, #12
 884 0010 1846     		mov	r0, r3
 885 0012 BB68     		ldr	r3, [r7, #8]
 886 0014 1B0D     		lsrs	r3, r3, #20
 887 0016 03F00301 		and	r1, r3, #3
 888 001a BB68     		ldr	r3, [r7, #8]
 889 001c 03F00102 		and	r2, r3, #1
 890 0020 1346     		mov	r3, r2
 891 0022 DB00     		lsls	r3, r3, #3
 892 0024 1344     		add	r3, r3, r2
 893 0026 9B00     		lsls	r3, r3, #2
 894 0028 0B44     		add	r3, r3, r1
 895 002a 9B00     		lsls	r3, r3, #2
 896 002c 0344     		add	r3, r3, r0
 897              		.loc 1 5625 27
 898 002e 1C46     		mov	r4, r3
5626:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****                                                       + ((AWDy & ADC_AWD_CR12_REGOFFSETGAP_MASK) * 
5627:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
5628:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   MODIFY_REG(*preg,
 899              		.loc 1 5628 3
ARM GAS  /tmp/ccZ0TYFG.s 			page 115


 900 0030 2268     		ldr	r2, [r4]
 901 0032 BB68     		ldr	r3, [r7, #8]
 902 0034 23F00243 		bic	r3, r3, #-2113929216
 903 0038 23F46013 		bic	r3, r3, #3670016
 904 003c DB43     		mvns	r3, r3
 905 003e 1A40     		ands	r2, r2, r3
 906 0040 7968     		ldr	r1, [r7, #4]
 907 0042 BB68     		ldr	r3, [r7, #8]
 908 0044 0B40     		ands	r3, r3, r1
 909 0046 1343     		orrs	r3, r3, r2
 910 0048 2360     		str	r3, [r4]
5629:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****              (AWDy & ADC_AWD_CR_ALL_CHANNEL_MASK),
5630:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****              AWDChannelGroup & AWDy);
5631:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** }
 911              		.loc 1 5631 1
 912 004a 00BF     		nop
 913 004c 1037     		adds	r7, r7, #16
 914              	.LCFI87:
 915              		.cfi_def_cfa_offset 8
 916 004e BD46     		mov	sp, r7
 917              	.LCFI88:
 918              		.cfi_def_cfa_register 13
 919              		@ sp needed
 920 0050 90BC     		pop	{r4, r7}
 921              	.LCFI89:
 922              		.cfi_restore 7
 923              		.cfi_restore 4
 924              		.cfi_def_cfa_offset 0
 925 0052 7047     		bx	lr
 926              		.cfi_endproc
 927              	.LFE195:
 929              		.section	.text.LL_ADC_ConfigAnalogWDThresholds,"ax",%progbits
 930              		.align	1
 931              		.syntax unified
 932              		.thumb
 933              		.thumb_func
 934              		.fpu fpv4-sp-d16
 936              	LL_ADC_ConfigAnalogWDThresholds:
 937              	.LFB197:
5632:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
5633:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /**
5634:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @brief  Get ADC analog watchdog monitored channel.
5635:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @note   Usage of the returned channel number:
5636:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         - To reinject this channel into another function LL_ADC_xxx:
5637:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *           the returned channel number is only partly formatted on definition
5638:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *           of literals LL_ADC_CHANNEL_x. Therefore, it has to be compared
5639:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *           with parts of literals LL_ADC_CHANNEL_x or using
5640:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *           helper macro @ref __LL_ADC_CHANNEL_TO_DECIMAL_NB().
5641:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *           Then the selected literal LL_ADC_CHANNEL_x can be used
5642:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *           as parameter for another function.
5643:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         - To get the channel number in decimal format:
5644:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *           process the returned value with the helper macro
5645:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *           @ref __LL_ADC_CHANNEL_TO_DECIMAL_NB().
5646:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *           Applicable only when the analog watchdog is set to monitor
5647:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *           one channel.
5648:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @note   On this STM32 serie, there are 2 kinds of analog watchdog
5649:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         instance:
ARM GAS  /tmp/ccZ0TYFG.s 			page 116


5650:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         - AWD standard (instance AWD1):
5651:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *           - channels monitored: can monitor 1 channel or all channels.
5652:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *           - groups monitored: ADC groups regular and-or injected.
5653:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *           - resolution: resolution is not limited (corresponds to
5654:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *             ADC resolution configured).
5655:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         - AWD flexible (instances AWD2, AWD3):
5656:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *           - channels monitored: flexible on channels monitored, selection is
5657:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *             channel wise, from from 1 to all channels.
5658:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *             Specificity of this analog watchdog: Multiple channels can
5659:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *             be selected. For example:
5660:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *             (LL_ADC_AWD_CHANNEL4_REG_INJ | LL_ADC_AWD_CHANNEL5_REG_INJ | ...)
5661:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *           - groups monitored: not selection possible (monitoring on both
5662:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *             groups regular and injected).
5663:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *             Channels selected are monitored on groups regular and injected:
5664:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *             LL_ADC_AWD_CHANNELxx_REG_INJ (do not use parameters
5665:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *             LL_ADC_AWD_CHANNELxx_REG and LL_ADC_AWD_CHANNELxx_INJ)
5666:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *           - resolution: resolution is limited to 8 bits: if ADC resolution is
5667:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *             12 bits the 4 LSB are ignored, if ADC resolution is 10 bits
5668:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *             the 2 LSB are ignored.
5669:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @note   On this STM32 serie, setting of this feature is conditioned to
5670:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         ADC state:
5671:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         ADC must be disabled or enabled without conversion on going
5672:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         on either groups regular or injected.
5673:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @rmtoll CFGR     AWD1CH         LL_ADC_GetAnalogWDMonitChannels\n
5674:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         CFGR     AWD1SGL        LL_ADC_GetAnalogWDMonitChannels\n
5675:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         CFGR     AWD1EN         LL_ADC_GetAnalogWDMonitChannels\n
5676:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         CFGR     JAWD1EN        LL_ADC_GetAnalogWDMonitChannels\n
5677:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         AWD2CR   AWD2CH         LL_ADC_GetAnalogWDMonitChannels\n
5678:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         AWD3CR   AWD3CH         LL_ADC_GetAnalogWDMonitChannels
5679:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
5680:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @param  AWDy This parameter can be one of the following values:
5681:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD1
5682:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD2 (1)
5683:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD3 (1)
5684:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *
5685:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         (1) On this AWD number, monitored channel can be retrieved
5686:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *             if only 1 channel is programmed (or none or all channels).
5687:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *             This function cannot retrieve monitored channel if
5688:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *             multiple channels are programmed simultaneously
5689:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *             by bitfield.
5690:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
5691:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_DISABLE
5692:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_ALL_CHANNELS_REG        (0)
5693:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_ALL_CHANNELS_INJ        (0)
5694:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_ALL_CHANNELS_REG_INJ
5695:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_0_REG           (0)
5696:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_0_INJ           (0)
5697:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_0_REG_INJ
5698:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_1_REG           (0)
5699:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_1_INJ           (0)
5700:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_1_REG_INJ
5701:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_2_REG           (0)
5702:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_2_INJ           (0)
5703:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_2_REG_INJ
5704:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_3_REG           (0)
5705:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_3_INJ           (0)
5706:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_3_REG_INJ
ARM GAS  /tmp/ccZ0TYFG.s 			page 117


5707:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_4_REG           (0)
5708:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_4_INJ           (0)
5709:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_4_REG_INJ
5710:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_5_REG           (0)
5711:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_5_INJ           (0)
5712:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_5_REG_INJ
5713:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_6_REG           (0)
5714:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_6_INJ           (0)
5715:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_6_REG_INJ
5716:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_7_REG           (0)
5717:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_7_INJ           (0)
5718:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_7_REG_INJ
5719:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_8_REG           (0)
5720:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_8_INJ           (0)
5721:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_8_REG_INJ
5722:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_9_REG           (0)
5723:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_9_INJ           (0)
5724:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_9_REG_INJ
5725:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_10_REG          (0)
5726:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_10_INJ          (0)
5727:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_10_REG_INJ
5728:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_11_REG          (0)
5729:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_11_INJ          (0)
5730:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_11_REG_INJ
5731:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_12_REG          (0)
5732:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_12_INJ          (0)
5733:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_12_REG_INJ
5734:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_13_REG          (0)
5735:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_13_INJ          (0)
5736:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_13_REG_INJ
5737:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_14_REG          (0)
5738:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_14_INJ          (0)
5739:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_14_REG_INJ
5740:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_15_REG          (0)
5741:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_15_INJ          (0)
5742:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_15_REG_INJ
5743:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_16_REG          (0)
5744:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_16_INJ          (0)
5745:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_16_REG_INJ
5746:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_17_REG          (0)
5747:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_17_INJ          (0)
5748:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_17_REG_INJ
5749:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_18_REG          (0)
5750:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_18_INJ          (0)
5751:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_18_REG_INJ
5752:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *
5753:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         (0) On STM32G4, parameter available only on analog watchdog number: AWD1.
5754:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
5755:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_GetAnalogWDMonitChannels(ADC_TypeDef *ADCx, uint32_t AWDy)
5756:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** {
5757:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   register const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->CFGR, ((AWDy & ADC_AWD_CRX_REGOFF
5758:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****                                                             + ((AWDy & ADC_AWD_CR12_REGOFFSETGAP_MA
5759:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
5760:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   register uint32_t AnalogWDMonitChannels = (READ_BIT(*preg, AWDy) & AWDy & ADC_AWD_CR_ALL_CHANNEL_
5761:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
5762:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   /* If "AnalogWDMonitChannels" == 0, then the selected AWD is disabled       */
5763:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   /* (parameter value LL_ADC_AWD_DISABLE).                                    */
ARM GAS  /tmp/ccZ0TYFG.s 			page 118


5764:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   /* Else, the selected AWD is enabled and is monitoring a group of channels  */
5765:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   /* or a single channel.                                                     */
5766:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   if (AnalogWDMonitChannels != 0UL)
5767:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   {
5768:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****     if (AWDy == LL_ADC_AWD1)
5769:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****     {
5770:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****       if ((AnalogWDMonitChannels & ADC_CFGR_AWD1SGL) == 0UL)
5771:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****       {
5772:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****         /* AWD monitoring a group of channels */
5773:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****         AnalogWDMonitChannels = ((AnalogWDMonitChannels
5774:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****                                   | (ADC_AWD_CR23_CHANNEL_MASK)
5775:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****                                  )
5776:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****                                  & (~(ADC_CFGR_AWD1CH))
5777:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****                                 );
5778:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****       }
5779:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****       else
5780:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****       {
5781:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****         /* AWD monitoring a single channel */
5782:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****         AnalogWDMonitChannels = (AnalogWDMonitChannels
5783:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****                                  | (ADC_AWD2CR_AWD2CH_0 << (AnalogWDMonitChannels >> ADC_CFGR_AWD1C
5784:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****                                 );
5785:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****       }
5786:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****     }
5787:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****     else
5788:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****     {
5789:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****       if ((AnalogWDMonitChannels & ADC_AWD_CR23_CHANNEL_MASK) == ADC_AWD_CR23_CHANNEL_MASK)
5790:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****       {
5791:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****         /* AWD monitoring a group of channels */
5792:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****         AnalogWDMonitChannels = (ADC_AWD_CR23_CHANNEL_MASK
5793:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****                                  | ((ADC_CFGR_JAWD1EN | ADC_CFGR_AWD1EN))
5794:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****                                 );
5795:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****       }
5796:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****       else
5797:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****       {
5798:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****         /* AWD monitoring a single channel */
5799:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****         /* AWD monitoring a group of channels */
5800:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****         AnalogWDMonitChannels = (AnalogWDMonitChannels
5801:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****                                  | (ADC_CFGR_JAWD1EN | ADC_CFGR_AWD1EN | ADC_CFGR_AWD1SGL)
5802:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****                                  | (__LL_ADC_CHANNEL_TO_DECIMAL_NB(AnalogWDMonitChannels) << ADC_CF
5803:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****                                 );
5804:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****       }
5805:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****     }
5806:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   }
5807:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
5808:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   return AnalogWDMonitChannels;
5809:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** }
5810:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
5811:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /**
5812:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @brief  Set ADC analog watchdog thresholds value of both thresholds
5813:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         high and low.
5814:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @note   If value of only one threshold high or low must be set,
5815:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         use function @ref LL_ADC_SetAnalogWDThresholds().
5816:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @note   In case of ADC resolution different of 12 bits,
5817:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         analog watchdog thresholds data require a specific shift.
5818:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         Use helper macro @ref __LL_ADC_ANALOGWD_SET_THRESHOLD_RESOLUTION().
5819:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @note   On this STM32 serie, there are 2 kinds of analog watchdog
5820:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         instance:
ARM GAS  /tmp/ccZ0TYFG.s 			page 119


5821:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         - AWD standard (instance AWD1):
5822:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *           - channels monitored: can monitor 1 channel or all channels.
5823:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *           - groups monitored: ADC groups regular and-or injected.
5824:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *           - resolution: resolution is not limited (corresponds to
5825:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *             ADC resolution configured).
5826:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         - AWD flexible (instances AWD2, AWD3):
5827:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *           - channels monitored: flexible on channels monitored, selection is
5828:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *             channel wise, from from 1 to all channels.
5829:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *             Specificity of this analog watchdog: Multiple channels can
5830:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *             be selected. For example:
5831:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *             (LL_ADC_AWD_CHANNEL4_REG_INJ | LL_ADC_AWD_CHANNEL5_REG_INJ | ...)
5832:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *           - groups monitored: not selection possible (monitoring on both
5833:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *             groups regular and injected).
5834:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *             Channels selected are monitored on groups regular and injected:
5835:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *             LL_ADC_AWD_CHANNELxx_REG_INJ (do not use parameters
5836:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *             LL_ADC_AWD_CHANNELxx_REG and LL_ADC_AWD_CHANNELxx_INJ)
5837:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *           - resolution: resolution is limited to 8 bits: if ADC resolution is
5838:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *             12 bits the 4 LSB are ignored, if ADC resolution is 10 bits
5839:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *             the 2 LSB are ignored.
5840:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @note   If ADC oversampling is enabled, ADC analog watchdog thresholds are
5841:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         impacted: the comparison of analog watchdog thresholds is done on
5842:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         oversampling final computation (after ratio and shift application):
5843:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         ADC data register bitfield [15:4] (12 most significant bits).
5844:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @rmtoll TR1      HT1            LL_ADC_ConfigAnalogWDThresholds\n
5845:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         TR2      HT2            LL_ADC_ConfigAnalogWDThresholds\n
5846:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         TR3      HT3            LL_ADC_ConfigAnalogWDThresholds\n
5847:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         TR1      LT1            LL_ADC_ConfigAnalogWDThresholds\n
5848:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         TR2      LT2            LL_ADC_ConfigAnalogWDThresholds\n
5849:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         TR3      LT3            LL_ADC_ConfigAnalogWDThresholds
5850:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
5851:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @param  AWDy This parameter can be one of the following values:
5852:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD1
5853:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD2
5854:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD3
5855:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @param  AWDThresholdHighValue Value between Min_Data=0x000 and Max_Data=0xFFF
5856:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @param  AWDThresholdLowValue Value between Min_Data=0x000 and Max_Data=0xFFF
5857:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @retval None
5858:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
5859:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_ConfigAnalogWDThresholds(ADC_TypeDef *ADCx, uint32_t AWDy, uint32_t AWD
5860:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****                                                      uint32_t AWDThresholdLowValue)
5861:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** {
 938              		.loc 1 5861 1
 939              		.cfi_startproc
 940              		@ args = 0, pretend = 0, frame = 16
 941              		@ frame_needed = 1, uses_anonymous_args = 0
 942              		@ link register save eliminated.
 943 0000 90B4     		push	{r4, r7}
 944              	.LCFI90:
 945              		.cfi_def_cfa_offset 8
 946              		.cfi_offset 4, -8
 947              		.cfi_offset 7, -4
 948 0002 84B0     		sub	sp, sp, #16
 949              	.LCFI91:
 950              		.cfi_def_cfa_offset 24
 951 0004 00AF     		add	r7, sp, #0
 952              	.LCFI92:
 953              		.cfi_def_cfa_register 7
ARM GAS  /tmp/ccZ0TYFG.s 			page 120


 954 0006 F860     		str	r0, [r7, #12]
 955 0008 B960     		str	r1, [r7, #8]
 956 000a 7A60     		str	r2, [r7, #4]
 957 000c 3B60     		str	r3, [r7]
5862:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   /* Set bits with content of parameter "AWDThresholdxxxValue" with bits      */
5863:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   /* position in register and register position depending on parameter        */
5864:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   /* "AWDy".                                                                  */
5865:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   /* Parameters "AWDy" and "AWDThresholdxxxValue" are used with masks because */
5866:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   /* containing other bits reserved for other purpose.                        */
5867:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->TR1, ((AWDy & ADC_AWD_TRX_REGOFFSET_MAS
 958              		.loc 1 5867 34
 959 000e FB68     		ldr	r3, [r7, #12]
 960 0010 2033     		adds	r3, r3, #32
 961 0012 1A46     		mov	r2, r3
 962 0014 BB68     		ldr	r3, [r7, #8]
 963 0016 1B0D     		lsrs	r3, r3, #20
 964 0018 9B00     		lsls	r3, r3, #2
 965 001a 03F00C03 		and	r3, r3, #12
 966 001e 1344     		add	r3, r3, r2
 967              		.loc 1 5867 27
 968 0020 1C46     		mov	r4, r3
5868:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
5869:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   MODIFY_REG(*preg,
 969              		.loc 1 5869 3
 970 0022 2368     		ldr	r3, [r4]
 971 0024 03F0F022 		and	r2, r3, #-268374016
 972 0028 7B68     		ldr	r3, [r7, #4]
 973 002a 1904     		lsls	r1, r3, #16
 974 002c 3B68     		ldr	r3, [r7]
 975 002e 0B43     		orrs	r3, r3, r1
 976 0030 1343     		orrs	r3, r3, r2
 977 0032 2360     		str	r3, [r4]
5870:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****              ADC_TR1_HT1 | ADC_TR1_LT1,
5871:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****              (AWDThresholdHighValue << ADC_TR1_HT1_BITOFFSET_POS) | AWDThresholdLowValue);
5872:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** }
 978              		.loc 1 5872 1
 979 0034 00BF     		nop
 980 0036 1037     		adds	r7, r7, #16
 981              	.LCFI93:
 982              		.cfi_def_cfa_offset 8
 983 0038 BD46     		mov	sp, r7
 984              	.LCFI94:
 985              		.cfi_def_cfa_register 13
 986              		@ sp needed
 987 003a 90BC     		pop	{r4, r7}
 988              	.LCFI95:
 989              		.cfi_restore 7
 990              		.cfi_restore 4
 991              		.cfi_def_cfa_offset 0
 992 003c 7047     		bx	lr
 993              		.cfi_endproc
 994              	.LFE197:
 996              		.section	.text.LL_ADC_GetMultimode,"ax",%progbits
 997              		.align	1
 998              		.syntax unified
 999              		.thumb
 1000              		.thumb_func
ARM GAS  /tmp/ccZ0TYFG.s 			page 121


 1001              		.fpu fpv4-sp-d16
 1003              	LL_ADC_GetMultimode:
 1004              	.LFB210:
5873:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
5874:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /**
5875:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @brief  Set ADC analog watchdog threshold value of threshold
5876:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         high or low.
5877:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @note   If values of both thresholds high or low must be set,
5878:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         use function @ref LL_ADC_ConfigAnalogWDThresholds().
5879:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @note   In case of ADC resolution different of 12 bits,
5880:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         analog watchdog thresholds data require a specific shift.
5881:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         Use helper macro @ref __LL_ADC_ANALOGWD_SET_THRESHOLD_RESOLUTION().
5882:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @note   On this STM32 serie, there are 2 kinds of analog watchdog
5883:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         instance:
5884:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         - AWD standard (instance AWD1):
5885:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *           - channels monitored: can monitor 1 channel or all channels.
5886:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *           - groups monitored: ADC groups regular and-or injected.
5887:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *           - resolution: resolution is not limited (corresponds to
5888:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *             ADC resolution configured).
5889:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         - AWD flexible (instances AWD2, AWD3):
5890:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *           - channels monitored: flexible on channels monitored, selection is
5891:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *             channel wise, from from 1 to all channels.
5892:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *             Specificity of this analog watchdog: Multiple channels can
5893:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *             be selected. For example:
5894:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *             (LL_ADC_AWD_CHANNEL4_REG_INJ | LL_ADC_AWD_CHANNEL5_REG_INJ | ...)
5895:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *           - groups monitored: not selection possible (monitoring on both
5896:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *             groups regular and injected).
5897:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *             Channels selected are monitored on groups regular and injected:
5898:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *             LL_ADC_AWD_CHANNELxx_REG_INJ (do not use parameters
5899:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *             LL_ADC_AWD_CHANNELxx_REG and LL_ADC_AWD_CHANNELxx_INJ)
5900:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *           - resolution: resolution is limited to 8 bits: if ADC resolution is
5901:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *             12 bits the 4 LSB are ignored, if ADC resolution is 10 bits
5902:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *             the 2 LSB are ignored.
5903:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @note   If ADC oversampling is enabled, ADC analog watchdog thresholds are
5904:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         impacted: the comparison of analog watchdog thresholds is done on
5905:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         oversampling final computation (after ratio and shift application):
5906:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         ADC data register bitfield [15:4] (12 most significant bits).
5907:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @note   On this STM32 serie, setting of this feature is not conditioned to
5908:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         ADC state:
5909:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         ADC can be disabled, enabled with or without conversion on going
5910:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         on either ADC groups regular or injected.
5911:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @rmtoll TR1      HT1            LL_ADC_SetAnalogWDThresholds\n
5912:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         TR2      HT2            LL_ADC_SetAnalogWDThresholds\n
5913:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         TR3      HT3            LL_ADC_SetAnalogWDThresholds\n
5914:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         TR1      LT1            LL_ADC_SetAnalogWDThresholds\n
5915:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         TR2      LT2            LL_ADC_SetAnalogWDThresholds\n
5916:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         TR3      LT3            LL_ADC_SetAnalogWDThresholds
5917:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
5918:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @param  AWDy This parameter can be one of the following values:
5919:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD1
5920:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD2
5921:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD3
5922:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @param  AWDThresholdsHighLow This parameter can be one of the following values:
5923:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_THRESHOLD_HIGH
5924:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_THRESHOLD_LOW
5925:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @param  AWDThresholdValue Value between Min_Data=0x000 and Max_Data=0xFFF
5926:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @retval None
ARM GAS  /tmp/ccZ0TYFG.s 			page 122


5927:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
5928:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_SetAnalogWDThresholds(ADC_TypeDef *ADCx, uint32_t AWDy, uint32_t AWDThr
5929:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****                                                   uint32_t AWDThresholdValue)
5930:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** {
5931:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   /* Set bits with content of parameter "AWDThresholdValue" with bits         */
5932:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   /* position in register and register position depending on parameters       */
5933:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   /* "AWDThresholdsHighLow" and "AWDy".                                       */
5934:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   /* Parameters "AWDy" and "AWDThresholdValue" are used with masks because    */
5935:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   /* containing other bits reserved for other purpose.                        */
5936:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->TR1, ((AWDy & ADC_AWD_TRX_REGOFFSET_MAS
5937:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
5938:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   MODIFY_REG(*preg,
5939:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****              AWDThresholdsHighLow,
5940:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****              AWDThresholdValue << ((AWDThresholdsHighLow & ADC_AWD_TRX_BIT_HIGH_MASK) >> ADC_AWD_TR
5941:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** }
5942:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
5943:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /**
5944:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @brief  Get ADC analog watchdog threshold value of threshold high,
5945:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         threshold low or raw data with ADC thresholds high and low
5946:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         concatenated.
5947:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @note   If raw data with ADC thresholds high and low is retrieved,
5948:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         the data of each threshold high or low can be isolated
5949:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         using helper macro:
5950:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @ref __LL_ADC_ANALOGWD_THRESHOLDS_HIGH_LOW().
5951:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @note   In case of ADC resolution different of 12 bits,
5952:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         analog watchdog thresholds data require a specific shift.
5953:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         Use helper macro @ref __LL_ADC_ANALOGWD_GET_THRESHOLD_RESOLUTION().
5954:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @rmtoll TR1      HT1            LL_ADC_GetAnalogWDThresholds\n
5955:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         TR2      HT2            LL_ADC_GetAnalogWDThresholds\n
5956:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         TR3      HT3            LL_ADC_GetAnalogWDThresholds\n
5957:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         TR1      LT1            LL_ADC_GetAnalogWDThresholds\n
5958:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         TR2      LT2            LL_ADC_GetAnalogWDThresholds\n
5959:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         TR3      LT3            LL_ADC_GetAnalogWDThresholds
5960:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
5961:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @param  AWDy This parameter can be one of the following values:
5962:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD1
5963:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD2
5964:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD3
5965:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @param  AWDThresholdsHighLow This parameter can be one of the following values:
5966:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_THRESHOLD_HIGH
5967:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_THRESHOLD_LOW
5968:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_THRESHOLDS_HIGH_LOW
5969:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @retval Value between Min_Data=0x000 and Max_Data=0xFFF
5970:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
5971:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_GetAnalogWDThresholds(ADC_TypeDef *ADCx, uint32_t AWDy, uint32_t AW
5972:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** {
5973:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   register const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->TR1, ((AWDy & ADC_AWD_TRX_REGOFFS
5974:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
5975:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   return (uint32_t)(READ_BIT(*preg,
5976:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****                              (AWDThresholdsHighLow | ADC_TR1_LT1))
5977:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****                     >> (((AWDThresholdsHighLow & ADC_AWD_TRX_BIT_HIGH_MASK) >> ADC_AWD_TRX_BIT_HIGH
5978:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****                    );
5979:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** }
5980:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
5981:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /**
5982:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @brief  Set ADC analog watchdog filtering configuration
5983:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @note   On this STM32 serie, setting of this feature is conditioned to
ARM GAS  /tmp/ccZ0TYFG.s 			page 123


5984:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         ADC state:
5985:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         ADC must be disabled or enabled without conversion on going
5986:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         on either groups regular or injected.
5987:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *  @note  On this STM32 serie, this feature is only available on first
5988:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         analog watchdog (AWD1)
5989:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @rmtoll TR1      AWDFILT        LL_ADC_SetAWDFilteringConfiguration
5990:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
5991:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @param  AWDy This parameter can be one of the following values:
5992:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD1
5993:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @param  FilteringConfig This parameter can be one of the following values:
5994:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_FILTERING_NONE
5995:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_FILTERING_2SAMPLES
5996:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_FILTERING_3SAMPLES
5997:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_FILTERING_4SAMPLES
5998:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_FILTERING_5SAMPLES
5999:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_FILTERING_6SAMPLES
6000:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_FILTERING_7SAMPLES
6001:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_FILTERING_8SAMPLES
6002:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @retval None
6003:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
6004:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_SetAWDFilteringConfiguration(ADC_TypeDef *ADCx, uint32_t AWDy, uint32_t
6005:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** {
6006:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   /* Prevent unused argument(s) compilation warning */
6007:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   (void)(AWDy);
6008:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   MODIFY_REG(ADCx->TR1, ADC_TR1_AWDFILT, FilteringConfig);
6009:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** }
6010:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
6011:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /**
6012:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @brief  Get ADC analog watchdog filtering configuration
6013:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *  @note  On this STM32 serie, this feature is only available on first
6014:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         analog watchdog (AWD1)
6015:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @rmtoll TR1      AWDFILT        LL_ADC_GetAWDFilteringConfiguration
6016:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
6017:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @param  AWDy This parameter can be one of the following values:
6018:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD1
6019:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @retval Returned value can be:
6020:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_FILTERING_NONE
6021:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_FILTERING_2SAMPLES
6022:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_FILTERING_3SAMPLES
6023:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_FILTERING_4SAMPLES
6024:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_FILTERING_5SAMPLES
6025:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_FILTERING_6SAMPLES
6026:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_FILTERING_7SAMPLES
6027:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_FILTERING_8SAMPLES
6028:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
6029:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_GetAWDFilteringConfiguration(ADC_TypeDef *ADCx, uint32_t AWDy)
6030:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** {
6031:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   /* Prevent unused argument(s) compilation warning */
6032:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   (void)(AWDy);
6033:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   return (uint32_t)(READ_BIT(ADCx->TR1, ADC_TR1_AWDFILT));
6034:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** }
6035:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
6036:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /**
6037:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @}
6038:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
6039:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
6040:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /** @defgroup ADC_LL_EF_Configuration_ADC_oversampling Configuration of ADC transversal scope: over
ARM GAS  /tmp/ccZ0TYFG.s 			page 124


6041:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @{
6042:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
6043:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
6044:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /**
6045:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @brief  Set ADC oversampling scope: ADC groups regular and-or injected
6046:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         (availability of ADC group injected depends on STM32 families).
6047:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @note   If both groups regular and injected are selected,
6048:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         specify behavior of ADC group injected interrupting
6049:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         group regular: when ADC group injected is triggered,
6050:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         the oversampling on ADC group regular is either
6051:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         temporary stopped and continued, or resumed from start
6052:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         (oversampler buffer reset).
6053:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @note   On this STM32 serie, setting of this feature is conditioned to
6054:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         ADC state:
6055:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         ADC must be disabled or enabled without conversion on going
6056:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         on either groups regular or injected.
6057:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @rmtoll CFGR2    ROVSE          LL_ADC_SetOverSamplingScope\n
6058:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         CFGR2    JOVSE          LL_ADC_SetOverSamplingScope\n
6059:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         CFGR2    ROVSM          LL_ADC_SetOverSamplingScope
6060:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
6061:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @param  OvsScope This parameter can be one of the following values:
6062:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_DISABLE
6063:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_GRP_REGULAR_CONTINUED
6064:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_GRP_REGULAR_RESUMED
6065:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_GRP_INJECTED
6066:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_GRP_INJ_REG_RESUMED
6067:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @retval None
6068:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
6069:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_SetOverSamplingScope(ADC_TypeDef *ADCx, uint32_t OvsScope)
6070:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** {
6071:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   MODIFY_REG(ADCx->CFGR2, ADC_CFGR2_ROVSE | ADC_CFGR2_JOVSE | ADC_CFGR2_ROVSM, OvsScope);
6072:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** }
6073:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
6074:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /**
6075:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @brief  Get ADC oversampling scope: ADC groups regular and-or injected
6076:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         (availability of ADC group injected depends on STM32 families).
6077:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @note   If both groups regular and injected are selected,
6078:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         specify behavior of ADC group injected interrupting
6079:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         group regular: when ADC group injected is triggered,
6080:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         the oversampling on ADC group regular is either
6081:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         temporary stopped and continued, or resumed from start
6082:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         (oversampler buffer reset).
6083:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @rmtoll CFGR2    ROVSE          LL_ADC_GetOverSamplingScope\n
6084:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         CFGR2    JOVSE          LL_ADC_GetOverSamplingScope\n
6085:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         CFGR2    ROVSM          LL_ADC_GetOverSamplingScope
6086:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
6087:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
6088:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_DISABLE
6089:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_GRP_REGULAR_CONTINUED
6090:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_GRP_REGULAR_RESUMED
6091:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_GRP_INJECTED
6092:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_GRP_INJ_REG_RESUMED
6093:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
6094:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_GetOverSamplingScope(ADC_TypeDef *ADCx)
6095:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** {
6096:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   return (uint32_t)(READ_BIT(ADCx->CFGR2, ADC_CFGR2_ROVSE | ADC_CFGR2_JOVSE | ADC_CFGR2_ROVSM));
6097:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** }
ARM GAS  /tmp/ccZ0TYFG.s 			page 125


6098:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
6099:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /**
6100:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @brief  Set ADC oversampling discontinuous mode (triggered mode)
6101:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         on the selected ADC group.
6102:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @note   Number of oversampled conversions are done either in:
6103:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         - continuous mode (all conversions of oversampling ratio
6104:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *           are done from 1 trigger)
6105:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         - discontinuous mode (each conversion of oversampling ratio
6106:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *           needs a trigger)
6107:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @note   On this STM32 serie, setting of this feature is conditioned to
6108:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         ADC state:
6109:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         ADC must be disabled or enabled without conversion on going
6110:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         on group regular.
6111:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @note   On this STM32 serie, oversampling discontinuous mode
6112:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         (triggered mode) can be used only when oversampling is
6113:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         set on group regular only and in resumed mode.
6114:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @rmtoll CFGR2    TROVS          LL_ADC_SetOverSamplingDiscont
6115:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
6116:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @param  OverSamplingDiscont This parameter can be one of the following values:
6117:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_REG_CONT
6118:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_REG_DISCONT
6119:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @retval None
6120:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
6121:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_SetOverSamplingDiscont(ADC_TypeDef *ADCx, uint32_t OverSamplingDiscont)
6122:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** {
6123:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   MODIFY_REG(ADCx->CFGR2, ADC_CFGR2_TROVS, OverSamplingDiscont);
6124:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** }
6125:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
6126:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /**
6127:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @brief  Get ADC oversampling discontinuous mode (triggered mode)
6128:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         on the selected ADC group.
6129:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @note   Number of oversampled conversions are done either in:
6130:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         - continuous mode (all conversions of oversampling ratio
6131:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *           are done from 1 trigger)
6132:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         - discontinuous mode (each conversion of oversampling ratio
6133:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *           needs a trigger)
6134:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @rmtoll CFGR2    TROVS          LL_ADC_GetOverSamplingDiscont
6135:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
6136:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
6137:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_REG_CONT
6138:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_REG_DISCONT
6139:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
6140:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_GetOverSamplingDiscont(ADC_TypeDef *ADCx)
6141:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** {
6142:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   return (uint32_t)(READ_BIT(ADCx->CFGR2, ADC_CFGR2_TROVS));
6143:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** }
6144:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
6145:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /**
6146:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @brief  Set ADC oversampling
6147:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         (impacting both ADC groups regular and injected)
6148:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @note   This function set the 2 items of oversampling configuration:
6149:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         - ratio
6150:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         - shift
6151:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @note   On this STM32 serie, setting of this feature is conditioned to
6152:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         ADC state:
6153:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         ADC must be disabled or enabled without conversion on going
6154:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         on either groups regular or injected.
ARM GAS  /tmp/ccZ0TYFG.s 			page 126


6155:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @rmtoll CFGR2    OVSS           LL_ADC_ConfigOverSamplingRatioShift\n
6156:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         CFGR2    OVSR           LL_ADC_ConfigOverSamplingRatioShift
6157:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
6158:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @param  Ratio This parameter can be one of the following values:
6159:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_RATIO_2
6160:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_RATIO_4
6161:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_RATIO_8
6162:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_RATIO_16
6163:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_RATIO_32
6164:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_RATIO_64
6165:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_RATIO_128
6166:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_RATIO_256
6167:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @param  Shift This parameter can be one of the following values:
6168:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_SHIFT_NONE
6169:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_SHIFT_RIGHT_1
6170:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_SHIFT_RIGHT_2
6171:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_SHIFT_RIGHT_3
6172:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_SHIFT_RIGHT_4
6173:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_SHIFT_RIGHT_5
6174:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_SHIFT_RIGHT_6
6175:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_SHIFT_RIGHT_7
6176:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_SHIFT_RIGHT_8
6177:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @retval None
6178:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
6179:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_ConfigOverSamplingRatioShift(ADC_TypeDef *ADCx, uint32_t Ratio, uint32_
6180:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** {
6181:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_OVSS | ADC_CFGR2_OVSR), (Shift | Ratio));
6182:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** }
6183:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
6184:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /**
6185:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @brief  Get ADC oversampling ratio
6186:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *        (impacting both ADC groups regular and injected)
6187:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @rmtoll CFGR2    OVSR           LL_ADC_GetOverSamplingRatio
6188:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
6189:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @retval Ratio This parameter can be one of the following values:
6190:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_RATIO_2
6191:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_RATIO_4
6192:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_RATIO_8
6193:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_RATIO_16
6194:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_RATIO_32
6195:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_RATIO_64
6196:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_RATIO_128
6197:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_RATIO_256
6198:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
6199:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_GetOverSamplingRatio(ADC_TypeDef *ADCx)
6200:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** {
6201:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   return (uint32_t)(READ_BIT(ADCx->CFGR2, ADC_CFGR2_OVSR));
6202:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** }
6203:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
6204:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /**
6205:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @brief  Get ADC oversampling shift
6206:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *        (impacting both ADC groups regular and injected)
6207:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @rmtoll CFGR2    OVSS           LL_ADC_GetOverSamplingShift
6208:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
6209:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @retval Shift This parameter can be one of the following values:
6210:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_SHIFT_NONE
6211:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_SHIFT_RIGHT_1
ARM GAS  /tmp/ccZ0TYFG.s 			page 127


6212:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_SHIFT_RIGHT_2
6213:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_SHIFT_RIGHT_3
6214:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_SHIFT_RIGHT_4
6215:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_SHIFT_RIGHT_5
6216:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_SHIFT_RIGHT_6
6217:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_SHIFT_RIGHT_7
6218:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_SHIFT_RIGHT_8
6219:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
6220:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_GetOverSamplingShift(ADC_TypeDef *ADCx)
6221:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** {
6222:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   return (uint32_t)(READ_BIT(ADCx->CFGR2, ADC_CFGR2_OVSS));
6223:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** }
6224:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
6225:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /**
6226:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @}
6227:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
6228:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
6229:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /** @defgroup ADC_LL_EF_Configuration_ADC_Multimode Configuration of ADC hierarchical scope: multim
6230:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @{
6231:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
6232:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
6233:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #if defined(ADC_MULTIMODE_SUPPORT)
6234:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /**
6235:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @brief  Set ADC multimode configuration to operate in independent mode
6236:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         or multimode (for devices with several ADC instances).
6237:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @note   If multimode configuration: the selected ADC instance is
6238:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         either master or slave depending on hardware.
6239:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         Refer to reference manual.
6240:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @note   On this STM32 serie, setting of this feature is conditioned to
6241:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         ADC state:
6242:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         All ADC instances of the ADC common group must be disabled.
6243:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         This check can be done with function @ref LL_ADC_IsEnabled() for each
6244:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         ADC instance or by using helper macro
6245:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @ref __LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE().
6246:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @rmtoll CCR      DUAL           LL_ADC_SetMultimode
6247:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @param  ADCxy_COMMON ADC common instance
6248:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         (can be set directly from CMSIS definition or by using helper macro @ref __LL_ADC_COMMO
6249:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @param  Multimode This parameter can be one of the following values:
6250:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_INDEPENDENT
6251:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIMULT
6252:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_DUAL_REG_INTERL
6253:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_DUAL_INJ_SIMULT
6254:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_DUAL_INJ_ALTERN
6255:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
6256:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
6257:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
6258:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @retval None
6259:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
6260:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_SetMultimode(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t Multimode)
6261:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** {
6262:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_DUAL, Multimode);
6263:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** }
6264:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
6265:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /**
6266:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @brief  Get ADC multimode configuration to operate in independent mode
6267:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         or multimode (for devices with several ADC instances).
6268:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @note   If multimode configuration: the selected ADC instance is
ARM GAS  /tmp/ccZ0TYFG.s 			page 128


6269:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         either master or slave depending on hardware.
6270:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         Refer to reference manual.
6271:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @rmtoll CCR      DUAL           LL_ADC_GetMultimode
6272:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @param  ADCxy_COMMON ADC common instance
6273:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         (can be set directly from CMSIS definition or by using helper macro @ref __LL_ADC_COMMO
6274:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
6275:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_INDEPENDENT
6276:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIMULT
6277:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_DUAL_REG_INTERL
6278:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_DUAL_INJ_SIMULT
6279:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_DUAL_INJ_ALTERN
6280:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
6281:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
6282:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
6283:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
6284:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
6285:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** {
 1005              		.loc 1 6285 1
 1006              		.cfi_startproc
 1007              		@ args = 0, pretend = 0, frame = 8
 1008              		@ frame_needed = 1, uses_anonymous_args = 0
 1009              		@ link register save eliminated.
 1010 0000 80B4     		push	{r7}
 1011              	.LCFI96:
 1012              		.cfi_def_cfa_offset 4
 1013              		.cfi_offset 7, -4
 1014 0002 83B0     		sub	sp, sp, #12
 1015              	.LCFI97:
 1016              		.cfi_def_cfa_offset 16
 1017 0004 00AF     		add	r7, sp, #0
 1018              	.LCFI98:
 1019              		.cfi_def_cfa_register 7
 1020 0006 7860     		str	r0, [r7, #4]
6286:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 1021              		.loc 1 6286 21
 1022 0008 7B68     		ldr	r3, [r7, #4]
 1023 000a 9B68     		ldr	r3, [r3, #8]
 1024              		.loc 1 6286 10
 1025 000c 03F01F03 		and	r3, r3, #31
6287:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** }
 1026              		.loc 1 6287 1
 1027 0010 1846     		mov	r0, r3
 1028 0012 0C37     		adds	r7, r7, #12
 1029              	.LCFI99:
 1030              		.cfi_def_cfa_offset 4
 1031 0014 BD46     		mov	sp, r7
 1032              	.LCFI100:
 1033              		.cfi_def_cfa_register 13
 1034              		@ sp needed
 1035 0016 5DF8047B 		ldr	r7, [sp], #4
 1036              	.LCFI101:
 1037              		.cfi_restore 7
 1038              		.cfi_def_cfa_offset 0
 1039 001a 7047     		bx	lr
 1040              		.cfi_endproc
 1041              	.LFE210:
 1043              		.section	.text.LL_ADC_GetMultiDMATransfer,"ax",%progbits
ARM GAS  /tmp/ccZ0TYFG.s 			page 129


 1044              		.align	1
 1045              		.syntax unified
 1046              		.thumb
 1047              		.thumb_func
 1048              		.fpu fpv4-sp-d16
 1050              	LL_ADC_GetMultiDMATransfer:
 1051              	.LFB212:
6288:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
6289:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /**
6290:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @brief  Set ADC multimode conversion data transfer: no transfer
6291:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         or transfer by DMA.
6292:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @note   If ADC multimode transfer by DMA is not selected:
6293:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         each ADC uses its own DMA channel, with its individual
6294:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         DMA transfer settings.
6295:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         If ADC multimode transfer by DMA is selected:
6296:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         One DMA channel is used for both ADC (DMA of ADC master)
6297:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         Specifies the DMA requests mode:
6298:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         - Limited mode (One shot mode): DMA transfer requests are stopped
6299:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *           when number of DMA data transfers (number of
6300:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *           ADC conversions) is reached.
6301:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *           This ADC mode is intended to be used with DMA mode non-circular.
6302:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         - Unlimited mode: DMA transfer requests are unlimited,
6303:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *           whatever number of DMA data transfers (number of
6304:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *           ADC conversions).
6305:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *           This ADC mode is intended to be used with DMA mode circular.
6306:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @note   If ADC DMA requests mode is set to unlimited and DMA is set to
6307:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         mode non-circular:
6308:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         when DMA transfers size will be reached, DMA will stop transfers of
6309:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         ADC conversions data ADC will raise an overrun error
6310:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         (overrun flag and interruption if enabled).
6311:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @note   How to retrieve multimode conversion data:
6312:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         Whatever multimode transfer by DMA setting: using function
6313:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @ref LL_ADC_REG_ReadMultiConversionData32().
6314:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         If ADC multimode transfer by DMA is selected: conversion data
6315:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         is a raw data with ADC master and slave concatenated.
6316:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         A macro is available to get the conversion data of
6317:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         ADC master or ADC slave: see helper macro
6318:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @ref __LL_ADC_MULTI_CONV_DATA_MASTER_SLAVE().
6319:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @note   On this STM32 serie, setting of this feature is conditioned to
6320:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         ADC state:
6321:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         All ADC instances of the ADC common group must be disabled
6322:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         or enabled without conversion on going on group regular.
6323:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @rmtoll CCR      MDMA           LL_ADC_SetMultiDMATransfer\n
6324:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         CCR      DMACFG         LL_ADC_SetMultiDMATransfer
6325:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @param  ADCxy_COMMON ADC common instance
6326:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         (can be set directly from CMSIS definition or by using helper macro @ref __LL_ADC_COMMO
6327:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @param  MultiDMATransfer This parameter can be one of the following values:
6328:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
6329:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES12_10B
6330:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
6331:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
6332:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
6333:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @retval None
6334:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
6335:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_SetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t MultiDMA
6336:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** {
6337:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG, MultiDMATransfer);
ARM GAS  /tmp/ccZ0TYFG.s 			page 130


6338:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** }
6339:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
6340:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /**
6341:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @brief  Get ADC multimode conversion data transfer: no transfer
6342:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         or transfer by DMA.
6343:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @note   If ADC multimode transfer by DMA is not selected:
6344:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         each ADC uses its own DMA channel, with its individual
6345:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         DMA transfer settings.
6346:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         If ADC multimode transfer by DMA is selected:
6347:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         One DMA channel is used for both ADC (DMA of ADC master)
6348:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         Specifies the DMA requests mode:
6349:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         - Limited mode (One shot mode): DMA transfer requests are stopped
6350:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *           when number of DMA data transfers (number of
6351:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *           ADC conversions) is reached.
6352:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *           This ADC mode is intended to be used with DMA mode non-circular.
6353:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         - Unlimited mode: DMA transfer requests are unlimited,
6354:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *           whatever number of DMA data transfers (number of
6355:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *           ADC conversions).
6356:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *           This ADC mode is intended to be used with DMA mode circular.
6357:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @note   If ADC DMA requests mode is set to unlimited and DMA is set to
6358:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         mode non-circular:
6359:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         when DMA transfers size will be reached, DMA will stop transfers of
6360:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         ADC conversions data ADC will raise an overrun error
6361:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         (overrun flag and interruption if enabled).
6362:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @note   How to retrieve multimode conversion data:
6363:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         Whatever multimode transfer by DMA setting: using function
6364:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @ref LL_ADC_REG_ReadMultiConversionData32().
6365:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         If ADC multimode transfer by DMA is selected: conversion data
6366:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         is a raw data with ADC master and slave concatenated.
6367:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         A macro is available to get the conversion data of
6368:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         ADC master or ADC slave: see helper macro
6369:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @ref __LL_ADC_MULTI_CONV_DATA_MASTER_SLAVE().
6370:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @rmtoll CCR      MDMA           LL_ADC_GetMultiDMATransfer\n
6371:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         CCR      DMACFG         LL_ADC_GetMultiDMATransfer
6372:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @param  ADCxy_COMMON ADC common instance
6373:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         (can be set directly from CMSIS definition or by using helper macro @ref __LL_ADC_COMMO
6374:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
6375:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
6376:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES12_10B
6377:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
6378:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
6379:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
6380:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
6381:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
6382:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** {
 1052              		.loc 1 6382 1
 1053              		.cfi_startproc
 1054              		@ args = 0, pretend = 0, frame = 8
 1055              		@ frame_needed = 1, uses_anonymous_args = 0
 1056              		@ link register save eliminated.
 1057 0000 80B4     		push	{r7}
 1058              	.LCFI102:
 1059              		.cfi_def_cfa_offset 4
 1060              		.cfi_offset 7, -4
 1061 0002 83B0     		sub	sp, sp, #12
 1062              	.LCFI103:
 1063              		.cfi_def_cfa_offset 16
ARM GAS  /tmp/ccZ0TYFG.s 			page 131


 1064 0004 00AF     		add	r7, sp, #0
 1065              	.LCFI104:
 1066              		.cfi_def_cfa_register 7
 1067 0006 7860     		str	r0, [r7, #4]
6383:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 1068              		.loc 1 6383 21
 1069 0008 7B68     		ldr	r3, [r7, #4]
 1070 000a 9B68     		ldr	r3, [r3, #8]
 1071              		.loc 1 6383 10
 1072 000c 03F46043 		and	r3, r3, #57344
6384:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** }
 1073              		.loc 1 6384 1
 1074 0010 1846     		mov	r0, r3
 1075 0012 0C37     		adds	r7, r7, #12
 1076              	.LCFI105:
 1077              		.cfi_def_cfa_offset 4
 1078 0014 BD46     		mov	sp, r7
 1079              	.LCFI106:
 1080              		.cfi_def_cfa_register 13
 1081              		@ sp needed
 1082 0016 5DF8047B 		ldr	r7, [sp], #4
 1083              	.LCFI107:
 1084              		.cfi_restore 7
 1085              		.cfi_def_cfa_offset 0
 1086 001a 7047     		bx	lr
 1087              		.cfi_endproc
 1088              	.LFE212:
 1090              		.section	.text.LL_ADC_DisableDeepPowerDown,"ax",%progbits
 1091              		.align	1
 1092              		.syntax unified
 1093              		.thumb
 1094              		.thumb_func
 1095              		.fpu fpv4-sp-d16
 1097              	LL_ADC_DisableDeepPowerDown:
 1098              	.LFB216:
6385:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
6386:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /**
6387:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @brief  Set ADC multimode delay between 2 sampling phases.
6388:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @note   The sampling delay range depends on ADC resolution:
6389:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         - ADC resolution 12 bits can have maximum delay of 12 cycles.
6390:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         - ADC resolution 10 bits can have maximum delay of 10 cycles.
6391:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         - ADC resolution  8 bits can have maximum delay of  8 cycles.
6392:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         - ADC resolution  6 bits can have maximum delay of  6 cycles.
6393:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @note   On this STM32 serie, setting of this feature is conditioned to
6394:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         ADC state:
6395:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         All ADC instances of the ADC common group must be disabled.
6396:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         This check can be done with function @ref LL_ADC_IsEnabled() for each
6397:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         ADC instance or by using helper macro helper macro
6398:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @ref __LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE().
6399:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @rmtoll CCR      DELAY          LL_ADC_SetMultiTwoSamplingDelay
6400:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @param  ADCxy_COMMON ADC common instance
6401:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         (can be set directly from CMSIS definition or by using helper macro @ref __LL_ADC_COMMO
6402:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @param  MultiTwoSamplingDelay This parameter can be one of the following values:
6403:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_TWOSMP_DELAY_1CYCLE
6404:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_TWOSMP_DELAY_2CYCLES
6405:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_TWOSMP_DELAY_3CYCLES
6406:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_TWOSMP_DELAY_4CYCLES
ARM GAS  /tmp/ccZ0TYFG.s 			page 132


6407:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_TWOSMP_DELAY_5CYCLES
6408:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_TWOSMP_DELAY_6CYCLES  (1)
6409:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_TWOSMP_DELAY_7CYCLES  (1)
6410:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_TWOSMP_DELAY_8CYCLES  (2)
6411:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_TWOSMP_DELAY_9CYCLES  (2)
6412:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_TWOSMP_DELAY_10CYCLES (2)
6413:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_TWOSMP_DELAY_11CYCLES (3)
6414:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_TWOSMP_DELAY_12CYCLES (3)
6415:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *
6416:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         (1) Parameter available only if ADC resolution is 12, 10 or 8 bits.\n
6417:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         (2) Parameter available only if ADC resolution is 12 or 10 bits.\n
6418:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         (3) Parameter available only if ADC resolution is 12 bits.
6419:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @retval None
6420:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
6421:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_SetMultiTwoSamplingDelay(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t Mul
6422:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** {
6423:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_DELAY, MultiTwoSamplingDelay);
6424:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** }
6425:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
6426:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /**
6427:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @brief  Get ADC multimode delay between 2 sampling phases.
6428:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @rmtoll CCR      DELAY          LL_ADC_GetMultiTwoSamplingDelay
6429:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @param  ADCxy_COMMON ADC common instance
6430:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         (can be set directly from CMSIS definition or by using helper macro @ref __LL_ADC_COMMO
6431:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
6432:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_TWOSMP_DELAY_1CYCLE
6433:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_TWOSMP_DELAY_2CYCLES
6434:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_TWOSMP_DELAY_3CYCLES
6435:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_TWOSMP_DELAY_4CYCLES
6436:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_TWOSMP_DELAY_5CYCLES
6437:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_TWOSMP_DELAY_6CYCLES  (1)
6438:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_TWOSMP_DELAY_7CYCLES  (1)
6439:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_TWOSMP_DELAY_8CYCLES  (2)
6440:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_TWOSMP_DELAY_9CYCLES  (2)
6441:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_TWOSMP_DELAY_10CYCLES (2)
6442:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_TWOSMP_DELAY_11CYCLES (3)
6443:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_TWOSMP_DELAY_12CYCLES (3)
6444:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *
6445:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         (1) Parameter available only if ADC resolution is 12, 10 or 8 bits.\n
6446:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         (2) Parameter available only if ADC resolution is 12 or 10 bits.\n
6447:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         (3) Parameter available only if ADC resolution is 12 bits.
6448:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
6449:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_GetMultiTwoSamplingDelay(ADC_Common_TypeDef *ADCxy_COMMON)
6450:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** {
6451:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DELAY));
6452:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** }
6453:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #endif /* ADC_MULTIMODE_SUPPORT */
6454:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
6455:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /**
6456:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @}
6457:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
6458:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /** @defgroup ADC_LL_EF_Operation_ADC_Instance Operation on ADC hierarchical scope: ADC instance
6459:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @{
6460:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
6461:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
6462:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /**
6463:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @brief  Put ADC instance in deep power down state.
ARM GAS  /tmp/ccZ0TYFG.s 			page 133


6464:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @note   In case of ADC calibration necessary: When ADC is in deep-power-down
6465:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         state, the internal analog calibration is lost. After exiting from
6466:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         deep power down, calibration must be relaunched or calibration factor
6467:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         (preliminarily saved) must be set back into calibration register.
6468:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @note   On this STM32 serie, setting of this feature is conditioned to
6469:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         ADC state:
6470:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         ADC must be ADC disabled.
6471:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @rmtoll CR       DEEPPWD        LL_ADC_EnableDeepPowerDown
6472:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
6473:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @retval None
6474:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
6475:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_EnableDeepPowerDown(ADC_TypeDef *ADCx)
6476:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** {
6477:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   /* Note: Write register with some additional bits forced to state reset     */
6478:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   /*       instead of modifying only the selected bit for this function,      */
6479:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   /*       to not interfere with bits with HW property "rs".                  */
6480:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   MODIFY_REG(ADCx->CR,
6481:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****              ADC_CR_BITS_PROPERTY_RS,
6482:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****              ADC_CR_DEEPPWD);
6483:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** }
6484:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
6485:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /**
6486:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @brief  Disable ADC deep power down mode.
6487:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @note   In case of ADC calibration necessary: When ADC is in deep-power-down
6488:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         state, the internal analog calibration is lost. After exiting from
6489:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         deep power down, calibration must be relaunched or calibration factor
6490:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         (preliminarily saved) must be set back into calibration register.
6491:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @note   On this STM32 serie, setting of this feature is conditioned to
6492:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         ADC state:
6493:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         ADC must be ADC disabled.
6494:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
6495:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
6496:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @retval None
6497:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
6498:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
6499:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** {
 1099              		.loc 1 6499 1
 1100              		.cfi_startproc
 1101              		@ args = 0, pretend = 0, frame = 8
 1102              		@ frame_needed = 1, uses_anonymous_args = 0
 1103              		@ link register save eliminated.
 1104 0000 80B4     		push	{r7}
 1105              	.LCFI108:
 1106              		.cfi_def_cfa_offset 4
 1107              		.cfi_offset 7, -4
 1108 0002 83B0     		sub	sp, sp, #12
 1109              	.LCFI109:
 1110              		.cfi_def_cfa_offset 16
 1111 0004 00AF     		add	r7, sp, #0
 1112              	.LCFI110:
 1113              		.cfi_def_cfa_register 7
 1114 0006 7860     		str	r0, [r7, #4]
6500:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   /* Note: Write register with some additional bits forced to state reset     */
6501:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   /*       instead of modifying only the selected bit for this function,      */
6502:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   /*       to not interfere with bits with HW property "rs".                  */
6503:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 1115              		.loc 1 6503 3
ARM GAS  /tmp/ccZ0TYFG.s 			page 134


 1116 0008 7B68     		ldr	r3, [r7, #4]
 1117 000a 9B68     		ldr	r3, [r3, #8]
 1118 000c 23F02043 		bic	r3, r3, #-1610612736
 1119 0010 23F03F03 		bic	r3, r3, #63
 1120 0014 7A68     		ldr	r2, [r7, #4]
 1121 0016 9360     		str	r3, [r2, #8]
6504:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** }
 1122              		.loc 1 6504 1
 1123 0018 00BF     		nop
 1124 001a 0C37     		adds	r7, r7, #12
 1125              	.LCFI111:
 1126              		.cfi_def_cfa_offset 4
 1127 001c BD46     		mov	sp, r7
 1128              	.LCFI112:
 1129              		.cfi_def_cfa_register 13
 1130              		@ sp needed
 1131 001e 5DF8047B 		ldr	r7, [sp], #4
 1132              	.LCFI113:
 1133              		.cfi_restore 7
 1134              		.cfi_def_cfa_offset 0
 1135 0022 7047     		bx	lr
 1136              		.cfi_endproc
 1137              	.LFE216:
 1139              		.section	.text.LL_ADC_IsDeepPowerDownEnabled,"ax",%progbits
 1140              		.align	1
 1141              		.syntax unified
 1142              		.thumb
 1143              		.thumb_func
 1144              		.fpu fpv4-sp-d16
 1146              	LL_ADC_IsDeepPowerDownEnabled:
 1147              	.LFB217:
6505:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
6506:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /**
6507:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @brief  Get the selected ADC instance deep power down state.
6508:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
6509:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
6510:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @retval 0: deep power down is disabled, 1: deep power down is enabled.
6511:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
6512:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
6513:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** {
 1148              		.loc 1 6513 1
 1149              		.cfi_startproc
 1150              		@ args = 0, pretend = 0, frame = 8
 1151              		@ frame_needed = 1, uses_anonymous_args = 0
 1152              		@ link register save eliminated.
 1153 0000 80B4     		push	{r7}
 1154              	.LCFI114:
 1155              		.cfi_def_cfa_offset 4
 1156              		.cfi_offset 7, -4
 1157 0002 83B0     		sub	sp, sp, #12
 1158              	.LCFI115:
 1159              		.cfi_def_cfa_offset 16
 1160 0004 00AF     		add	r7, sp, #0
 1161              	.LCFI116:
 1162              		.cfi_def_cfa_register 7
 1163 0006 7860     		str	r0, [r7, #4]
6514:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
ARM GAS  /tmp/ccZ0TYFG.s 			page 135


 1164              		.loc 1 6514 12
 1165 0008 7B68     		ldr	r3, [r7, #4]
 1166 000a 9B68     		ldr	r3, [r3, #8]
 1167 000c 03F00053 		and	r3, r3, #536870912
 1168              		.loc 1 6514 74
 1169 0010 B3F1005F 		cmp	r3, #536870912
 1170 0014 01D1     		bne	.L35
 1171              		.loc 1 6514 74 is_stmt 0 discriminator 1
 1172 0016 0123     		movs	r3, #1
 1173 0018 00E0     		b	.L37
 1174              	.L35:
 1175              		.loc 1 6514 74 discriminator 2
 1176 001a 0023     		movs	r3, #0
 1177              	.L37:
6515:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** }
 1178              		.loc 1 6515 1 is_stmt 1 discriminator 5
 1179 001c 1846     		mov	r0, r3
 1180 001e 0C37     		adds	r7, r7, #12
 1181              	.LCFI117:
 1182              		.cfi_def_cfa_offset 4
 1183 0020 BD46     		mov	sp, r7
 1184              	.LCFI118:
 1185              		.cfi_def_cfa_register 13
 1186              		@ sp needed
 1187 0022 5DF8047B 		ldr	r7, [sp], #4
 1188              	.LCFI119:
 1189              		.cfi_restore 7
 1190              		.cfi_def_cfa_offset 0
 1191 0026 7047     		bx	lr
 1192              		.cfi_endproc
 1193              	.LFE217:
 1195              		.section	.text.LL_ADC_EnableInternalRegulator,"ax",%progbits
 1196              		.align	1
 1197              		.syntax unified
 1198              		.thumb
 1199              		.thumb_func
 1200              		.fpu fpv4-sp-d16
 1202              	LL_ADC_EnableInternalRegulator:
 1203              	.LFB218:
6516:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
6517:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /**
6518:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @brief  Enable ADC instance internal voltage regulator.
6519:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @note   On this STM32 serie, after ADC internal voltage regulator enable,
6520:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         a delay for ADC internal voltage regulator stabilization
6521:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         is required before performing a ADC calibration or ADC enable.
6522:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         Refer to device datasheet, parameter tADCVREG_STUP.
6523:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         Refer to literal @ref LL_ADC_DELAY_INTERNAL_REGUL_STAB_US.
6524:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @note   On this STM32 serie, setting of this feature is conditioned to
6525:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         ADC state:
6526:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         ADC must be ADC disabled.
6527:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
6528:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
6529:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @retval None
6530:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
6531:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
6532:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** {
 1204              		.loc 1 6532 1
ARM GAS  /tmp/ccZ0TYFG.s 			page 136


 1205              		.cfi_startproc
 1206              		@ args = 0, pretend = 0, frame = 8
 1207              		@ frame_needed = 1, uses_anonymous_args = 0
 1208              		@ link register save eliminated.
 1209 0000 80B4     		push	{r7}
 1210              	.LCFI120:
 1211              		.cfi_def_cfa_offset 4
 1212              		.cfi_offset 7, -4
 1213 0002 83B0     		sub	sp, sp, #12
 1214              	.LCFI121:
 1215              		.cfi_def_cfa_offset 16
 1216 0004 00AF     		add	r7, sp, #0
 1217              	.LCFI122:
 1218              		.cfi_def_cfa_register 7
 1219 0006 7860     		str	r0, [r7, #4]
6533:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   /* Note: Write register with some additional bits forced to state reset     */
6534:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   /*       instead of modifying only the selected bit for this function,      */
6535:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   /*       to not interfere with bits with HW property "rs".                  */
6536:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   MODIFY_REG(ADCx->CR,
 1220              		.loc 1 6536 3
 1221 0008 7B68     		ldr	r3, [r7, #4]
 1222 000a 9B68     		ldr	r3, [r3, #8]
 1223 000c 23F01043 		bic	r3, r3, #-1879048192
 1224 0010 23F03F03 		bic	r3, r3, #63
 1225 0014 43F08052 		orr	r2, r3, #268435456
 1226 0018 7B68     		ldr	r3, [r7, #4]
 1227 001a 9A60     		str	r2, [r3, #8]
6537:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****              ADC_CR_BITS_PROPERTY_RS,
6538:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****              ADC_CR_ADVREGEN);
6539:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** }
 1228              		.loc 1 6539 1
 1229 001c 00BF     		nop
 1230 001e 0C37     		adds	r7, r7, #12
 1231              	.LCFI123:
 1232              		.cfi_def_cfa_offset 4
 1233 0020 BD46     		mov	sp, r7
 1234              	.LCFI124:
 1235              		.cfi_def_cfa_register 13
 1236              		@ sp needed
 1237 0022 5DF8047B 		ldr	r7, [sp], #4
 1238              	.LCFI125:
 1239              		.cfi_restore 7
 1240              		.cfi_def_cfa_offset 0
 1241 0026 7047     		bx	lr
 1242              		.cfi_endproc
 1243              	.LFE218:
 1245              		.section	.text.LL_ADC_IsInternalRegulatorEnabled,"ax",%progbits
 1246              		.align	1
 1247              		.syntax unified
 1248              		.thumb
 1249              		.thumb_func
 1250              		.fpu fpv4-sp-d16
 1252              	LL_ADC_IsInternalRegulatorEnabled:
 1253              	.LFB220:
6540:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
6541:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /**
6542:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @brief  Disable ADC internal voltage regulator.
ARM GAS  /tmp/ccZ0TYFG.s 			page 137


6543:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @note   On this STM32 serie, setting of this feature is conditioned to
6544:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         ADC state:
6545:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         ADC must be ADC disabled.
6546:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @rmtoll CR       ADVREGEN       LL_ADC_DisableInternalRegulator
6547:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
6548:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @retval None
6549:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
6550:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_DisableInternalRegulator(ADC_TypeDef *ADCx)
6551:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** {
6552:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   CLEAR_BIT(ADCx->CR, (ADC_CR_ADVREGEN | ADC_CR_BITS_PROPERTY_RS));
6553:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** }
6554:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
6555:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /**
6556:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @brief  Get the selected ADC instance internal voltage regulator state.
6557:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
6558:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
6559:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
6560:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
6561:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
6562:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** {
 1254              		.loc 1 6562 1
 1255              		.cfi_startproc
 1256              		@ args = 0, pretend = 0, frame = 8
 1257              		@ frame_needed = 1, uses_anonymous_args = 0
 1258              		@ link register save eliminated.
 1259 0000 80B4     		push	{r7}
 1260              	.LCFI126:
 1261              		.cfi_def_cfa_offset 4
 1262              		.cfi_offset 7, -4
 1263 0002 83B0     		sub	sp, sp, #12
 1264              	.LCFI127:
 1265              		.cfi_def_cfa_offset 16
 1266 0004 00AF     		add	r7, sp, #0
 1267              	.LCFI128:
 1268              		.cfi_def_cfa_register 7
 1269 0006 7860     		str	r0, [r7, #4]
6563:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 1270              		.loc 1 6563 12
 1271 0008 7B68     		ldr	r3, [r7, #4]
 1272 000a 9B68     		ldr	r3, [r3, #8]
 1273 000c 03F08053 		and	r3, r3, #268435456
 1274              		.loc 1 6563 76
 1275 0010 B3F1805F 		cmp	r3, #268435456
 1276 0014 01D1     		bne	.L40
 1277              		.loc 1 6563 76 is_stmt 0 discriminator 1
 1278 0016 0123     		movs	r3, #1
 1279 0018 00E0     		b	.L42
 1280              	.L40:
 1281              		.loc 1 6563 76 discriminator 2
 1282 001a 0023     		movs	r3, #0
 1283              	.L42:
6564:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** }
 1284              		.loc 1 6564 1 is_stmt 1 discriminator 5
 1285 001c 1846     		mov	r0, r3
 1286 001e 0C37     		adds	r7, r7, #12
 1287              	.LCFI129:
 1288              		.cfi_def_cfa_offset 4
ARM GAS  /tmp/ccZ0TYFG.s 			page 138


 1289 0020 BD46     		mov	sp, r7
 1290              	.LCFI130:
 1291              		.cfi_def_cfa_register 13
 1292              		@ sp needed
 1293 0022 5DF8047B 		ldr	r7, [sp], #4
 1294              	.LCFI131:
 1295              		.cfi_restore 7
 1296              		.cfi_def_cfa_offset 0
 1297 0026 7047     		bx	lr
 1298              		.cfi_endproc
 1299              	.LFE220:
 1301              		.section	.text.LL_ADC_Enable,"ax",%progbits
 1302              		.align	1
 1303              		.syntax unified
 1304              		.thumb
 1305              		.thumb_func
 1306              		.fpu fpv4-sp-d16
 1308              	LL_ADC_Enable:
 1309              	.LFB221:
6565:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
6566:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /**
6567:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @brief  Enable the selected ADC instance.
6568:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @note   On this STM32 serie, after ADC enable, a delay for
6569:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         ADC internal analog stabilization is required before performing a
6570:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         ADC conversion start.
6571:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         Refer to device datasheet, parameter tSTAB.
6572:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @note   On this STM32 serie, flag LL_ADC_FLAG_ADRDY is raised when the ADC
6573:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         is enabled and when conversion clock is active.
6574:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         (not only core clock: this ADC has a dual clock domain)
6575:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @note   On this STM32 serie, setting of this feature is conditioned to
6576:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         ADC state:
6577:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         ADC must be ADC disabled and ADC internal voltage regulator enabled.
6578:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @rmtoll CR       ADEN           LL_ADC_Enable
6579:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
6580:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @retval None
6581:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
6582:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
6583:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** {
 1310              		.loc 1 6583 1
 1311              		.cfi_startproc
 1312              		@ args = 0, pretend = 0, frame = 8
 1313              		@ frame_needed = 1, uses_anonymous_args = 0
 1314              		@ link register save eliminated.
 1315 0000 80B4     		push	{r7}
 1316              	.LCFI132:
 1317              		.cfi_def_cfa_offset 4
 1318              		.cfi_offset 7, -4
 1319 0002 83B0     		sub	sp, sp, #12
 1320              	.LCFI133:
 1321              		.cfi_def_cfa_offset 16
 1322 0004 00AF     		add	r7, sp, #0
 1323              	.LCFI134:
 1324              		.cfi_def_cfa_register 7
 1325 0006 7860     		str	r0, [r7, #4]
6584:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   /* Note: Write register with some additional bits forced to state reset     */
6585:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   /*       instead of modifying only the selected bit for this function,      */
6586:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   /*       to not interfere with bits with HW property "rs".                  */
ARM GAS  /tmp/ccZ0TYFG.s 			page 139


6587:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   MODIFY_REG(ADCx->CR,
 1326              		.loc 1 6587 3
 1327 0008 7B68     		ldr	r3, [r7, #4]
 1328 000a 9B68     		ldr	r3, [r3, #8]
 1329 000c 23F00043 		bic	r3, r3, #-2147483648
 1330 0010 23F03F03 		bic	r3, r3, #63
 1331 0014 43F00102 		orr	r2, r3, #1
 1332 0018 7B68     		ldr	r3, [r7, #4]
 1333 001a 9A60     		str	r2, [r3, #8]
6588:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****              ADC_CR_BITS_PROPERTY_RS,
6589:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****              ADC_CR_ADEN);
6590:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** }
 1334              		.loc 1 6590 1
 1335 001c 00BF     		nop
 1336 001e 0C37     		adds	r7, r7, #12
 1337              	.LCFI135:
 1338              		.cfi_def_cfa_offset 4
 1339 0020 BD46     		mov	sp, r7
 1340              	.LCFI136:
 1341              		.cfi_def_cfa_register 13
 1342              		@ sp needed
 1343 0022 5DF8047B 		ldr	r7, [sp], #4
 1344              	.LCFI137:
 1345              		.cfi_restore 7
 1346              		.cfi_def_cfa_offset 0
 1347 0026 7047     		bx	lr
 1348              		.cfi_endproc
 1349              	.LFE221:
 1351              		.section	.text.LL_ADC_Disable,"ax",%progbits
 1352              		.align	1
 1353              		.syntax unified
 1354              		.thumb
 1355              		.thumb_func
 1356              		.fpu fpv4-sp-d16
 1358              	LL_ADC_Disable:
 1359              	.LFB222:
6591:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
6592:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /**
6593:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @brief  Disable the selected ADC instance.
6594:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @note   On this STM32 serie, setting of this feature is conditioned to
6595:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         ADC state:
6596:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         ADC must be not disabled. Must be enabled without conversion on going
6597:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         on either groups regular or injected.
6598:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @rmtoll CR       ADDIS          LL_ADC_Disable
6599:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
6600:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @retval None
6601:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
6602:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
6603:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** {
 1360              		.loc 1 6603 1
 1361              		.cfi_startproc
 1362              		@ args = 0, pretend = 0, frame = 8
 1363              		@ frame_needed = 1, uses_anonymous_args = 0
 1364              		@ link register save eliminated.
 1365 0000 80B4     		push	{r7}
 1366              	.LCFI138:
 1367              		.cfi_def_cfa_offset 4
ARM GAS  /tmp/ccZ0TYFG.s 			page 140


 1368              		.cfi_offset 7, -4
 1369 0002 83B0     		sub	sp, sp, #12
 1370              	.LCFI139:
 1371              		.cfi_def_cfa_offset 16
 1372 0004 00AF     		add	r7, sp, #0
 1373              	.LCFI140:
 1374              		.cfi_def_cfa_register 7
 1375 0006 7860     		str	r0, [r7, #4]
6604:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   /* Note: Write register with some additional bits forced to state reset     */
6605:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   /*       instead of modifying only the selected bit for this function,      */
6606:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   /*       to not interfere with bits with HW property "rs".                  */
6607:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   MODIFY_REG(ADCx->CR,
 1376              		.loc 1 6607 3
 1377 0008 7B68     		ldr	r3, [r7, #4]
 1378 000a 9B68     		ldr	r3, [r3, #8]
 1379 000c 23F00043 		bic	r3, r3, #-2147483648
 1380 0010 23F03F03 		bic	r3, r3, #63
 1381 0014 43F00202 		orr	r2, r3, #2
 1382 0018 7B68     		ldr	r3, [r7, #4]
 1383 001a 9A60     		str	r2, [r3, #8]
6608:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****              ADC_CR_BITS_PROPERTY_RS,
6609:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****              ADC_CR_ADDIS);
6610:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** }
 1384              		.loc 1 6610 1
 1385 001c 00BF     		nop
 1386 001e 0C37     		adds	r7, r7, #12
 1387              	.LCFI141:
 1388              		.cfi_def_cfa_offset 4
 1389 0020 BD46     		mov	sp, r7
 1390              	.LCFI142:
 1391              		.cfi_def_cfa_register 13
 1392              		@ sp needed
 1393 0022 5DF8047B 		ldr	r7, [sp], #4
 1394              	.LCFI143:
 1395              		.cfi_restore 7
 1396              		.cfi_def_cfa_offset 0
 1397 0026 7047     		bx	lr
 1398              		.cfi_endproc
 1399              	.LFE222:
 1401              		.section	.text.LL_ADC_IsEnabled,"ax",%progbits
 1402              		.align	1
 1403              		.syntax unified
 1404              		.thumb
 1405              		.thumb_func
 1406              		.fpu fpv4-sp-d16
 1408              	LL_ADC_IsEnabled:
 1409              	.LFB223:
6611:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
6612:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /**
6613:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @brief  Get the selected ADC instance enable state.
6614:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @note   On this STM32 serie, flag LL_ADC_FLAG_ADRDY is raised when the ADC
6615:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         is enabled and when conversion clock is active.
6616:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         (not only core clock: this ADC has a dual clock domain)
6617:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @rmtoll CR       ADEN           LL_ADC_IsEnabled
6618:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
6619:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @retval 0: ADC is disabled, 1: ADC is enabled.
6620:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
ARM GAS  /tmp/ccZ0TYFG.s 			page 141


6621:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
6622:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** {
 1410              		.loc 1 6622 1
 1411              		.cfi_startproc
 1412              		@ args = 0, pretend = 0, frame = 8
 1413              		@ frame_needed = 1, uses_anonymous_args = 0
 1414              		@ link register save eliminated.
 1415 0000 80B4     		push	{r7}
 1416              	.LCFI144:
 1417              		.cfi_def_cfa_offset 4
 1418              		.cfi_offset 7, -4
 1419 0002 83B0     		sub	sp, sp, #12
 1420              	.LCFI145:
 1421              		.cfi_def_cfa_offset 16
 1422 0004 00AF     		add	r7, sp, #0
 1423              	.LCFI146:
 1424              		.cfi_def_cfa_register 7
 1425 0006 7860     		str	r0, [r7, #4]
6623:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 1426              		.loc 1 6623 12
 1427 0008 7B68     		ldr	r3, [r7, #4]
 1428 000a 9B68     		ldr	r3, [r3, #8]
 1429 000c 03F00103 		and	r3, r3, #1
 1430              		.loc 1 6623 68
 1431 0010 012B     		cmp	r3, #1
 1432 0012 01D1     		bne	.L46
 1433              		.loc 1 6623 68 is_stmt 0 discriminator 1
 1434 0014 0123     		movs	r3, #1
 1435 0016 00E0     		b	.L48
 1436              	.L46:
 1437              		.loc 1 6623 68 discriminator 2
 1438 0018 0023     		movs	r3, #0
 1439              	.L48:
6624:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** }
 1440              		.loc 1 6624 1 is_stmt 1 discriminator 5
 1441 001a 1846     		mov	r0, r3
 1442 001c 0C37     		adds	r7, r7, #12
 1443              	.LCFI147:
 1444              		.cfi_def_cfa_offset 4
 1445 001e BD46     		mov	sp, r7
 1446              	.LCFI148:
 1447              		.cfi_def_cfa_register 13
 1448              		@ sp needed
 1449 0020 5DF8047B 		ldr	r7, [sp], #4
 1450              	.LCFI149:
 1451              		.cfi_restore 7
 1452              		.cfi_def_cfa_offset 0
 1453 0024 7047     		bx	lr
 1454              		.cfi_endproc
 1455              	.LFE223:
 1457              		.section	.text.LL_ADC_IsDisableOngoing,"ax",%progbits
 1458              		.align	1
 1459              		.syntax unified
 1460              		.thumb
 1461              		.thumb_func
 1462              		.fpu fpv4-sp-d16
 1464              	LL_ADC_IsDisableOngoing:
ARM GAS  /tmp/ccZ0TYFG.s 			page 142


 1465              	.LFB224:
6625:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
6626:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /**
6627:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @brief  Get the selected ADC instance disable state.
6628:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
6629:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
6630:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @retval 0: no ADC disable command on going.
6631:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
6632:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
6633:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** {
 1466              		.loc 1 6633 1
 1467              		.cfi_startproc
 1468              		@ args = 0, pretend = 0, frame = 8
 1469              		@ frame_needed = 1, uses_anonymous_args = 0
 1470              		@ link register save eliminated.
 1471 0000 80B4     		push	{r7}
 1472              	.LCFI150:
 1473              		.cfi_def_cfa_offset 4
 1474              		.cfi_offset 7, -4
 1475 0002 83B0     		sub	sp, sp, #12
 1476              	.LCFI151:
 1477              		.cfi_def_cfa_offset 16
 1478 0004 00AF     		add	r7, sp, #0
 1479              	.LCFI152:
 1480              		.cfi_def_cfa_register 7
 1481 0006 7860     		str	r0, [r7, #4]
6634:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 1482              		.loc 1 6634 12
 1483 0008 7B68     		ldr	r3, [r7, #4]
 1484 000a 9B68     		ldr	r3, [r3, #8]
 1485 000c 03F00203 		and	r3, r3, #2
 1486              		.loc 1 6634 70
 1487 0010 022B     		cmp	r3, #2
 1488 0012 01D1     		bne	.L50
 1489              		.loc 1 6634 70 is_stmt 0 discriminator 1
 1490 0014 0123     		movs	r3, #1
 1491 0016 00E0     		b	.L52
 1492              	.L50:
 1493              		.loc 1 6634 70 discriminator 2
 1494 0018 0023     		movs	r3, #0
 1495              	.L52:
6635:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** }
 1496              		.loc 1 6635 1 is_stmt 1 discriminator 5
 1497 001a 1846     		mov	r0, r3
 1498 001c 0C37     		adds	r7, r7, #12
 1499              	.LCFI153:
 1500              		.cfi_def_cfa_offset 4
 1501 001e BD46     		mov	sp, r7
 1502              	.LCFI154:
 1503              		.cfi_def_cfa_register 13
 1504              		@ sp needed
 1505 0020 5DF8047B 		ldr	r7, [sp], #4
 1506              	.LCFI155:
 1507              		.cfi_restore 7
 1508              		.cfi_def_cfa_offset 0
 1509 0024 7047     		bx	lr
 1510              		.cfi_endproc
ARM GAS  /tmp/ccZ0TYFG.s 			page 143


 1511              	.LFE224:
 1513              		.section	.text.LL_ADC_REG_StartConversion,"ax",%progbits
 1514              		.align	1
 1515              		.syntax unified
 1516              		.thumb
 1517              		.thumb_func
 1518              		.fpu fpv4-sp-d16
 1520              	LL_ADC_REG_StartConversion:
 1521              	.LFB227:
6636:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
6637:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /**
6638:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @brief  Start ADC calibration in the mode single-ended
6639:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         or differential (for devices with differential mode available).
6640:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @note   On this STM32 serie, a minimum number of ADC clock cycles
6641:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         are required between ADC end of calibration and ADC enable.
6642:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         Refer to literal @ref LL_ADC_DELAY_CALIB_ENABLE_ADC_CYCLES.
6643:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @note   For devices with differential mode available:
6644:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         Calibration of offset is specific to each of
6645:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         single-ended and differential modes
6646:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         (calibration run must be performed for each of these
6647:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         differential modes, if used afterwards and if the application
6648:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         requires their calibration).
6649:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @note   On this STM32 serie, setting of this feature is conditioned to
6650:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         ADC state:
6651:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         ADC must be ADC disabled.
6652:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @rmtoll CR       ADCAL          LL_ADC_StartCalibration\n
6653:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         CR       ADCALDIF       LL_ADC_StartCalibration
6654:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
6655:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @param  SingleDiff This parameter can be one of the following values:
6656:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_SINGLE_ENDED
6657:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
6658:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @retval None
6659:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
6660:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_StartCalibration(ADC_TypeDef *ADCx, uint32_t SingleDiff)
6661:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** {
6662:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   /* Note: Write register with some additional bits forced to state reset     */
6663:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   /*       instead of modifying only the selected bit for this function,      */
6664:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   /*       to not interfere with bits with HW property "rs".                  */
6665:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   MODIFY_REG(ADCx->CR,
6666:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****              ADC_CR_ADCALDIF | ADC_CR_BITS_PROPERTY_RS,
6667:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****              ADC_CR_ADCAL | (SingleDiff & ADC_SINGLEDIFF_CALIB_START_MASK));
6668:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** }
6669:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
6670:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /**
6671:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @brief  Get ADC calibration state.
6672:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @rmtoll CR       ADCAL          LL_ADC_IsCalibrationOnGoing
6673:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
6674:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @retval 0: calibration complete, 1: calibration in progress.
6675:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
6676:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_IsCalibrationOnGoing(ADC_TypeDef *ADCx)
6677:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** {
6678:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
6679:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** }
6680:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
6681:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /**
6682:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @}
6683:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
ARM GAS  /tmp/ccZ0TYFG.s 			page 144


6684:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
6685:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /** @defgroup ADC_LL_EF_Operation_ADC_Group_Regular Operation on ADC hierarchical scope: group regu
6686:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @{
6687:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
6688:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
6689:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /**
6690:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @brief  Start ADC group regular conversion.
6691:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @note   On this STM32 serie, this function is relevant for both
6692:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         internal trigger (SW start) and external trigger:
6693:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         - If ADC trigger has been set to software start, ADC conversion
6694:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *           starts immediately.
6695:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         - If ADC trigger has been set to external trigger, ADC conversion
6696:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *           will start at next trigger event (on the selected trigger edge)
6697:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *           following the ADC start conversion command.
6698:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @note   On this STM32 serie, setting of this feature is conditioned to
6699:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         ADC state:
6700:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         ADC must be enabled without conversion on going on group regular,
6701:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         without conversion stop command on going on group regular,
6702:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         without ADC disable command on going.
6703:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
6704:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
6705:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @retval None
6706:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
6707:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
6708:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** {
 1522              		.loc 1 6708 1
 1523              		.cfi_startproc
 1524              		@ args = 0, pretend = 0, frame = 8
 1525              		@ frame_needed = 1, uses_anonymous_args = 0
 1526              		@ link register save eliminated.
 1527 0000 80B4     		push	{r7}
 1528              	.LCFI156:
 1529              		.cfi_def_cfa_offset 4
 1530              		.cfi_offset 7, -4
 1531 0002 83B0     		sub	sp, sp, #12
 1532              	.LCFI157:
 1533              		.cfi_def_cfa_offset 16
 1534 0004 00AF     		add	r7, sp, #0
 1535              	.LCFI158:
 1536              		.cfi_def_cfa_register 7
 1537 0006 7860     		str	r0, [r7, #4]
6709:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   /* Note: Write register with some additional bits forced to state reset     */
6710:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   /*       instead of modifying only the selected bit for this function,      */
6711:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   /*       to not interfere with bits with HW property "rs".                  */
6712:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   MODIFY_REG(ADCx->CR,
 1538              		.loc 1 6712 3
 1539 0008 7B68     		ldr	r3, [r7, #4]
 1540 000a 9B68     		ldr	r3, [r3, #8]
 1541 000c 23F00043 		bic	r3, r3, #-2147483648
 1542 0010 23F03F03 		bic	r3, r3, #63
 1543 0014 43F00402 		orr	r2, r3, #4
 1544 0018 7B68     		ldr	r3, [r7, #4]
 1545 001a 9A60     		str	r2, [r3, #8]
6713:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****              ADC_CR_BITS_PROPERTY_RS,
6714:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****              ADC_CR_ADSTART);
6715:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** }
 1546              		.loc 1 6715 1
ARM GAS  /tmp/ccZ0TYFG.s 			page 145


 1547 001c 00BF     		nop
 1548 001e 0C37     		adds	r7, r7, #12
 1549              	.LCFI159:
 1550              		.cfi_def_cfa_offset 4
 1551 0020 BD46     		mov	sp, r7
 1552              	.LCFI160:
 1553              		.cfi_def_cfa_register 13
 1554              		@ sp needed
 1555 0022 5DF8047B 		ldr	r7, [sp], #4
 1556              	.LCFI161:
 1557              		.cfi_restore 7
 1558              		.cfi_def_cfa_offset 0
 1559 0026 7047     		bx	lr
 1560              		.cfi_endproc
 1561              	.LFE227:
 1563              		.section	.text.LL_ADC_REG_StopConversion,"ax",%progbits
 1564              		.align	1
 1565              		.syntax unified
 1566              		.thumb
 1567              		.thumb_func
 1568              		.fpu fpv4-sp-d16
 1570              	LL_ADC_REG_StopConversion:
 1571              	.LFB228:
6716:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
6717:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /**
6718:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @brief  Stop ADC group regular conversion.
6719:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @note   On this STM32 serie, setting of this feature is conditioned to
6720:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         ADC state:
6721:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         ADC must be enabled with conversion on going on group regular,
6722:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         without ADC disable command on going.
6723:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
6724:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
6725:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @retval None
6726:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
6727:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
6728:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** {
 1572              		.loc 1 6728 1
 1573              		.cfi_startproc
 1574              		@ args = 0, pretend = 0, frame = 8
 1575              		@ frame_needed = 1, uses_anonymous_args = 0
 1576              		@ link register save eliminated.
 1577 0000 80B4     		push	{r7}
 1578              	.LCFI162:
 1579              		.cfi_def_cfa_offset 4
 1580              		.cfi_offset 7, -4
 1581 0002 83B0     		sub	sp, sp, #12
 1582              	.LCFI163:
 1583              		.cfi_def_cfa_offset 16
 1584 0004 00AF     		add	r7, sp, #0
 1585              	.LCFI164:
 1586              		.cfi_def_cfa_register 7
 1587 0006 7860     		str	r0, [r7, #4]
6729:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   /* Note: Write register with some additional bits forced to state reset     */
6730:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   /*       instead of modifying only the selected bit for this function,      */
6731:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   /*       to not interfere with bits with HW property "rs".                  */
6732:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   MODIFY_REG(ADCx->CR,
 1588              		.loc 1 6732 3
ARM GAS  /tmp/ccZ0TYFG.s 			page 146


 1589 0008 7B68     		ldr	r3, [r7, #4]
 1590 000a 9B68     		ldr	r3, [r3, #8]
 1591 000c 23F00043 		bic	r3, r3, #-2147483648
 1592 0010 23F03F03 		bic	r3, r3, #63
 1593 0014 43F01002 		orr	r2, r3, #16
 1594 0018 7B68     		ldr	r3, [r7, #4]
 1595 001a 9A60     		str	r2, [r3, #8]
6733:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****              ADC_CR_BITS_PROPERTY_RS,
6734:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****              ADC_CR_ADSTP);
6735:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** }
 1596              		.loc 1 6735 1
 1597 001c 00BF     		nop
 1598 001e 0C37     		adds	r7, r7, #12
 1599              	.LCFI165:
 1600              		.cfi_def_cfa_offset 4
 1601 0020 BD46     		mov	sp, r7
 1602              	.LCFI166:
 1603              		.cfi_def_cfa_register 13
 1604              		@ sp needed
 1605 0022 5DF8047B 		ldr	r7, [sp], #4
 1606              	.LCFI167:
 1607              		.cfi_restore 7
 1608              		.cfi_def_cfa_offset 0
 1609 0026 7047     		bx	lr
 1610              		.cfi_endproc
 1611              	.LFE228:
 1613              		.section	.text.LL_ADC_REG_IsConversionOngoing,"ax",%progbits
 1614              		.align	1
 1615              		.syntax unified
 1616              		.thumb
 1617              		.thumb_func
 1618              		.fpu fpv4-sp-d16
 1620              	LL_ADC_REG_IsConversionOngoing:
 1621              	.LFB229:
6736:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
6737:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /**
6738:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @brief  Get ADC group regular conversion state.
6739:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
6740:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
6741:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @retval 0: no conversion is on going on ADC group regular.
6742:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
6743:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
6744:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** {
 1622              		.loc 1 6744 1
 1623              		.cfi_startproc
 1624              		@ args = 0, pretend = 0, frame = 8
 1625              		@ frame_needed = 1, uses_anonymous_args = 0
 1626              		@ link register save eliminated.
 1627 0000 80B4     		push	{r7}
 1628              	.LCFI168:
 1629              		.cfi_def_cfa_offset 4
 1630              		.cfi_offset 7, -4
 1631 0002 83B0     		sub	sp, sp, #12
 1632              	.LCFI169:
 1633              		.cfi_def_cfa_offset 16
 1634 0004 00AF     		add	r7, sp, #0
 1635              	.LCFI170:
ARM GAS  /tmp/ccZ0TYFG.s 			page 147


 1636              		.cfi_def_cfa_register 7
 1637 0006 7860     		str	r0, [r7, #4]
6745:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 1638              		.loc 1 6745 12
 1639 0008 7B68     		ldr	r3, [r7, #4]
 1640 000a 9B68     		ldr	r3, [r3, #8]
 1641 000c 03F00403 		and	r3, r3, #4
 1642              		.loc 1 6745 74
 1643 0010 042B     		cmp	r3, #4
 1644 0012 01D1     		bne	.L56
 1645              		.loc 1 6745 74 is_stmt 0 discriminator 1
 1646 0014 0123     		movs	r3, #1
 1647 0016 00E0     		b	.L58
 1648              	.L56:
 1649              		.loc 1 6745 74 discriminator 2
 1650 0018 0023     		movs	r3, #0
 1651              	.L58:
6746:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** }
 1652              		.loc 1 6746 1 is_stmt 1 discriminator 5
 1653 001a 1846     		mov	r0, r3
 1654 001c 0C37     		adds	r7, r7, #12
 1655              	.LCFI171:
 1656              		.cfi_def_cfa_offset 4
 1657 001e BD46     		mov	sp, r7
 1658              	.LCFI172:
 1659              		.cfi_def_cfa_register 13
 1660              		@ sp needed
 1661 0020 5DF8047B 		ldr	r7, [sp], #4
 1662              	.LCFI173:
 1663              		.cfi_restore 7
 1664              		.cfi_def_cfa_offset 0
 1665 0024 7047     		bx	lr
 1666              		.cfi_endproc
 1667              	.LFE229:
 1669              		.section	.text.LL_ADC_INJ_StopConversion,"ax",%progbits
 1670              		.align	1
 1671              		.syntax unified
 1672              		.thumb
 1673              		.thumb_func
 1674              		.fpu fpv4-sp-d16
 1676              	LL_ADC_INJ_StopConversion:
 1677              	.LFB240:
6747:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
6748:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /**
6749:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @brief  Get ADC group regular command of conversion stop state
6750:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @rmtoll CR       ADSTP          LL_ADC_REG_IsStopConversionOngoing
6751:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
6752:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @retval 0: no command of conversion stop is on going on ADC group regular.
6753:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
6754:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_REG_IsStopConversionOngoing(ADC_TypeDef *ADCx)
6755:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** {
6756:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   return ((READ_BIT(ADCx->CR, ADC_CR_ADSTP) == (ADC_CR_ADSTP)) ? 1UL : 0UL);
6757:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** }
6758:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
6759:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /**
6760:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @brief  Start ADC sampling phase for sampling time trigger mode
6761:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @note   This function is relevant only when
ARM GAS  /tmp/ccZ0TYFG.s 			page 148


6762:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         - @ref LL_ADC_REG_SAMPLING_MODE_TRIGGER_CONTROLED has been set
6763:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *           using @ref LL_ADC_REG_SetSamplingMode
6764:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         - @ref LL_ADC_REG_TRIG_SOFTWARE is used as trigger source
6765:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @note   On this STM32 serie, setting of this feature is conditioned to
6766:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         ADC state:
6767:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         ADC must be enabled without conversion on going on group regular,
6768:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         without conversion stop command on going on group regular,
6769:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         without ADC disable command on going.
6770:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @rmtoll CFGR2    SWTRIG         LL_ADC_REG_StartSamplingPhase
6771:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
6772:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @retval None
6773:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
6774:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_REG_StartSamplingPhase(ADC_TypeDef *ADCx)
6775:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** {
6776:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   SET_BIT(ADCx->CFGR2, ADC_CFGR2_SWTRIG);
6777:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** }
6778:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
6779:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /**
6780:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @brief  Stop ADC sampling phase for sampling time trigger mode and start conversion
6781:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @note   This function is relevant only when
6782:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         - @ref LL_ADC_REG_SAMPLING_MODE_TRIGGER_CONTROLED has been set
6783:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *           using @ref LL_ADC_REG_SetSamplingMode
6784:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         - @ref LL_ADC_REG_TRIG_SOFTWARE is used as trigger source
6785:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         - @ref LL_ADC_REG_StartSamplingPhase has been called to start
6786:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *           the sampling phase
6787:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @note   On this STM32 serie, setting of this feature is conditioned to
6788:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         ADC state:
6789:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         ADC must be enabled without conversion on going on group regular,
6790:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         without conversion stop command on going on group regular,
6791:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         without ADC disable command on going.
6792:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @rmtoll CFGR2    SWTRIG         LL_ADC_REG_StopSamplingPhase
6793:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
6794:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @retval None
6795:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
6796:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_REG_StopSamplingPhase(ADC_TypeDef *ADCx)
6797:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** {
6798:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   CLEAR_BIT(ADCx->CFGR2, ADC_CFGR2_SWTRIG);
6799:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** }
6800:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
6801:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /**
6802:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @brief  Get ADC group regular conversion data, range fit for
6803:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         all ADC configurations: all ADC resolutions and
6804:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         all oversampling increased data width (for devices
6805:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         with feature oversampling).
6806:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @rmtoll DR       RDATA          LL_ADC_REG_ReadConversionData32
6807:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
6808:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @retval Value between Min_Data=0x00000000 and Max_Data=0xFFFFFFFF
6809:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
6810:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_REG_ReadConversionData32(ADC_TypeDef *ADCx)
6811:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** {
6812:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   return (uint32_t)(READ_BIT(ADCx->DR, ADC_DR_RDATA));
6813:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** }
6814:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
6815:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /**
6816:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @brief  Get ADC group regular conversion data, range fit for
6817:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         ADC resolution 12 bits.
6818:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @note   For devices with feature oversampling: Oversampling
ARM GAS  /tmp/ccZ0TYFG.s 			page 149


6819:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         can increase data width, function for extended range
6820:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         may be needed: @ref LL_ADC_REG_ReadConversionData32.
6821:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @rmtoll DR       RDATA          LL_ADC_REG_ReadConversionData12
6822:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
6823:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @retval Value between Min_Data=0x000 and Max_Data=0xFFF
6824:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
6825:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** __STATIC_INLINE uint16_t LL_ADC_REG_ReadConversionData12(ADC_TypeDef *ADCx)
6826:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** {
6827:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_RDATA));
6828:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** }
6829:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
6830:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /**
6831:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @brief  Get ADC group regular conversion data, range fit for
6832:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         ADC resolution 10 bits.
6833:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @note   For devices with feature oversampling: Oversampling
6834:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         can increase data width, function for extended range
6835:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         may be needed: @ref LL_ADC_REG_ReadConversionData32.
6836:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @rmtoll DR       RDATA          LL_ADC_REG_ReadConversionData10
6837:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
6838:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @retval Value between Min_Data=0x000 and Max_Data=0x3FF
6839:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
6840:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** __STATIC_INLINE uint16_t LL_ADC_REG_ReadConversionData10(ADC_TypeDef *ADCx)
6841:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** {
6842:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_RDATA));
6843:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** }
6844:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
6845:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /**
6846:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @brief  Get ADC group regular conversion data, range fit for
6847:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         ADC resolution 8 bits.
6848:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @note   For devices with feature oversampling: Oversampling
6849:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         can increase data width, function for extended range
6850:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         may be needed: @ref LL_ADC_REG_ReadConversionData32.
6851:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @rmtoll DR       RDATA          LL_ADC_REG_ReadConversionData8
6852:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
6853:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @retval Value between Min_Data=0x00 and Max_Data=0xFF
6854:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
6855:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** __STATIC_INLINE uint8_t LL_ADC_REG_ReadConversionData8(ADC_TypeDef *ADCx)
6856:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** {
6857:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   return (uint8_t)(READ_BIT(ADCx->DR, ADC_DR_RDATA));
6858:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** }
6859:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
6860:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /**
6861:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @brief  Get ADC group regular conversion data, range fit for
6862:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         ADC resolution 6 bits.
6863:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @note   For devices with feature oversampling: Oversampling
6864:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         can increase data width, function for extended range
6865:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         may be needed: @ref LL_ADC_REG_ReadConversionData32.
6866:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @rmtoll DR       RDATA          LL_ADC_REG_ReadConversionData6
6867:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
6868:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @retval Value between Min_Data=0x00 and Max_Data=0x3F
6869:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
6870:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** __STATIC_INLINE uint8_t LL_ADC_REG_ReadConversionData6(ADC_TypeDef *ADCx)
6871:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** {
6872:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   return (uint8_t)(READ_BIT(ADCx->DR, ADC_DR_RDATA));
6873:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** }
6874:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
6875:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #if defined(ADC_MULTIMODE_SUPPORT)
ARM GAS  /tmp/ccZ0TYFG.s 			page 150


6876:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /**
6877:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @brief  Get ADC multimode conversion data of ADC master, ADC slave
6878:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         or raw data with ADC master and slave concatenated.
6879:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @note   If raw data with ADC master and slave concatenated is retrieved,
6880:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         a macro is available to get the conversion data of
6881:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         ADC master or ADC slave: see helper macro
6882:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @ref __LL_ADC_MULTI_CONV_DATA_MASTER_SLAVE().
6883:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         (however this macro is mainly intended for multimode
6884:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         transfer by DMA, because this function can do the same
6885:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         by getting multimode conversion data of ADC master or ADC slave
6886:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         separately).
6887:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @rmtoll CDR      RDATA_MST      LL_ADC_REG_ReadMultiConversionData32\n
6888:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         CDR      RDATA_SLV      LL_ADC_REG_ReadMultiConversionData32
6889:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @param  ADCxy_COMMON ADC common instance
6890:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         (can be set directly from CMSIS definition or by using helper macro @ref __LL_ADC_COMMO
6891:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @param  ConversionData This parameter can be one of the following values:
6892:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_MASTER
6893:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_SLAVE
6894:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_MASTER_SLAVE
6895:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @retval Value between Min_Data=0x00000000 and Max_Data=0xFFFFFFFF
6896:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
6897:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_REG_ReadMultiConversionData32(ADC_Common_TypeDef *ADCxy_COMMON, uin
6898:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** {
6899:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   return (uint32_t)(READ_BIT(ADCxy_COMMON->CDR,
6900:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****                              ConversionData)
6901:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****                     >> (POSITION_VAL(ConversionData) & 0x1FUL)
6902:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****                    );
6903:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** }
6904:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #endif /* ADC_MULTIMODE_SUPPORT */
6905:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
6906:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /**
6907:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @}
6908:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
6909:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
6910:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /** @defgroup ADC_LL_EF_Operation_ADC_Group_Injected Operation on ADC hierarchical scope: group inj
6911:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @{
6912:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
6913:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
6914:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /**
6915:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @brief  Start ADC group injected conversion.
6916:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @note   On this STM32 serie, this function is relevant for both
6917:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         internal trigger (SW start) and external trigger:
6918:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         - If ADC trigger has been set to software start, ADC conversion
6919:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *           starts immediately.
6920:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         - If ADC trigger has been set to external trigger, ADC conversion
6921:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *           will start at next trigger event (on the selected trigger edge)
6922:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *           following the ADC start conversion command.
6923:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @note   On this STM32 serie, setting of this feature is conditioned to
6924:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         ADC state:
6925:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         ADC must be enabled without conversion on going on group injected,
6926:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         without conversion stop command on going on group injected,
6927:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         without ADC disable command on going.
6928:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @rmtoll CR       JADSTART       LL_ADC_INJ_StartConversion
6929:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
6930:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @retval None
6931:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
6932:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_INJ_StartConversion(ADC_TypeDef *ADCx)
ARM GAS  /tmp/ccZ0TYFG.s 			page 151


6933:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** {
6934:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   /* Note: Write register with some additional bits forced to state reset     */
6935:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   /*       instead of modifying only the selected bit for this function,      */
6936:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   /*       to not interfere with bits with HW property "rs".                  */
6937:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   MODIFY_REG(ADCx->CR,
6938:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****              ADC_CR_BITS_PROPERTY_RS,
6939:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****              ADC_CR_JADSTART);
6940:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** }
6941:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
6942:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /**
6943:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @brief  Stop ADC group injected conversion.
6944:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @note   On this STM32 serie, setting of this feature is conditioned to
6945:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         ADC state:
6946:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         ADC must be enabled with conversion on going on group injected,
6947:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         without ADC disable command on going.
6948:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
6949:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
6950:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @retval None
6951:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
6952:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
6953:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** {
 1678              		.loc 1 6953 1
 1679              		.cfi_startproc
 1680              		@ args = 0, pretend = 0, frame = 8
 1681              		@ frame_needed = 1, uses_anonymous_args = 0
 1682              		@ link register save eliminated.
 1683 0000 80B4     		push	{r7}
 1684              	.LCFI174:
 1685              		.cfi_def_cfa_offset 4
 1686              		.cfi_offset 7, -4
 1687 0002 83B0     		sub	sp, sp, #12
 1688              	.LCFI175:
 1689              		.cfi_def_cfa_offset 16
 1690 0004 00AF     		add	r7, sp, #0
 1691              	.LCFI176:
 1692              		.cfi_def_cfa_register 7
 1693 0006 7860     		str	r0, [r7, #4]
6954:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   /* Note: Write register with some additional bits forced to state reset     */
6955:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   /*       instead of modifying only the selected bit for this function,      */
6956:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   /*       to not interfere with bits with HW property "rs".                  */
6957:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   MODIFY_REG(ADCx->CR,
 1694              		.loc 1 6957 3
 1695 0008 7B68     		ldr	r3, [r7, #4]
 1696 000a 9B68     		ldr	r3, [r3, #8]
 1697 000c 23F00043 		bic	r3, r3, #-2147483648
 1698 0010 23F03F03 		bic	r3, r3, #63
 1699 0014 43F02002 		orr	r2, r3, #32
 1700 0018 7B68     		ldr	r3, [r7, #4]
 1701 001a 9A60     		str	r2, [r3, #8]
6958:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****              ADC_CR_BITS_PROPERTY_RS,
6959:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****              ADC_CR_JADSTP);
6960:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** }
 1702              		.loc 1 6960 1
 1703 001c 00BF     		nop
 1704 001e 0C37     		adds	r7, r7, #12
 1705              	.LCFI177:
 1706              		.cfi_def_cfa_offset 4
ARM GAS  /tmp/ccZ0TYFG.s 			page 152


 1707 0020 BD46     		mov	sp, r7
 1708              	.LCFI178:
 1709              		.cfi_def_cfa_register 13
 1710              		@ sp needed
 1711 0022 5DF8047B 		ldr	r7, [sp], #4
 1712              	.LCFI179:
 1713              		.cfi_restore 7
 1714              		.cfi_def_cfa_offset 0
 1715 0026 7047     		bx	lr
 1716              		.cfi_endproc
 1717              	.LFE240:
 1719              		.section	.text.LL_ADC_INJ_IsConversionOngoing,"ax",%progbits
 1720              		.align	1
 1721              		.syntax unified
 1722              		.thumb
 1723              		.thumb_func
 1724              		.fpu fpv4-sp-d16
 1726              	LL_ADC_INJ_IsConversionOngoing:
 1727              	.LFB241:
6961:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
6962:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /**
6963:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @brief  Get ADC group injected conversion state.
6964:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
6965:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
6966:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @retval 0: no conversion is on going on ADC group injected.
6967:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
6968:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
6969:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** {
 1728              		.loc 1 6969 1
 1729              		.cfi_startproc
 1730              		@ args = 0, pretend = 0, frame = 8
 1731              		@ frame_needed = 1, uses_anonymous_args = 0
 1732              		@ link register save eliminated.
 1733 0000 80B4     		push	{r7}
 1734              	.LCFI180:
 1735              		.cfi_def_cfa_offset 4
 1736              		.cfi_offset 7, -4
 1737 0002 83B0     		sub	sp, sp, #12
 1738              	.LCFI181:
 1739              		.cfi_def_cfa_offset 16
 1740 0004 00AF     		add	r7, sp, #0
 1741              	.LCFI182:
 1742              		.cfi_def_cfa_register 7
 1743 0006 7860     		str	r0, [r7, #4]
6970:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 1744              		.loc 1 6970 12
 1745 0008 7B68     		ldr	r3, [r7, #4]
 1746 000a 9B68     		ldr	r3, [r3, #8]
 1747 000c 03F00803 		and	r3, r3, #8
 1748              		.loc 1 6970 76
 1749 0010 082B     		cmp	r3, #8
 1750 0012 01D1     		bne	.L61
 1751              		.loc 1 6970 76 is_stmt 0 discriminator 1
 1752 0014 0123     		movs	r3, #1
 1753 0016 00E0     		b	.L63
 1754              	.L61:
 1755              		.loc 1 6970 76 discriminator 2
ARM GAS  /tmp/ccZ0TYFG.s 			page 153


 1756 0018 0023     		movs	r3, #0
 1757              	.L63:
6971:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** }
 1758              		.loc 1 6971 1 is_stmt 1 discriminator 5
 1759 001a 1846     		mov	r0, r3
 1760 001c 0C37     		adds	r7, r7, #12
 1761              	.LCFI183:
 1762              		.cfi_def_cfa_offset 4
 1763 001e BD46     		mov	sp, r7
 1764              	.LCFI184:
 1765              		.cfi_def_cfa_register 13
 1766              		@ sp needed
 1767 0020 5DF8047B 		ldr	r7, [sp], #4
 1768              	.LCFI185:
 1769              		.cfi_restore 7
 1770              		.cfi_def_cfa_offset 0
 1771 0024 7047     		bx	lr
 1772              		.cfi_endproc
 1773              	.LFE241:
 1775              		.section	.text.LL_ADC_ClearFlag_AWD1,"ax",%progbits
 1776              		.align	1
 1777              		.syntax unified
 1778              		.thumb
 1779              		.thumb_func
 1780              		.fpu fpv4-sp-d16
 1782              	LL_ADC_ClearFlag_AWD1:
 1783              	.LFB267:
6972:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
6973:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /**
6974:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @brief  Get ADC group injected command of conversion stop state
6975:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @rmtoll CR       JADSTP         LL_ADC_INJ_IsStopConversionOngoing
6976:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
6977:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @retval 0: no command of conversion stop is on going on ADC group injected.
6978:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
6979:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_INJ_IsStopConversionOngoing(ADC_TypeDef *ADCx)
6980:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** {
6981:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   return ((READ_BIT(ADCx->CR, ADC_CR_JADSTP) == (ADC_CR_JADSTP)) ? 1UL : 0UL);
6982:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** }
6983:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
6984:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /**
6985:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @brief  Get ADC group injected conversion data, range fit for
6986:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         all ADC configurations: all ADC resolutions and
6987:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         all oversampling increased data width (for devices
6988:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         with feature oversampling).
6989:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @rmtoll JDR1     JDATA          LL_ADC_INJ_ReadConversionData32\n
6990:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         JDR2     JDATA          LL_ADC_INJ_ReadConversionData32\n
6991:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         JDR3     JDATA          LL_ADC_INJ_ReadConversionData32\n
6992:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         JDR4     JDATA          LL_ADC_INJ_ReadConversionData32
6993:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
6994:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @param  Rank This parameter can be one of the following values:
6995:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_RANK_1
6996:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_RANK_2
6997:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_RANK_3
6998:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_RANK_4
6999:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @retval Value between Min_Data=0x00000000 and Max_Data=0xFFFFFFFF
7000:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
7001:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_INJ_ReadConversionData32(ADC_TypeDef *ADCx, uint32_t Rank)
ARM GAS  /tmp/ccZ0TYFG.s 			page 154


7002:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** {
7003:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   register const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->JDR1, ((Rank & ADC_INJ_JDRX_REGOF
7004:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
7005:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   return (uint32_t)(READ_BIT(*preg,
7006:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****                              ADC_JDR1_JDATA)
7007:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****                    );
7008:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** }
7009:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
7010:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /**
7011:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @brief  Get ADC group injected conversion data, range fit for
7012:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         ADC resolution 12 bits.
7013:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @note   For devices with feature oversampling: Oversampling
7014:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         can increase data width, function for extended range
7015:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         may be needed: @ref LL_ADC_INJ_ReadConversionData32.
7016:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @rmtoll JDR1     JDATA          LL_ADC_INJ_ReadConversionData12\n
7017:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         JDR2     JDATA          LL_ADC_INJ_ReadConversionData12\n
7018:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         JDR3     JDATA          LL_ADC_INJ_ReadConversionData12\n
7019:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         JDR4     JDATA          LL_ADC_INJ_ReadConversionData12
7020:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
7021:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @param  Rank This parameter can be one of the following values:
7022:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_RANK_1
7023:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_RANK_2
7024:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_RANK_3
7025:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_RANK_4
7026:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @retval Value between Min_Data=0x000 and Max_Data=0xFFF
7027:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
7028:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** __STATIC_INLINE uint16_t LL_ADC_INJ_ReadConversionData12(ADC_TypeDef *ADCx, uint32_t Rank)
7029:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** {
7030:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   register const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->JDR1, ((Rank & ADC_INJ_JDRX_REGOF
7031:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
7032:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   return (uint16_t)(READ_BIT(*preg,
7033:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****                              ADC_JDR1_JDATA)
7034:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****                    );
7035:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** }
7036:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
7037:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /**
7038:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @brief  Get ADC group injected conversion data, range fit for
7039:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         ADC resolution 10 bits.
7040:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @note   For devices with feature oversampling: Oversampling
7041:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         can increase data width, function for extended range
7042:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         may be needed: @ref LL_ADC_INJ_ReadConversionData32.
7043:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @rmtoll JDR1     JDATA          LL_ADC_INJ_ReadConversionData10\n
7044:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         JDR2     JDATA          LL_ADC_INJ_ReadConversionData10\n
7045:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         JDR3     JDATA          LL_ADC_INJ_ReadConversionData10\n
7046:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         JDR4     JDATA          LL_ADC_INJ_ReadConversionData10
7047:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
7048:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @param  Rank This parameter can be one of the following values:
7049:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_RANK_1
7050:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_RANK_2
7051:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_RANK_3
7052:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_RANK_4
7053:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @retval Value between Min_Data=0x000 and Max_Data=0x3FF
7054:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
7055:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** __STATIC_INLINE uint16_t LL_ADC_INJ_ReadConversionData10(ADC_TypeDef *ADCx, uint32_t Rank)
7056:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** {
7057:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   register const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->JDR1, ((Rank & ADC_INJ_JDRX_REGOF
7058:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
ARM GAS  /tmp/ccZ0TYFG.s 			page 155


7059:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   return (uint16_t)(READ_BIT(*preg,
7060:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****                              ADC_JDR1_JDATA)
7061:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****                    );
7062:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** }
7063:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
7064:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /**
7065:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @brief  Get ADC group injected conversion data, range fit for
7066:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         ADC resolution 8 bits.
7067:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @note   For devices with feature oversampling: Oversampling
7068:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         can increase data width, function for extended range
7069:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         may be needed: @ref LL_ADC_INJ_ReadConversionData32.
7070:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @rmtoll JDR1     JDATA          LL_ADC_INJ_ReadConversionData8\n
7071:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         JDR2     JDATA          LL_ADC_INJ_ReadConversionData8\n
7072:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         JDR3     JDATA          LL_ADC_INJ_ReadConversionData8\n
7073:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         JDR4     JDATA          LL_ADC_INJ_ReadConversionData8
7074:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
7075:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @param  Rank This parameter can be one of the following values:
7076:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_RANK_1
7077:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_RANK_2
7078:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_RANK_3
7079:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_RANK_4
7080:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @retval Value between Min_Data=0x00 and Max_Data=0xFF
7081:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
7082:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** __STATIC_INLINE uint8_t LL_ADC_INJ_ReadConversionData8(ADC_TypeDef *ADCx, uint32_t Rank)
7083:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** {
7084:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   register const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->JDR1, ((Rank & ADC_INJ_JDRX_REGOF
7085:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
7086:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   return (uint8_t)(READ_BIT(*preg,
7087:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****                             ADC_JDR1_JDATA)
7088:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****                   );
7089:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** }
7090:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
7091:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /**
7092:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @brief  Get ADC group injected conversion data, range fit for
7093:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         ADC resolution 6 bits.
7094:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @note   For devices with feature oversampling: Oversampling
7095:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         can increase data width, function for extended range
7096:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         may be needed: @ref LL_ADC_INJ_ReadConversionData32.
7097:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @rmtoll JDR1     JDATA          LL_ADC_INJ_ReadConversionData6\n
7098:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         JDR2     JDATA          LL_ADC_INJ_ReadConversionData6\n
7099:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         JDR3     JDATA          LL_ADC_INJ_ReadConversionData6\n
7100:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         JDR4     JDATA          LL_ADC_INJ_ReadConversionData6
7101:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
7102:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @param  Rank This parameter can be one of the following values:
7103:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_RANK_1
7104:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_RANK_2
7105:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_RANK_3
7106:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_RANK_4
7107:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @retval Value between Min_Data=0x00 and Max_Data=0x3F
7108:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
7109:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** __STATIC_INLINE uint8_t LL_ADC_INJ_ReadConversionData6(ADC_TypeDef *ADCx, uint32_t Rank)
7110:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** {
7111:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   register const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->JDR1, ((Rank & ADC_INJ_JDRX_REGOF
7112:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
7113:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   return (uint8_t)(READ_BIT(*preg,
7114:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****                             ADC_JDR1_JDATA)
7115:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****                   );
ARM GAS  /tmp/ccZ0TYFG.s 			page 156


7116:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** }
7117:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
7118:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /**
7119:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @}
7120:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
7121:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
7122:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /** @defgroup ADC_LL_EF_FLAG_Management ADC flag management
7123:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @{
7124:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
7125:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
7126:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /**
7127:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @brief  Get flag ADC ready.
7128:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @note   On this STM32 serie, flag LL_ADC_FLAG_ADRDY is raised when the ADC
7129:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         is enabled and when conversion clock is active.
7130:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         (not only core clock: this ADC has a dual clock domain)
7131:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @rmtoll ISR      ADRDY          LL_ADC_IsActiveFlag_ADRDY
7132:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
7133:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @retval State of bit (1 or 0).
7134:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
7135:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_ADRDY(ADC_TypeDef *ADCx)
7136:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** {
7137:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_ADRDY) == (LL_ADC_FLAG_ADRDY)) ? 1UL : 0UL);
7138:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** }
7139:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
7140:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /**
7141:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @brief  Get flag ADC group regular end of unitary conversion.
7142:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @rmtoll ISR      EOC            LL_ADC_IsActiveFlag_EOC
7143:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
7144:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @retval State of bit (1 or 0).
7145:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
7146:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_EOC(ADC_TypeDef *ADCx)
7147:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** {
7148:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   return ((READ_BIT(ADCx->ISR, ADC_ISR_EOC) == (ADC_ISR_EOC)) ? 1UL : 0UL);
7149:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** }
7150:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
7151:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /**
7152:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @brief  Get flag ADC group regular end of sequence conversions.
7153:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @rmtoll ISR      EOS            LL_ADC_IsActiveFlag_EOS
7154:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
7155:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @retval State of bit (1 or 0).
7156:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
7157:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_EOS(ADC_TypeDef *ADCx)
7158:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** {
7159:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_EOS) == (LL_ADC_FLAG_EOS)) ? 1UL : 0UL);
7160:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** }
7161:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
7162:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /**
7163:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @brief  Get flag ADC group regular overrun.
7164:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @rmtoll ISR      OVR            LL_ADC_IsActiveFlag_OVR
7165:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
7166:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @retval State of bit (1 or 0).
7167:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
7168:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_OVR(ADC_TypeDef *ADCx)
7169:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** {
7170:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_OVR) == (LL_ADC_FLAG_OVR)) ? 1UL : 0UL);
7171:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** }
7172:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
ARM GAS  /tmp/ccZ0TYFG.s 			page 157


7173:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /**
7174:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @brief  Get flag ADC group regular end of sampling phase.
7175:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @rmtoll ISR      EOSMP          LL_ADC_IsActiveFlag_EOSMP
7176:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
7177:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @retval State of bit (1 or 0).
7178:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
7179:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_EOSMP(ADC_TypeDef *ADCx)
7180:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** {
7181:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_EOSMP) == (LL_ADC_FLAG_EOSMP)) ? 1UL : 0UL);
7182:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** }
7183:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
7184:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /**
7185:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @brief  Get flag ADC group injected end of unitary conversion.
7186:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @rmtoll ISR      JEOC           LL_ADC_IsActiveFlag_JEOC
7187:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
7188:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @retval State of bit (1 or 0).
7189:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
7190:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_JEOC(ADC_TypeDef *ADCx)
7191:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** {
7192:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_JEOC) == (LL_ADC_FLAG_JEOC)) ? 1UL : 0UL);
7193:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** }
7194:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
7195:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /**
7196:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @brief  Get flag ADC group injected end of sequence conversions.
7197:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @rmtoll ISR      JEOS           LL_ADC_IsActiveFlag_JEOS
7198:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
7199:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @retval State of bit (1 or 0).
7200:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
7201:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_JEOS(ADC_TypeDef *ADCx)
7202:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** {
7203:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_JEOS) == (LL_ADC_FLAG_JEOS)) ? 1UL : 0UL);
7204:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** }
7205:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
7206:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /**
7207:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @brief  Get flag ADC group injected contexts queue overflow.
7208:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @rmtoll ISR      JQOVF          LL_ADC_IsActiveFlag_JQOVF
7209:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
7210:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @retval State of bit (1 or 0).
7211:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
7212:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_JQOVF(ADC_TypeDef *ADCx)
7213:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** {
7214:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_JQOVF) == (LL_ADC_FLAG_JQOVF)) ? 1UL : 0UL);
7215:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** }
7216:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
7217:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /**
7218:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @brief  Get flag ADC analog watchdog 1 flag
7219:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @rmtoll ISR      AWD1           LL_ADC_IsActiveFlag_AWD1
7220:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
7221:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @retval State of bit (1 or 0).
7222:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
7223:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_AWD1(ADC_TypeDef *ADCx)
7224:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** {
7225:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_AWD1) == (LL_ADC_FLAG_AWD1)) ? 1UL : 0UL);
7226:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** }
7227:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
7228:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /**
7229:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @brief  Get flag ADC analog watchdog 2.
ARM GAS  /tmp/ccZ0TYFG.s 			page 158


7230:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @rmtoll ISR      AWD2           LL_ADC_IsActiveFlag_AWD2
7231:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
7232:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @retval State of bit (1 or 0).
7233:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
7234:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_AWD2(ADC_TypeDef *ADCx)
7235:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** {
7236:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_AWD2) == (LL_ADC_FLAG_AWD2)) ? 1UL : 0UL);
7237:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** }
7238:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
7239:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /**
7240:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @brief  Get flag ADC analog watchdog 3.
7241:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @rmtoll ISR      AWD3           LL_ADC_IsActiveFlag_AWD3
7242:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
7243:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @retval State of bit (1 or 0).
7244:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
7245:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_AWD3(ADC_TypeDef *ADCx)
7246:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** {
7247:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_AWD3) == (LL_ADC_FLAG_AWD3)) ? 1UL : 0UL);
7248:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** }
7249:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
7250:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /**
7251:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @brief  Clear flag ADC ready.
7252:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @note   On this STM32 serie, flag LL_ADC_FLAG_ADRDY is raised when the ADC
7253:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         is enabled and when conversion clock is active.
7254:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         (not only core clock: this ADC has a dual clock domain)
7255:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @rmtoll ISR      ADRDY          LL_ADC_ClearFlag_ADRDY
7256:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
7257:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @retval None
7258:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
7259:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_ClearFlag_ADRDY(ADC_TypeDef *ADCx)
7260:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** {
7261:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   WRITE_REG(ADCx->ISR, LL_ADC_FLAG_ADRDY);
7262:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** }
7263:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
7264:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /**
7265:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @brief  Clear flag ADC group regular end of unitary conversion.
7266:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @rmtoll ISR      EOC            LL_ADC_ClearFlag_EOC
7267:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
7268:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @retval None
7269:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
7270:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_ClearFlag_EOC(ADC_TypeDef *ADCx)
7271:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** {
7272:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
7273:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** }
7274:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
7275:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /**
7276:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @brief  Clear flag ADC group regular end of sequence conversions.
7277:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @rmtoll ISR      EOS            LL_ADC_ClearFlag_EOS
7278:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
7279:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @retval None
7280:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
7281:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_ClearFlag_EOS(ADC_TypeDef *ADCx)
7282:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** {
7283:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOS);
7284:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** }
7285:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
7286:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /**
ARM GAS  /tmp/ccZ0TYFG.s 			page 159


7287:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @brief  Clear flag ADC group regular overrun.
7288:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @rmtoll ISR      OVR            LL_ADC_ClearFlag_OVR
7289:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
7290:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @retval None
7291:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
7292:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_ClearFlag_OVR(ADC_TypeDef *ADCx)
7293:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** {
7294:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   WRITE_REG(ADCx->ISR, LL_ADC_FLAG_OVR);
7295:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** }
7296:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
7297:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /**
7298:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @brief  Clear flag ADC group regular end of sampling phase.
7299:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @rmtoll ISR      EOSMP          LL_ADC_ClearFlag_EOSMP
7300:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
7301:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @retval None
7302:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
7303:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_ClearFlag_EOSMP(ADC_TypeDef *ADCx)
7304:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** {
7305:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOSMP);
7306:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** }
7307:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
7308:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /**
7309:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @brief  Clear flag ADC group injected end of unitary conversion.
7310:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @rmtoll ISR      JEOC           LL_ADC_ClearFlag_JEOC
7311:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
7312:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @retval None
7313:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
7314:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_ClearFlag_JEOC(ADC_TypeDef *ADCx)
7315:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** {
7316:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOC);
7317:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** }
7318:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
7319:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /**
7320:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @brief  Clear flag ADC group injected end of sequence conversions.
7321:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @rmtoll ISR      JEOS           LL_ADC_ClearFlag_JEOS
7322:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
7323:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @retval None
7324:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
7325:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_ClearFlag_JEOS(ADC_TypeDef *ADCx)
7326:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** {
7327:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOS);
7328:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** }
7329:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
7330:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /**
7331:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @brief  Clear flag ADC group injected contexts queue overflow.
7332:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @rmtoll ISR      JQOVF          LL_ADC_ClearFlag_JQOVF
7333:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
7334:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @retval None
7335:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
7336:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_ClearFlag_JQOVF(ADC_TypeDef *ADCx)
7337:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** {
7338:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JQOVF);
7339:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** }
7340:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
7341:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /**
7342:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @brief  Clear flag ADC analog watchdog 1.
7343:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @rmtoll ISR      AWD1           LL_ADC_ClearFlag_AWD1
ARM GAS  /tmp/ccZ0TYFG.s 			page 160


7344:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
7345:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @retval None
7346:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
7347:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_ClearFlag_AWD1(ADC_TypeDef *ADCx)
7348:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** {
 1784              		.loc 1 7348 1
 1785              		.cfi_startproc
 1786              		@ args = 0, pretend = 0, frame = 8
 1787              		@ frame_needed = 1, uses_anonymous_args = 0
 1788              		@ link register save eliminated.
 1789 0000 80B4     		push	{r7}
 1790              	.LCFI186:
 1791              		.cfi_def_cfa_offset 4
 1792              		.cfi_offset 7, -4
 1793 0002 83B0     		sub	sp, sp, #12
 1794              	.LCFI187:
 1795              		.cfi_def_cfa_offset 16
 1796 0004 00AF     		add	r7, sp, #0
 1797              	.LCFI188:
 1798              		.cfi_def_cfa_register 7
 1799 0006 7860     		str	r0, [r7, #4]
7349:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD1);
 1800              		.loc 1 7349 3
 1801 0008 7B68     		ldr	r3, [r7, #4]
 1802 000a 8022     		movs	r2, #128
 1803 000c 1A60     		str	r2, [r3]
7350:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** }
 1804              		.loc 1 7350 1
 1805 000e 00BF     		nop
 1806 0010 0C37     		adds	r7, r7, #12
 1807              	.LCFI189:
 1808              		.cfi_def_cfa_offset 4
 1809 0012 BD46     		mov	sp, r7
 1810              	.LCFI190:
 1811              		.cfi_def_cfa_register 13
 1812              		@ sp needed
 1813 0014 5DF8047B 		ldr	r7, [sp], #4
 1814              	.LCFI191:
 1815              		.cfi_restore 7
 1816              		.cfi_def_cfa_offset 0
 1817 0018 7047     		bx	lr
 1818              		.cfi_endproc
 1819              	.LFE267:
 1821              		.section	.text.LL_ADC_ClearFlag_AWD2,"ax",%progbits
 1822              		.align	1
 1823              		.syntax unified
 1824              		.thumb
 1825              		.thumb_func
 1826              		.fpu fpv4-sp-d16
 1828              	LL_ADC_ClearFlag_AWD2:
 1829              	.LFB268:
7351:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
7352:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /**
7353:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @brief  Clear flag ADC analog watchdog 2.
7354:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @rmtoll ISR      AWD2           LL_ADC_ClearFlag_AWD2
7355:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
7356:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @retval None
ARM GAS  /tmp/ccZ0TYFG.s 			page 161


7357:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
7358:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_ClearFlag_AWD2(ADC_TypeDef *ADCx)
7359:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** {
 1830              		.loc 1 7359 1
 1831              		.cfi_startproc
 1832              		@ args = 0, pretend = 0, frame = 8
 1833              		@ frame_needed = 1, uses_anonymous_args = 0
 1834              		@ link register save eliminated.
 1835 0000 80B4     		push	{r7}
 1836              	.LCFI192:
 1837              		.cfi_def_cfa_offset 4
 1838              		.cfi_offset 7, -4
 1839 0002 83B0     		sub	sp, sp, #12
 1840              	.LCFI193:
 1841              		.cfi_def_cfa_offset 16
 1842 0004 00AF     		add	r7, sp, #0
 1843              	.LCFI194:
 1844              		.cfi_def_cfa_register 7
 1845 0006 7860     		str	r0, [r7, #4]
7360:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD2);
 1846              		.loc 1 7360 3
 1847 0008 7B68     		ldr	r3, [r7, #4]
 1848 000a 4FF48072 		mov	r2, #256
 1849 000e 1A60     		str	r2, [r3]
7361:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** }
 1850              		.loc 1 7361 1
 1851 0010 00BF     		nop
 1852 0012 0C37     		adds	r7, r7, #12
 1853              	.LCFI195:
 1854              		.cfi_def_cfa_offset 4
 1855 0014 BD46     		mov	sp, r7
 1856              	.LCFI196:
 1857              		.cfi_def_cfa_register 13
 1858              		@ sp needed
 1859 0016 5DF8047B 		ldr	r7, [sp], #4
 1860              	.LCFI197:
 1861              		.cfi_restore 7
 1862              		.cfi_def_cfa_offset 0
 1863 001a 7047     		bx	lr
 1864              		.cfi_endproc
 1865              	.LFE268:
 1867              		.section	.text.LL_ADC_ClearFlag_AWD3,"ax",%progbits
 1868              		.align	1
 1869              		.syntax unified
 1870              		.thumb
 1871              		.thumb_func
 1872              		.fpu fpv4-sp-d16
 1874              	LL_ADC_ClearFlag_AWD3:
 1875              	.LFB269:
7362:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
7363:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /**
7364:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @brief  Clear flag ADC analog watchdog 3.
7365:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @rmtoll ISR      AWD3           LL_ADC_ClearFlag_AWD3
7366:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
7367:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @retval None
7368:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
7369:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_ClearFlag_AWD3(ADC_TypeDef *ADCx)
ARM GAS  /tmp/ccZ0TYFG.s 			page 162


7370:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** {
 1876              		.loc 1 7370 1
 1877              		.cfi_startproc
 1878              		@ args = 0, pretend = 0, frame = 8
 1879              		@ frame_needed = 1, uses_anonymous_args = 0
 1880              		@ link register save eliminated.
 1881 0000 80B4     		push	{r7}
 1882              	.LCFI198:
 1883              		.cfi_def_cfa_offset 4
 1884              		.cfi_offset 7, -4
 1885 0002 83B0     		sub	sp, sp, #12
 1886              	.LCFI199:
 1887              		.cfi_def_cfa_offset 16
 1888 0004 00AF     		add	r7, sp, #0
 1889              	.LCFI200:
 1890              		.cfi_def_cfa_register 7
 1891 0006 7860     		str	r0, [r7, #4]
7371:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD3);
 1892              		.loc 1 7371 3
 1893 0008 7B68     		ldr	r3, [r7, #4]
 1894 000a 4FF40072 		mov	r2, #512
 1895 000e 1A60     		str	r2, [r3]
7372:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** }
 1896              		.loc 1 7372 1
 1897 0010 00BF     		nop
 1898 0012 0C37     		adds	r7, r7, #12
 1899              	.LCFI201:
 1900              		.cfi_def_cfa_offset 4
 1901 0014 BD46     		mov	sp, r7
 1902              	.LCFI202:
 1903              		.cfi_def_cfa_register 13
 1904              		@ sp needed
 1905 0016 5DF8047B 		ldr	r7, [sp], #4
 1906              	.LCFI203:
 1907              		.cfi_restore 7
 1908              		.cfi_def_cfa_offset 0
 1909 001a 7047     		bx	lr
 1910              		.cfi_endproc
 1911              	.LFE269:
 1913              		.section	.text.LL_ADC_EnableIT_AWD1,"ax",%progbits
 1914              		.align	1
 1915              		.syntax unified
 1916              		.thumb
 1917              		.thumb_func
 1918              		.fpu fpv4-sp-d16
 1920              	LL_ADC_EnableIT_AWD1:
 1921              	.LFB300:
7373:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
7374:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #if defined(ADC_MULTIMODE_SUPPORT)
7375:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /**
7376:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @brief  Get flag multimode ADC ready of the ADC master.
7377:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @rmtoll CSR      ADRDY_MST      LL_ADC_IsActiveFlag_MST_ADRDY
7378:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @param  ADCxy_COMMON ADC common instance
7379:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         (can be set directly from CMSIS definition or by using helper macro @ref __LL_ADC_COMMO
7380:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @retval State of bit (1 or 0).
7381:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
7382:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_MST_ADRDY(ADC_Common_TypeDef *ADCxy_COMMON)
ARM GAS  /tmp/ccZ0TYFG.s 			page 163


7383:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** {
7384:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   return ((READ_BIT(ADCxy_COMMON->CSR, LL_ADC_FLAG_ADRDY_MST) == (LL_ADC_FLAG_ADRDY_MST)) ? 1UL : 0
7385:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** }
7386:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
7387:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /**
7388:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @brief  Get flag multimode ADC ready of the ADC slave.
7389:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @rmtoll CSR      ADRDY_SLV      LL_ADC_IsActiveFlag_SLV_ADRDY
7390:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @param  ADCxy_COMMON ADC common instance
7391:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         (can be set directly from CMSIS definition or by using helper macro @ref __LL_ADC_COMMO
7392:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @retval State of bit (1 or 0).
7393:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
7394:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_SLV_ADRDY(ADC_Common_TypeDef *ADCxy_COMMON)
7395:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** {
7396:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   return ((READ_BIT(ADCxy_COMMON->CSR, LL_ADC_FLAG_ADRDY_SLV) == (LL_ADC_FLAG_ADRDY_SLV)) ? 1UL : 0
7397:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** }
7398:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
7399:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /**
7400:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @brief  Get flag multimode ADC group regular end of unitary conversion of the ADC master.
7401:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @rmtoll CSR      EOC_MST        LL_ADC_IsActiveFlag_MST_EOC
7402:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @param  ADCxy_COMMON ADC common instance
7403:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         (can be set directly from CMSIS definition or by using helper macro @ref __LL_ADC_COMMO
7404:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @retval State of bit (1 or 0).
7405:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
7406:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_MST_EOC(ADC_Common_TypeDef *ADCxy_COMMON)
7407:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** {
7408:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   return ((READ_BIT(ADCxy_COMMON->CSR, LL_ADC_FLAG_EOC_SLV) == (LL_ADC_FLAG_EOC_SLV)) ? 1UL : 0UL);
7409:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** }
7410:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
7411:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /**
7412:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @brief  Get flag multimode ADC group regular end of unitary conversion of the ADC slave.
7413:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @rmtoll CSR      EOC_SLV        LL_ADC_IsActiveFlag_SLV_EOC
7414:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @param  ADCxy_COMMON ADC common instance
7415:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         (can be set directly from CMSIS definition or by using helper macro @ref __LL_ADC_COMMO
7416:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @retval State of bit (1 or 0).
7417:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
7418:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_SLV_EOC(ADC_Common_TypeDef *ADCxy_COMMON)
7419:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** {
7420:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   return ((READ_BIT(ADCxy_COMMON->CSR, LL_ADC_FLAG_EOC_SLV) == (LL_ADC_FLAG_EOC_SLV)) ? 1UL : 0UL);
7421:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** }
7422:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
7423:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /**
7424:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @brief  Get flag multimode ADC group regular end of sequence conversions of the ADC master.
7425:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @rmtoll CSR      EOS_MST        LL_ADC_IsActiveFlag_MST_EOS
7426:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @param  ADCxy_COMMON ADC common instance
7427:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         (can be set directly from CMSIS definition or by using helper macro @ref __LL_ADC_COMMO
7428:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @retval State of bit (1 or 0).
7429:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
7430:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_MST_EOS(ADC_Common_TypeDef *ADCxy_COMMON)
7431:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** {
7432:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   return ((READ_BIT(ADCxy_COMMON->CSR, LL_ADC_FLAG_EOS_MST) == (LL_ADC_FLAG_EOS_MST)) ? 1UL : 0UL);
7433:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** }
7434:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
7435:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /**
7436:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @brief  Get flag multimode ADC group regular end of sequence conversions of the ADC slave.
7437:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @rmtoll CSR      EOS_SLV        LL_ADC_IsActiveFlag_SLV_EOS
7438:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @param  ADCxy_COMMON ADC common instance
7439:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         (can be set directly from CMSIS definition or by using helper macro @ref __LL_ADC_COMMO
ARM GAS  /tmp/ccZ0TYFG.s 			page 164


7440:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @retval State of bit (1 or 0).
7441:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
7442:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_SLV_EOS(ADC_Common_TypeDef *ADCxy_COMMON)
7443:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** {
7444:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   return ((READ_BIT(ADCxy_COMMON->CSR, LL_ADC_FLAG_EOS_SLV) == (LL_ADC_FLAG_EOS_SLV)) ? 1UL : 0UL);
7445:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** }
7446:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
7447:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /**
7448:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @brief  Get flag multimode ADC group regular overrun of the ADC master.
7449:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @rmtoll CSR      OVR_MST        LL_ADC_IsActiveFlag_MST_OVR
7450:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @param  ADCxy_COMMON ADC common instance
7451:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         (can be set directly from CMSIS definition or by using helper macro @ref __LL_ADC_COMMO
7452:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @retval State of bit (1 or 0).
7453:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
7454:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_MST_OVR(ADC_Common_TypeDef *ADCxy_COMMON)
7455:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** {
7456:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   return ((READ_BIT(ADCxy_COMMON->CSR, LL_ADC_FLAG_OVR_MST) == (LL_ADC_FLAG_OVR_MST)) ? 1UL : 0UL);
7457:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** }
7458:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
7459:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /**
7460:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @brief  Get flag multimode ADC group regular overrun of the ADC slave.
7461:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @rmtoll CSR      OVR_SLV        LL_ADC_IsActiveFlag_SLV_OVR
7462:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @param  ADCxy_COMMON ADC common instance
7463:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         (can be set directly from CMSIS definition or by using helper macro @ref __LL_ADC_COMMO
7464:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @retval State of bit (1 or 0).
7465:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
7466:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_SLV_OVR(ADC_Common_TypeDef *ADCxy_COMMON)
7467:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** {
7468:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   return ((READ_BIT(ADCxy_COMMON->CSR, LL_ADC_FLAG_OVR_SLV) == (LL_ADC_FLAG_OVR_SLV)) ? 1UL : 0UL);
7469:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** }
7470:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
7471:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /**
7472:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @brief  Get flag multimode ADC group regular end of sampling of the ADC master.
7473:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @rmtoll CSR      EOSMP_MST      LL_ADC_IsActiveFlag_MST_EOSMP
7474:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @param  ADCxy_COMMON ADC common instance
7475:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         (can be set directly from CMSIS definition or by using helper macro @ref __LL_ADC_COMMO
7476:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @retval State of bit (1 or 0).
7477:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
7478:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_MST_EOSMP(ADC_Common_TypeDef *ADCxy_COMMON)
7479:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** {
7480:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   return ((READ_BIT(ADCxy_COMMON->CSR, LL_ADC_FLAG_EOSMP_MST) == (LL_ADC_FLAG_EOSMP_MST)) ? 1UL : 0
7481:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** }
7482:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
7483:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /**
7484:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @brief  Get flag multimode ADC group regular end of sampling of the ADC slave.
7485:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @rmtoll CSR      EOSMP_SLV      LL_ADC_IsActiveFlag_SLV_EOSMP
7486:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @param  ADCxy_COMMON ADC common instance
7487:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         (can be set directly from CMSIS definition or by using helper macro @ref __LL_ADC_COMMO
7488:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @retval State of bit (1 or 0).
7489:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
7490:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_SLV_EOSMP(ADC_Common_TypeDef *ADCxy_COMMON)
7491:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** {
7492:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   return ((READ_BIT(ADCxy_COMMON->CSR, LL_ADC_FLAG_EOSMP_SLV) == (LL_ADC_FLAG_EOSMP_SLV)) ? 1UL : 0
7493:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** }
7494:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
7495:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /**
7496:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @brief  Get flag multimode ADC group injected end of unitary conversion of the ADC master.
ARM GAS  /tmp/ccZ0TYFG.s 			page 165


7497:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @rmtoll CSR      JEOC_MST       LL_ADC_IsActiveFlag_MST_JEOC
7498:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @param  ADCxy_COMMON ADC common instance
7499:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         (can be set directly from CMSIS definition or by using helper macro @ref __LL_ADC_COMMO
7500:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @retval State of bit (1 or 0).
7501:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
7502:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_MST_JEOC(ADC_Common_TypeDef *ADCxy_COMMON)
7503:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** {
7504:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   return ((READ_BIT(ADCxy_COMMON->CSR, LL_ADC_FLAG_JEOC_MST) == (LL_ADC_FLAG_JEOC_MST)) ? 1UL : 0UL
7505:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** }
7506:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
7507:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /**
7508:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @brief  Get flag multimode ADC group injected end of unitary conversion of the ADC slave.
7509:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @rmtoll CSR      JEOC_SLV       LL_ADC_IsActiveFlag_SLV_JEOC
7510:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @param  ADCxy_COMMON ADC common instance
7511:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         (can be set directly from CMSIS definition or by using helper macro @ref __LL_ADC_COMMO
7512:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @retval State of bit (1 or 0).
7513:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
7514:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_SLV_JEOC(ADC_Common_TypeDef *ADCxy_COMMON)
7515:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** {
7516:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   return ((READ_BIT(ADCxy_COMMON->CSR, LL_ADC_FLAG_JEOC_SLV) == (LL_ADC_FLAG_JEOC_SLV)) ? 1UL : 0UL
7517:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** }
7518:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
7519:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /**
7520:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @brief  Get flag multimode ADC group injected end of sequence conversions of the ADC master.
7521:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @rmtoll CSR      JEOS_MST       LL_ADC_IsActiveFlag_MST_JEOS
7522:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @param  ADCxy_COMMON ADC common instance
7523:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         (can be set directly from CMSIS definition or by using helper macro @ref __LL_ADC_COMMO
7524:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @retval State of bit (1 or 0).
7525:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
7526:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_MST_JEOS(ADC_Common_TypeDef *ADCxy_COMMON)
7527:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** {
7528:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   return ((READ_BIT(ADCxy_COMMON->CSR, LL_ADC_FLAG_JEOS_MST) == (LL_ADC_FLAG_JEOS_MST)) ? 1UL : 0UL
7529:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** }
7530:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
7531:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /**
7532:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @brief  Get flag multimode ADC group injected end of sequence conversions of the ADC slave.
7533:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @rmtoll CSR      JEOS_SLV       LL_ADC_IsActiveFlag_SLV_JEOS
7534:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @param  ADCxy_COMMON ADC common instance
7535:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         (can be set directly from CMSIS definition or by using helper macro @ref __LL_ADC_COMMO
7536:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @retval State of bit (1 or 0).
7537:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
7538:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_SLV_JEOS(ADC_Common_TypeDef *ADCxy_COMMON)
7539:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** {
7540:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   return ((READ_BIT(ADCxy_COMMON->CSR, LL_ADC_FLAG_JEOS_SLV) == (LL_ADC_FLAG_JEOS_SLV)) ? 1UL : 0UL
7541:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** }
7542:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
7543:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /**
7544:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @brief  Get flag multimode ADC group injected context queue overflow of the ADC master.
7545:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @rmtoll CSR      JQOVF_MST      LL_ADC_IsActiveFlag_MST_JQOVF
7546:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @param  ADCxy_COMMON ADC common instance
7547:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         (can be set directly from CMSIS definition or by using helper macro @ref __LL_ADC_COMMO
7548:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @retval State of bit (1 or 0).
7549:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
7550:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_MST_JQOVF(ADC_Common_TypeDef *ADCxy_COMMON)
7551:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** {
7552:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   return ((READ_BIT(ADCxy_COMMON->CSR, LL_ADC_FLAG_JQOVF_MST) == (LL_ADC_FLAG_JQOVF_MST)) ? 1UL : 0
7553:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** }
ARM GAS  /tmp/ccZ0TYFG.s 			page 166


7554:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
7555:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /**
7556:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @brief  Get flag multimode ADC group injected context queue overflow of the ADC slave.
7557:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @rmtoll CSR      JQOVF_SLV      LL_ADC_IsActiveFlag_SLV_JQOVF
7558:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @param  ADCxy_COMMON ADC common instance
7559:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         (can be set directly from CMSIS definition or by using helper macro @ref __LL_ADC_COMMO
7560:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @retval State of bit (1 or 0).
7561:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
7562:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_SLV_JQOVF(ADC_Common_TypeDef *ADCxy_COMMON)
7563:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** {
7564:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   return ((READ_BIT(ADCxy_COMMON->CSR, LL_ADC_FLAG_JQOVF_SLV) == (LL_ADC_FLAG_JQOVF_SLV)) ? 1UL : 0
7565:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** }
7566:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
7567:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /**
7568:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @brief  Get flag multimode ADC analog watchdog 1 of the ADC master.
7569:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @rmtoll CSR      AWD1_MST       LL_ADC_IsActiveFlag_MST_AWD1
7570:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @param  ADCxy_COMMON ADC common instance
7571:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         (can be set directly from CMSIS definition or by using helper macro @ref __LL_ADC_COMMO
7572:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @retval State of bit (1 or 0).
7573:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
7574:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_MST_AWD1(ADC_Common_TypeDef *ADCxy_COMMON)
7575:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** {
7576:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   return ((READ_BIT(ADCxy_COMMON->CSR, LL_ADC_FLAG_AWD1_MST) == (LL_ADC_FLAG_AWD1_MST)) ? 1UL : 0UL
7577:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** }
7578:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
7579:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /**
7580:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @brief  Get flag multimode analog watchdog 1 of the ADC slave.
7581:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @rmtoll CSR      AWD1_SLV       LL_ADC_IsActiveFlag_SLV_AWD1
7582:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @param  ADCxy_COMMON ADC common instance
7583:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         (can be set directly from CMSIS definition or by using helper macro @ref __LL_ADC_COMMO
7584:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @retval State of bit (1 or 0).
7585:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
7586:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_SLV_AWD1(ADC_Common_TypeDef *ADCxy_COMMON)
7587:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** {
7588:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   return ((READ_BIT(ADCxy_COMMON->CSR, LL_ADC_FLAG_AWD1_SLV) == (LL_ADC_FLAG_AWD1_SLV)) ? 1UL : 0UL
7589:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** }
7590:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
7591:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /**
7592:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @brief  Get flag multimode ADC analog watchdog 2 of the ADC master.
7593:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @rmtoll CSR      AWD2_MST       LL_ADC_IsActiveFlag_MST_AWD2
7594:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @param  ADCxy_COMMON ADC common instance
7595:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         (can be set directly from CMSIS definition or by using helper macro @ref __LL_ADC_COMMO
7596:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @retval State of bit (1 or 0).
7597:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
7598:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_MST_AWD2(ADC_Common_TypeDef *ADCxy_COMMON)
7599:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** {
7600:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   return ((READ_BIT(ADCxy_COMMON->CSR, LL_ADC_FLAG_AWD2_MST) == (LL_ADC_FLAG_AWD2_MST)) ? 1UL : 0UL
7601:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** }
7602:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
7603:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /**
7604:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @brief  Get flag multimode ADC analog watchdog 2 of the ADC slave.
7605:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @rmtoll CSR      AWD2_SLV       LL_ADC_IsActiveFlag_SLV_AWD2
7606:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @param  ADCxy_COMMON ADC common instance
7607:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         (can be set directly from CMSIS definition or by using helper macro @ref __LL_ADC_COMMO
7608:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @retval State of bit (1 or 0).
7609:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
7610:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_SLV_AWD2(ADC_Common_TypeDef *ADCxy_COMMON)
ARM GAS  /tmp/ccZ0TYFG.s 			page 167


7611:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** {
7612:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   return ((READ_BIT(ADCxy_COMMON->CSR, LL_ADC_FLAG_AWD2_SLV) == (LL_ADC_FLAG_AWD2_SLV)) ? 1UL : 0UL
7613:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** }
7614:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
7615:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /**
7616:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @brief  Get flag multimode ADC analog watchdog 3 of the ADC master.
7617:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @rmtoll CSR      AWD3_MST       LL_ADC_IsActiveFlag_MST_AWD3
7618:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @param  ADCxy_COMMON ADC common instance
7619:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         (can be set directly from CMSIS definition or by using helper macro @ref __LL_ADC_COMMO
7620:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @retval State of bit (1 or 0).
7621:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
7622:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_MST_AWD3(ADC_Common_TypeDef *ADCxy_COMMON)
7623:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** {
7624:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   return ((READ_BIT(ADCxy_COMMON->CSR, LL_ADC_FLAG_AWD3_MST) == (LL_ADC_FLAG_AWD3_MST)) ? 1UL : 0UL
7625:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** }
7626:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
7627:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /**
7628:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @brief  Get flag multimode ADC analog watchdog 3 of the ADC slave.
7629:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @rmtoll CSR      AWD3_SLV       LL_ADC_IsActiveFlag_SLV_AWD3
7630:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @param  ADCxy_COMMON ADC common instance
7631:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   *         (can be set directly from CMSIS definition or by using helper macro @ref __LL_ADC_COMMO
7632:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @retval State of bit (1 or 0).
7633:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
7634:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_SLV_AWD3(ADC_Common_TypeDef *ADCxy_COMMON)
7635:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** {
7636:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   return ((READ_BIT(ADCxy_COMMON->CSR, LL_ADC_FLAG_AWD3_SLV) == (LL_ADC_FLAG_AWD3_SLV)) ? 1UL : 0UL
7637:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** }
7638:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** #endif /* ADC_MULTIMODE_SUPPORT */
7639:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
7640:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /**
7641:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @}
7642:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
7643:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
7644:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /** @defgroup ADC_LL_EF_IT_Management ADC IT management
7645:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @{
7646:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
7647:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
7648:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /**
7649:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @brief  Enable ADC ready.
7650:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @rmtoll IER      ADRDYIE        LL_ADC_EnableIT_ADRDY
7651:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
7652:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @retval None
7653:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
7654:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_EnableIT_ADRDY(ADC_TypeDef *ADCx)
7655:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** {
7656:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   SET_BIT(ADCx->IER, LL_ADC_IT_ADRDY);
7657:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** }
7658:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
7659:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /**
7660:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @brief  Enable interruption ADC group regular end of unitary conversion.
7661:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @rmtoll IER      EOCIE          LL_ADC_EnableIT_EOC
7662:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
7663:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @retval None
7664:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
7665:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_EnableIT_EOC(ADC_TypeDef *ADCx)
7666:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** {
7667:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   SET_BIT(ADCx->IER, LL_ADC_IT_EOC);
ARM GAS  /tmp/ccZ0TYFG.s 			page 168


7668:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** }
7669:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
7670:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /**
7671:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @brief  Enable interruption ADC group regular end of sequence conversions.
7672:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @rmtoll IER      EOSIE          LL_ADC_EnableIT_EOS
7673:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
7674:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @retval None
7675:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
7676:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_EnableIT_EOS(ADC_TypeDef *ADCx)
7677:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** {
7678:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   SET_BIT(ADCx->IER, LL_ADC_IT_EOS);
7679:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** }
7680:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
7681:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /**
7682:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @brief  Enable ADC group regular interruption overrun.
7683:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @rmtoll IER      OVRIE          LL_ADC_EnableIT_OVR
7684:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
7685:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @retval None
7686:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
7687:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_EnableIT_OVR(ADC_TypeDef *ADCx)
7688:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** {
7689:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   SET_BIT(ADCx->IER, LL_ADC_IT_OVR);
7690:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** }
7691:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
7692:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /**
7693:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @brief  Enable interruption ADC group regular end of sampling.
7694:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @rmtoll IER      EOSMPIE        LL_ADC_EnableIT_EOSMP
7695:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
7696:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @retval None
7697:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
7698:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_EnableIT_EOSMP(ADC_TypeDef *ADCx)
7699:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** {
7700:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   SET_BIT(ADCx->IER, LL_ADC_IT_EOSMP);
7701:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** }
7702:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
7703:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /**
7704:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @brief  Enable interruption ADC group injected end of unitary conversion.
7705:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @rmtoll IER      JEOCIE         LL_ADC_EnableIT_JEOC
7706:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
7707:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @retval None
7708:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
7709:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_EnableIT_JEOC(ADC_TypeDef *ADCx)
7710:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** {
7711:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   SET_BIT(ADCx->IER, LL_ADC_IT_JEOC);
7712:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** }
7713:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
7714:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /**
7715:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @brief  Enable interruption ADC group injected end of sequence conversions.
7716:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @rmtoll IER      JEOSIE         LL_ADC_EnableIT_JEOS
7717:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
7718:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @retval None
7719:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
7720:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_EnableIT_JEOS(ADC_TypeDef *ADCx)
7721:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** {
7722:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   SET_BIT(ADCx->IER, LL_ADC_IT_JEOS);
7723:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** }
7724:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
ARM GAS  /tmp/ccZ0TYFG.s 			page 169


7725:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /**
7726:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @brief  Enable interruption ADC group injected context queue overflow.
7727:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @rmtoll IER      JQOVFIE        LL_ADC_EnableIT_JQOVF
7728:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
7729:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @retval None
7730:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
7731:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_EnableIT_JQOVF(ADC_TypeDef *ADCx)
7732:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** {
7733:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   SET_BIT(ADCx->IER, LL_ADC_IT_JQOVF);
7734:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** }
7735:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
7736:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /**
7737:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @brief  Enable interruption ADC analog watchdog 1.
7738:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @rmtoll IER      AWD1IE         LL_ADC_EnableIT_AWD1
7739:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
7740:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @retval None
7741:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
7742:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_EnableIT_AWD1(ADC_TypeDef *ADCx)
7743:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** {
 1922              		.loc 1 7743 1
 1923              		.cfi_startproc
 1924              		@ args = 0, pretend = 0, frame = 8
 1925              		@ frame_needed = 1, uses_anonymous_args = 0
 1926              		@ link register save eliminated.
 1927 0000 80B4     		push	{r7}
 1928              	.LCFI204:
 1929              		.cfi_def_cfa_offset 4
 1930              		.cfi_offset 7, -4
 1931 0002 83B0     		sub	sp, sp, #12
 1932              	.LCFI205:
 1933              		.cfi_def_cfa_offset 16
 1934 0004 00AF     		add	r7, sp, #0
 1935              	.LCFI206:
 1936              		.cfi_def_cfa_register 7
 1937 0006 7860     		str	r0, [r7, #4]
7744:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   SET_BIT(ADCx->IER, LL_ADC_IT_AWD1);
 1938              		.loc 1 7744 3
 1939 0008 7B68     		ldr	r3, [r7, #4]
 1940 000a 5B68     		ldr	r3, [r3, #4]
 1941 000c 43F08002 		orr	r2, r3, #128
 1942 0010 7B68     		ldr	r3, [r7, #4]
 1943 0012 5A60     		str	r2, [r3, #4]
7745:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** }
 1944              		.loc 1 7745 1
 1945 0014 00BF     		nop
 1946 0016 0C37     		adds	r7, r7, #12
 1947              	.LCFI207:
 1948              		.cfi_def_cfa_offset 4
 1949 0018 BD46     		mov	sp, r7
 1950              	.LCFI208:
 1951              		.cfi_def_cfa_register 13
 1952              		@ sp needed
 1953 001a 5DF8047B 		ldr	r7, [sp], #4
 1954              	.LCFI209:
 1955              		.cfi_restore 7
 1956              		.cfi_def_cfa_offset 0
 1957 001e 7047     		bx	lr
ARM GAS  /tmp/ccZ0TYFG.s 			page 170


 1958              		.cfi_endproc
 1959              	.LFE300:
 1961              		.section	.text.LL_ADC_EnableIT_AWD2,"ax",%progbits
 1962              		.align	1
 1963              		.syntax unified
 1964              		.thumb
 1965              		.thumb_func
 1966              		.fpu fpv4-sp-d16
 1968              	LL_ADC_EnableIT_AWD2:
 1969              	.LFB301:
7746:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
7747:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /**
7748:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @brief  Enable interruption ADC analog watchdog 2.
7749:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @rmtoll IER      AWD2IE         LL_ADC_EnableIT_AWD2
7750:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
7751:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @retval None
7752:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
7753:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_EnableIT_AWD2(ADC_TypeDef *ADCx)
7754:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** {
 1970              		.loc 1 7754 1
 1971              		.cfi_startproc
 1972              		@ args = 0, pretend = 0, frame = 8
 1973              		@ frame_needed = 1, uses_anonymous_args = 0
 1974              		@ link register save eliminated.
 1975 0000 80B4     		push	{r7}
 1976              	.LCFI210:
 1977              		.cfi_def_cfa_offset 4
 1978              		.cfi_offset 7, -4
 1979 0002 83B0     		sub	sp, sp, #12
 1980              	.LCFI211:
 1981              		.cfi_def_cfa_offset 16
 1982 0004 00AF     		add	r7, sp, #0
 1983              	.LCFI212:
 1984              		.cfi_def_cfa_register 7
 1985 0006 7860     		str	r0, [r7, #4]
7755:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   SET_BIT(ADCx->IER, LL_ADC_IT_AWD2);
 1986              		.loc 1 7755 3
 1987 0008 7B68     		ldr	r3, [r7, #4]
 1988 000a 5B68     		ldr	r3, [r3, #4]
 1989 000c 43F48072 		orr	r2, r3, #256
 1990 0010 7B68     		ldr	r3, [r7, #4]
 1991 0012 5A60     		str	r2, [r3, #4]
7756:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** }
 1992              		.loc 1 7756 1
 1993 0014 00BF     		nop
 1994 0016 0C37     		adds	r7, r7, #12
 1995              	.LCFI213:
 1996              		.cfi_def_cfa_offset 4
 1997 0018 BD46     		mov	sp, r7
 1998              	.LCFI214:
 1999              		.cfi_def_cfa_register 13
 2000              		@ sp needed
 2001 001a 5DF8047B 		ldr	r7, [sp], #4
 2002              	.LCFI215:
 2003              		.cfi_restore 7
 2004              		.cfi_def_cfa_offset 0
 2005 001e 7047     		bx	lr
ARM GAS  /tmp/ccZ0TYFG.s 			page 171


 2006              		.cfi_endproc
 2007              	.LFE301:
 2009              		.section	.text.LL_ADC_EnableIT_AWD3,"ax",%progbits
 2010              		.align	1
 2011              		.syntax unified
 2012              		.thumb
 2013              		.thumb_func
 2014              		.fpu fpv4-sp-d16
 2016              	LL_ADC_EnableIT_AWD3:
 2017              	.LFB302:
7757:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
7758:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /**
7759:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @brief  Enable interruption ADC analog watchdog 3.
7760:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @rmtoll IER      AWD3IE         LL_ADC_EnableIT_AWD3
7761:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
7762:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @retval None
7763:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
7764:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_EnableIT_AWD3(ADC_TypeDef *ADCx)
7765:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** {
 2018              		.loc 1 7765 1
 2019              		.cfi_startproc
 2020              		@ args = 0, pretend = 0, frame = 8
 2021              		@ frame_needed = 1, uses_anonymous_args = 0
 2022              		@ link register save eliminated.
 2023 0000 80B4     		push	{r7}
 2024              	.LCFI216:
 2025              		.cfi_def_cfa_offset 4
 2026              		.cfi_offset 7, -4
 2027 0002 83B0     		sub	sp, sp, #12
 2028              	.LCFI217:
 2029              		.cfi_def_cfa_offset 16
 2030 0004 00AF     		add	r7, sp, #0
 2031              	.LCFI218:
 2032              		.cfi_def_cfa_register 7
 2033 0006 7860     		str	r0, [r7, #4]
7766:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   SET_BIT(ADCx->IER, LL_ADC_IT_AWD3);
 2034              		.loc 1 7766 3
 2035 0008 7B68     		ldr	r3, [r7, #4]
 2036 000a 5B68     		ldr	r3, [r3, #4]
 2037 000c 43F40072 		orr	r2, r3, #512
 2038 0010 7B68     		ldr	r3, [r7, #4]
 2039 0012 5A60     		str	r2, [r3, #4]
7767:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** }
 2040              		.loc 1 7767 1
 2041 0014 00BF     		nop
 2042 0016 0C37     		adds	r7, r7, #12
 2043              	.LCFI219:
 2044              		.cfi_def_cfa_offset 4
 2045 0018 BD46     		mov	sp, r7
 2046              	.LCFI220:
 2047              		.cfi_def_cfa_register 13
 2048              		@ sp needed
 2049 001a 5DF8047B 		ldr	r7, [sp], #4
 2050              	.LCFI221:
 2051              		.cfi_restore 7
 2052              		.cfi_def_cfa_offset 0
 2053 001e 7047     		bx	lr
ARM GAS  /tmp/ccZ0TYFG.s 			page 172


 2054              		.cfi_endproc
 2055              	.LFE302:
 2057              		.section	.text.LL_ADC_DisableIT_AWD1,"ax",%progbits
 2058              		.align	1
 2059              		.syntax unified
 2060              		.thumb
 2061              		.thumb_func
 2062              		.fpu fpv4-sp-d16
 2064              	LL_ADC_DisableIT_AWD1:
 2065              	.LFB311:
7768:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
7769:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /**
7770:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @brief  Disable interruption ADC ready.
7771:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @rmtoll IER      ADRDYIE        LL_ADC_DisableIT_ADRDY
7772:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
7773:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @retval None
7774:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
7775:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_DisableIT_ADRDY(ADC_TypeDef *ADCx)
7776:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** {
7777:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   CLEAR_BIT(ADCx->IER, LL_ADC_IT_ADRDY);
7778:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** }
7779:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
7780:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /**
7781:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @brief  Disable interruption ADC group regular end of unitary conversion.
7782:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @rmtoll IER      EOCIE          LL_ADC_DisableIT_EOC
7783:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
7784:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @retval None
7785:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
7786:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_DisableIT_EOC(ADC_TypeDef *ADCx)
7787:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** {
7788:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOC);
7789:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** }
7790:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
7791:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /**
7792:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @brief  Disable interruption ADC group regular end of sequence conversions.
7793:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @rmtoll IER      EOSIE          LL_ADC_DisableIT_EOS
7794:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
7795:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @retval None
7796:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
7797:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_DisableIT_EOS(ADC_TypeDef *ADCx)
7798:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** {
7799:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOS);
7800:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** }
7801:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
7802:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /**
7803:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @brief  Disable interruption ADC group regular overrun.
7804:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @rmtoll IER      OVRIE          LL_ADC_DisableIT_OVR
7805:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
7806:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @retval None
7807:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
7808:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_DisableIT_OVR(ADC_TypeDef *ADCx)
7809:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** {
7810:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   CLEAR_BIT(ADCx->IER, LL_ADC_IT_OVR);
7811:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** }
7812:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
7813:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /**
7814:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @brief  Disable interruption ADC group regular end of sampling.
ARM GAS  /tmp/ccZ0TYFG.s 			page 173


7815:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @rmtoll IER      EOSMPIE        LL_ADC_DisableIT_EOSMP
7816:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
7817:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @retval None
7818:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
7819:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_DisableIT_EOSMP(ADC_TypeDef *ADCx)
7820:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** {
7821:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOSMP);
7822:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** }
7823:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
7824:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /**
7825:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @brief  Disable interruption ADC group regular end of unitary conversion.
7826:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @rmtoll IER      JEOCIE         LL_ADC_DisableIT_JEOC
7827:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
7828:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @retval None
7829:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
7830:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_DisableIT_JEOC(ADC_TypeDef *ADCx)
7831:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** {
7832:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   CLEAR_BIT(ADCx->IER, LL_ADC_IT_JEOC);
7833:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** }
7834:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
7835:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /**
7836:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @brief  Disable interruption ADC group injected end of sequence conversions.
7837:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @rmtoll IER      JEOSIE         LL_ADC_DisableIT_JEOS
7838:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
7839:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @retval None
7840:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
7841:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_DisableIT_JEOS(ADC_TypeDef *ADCx)
7842:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** {
7843:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   CLEAR_BIT(ADCx->IER, LL_ADC_IT_JEOS);
7844:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** }
7845:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
7846:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /**
7847:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @brief  Disable interruption ADC group injected context queue overflow.
7848:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @rmtoll IER      JQOVFIE        LL_ADC_DisableIT_JQOVF
7849:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
7850:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @retval None
7851:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
7852:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_DisableIT_JQOVF(ADC_TypeDef *ADCx)
7853:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** {
7854:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   CLEAR_BIT(ADCx->IER, LL_ADC_IT_JQOVF);
7855:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** }
7856:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
7857:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /**
7858:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @brief  Disable interruption ADC analog watchdog 1.
7859:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @rmtoll IER      AWD1IE         LL_ADC_DisableIT_AWD1
7860:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
7861:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @retval None
7862:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
7863:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_DisableIT_AWD1(ADC_TypeDef *ADCx)
7864:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** {
 2066              		.loc 1 7864 1
 2067              		.cfi_startproc
 2068              		@ args = 0, pretend = 0, frame = 8
 2069              		@ frame_needed = 1, uses_anonymous_args = 0
 2070              		@ link register save eliminated.
 2071 0000 80B4     		push	{r7}
 2072              	.LCFI222:
ARM GAS  /tmp/ccZ0TYFG.s 			page 174


 2073              		.cfi_def_cfa_offset 4
 2074              		.cfi_offset 7, -4
 2075 0002 83B0     		sub	sp, sp, #12
 2076              	.LCFI223:
 2077              		.cfi_def_cfa_offset 16
 2078 0004 00AF     		add	r7, sp, #0
 2079              	.LCFI224:
 2080              		.cfi_def_cfa_register 7
 2081 0006 7860     		str	r0, [r7, #4]
7865:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD1);
 2082              		.loc 1 7865 3
 2083 0008 7B68     		ldr	r3, [r7, #4]
 2084 000a 5B68     		ldr	r3, [r3, #4]
 2085 000c 23F08002 		bic	r2, r3, #128
 2086 0010 7B68     		ldr	r3, [r7, #4]
 2087 0012 5A60     		str	r2, [r3, #4]
7866:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** }
 2088              		.loc 1 7866 1
 2089 0014 00BF     		nop
 2090 0016 0C37     		adds	r7, r7, #12
 2091              	.LCFI225:
 2092              		.cfi_def_cfa_offset 4
 2093 0018 BD46     		mov	sp, r7
 2094              	.LCFI226:
 2095              		.cfi_def_cfa_register 13
 2096              		@ sp needed
 2097 001a 5DF8047B 		ldr	r7, [sp], #4
 2098              	.LCFI227:
 2099              		.cfi_restore 7
 2100              		.cfi_def_cfa_offset 0
 2101 001e 7047     		bx	lr
 2102              		.cfi_endproc
 2103              	.LFE311:
 2105              		.section	.text.LL_ADC_DisableIT_AWD2,"ax",%progbits
 2106              		.align	1
 2107              		.syntax unified
 2108              		.thumb
 2109              		.thumb_func
 2110              		.fpu fpv4-sp-d16
 2112              	LL_ADC_DisableIT_AWD2:
 2113              	.LFB312:
7867:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
7868:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /**
7869:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @brief  Disable interruption ADC analog watchdog 2.
7870:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @rmtoll IER      AWD2IE         LL_ADC_DisableIT_AWD2
7871:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
7872:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @retval None
7873:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
7874:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_DisableIT_AWD2(ADC_TypeDef *ADCx)
7875:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** {
 2114              		.loc 1 7875 1
 2115              		.cfi_startproc
 2116              		@ args = 0, pretend = 0, frame = 8
 2117              		@ frame_needed = 1, uses_anonymous_args = 0
 2118              		@ link register save eliminated.
 2119 0000 80B4     		push	{r7}
 2120              	.LCFI228:
ARM GAS  /tmp/ccZ0TYFG.s 			page 175


 2121              		.cfi_def_cfa_offset 4
 2122              		.cfi_offset 7, -4
 2123 0002 83B0     		sub	sp, sp, #12
 2124              	.LCFI229:
 2125              		.cfi_def_cfa_offset 16
 2126 0004 00AF     		add	r7, sp, #0
 2127              	.LCFI230:
 2128              		.cfi_def_cfa_register 7
 2129 0006 7860     		str	r0, [r7, #4]
7876:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD2);
 2130              		.loc 1 7876 3
 2131 0008 7B68     		ldr	r3, [r7, #4]
 2132 000a 5B68     		ldr	r3, [r3, #4]
 2133 000c 23F48072 		bic	r2, r3, #256
 2134 0010 7B68     		ldr	r3, [r7, #4]
 2135 0012 5A60     		str	r2, [r3, #4]
7877:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** }
 2136              		.loc 1 7877 1
 2137 0014 00BF     		nop
 2138 0016 0C37     		adds	r7, r7, #12
 2139              	.LCFI231:
 2140              		.cfi_def_cfa_offset 4
 2141 0018 BD46     		mov	sp, r7
 2142              	.LCFI232:
 2143              		.cfi_def_cfa_register 13
 2144              		@ sp needed
 2145 001a 5DF8047B 		ldr	r7, [sp], #4
 2146              	.LCFI233:
 2147              		.cfi_restore 7
 2148              		.cfi_def_cfa_offset 0
 2149 001e 7047     		bx	lr
 2150              		.cfi_endproc
 2151              	.LFE312:
 2153              		.section	.text.LL_ADC_DisableIT_AWD3,"ax",%progbits
 2154              		.align	1
 2155              		.syntax unified
 2156              		.thumb
 2157              		.thumb_func
 2158              		.fpu fpv4-sp-d16
 2160              	LL_ADC_DisableIT_AWD3:
 2161              	.LFB313:
7878:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** 
7879:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** /**
7880:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @brief  Disable interruption ADC analog watchdog 3.
7881:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @rmtoll IER      AWD3IE         LL_ADC_DisableIT_AWD3
7882:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @param  ADCx ADC instance
7883:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   * @retval None
7884:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   */
7885:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_DisableIT_AWD3(ADC_TypeDef *ADCx)
7886:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** {
 2162              		.loc 1 7886 1
 2163              		.cfi_startproc
 2164              		@ args = 0, pretend = 0, frame = 8
 2165              		@ frame_needed = 1, uses_anonymous_args = 0
 2166              		@ link register save eliminated.
 2167 0000 80B4     		push	{r7}
 2168              	.LCFI234:
ARM GAS  /tmp/ccZ0TYFG.s 			page 176


 2169              		.cfi_def_cfa_offset 4
 2170              		.cfi_offset 7, -4
 2171 0002 83B0     		sub	sp, sp, #12
 2172              	.LCFI235:
 2173              		.cfi_def_cfa_offset 16
 2174 0004 00AF     		add	r7, sp, #0
 2175              	.LCFI236:
 2176              		.cfi_def_cfa_register 7
 2177 0006 7860     		str	r0, [r7, #4]
7887:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h ****   CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD3);
 2178              		.loc 1 7887 3
 2179 0008 7B68     		ldr	r3, [r7, #4]
 2180 000a 5B68     		ldr	r3, [r3, #4]
 2181 000c 23F40072 		bic	r2, r3, #512
 2182 0010 7B68     		ldr	r3, [r7, #4]
 2183 0012 5A60     		str	r2, [r3, #4]
7888:Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_adc.h **** }
 2184              		.loc 1 7888 1
 2185 0014 00BF     		nop
 2186 0016 0C37     		adds	r7, r7, #12
 2187              	.LCFI237:
 2188              		.cfi_def_cfa_offset 4
 2189 0018 BD46     		mov	sp, r7
 2190              	.LCFI238:
 2191              		.cfi_def_cfa_register 13
 2192              		@ sp needed
 2193 001a 5DF8047B 		ldr	r7, [sp], #4
 2194              	.LCFI239:
 2195              		.cfi_restore 7
 2196              		.cfi_def_cfa_offset 0
 2197 001e 7047     		bx	lr
 2198              		.cfi_endproc
 2199              	.LFE313:
 2201              		.section	.text.HAL_ADC_Init,"ax",%progbits
 2202              		.align	1
 2203              		.global	HAL_ADC_Init
 2204              		.syntax unified
 2205              		.thumb
 2206              		.thumb_func
 2207              		.fpu fpv4-sp-d16
 2209              	HAL_ADC_Init:
 2210              	.LFB325:
 2211              		.file 2 "Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c"
   1:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** /**
   2:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   ******************************************************************************
   3:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   * @file    stm32g4xx_hal_adc.c
   4:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   * @author  MCD Application Team
   5:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   * @brief   This file provides firmware functions to manage the following
   6:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   *          functionalities of the Analog to Digital Convertor (ADC)
   7:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   *          peripheral:
   8:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   *           + Initialization and de-initialization functions
   9:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   *             ++ Initialization and Configuration of ADC
  10:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   *           + Operation functions
  11:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   *             ++ Start, stop, get result of conversions of regular
  12:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   *                group, using 3 possible modes: polling, interruption or DMA.
  13:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   *           + Control functions
  14:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   *             ++ Channels configuration on regular group
ARM GAS  /tmp/ccZ0TYFG.s 			page 177


  15:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   *             ++ Analog Watchdog configuration
  16:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   *           + State functions
  17:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   *             ++ ADC state machine management
  18:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   *             ++ Interrupts and flags management
  19:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   *          Other functions (extended functions) are available in file
  20:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   *          "stm32g4xx_hal_adc_ex.c".
  21:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   *
  22:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   @verbatim
  23:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   ==============================================================================
  24:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****                      ##### ADC peripheral features #####
  25:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   ==============================================================================
  26:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   [..]
  27:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   (+) 12-bit, 10-bit, 8-bit or 6-bit configurable resolution.
  28:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
  29:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   (+) Interrupt generation at the end of regular conversion and in case of
  30:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       analog watchdog or overrun events.
  31:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
  32:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   (+) Single and continuous conversion modes.
  33:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
  34:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   (+) Scan mode for conversion of several channels sequentially.
  35:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
  36:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   (+) Data alignment with in-built data coherency.
  37:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
  38:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   (+) Programmable sampling time (channel wise)
  39:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
  40:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   (+) External trigger (timer or EXTI) with configurable polarity
  41:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
  42:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   (+) DMA request generation for transfer of conversions data of regular group.
  43:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
  44:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   (+) Configurable delay between conversions in Dual interleaved mode.
  45:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
  46:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   (+) ADC channels selectable single/differential input.
  47:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
  48:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   (+) ADC offset shared on 4 offset instances.
  49:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   (+) ADC gain compensation
  50:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
  51:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   (+) ADC calibration
  52:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
  53:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   (+) ADC conversion of regular group.
  54:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
  55:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   (+) ADC supply requirements: 1.62 V to 3.6 V.
  56:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
  57:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   (+) ADC input range: from Vref- (connected to Vssa) to Vref+ (connected to
  58:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       Vdda or to an external voltage reference).
  59:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
  60:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
  61:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****                      ##### How to use this driver #####
  62:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   ==============================================================================
  63:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     [..]
  64:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
  65:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****      *** Configuration of top level parameters related to ADC ***
  66:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****      ============================================================
  67:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****      [..]
  68:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
  69:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     (#) Enable the ADC interface
  70:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         (++) As prerequisite, ADC clock must be configured at RCC top level.
  71:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
ARM GAS  /tmp/ccZ0TYFG.s 			page 178


  72:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         (++) Two clock settings are mandatory:
  73:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****              (+++) ADC clock (core clock, also possibly conversion clock).
  74:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
  75:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****              (+++) ADC clock (conversions clock).
  76:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****                    Two possible clock sources: synchronous clock derived from AHB clock
  77:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****                    or asynchronous clock derived from system clock or PLL (output divider P)
  78:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****                    running up to 75MHz.
  79:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
  80:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****              (+++) Example:
  81:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****                    Into HAL_ADC_MspInit() (recommended code location) or with
  82:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****                    other device clock parameters configuration:
  83:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****                (+++) __HAL_RCC_ADC_CLK_ENABLE();                  (mandatory)
  84:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
  85:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****                RCC_ADCCLKSOURCE_PLL enable:                       (optional: if asynchronous clock 
  86:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****                (+++) RCC_PeriphClkInitTypeDef   RCC_PeriphClkInit;
  87:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****                (+++) PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
  88:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****                (+++) PeriphClkInit.AdcClockSelection    = RCC_ADCCLKSOURCE_PLL;
  89:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****                (+++) HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
  90:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
  91:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         (++) ADC clock source and clock prescaler are configured at ADC level with
  92:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****              parameter "ClockPrescaler" using function HAL_ADC_Init().
  93:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
  94:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     (#) ADC pins configuration
  95:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****          (++) Enable the clock for the ADC GPIOs
  96:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****               using macro __HAL_RCC_GPIOx_CLK_ENABLE()
  97:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****          (++) Configure these ADC pins in analog mode
  98:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****               using function HAL_GPIO_Init()
  99:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
 100:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     (#) Optionally, in case of usage of ADC with interruptions:
 101:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****          (++) Configure the NVIC for ADC
 102:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****               using function HAL_NVIC_EnableIRQ(ADCx_IRQn)
 103:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****          (++) Insert the ADC interruption handler function HAL_ADC_IRQHandler()
 104:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****               into the function of corresponding ADC interruption vector
 105:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****               ADCx_IRQHandler().
 106:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
 107:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     (#) Optionally, in case of usage of DMA:
 108:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****          (++) Configure the DMA (DMA channel, mode normal or circular, ...)
 109:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****               using function HAL_DMA_Init().
 110:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****          (++) Configure the NVIC for DMA
 111:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****               using function HAL_NVIC_EnableIRQ(DMAx_Channelx_IRQn)
 112:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****          (++) Insert the ADC interruption handler function HAL_ADC_IRQHandler()
 113:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****               into the function of corresponding DMA interruption vector
 114:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****               DMAx_Channelx_IRQHandler().
 115:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
 116:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****      *** Configuration of ADC, group regular, channels parameters ***
 117:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****      ================================================================
 118:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****      [..]
 119:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
 120:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     (#) Configure the ADC parameters (resolution, data alignment, ...)
 121:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         and regular group parameters (conversion trigger, sequencer, ...)
 122:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         using function HAL_ADC_Init().
 123:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
 124:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     (#) Configure the channels for regular group parameters (channel number,
 125:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         channel rank into sequencer, ..., into regular group)
 126:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         using function HAL_ADC_ConfigChannel().
 127:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
 128:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     (#) Optionally, configure the analog watchdog parameters (channels
ARM GAS  /tmp/ccZ0TYFG.s 			page 179


 129:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         monitored, thresholds, ...)
 130:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         using function HAL_ADC_AnalogWDGConfig().
 131:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
 132:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****      *** Execution of ADC conversions ***
 133:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****      ====================================
 134:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****      [..]
 135:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
 136:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     (#) Optionally, perform an automatic ADC calibration to improve the
 137:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         conversion accuracy
 138:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         using function HAL_ADCEx_Calibration_Start().
 139:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
 140:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     (#) ADC driver can be used among three modes: polling, interruption,
 141:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         transfer by DMA.
 142:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
 143:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         (++) ADC conversion by polling:
 144:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****           (+++) Activate the ADC peripheral and start conversions
 145:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****                 using function HAL_ADC_Start()
 146:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****           (+++) Wait for ADC conversion completion
 147:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****                 using function HAL_ADC_PollForConversion()
 148:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****           (+++) Retrieve conversion results
 149:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****                 using function HAL_ADC_GetValue()
 150:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****           (+++) Stop conversion and disable the ADC peripheral
 151:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****                 using function HAL_ADC_Stop()
 152:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
 153:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         (++) ADC conversion by interruption:
 154:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****           (+++) Activate the ADC peripheral and start conversions
 155:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****                 using function HAL_ADC_Start_IT()
 156:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****           (+++) Wait for ADC conversion completion by call of function
 157:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****                 HAL_ADC_ConvCpltCallback()
 158:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****                 (this function must be implemented in user program)
 159:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****           (+++) Retrieve conversion results
 160:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****                 using function HAL_ADC_GetValue()
 161:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****           (+++) Stop conversion and disable the ADC peripheral
 162:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****                 using function HAL_ADC_Stop_IT()
 163:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
 164:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         (++) ADC conversion with transfer by DMA:
 165:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****           (+++) Activate the ADC peripheral and start conversions
 166:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****                 using function HAL_ADC_Start_DMA()
 167:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****           (+++) Wait for ADC conversion completion by call of function
 168:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****                 HAL_ADC_ConvCpltCallback() or HAL_ADC_ConvHalfCpltCallback()
 169:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****                 (these functions must be implemented in user program)
 170:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****           (+++) Conversion results are automatically transferred by DMA into
 171:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****                 destination variable address.
 172:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****           (+++) Stop conversion and disable the ADC peripheral
 173:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****                 using function HAL_ADC_Stop_DMA()
 174:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
 175:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****      [..]
 176:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
 177:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     (@) Callback functions must be implemented in user program:
 178:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       (+@) HAL_ADC_ErrorCallback()
 179:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       (+@) HAL_ADC_LevelOutOfWindowCallback() (callback of analog watchdog)
 180:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       (+@) HAL_ADC_ConvCpltCallback()
 181:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       (+@) HAL_ADC_ConvHalfCpltCallback
 182:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
 183:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****      *** Deinitialization of ADC ***
 184:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****      ============================================================
 185:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****      [..]
ARM GAS  /tmp/ccZ0TYFG.s 			page 180


 186:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
 187:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     (#) Disable the ADC interface
 188:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       (++) ADC clock can be hard reset and disabled at RCC top level.
 189:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         (++) Hard reset of ADC peripherals
 190:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****              using macro __ADCx_FORCE_RESET(), __ADCx_RELEASE_RESET().
 191:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         (++) ADC clock disable
 192:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****              using the equivalent macro/functions as configuration step.
 193:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****              (+++) Example:
 194:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****                    Into HAL_ADC_MspDeInit() (recommended code location) or with
 195:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****                    other device clock parameters configuration:
 196:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****                (+++) RCC_OscInitStructure.OscillatorType = RCC_OSCILLATORTYPE_HSI14;
 197:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****                (+++) RCC_OscInitStructure.HSI14State = RCC_HSI14_OFF; (if not used for system clock
 198:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****                (+++) HAL_RCC_OscConfig(&RCC_OscInitStructure);
 199:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
 200:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     (#) ADC pins configuration
 201:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****          (++) Disable the clock for the ADC GPIOs
 202:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****               using macro __HAL_RCC_GPIOx_CLK_DISABLE()
 203:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
 204:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     (#) Optionally, in case of usage of ADC with interruptions:
 205:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****          (++) Disable the NVIC for ADC
 206:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****               using function HAL_NVIC_EnableIRQ(ADCx_IRQn)
 207:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
 208:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     (#) Optionally, in case of usage of DMA:
 209:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****          (++) Deinitialize the DMA
 210:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****               using function HAL_DMA_Init().
 211:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****          (++) Disable the NVIC for DMA
 212:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****               using function HAL_NVIC_EnableIRQ(DMAx_Channelx_IRQn)
 213:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
 214:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     [..]
 215:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
 216:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     *** Callback registration ***
 217:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     =============================================
 218:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     [..]
 219:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
 220:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****      The compilation flag USE_HAL_ADC_REGISTER_CALLBACKS, when set to 1,
 221:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****      allows the user to configure dynamically the driver callbacks.
 222:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****      Use Functions @ref HAL_ADC_RegisterCallback()
 223:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****      to register an interrupt callback.
 224:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     [..]
 225:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
 226:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****      Function @ref HAL_ADC_RegisterCallback() allows to register following callbacks:
 227:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****        (+) ConvCpltCallback               : ADC conversion complete callback
 228:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****        (+) ConvHalfCpltCallback           : ADC conversion DMA half-transfer callback
 229:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****        (+) LevelOutOfWindowCallback       : ADC analog watchdog 1 callback
 230:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****        (+) ErrorCallback                  : ADC error callback
 231:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****        (+) InjectedConvCpltCallback       : ADC group injected conversion complete callback
 232:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****        (+) InjectedQueueOverflowCallback  : ADC group injected context queue overflow callback
 233:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****        (+) LevelOutOfWindow2Callback      : ADC analog watchdog 2 callback
 234:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****        (+) LevelOutOfWindow3Callback      : ADC analog watchdog 3 callback
 235:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****        (+) EndOfSamplingCallback          : ADC end of sampling callback
 236:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****        (+) MspInitCallback                : ADC Msp Init callback
 237:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****        (+) MspDeInitCallback              : ADC Msp DeInit callback
 238:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****      This function takes as parameters the HAL peripheral handle, the Callback ID
 239:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****      and a pointer to the user callback function.
 240:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     [..]
 241:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
 242:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****      Use function @ref HAL_ADC_UnRegisterCallback to reset a callback to the default
ARM GAS  /tmp/ccZ0TYFG.s 			page 181


 243:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****      weak function.
 244:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     [..]
 245:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
 246:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****      @ref HAL_ADC_UnRegisterCallback takes as parameters the HAL peripheral handle,
 247:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****      and the Callback ID.
 248:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****      This function allows to reset following callbacks:
 249:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****        (+) ConvCpltCallback               : ADC conversion complete callback
 250:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****        (+) ConvHalfCpltCallback           : ADC conversion DMA half-transfer callback
 251:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****        (+) LevelOutOfWindowCallback       : ADC analog watchdog 1 callback
 252:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****        (+) ErrorCallback                  : ADC error callback
 253:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****        (+) InjectedConvCpltCallback       : ADC group injected conversion complete callback
 254:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****        (+) InjectedQueueOverflowCallback  : ADC group injected context queue overflow callback
 255:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****        (+) LevelOutOfWindow2Callback      : ADC analog watchdog 2 callback
 256:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****        (+) LevelOutOfWindow3Callback      : ADC analog watchdog 3 callback
 257:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****        (+) EndOfSamplingCallback          : ADC end of sampling callback
 258:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****        (+) MspInitCallback                : ADC Msp Init callback
 259:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****        (+) MspDeInitCallback              : ADC Msp DeInit callback
 260:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****      [..]
 261:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
 262:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****      By default, after the @ref HAL_ADC_Init() and when the state is @ref HAL_ADC_STATE_RESET
 263:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****      all callbacks are set to the corresponding weak functions:
 264:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****      examples @ref HAL_ADC_ConvCpltCallback(), @ref HAL_ADC_ErrorCallback().
 265:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****      Exception done for MspInit and MspDeInit functions that are
 266:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****      reset to the legacy weak functions in the @ref HAL_ADC_Init()/ @ref HAL_ADC_DeInit() only when
 267:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****      these callbacks are null (not registered beforehand).
 268:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     [..]
 269:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
 270:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****      If MspInit or MspDeInit are not null, the @ref HAL_ADC_Init()/ @ref HAL_ADC_DeInit()
 271:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****      keep and use the user MspInit/MspDeInit callbacks (registered beforehand) whatever the state.
 272:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****      [..]
 273:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
 274:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****      Callbacks can be registered/unregistered in @ref HAL_ADC_STATE_READY state only.
 275:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****      Exception done MspInit/MspDeInit functions that can be registered/unregistered
 276:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****      in @ref HAL_ADC_STATE_READY or @ref HAL_ADC_STATE_RESET state,
 277:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****      thus registered (user) MspInit/DeInit callbacks can be used during the Init/DeInit.
 278:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     [..]
 279:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
 280:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****      Then, the user first registers the MspInit/MspDeInit user callbacks
 281:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****      using @ref HAL_ADC_RegisterCallback() before calling @ref HAL_ADC_DeInit()
 282:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****      or @ref HAL_ADC_Init() function.
 283:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****      [..]
 284:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
 285:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****      When the compilation flag USE_HAL_ADC_REGISTER_CALLBACKS is set to 0 or
 286:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****      not defined, the callback registration feature is not available and all callbacks
 287:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****      are set to the corresponding weak functions.
 288:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
 289:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   @endverbatim
 290:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   ******************************************************************************
 291:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   * @attention
 292:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   *
 293:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   * <h2><center>&copy; Copyright (c) 2019 STMicroelectronics.
 294:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   * All rights reserved.</center></h2>
 295:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   *
 296:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   * This software component is licensed by ST under BSD 3-Clause license,
 297:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   * the "License"; You may not use this file except in compliance with the
 298:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   * License. You may obtain a copy of the License at:
 299:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   *                        opensource.org/licenses/BSD-3-Clause
ARM GAS  /tmp/ccZ0TYFG.s 			page 182


 300:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   *
 301:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   ******************************************************************************
 302:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   */
 303:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
 304:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** /* Includes ------------------------------------------------------------------*/
 305:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** #include "stm32g4xx_hal.h"
 306:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
 307:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** /** @addtogroup STM32G4xx_HAL_Driver
 308:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   * @{
 309:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   */
 310:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
 311:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** /** @defgroup ADC ADC
 312:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   * @brief ADC HAL module driver
 313:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   * @{
 314:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   */
 315:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
 316:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** #ifdef HAL_ADC_MODULE_ENABLED
 317:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
 318:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** /* Private typedef -----------------------------------------------------------*/
 319:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** /* Private define ------------------------------------------------------------*/
 320:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
 321:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** /** @defgroup ADC_Private_Constants ADC Private Constants
 322:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   * @{
 323:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   */
 324:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
 325:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** #define ADC_CFGR_FIELDS_1  ((ADC_CFGR_RES    | ADC_CFGR_ALIGN   |\
 326:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****                              ADC_CFGR_CONT   | ADC_CFGR_OVRMOD  |\
 327:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****                              ADC_CFGR_DISCEN | ADC_CFGR_DISCNUM |\
 328:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****                              ADC_CFGR_EXTEN  | ADC_CFGR_EXTSEL))   /*!< ADC_CFGR fields of paramete
 329:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****                                                                         when no regular conversion 
 330:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   
 331:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** /* Timeout values for ADC operations (enable settling time,                   */
 332:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** /*   disable settling time, ...).                                             */
 333:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** /*   Values defined to be higher than worst cases: low clock frequency,       */
 334:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** /*   maximum prescalers.                                                      */
 335:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** #define ADC_ENABLE_TIMEOUT              (2UL)    /*!< ADC enable time-out value  */
 336:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** #define ADC_DISABLE_TIMEOUT             (2UL)    /*!< ADC disable time-out value */
 337:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
 338:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** /* Timeout to wait for current conversion on going to be completed.           */
 339:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** /* Timeout fixed to longest ADC conversion possible, for 1 channel:           */
 340:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** /*   - maximum sampling time (640.5 adc_clk)                                  */
 341:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** /*   - ADC resolution (Tsar 12 bits= 12.5 adc_clk)                            */
 342:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** /*   - System clock / ADC clock <= 4096 (hypothesis of maximum clock ratio)   */
 343:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** /*   - ADC oversampling ratio 256                                             */
 344:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** /*   Calculation: 653 * 4096 * 256 CPU clock cycles max                       */
 345:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** /* Unit: cycles of CPU clock.                                                 */
 346:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** #define ADC_CONVERSION_TIME_MAX_CPU_CYCLES (653UL * 4096UL * 256UL)  /*!< ADC conversion completion
 347:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
 348:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
 349:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** /**
 350:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   * @}
 351:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   */
 352:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
 353:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** /* Private macro -------------------------------------------------------------*/
 354:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** /* Private variables ---------------------------------------------------------*/
 355:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** /* Private function prototypes -----------------------------------------------*/
 356:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** /* Exported functions --------------------------------------------------------*/
ARM GAS  /tmp/ccZ0TYFG.s 			page 183


 357:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
 358:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** /** @defgroup ADC_Exported_Functions ADC Exported Functions
 359:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   * @{
 360:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   */
 361:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
 362:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** /** @defgroup ADC_Exported_Functions_Group1 Initialization and de-initialization functions
 363:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   * @brief    ADC Initialization and Configuration functions
 364:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   *
 365:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** @verbatim
 366:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****  ===============================================================================
 367:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****               ##### Initialization and de-initialization functions #####
 368:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****  ===============================================================================
 369:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     [..]  This section provides functions allowing to:
 370:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       (+) Initialize and configure the ADC.
 371:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       (+) De-initialize the ADC.
 372:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** @endverbatim
 373:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   * @{
 374:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   */
 375:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
 376:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** /**
 377:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   * @brief  Initialize the ADC peripheral and regular group according to
 378:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   *         parameters specified in structure "ADC_InitTypeDef".
 379:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   * @note   As prerequisite, ADC clock must be configured at RCC top level
 380:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   *         (refer to description of RCC configuration for ADC
 381:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   *         in header of this file).
 382:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   * @note   Possibility to update parameters on the fly:
 383:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   *         This function initializes the ADC MSP (HAL_ADC_MspInit()) only when
 384:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   *         coming from ADC state reset. Following calls to this function can
 385:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   *         be used to reconfigure some parameters of ADC_InitTypeDef
 386:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   *         structure on the fly, without modifying MSP configuration. If ADC
 387:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   *         MSP has to be modified again, HAL_ADC_DeInit() must be called
 388:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   *         before HAL_ADC_Init().
 389:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   *         The setting of these parameters is conditioned to ADC state.
 390:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   *         For parameters constraints, see comments of structure
 391:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   *         "ADC_InitTypeDef".
 392:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   * @note   This function configures the ADC within 2 scopes: scope of entire
 393:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   *         ADC and scope of regular group. For parameters details, see comments
 394:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   *         of structure "ADC_InitTypeDef".
 395:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   * @note   Parameters related to common ADC registers (ADC clock mode) are set
 396:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   *         only if all ADCs are disabled.
 397:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   *         If this is not the case, these common parameters setting are
 398:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   *         bypassed without error reporting: it can be the intended behaviour in
 399:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   *         case of update of a parameter of ADC_InitTypeDef on the fly,
 400:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   *         without  disabling the other ADCs.
 401:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   * @param hadc ADC handle
 402:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   * @retval HAL status
 403:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   */
 404:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
 405:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** {
 2212              		.loc 2 405 1
 2213              		.cfi_startproc
 2214              		@ args = 0, pretend = 0, frame = 32
 2215              		@ frame_needed = 1, uses_anonymous_args = 0
 2216 0000 90B5     		push	{r4, r7, lr}
 2217              	.LCFI240:
 2218              		.cfi_def_cfa_offset 12
 2219              		.cfi_offset 4, -12
ARM GAS  /tmp/ccZ0TYFG.s 			page 184


 2220              		.cfi_offset 7, -8
 2221              		.cfi_offset 14, -4
 2222 0002 89B0     		sub	sp, sp, #36
 2223              	.LCFI241:
 2224              		.cfi_def_cfa_offset 48
 2225 0004 00AF     		add	r7, sp, #0
 2226              	.LCFI242:
 2227              		.cfi_def_cfa_register 7
 2228 0006 7860     		str	r0, [r7, #4]
 406:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 2229              		.loc 2 406 21
 2230 0008 0023     		movs	r3, #0
 2231 000a FB77     		strb	r3, [r7, #31]
 407:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   uint32_t tmpCFGR;
 408:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   uint32_t tmp_adc_reg_is_conversion_on_going;
 409:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   __IO uint32_t wait_loop_index = 0UL;
 2232              		.loc 2 409 17
 2233 000c 0023     		movs	r3, #0
 2234 000e BB60     		str	r3, [r7, #8]
 410:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   uint32_t tmp_adc_is_conversion_on_going_regular;
 411:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   uint32_t tmp_adc_is_conversion_on_going_injected;
 412:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
 413:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   /* Check ADC handle */
 414:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   if (hadc == NULL)
 2235              		.loc 2 414 6
 2236 0010 7B68     		ldr	r3, [r7, #4]
 2237 0012 002B     		cmp	r3, #0
 2238 0014 01D1     		bne	.L74
 415:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   {
 416:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     return HAL_ERROR;
 2239              		.loc 2 416 12
 2240 0016 0123     		movs	r3, #1
 2241 0018 ADE1     		b	.L75
 2242              	.L74:
 417:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   }
 418:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
 419:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   /* Check the parameters */
 420:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 421:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   assert_param(IS_ADC_CLOCKPRESCALER(hadc->Init.ClockPrescaler));
 422:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   assert_param(IS_ADC_RESOLUTION(hadc->Init.Resolution));
 423:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
 424:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   assert_param(IS_ADC_GAIN_COMPENSATION(hadc->Init.GainCompensation));
 425:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
 426:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 427:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   assert_param(IS_ADC_EXTTRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
 428:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   assert_param(IS_ADC_EXTTRIG(hadc, hadc->Init.ExternalTrigConv));
 429:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   assert_param(IS_ADC_SAMPLINGMODE(hadc->Init.SamplingMode));
 430:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
 431:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
 432:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
 433:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
 434:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));
 435:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
 436:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 2243              		.loc 2 436 17
 2244 001a 7B68     		ldr	r3, [r7, #4]
 2245 001c 5B69     		ldr	r3, [r3, #20]
ARM GAS  /tmp/ccZ0TYFG.s 			page 185


 2246              		.loc 2 436 6
 2247 001e 002B     		cmp	r3, #0
 437:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   {
 438:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
 439:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
 440:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
 441:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     if (hadc->Init.DiscontinuousConvMode == ENABLE)
 442:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     {
 443:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
 444:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     }
 445:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   }
 446:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
 447:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   /* DISCEN and CONT bits cannot be set at the same time */
 448:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == 
 449:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
 450:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   /* Actions performed only if ADC is coming from state reset:                */
 451:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   /* - Initialization of ADC MSP                                              */
 452:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   if (hadc->State == HAL_ADC_STATE_RESET)
 2248              		.loc 2 452 11
 2249 0020 7B68     		ldr	r3, [r7, #4]
 2250 0022 DB6D     		ldr	r3, [r3, #92]
 2251              		.loc 2 452 6
 2252 0024 002B     		cmp	r3, #0
 2253 0026 09D1     		bne	.L77
 453:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   {
 454:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** #if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
 455:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     /* Init the ADC Callback settings */
 456:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     hadc->ConvCpltCallback              = HAL_ADC_ConvCpltCallback;                 /* Legacy weak 
 457:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     hadc->ConvHalfCpltCallback          = HAL_ADC_ConvHalfCpltCallback;             /* Legacy weak 
 458:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     hadc->LevelOutOfWindowCallback      = HAL_ADC_LevelOutOfWindowCallback;         /* Legacy weak 
 459:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     hadc->ErrorCallback                 = HAL_ADC_ErrorCallback;                    /* Legacy weak 
 460:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     hadc->InjectedConvCpltCallback      = HAL_ADCEx_InjectedConvCpltCallback;       /* Legacy weak 
 461:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     hadc->InjectedQueueOverflowCallback = HAL_ADCEx_InjectedQueueOverflowCallback;  /* Legacy weak 
 462:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     hadc->LevelOutOfWindow2Callback     = HAL_ADCEx_LevelOutOfWindow2Callback;      /* Legacy weak 
 463:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     hadc->LevelOutOfWindow3Callback     = HAL_ADCEx_LevelOutOfWindow3Callback;      /* Legacy weak 
 464:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     hadc->EndOfSamplingCallback         = HAL_ADCEx_EndOfSamplingCallback;          /* Legacy weak 
 465:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
 466:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     if (hadc->MspInitCallback == NULL)
 467:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     {
 468:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       hadc->MspInitCallback = HAL_ADC_MspInit; /* Legacy weak MspInit  */
 469:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     }
 470:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
 471:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     /* Init the low level hardware */
 472:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     hadc->MspInitCallback(hadc);
 473:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** #else
 474:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     /* Init the low level hardware */
 475:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     HAL_ADC_MspInit(hadc);
 2254              		.loc 2 475 5
 2255 0028 7868     		ldr	r0, [r7, #4]
 2256 002a FFF7FEFF 		bl	HAL_ADC_MspInit
 476:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** #endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
 477:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
 478:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     /* Set ADC error code to none */
 479:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     ADC_CLEAR_ERRORCODE(hadc);
 2257              		.loc 2 479 5
 2258 002e 7B68     		ldr	r3, [r7, #4]
 2259 0030 0022     		movs	r2, #0
ARM GAS  /tmp/ccZ0TYFG.s 			page 186


 2260 0032 1A66     		str	r2, [r3, #96]
 480:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
 481:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     /* Initialize Lock */
 482:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     hadc->Lock = HAL_UNLOCKED;
 2261              		.loc 2 482 16
 2262 0034 7B68     		ldr	r3, [r7, #4]
 2263 0036 0022     		movs	r2, #0
 2264 0038 83F85820 		strb	r2, [r3, #88]
 2265              	.L77:
 483:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   }
 484:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
 485:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
 486:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 2266              		.loc 2 486 7
 2267 003c 7B68     		ldr	r3, [r7, #4]
 2268 003e 1B68     		ldr	r3, [r3]
 2269 0040 1846     		mov	r0, r3
 2270 0042 FFF7FEFF 		bl	LL_ADC_IsDeepPowerDownEnabled
 2271 0046 0346     		mov	r3, r0
 2272              		.loc 2 486 6
 2273 0048 002B     		cmp	r3, #0
 2274 004a 04D0     		beq	.L78
 487:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   {
 488:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     /* Disable ADC deep power down mode */
 489:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     LL_ADC_DisableDeepPowerDown(hadc->Instance);
 2275              		.loc 2 489 5
 2276 004c 7B68     		ldr	r3, [r7, #4]
 2277 004e 1B68     		ldr	r3, [r3]
 2278 0050 1846     		mov	r0, r3
 2279 0052 FFF7FEFF 		bl	LL_ADC_DisableDeepPowerDown
 2280              	.L78:
 490:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
 491:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     /* System was in deep power down mode, calibration must
 492:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****      be relaunched or a previously saved calibration factor
 493:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****      re-applied once the ADC voltage regulator is enabled */
 494:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   }
 495:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
 496:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 2281              		.loc 2 496 7
 2282 0056 7B68     		ldr	r3, [r7, #4]
 2283 0058 1B68     		ldr	r3, [r3]
 2284 005a 1846     		mov	r0, r3
 2285 005c FFF7FEFF 		bl	LL_ADC_IsInternalRegulatorEnabled
 2286 0060 0346     		mov	r3, r0
 2287              		.loc 2 496 6
 2288 0062 002B     		cmp	r3, #0
 2289 0064 13D1     		bne	.L79
 497:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   {
 498:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     /* Enable ADC internal voltage regulator */
 499:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     LL_ADC_EnableInternalRegulator(hadc->Instance);
 2290              		.loc 2 499 5
 2291 0066 7B68     		ldr	r3, [r7, #4]
 2292 0068 1B68     		ldr	r3, [r3]
 2293 006a 1846     		mov	r0, r3
 2294 006c FFF7FEFF 		bl	LL_ADC_EnableInternalRegulator
 500:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
 501:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     /* Note: Variable divided by 2 to compensate partially              */
ARM GAS  /tmp/ccZ0TYFG.s 			page 187


 502:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     /*       CPU processing cycles, scaling in us split to not          */
 503:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     /*       exceed 32 bits register capacity and handle low frequency. */
 504:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL 
 2295              		.loc 2 504 69
 2296 0070 9E4B     		ldr	r3, .L100
 2297 0072 1B68     		ldr	r3, [r3]
 2298 0074 9B09     		lsrs	r3, r3, #6
 2299 0076 9E4A     		ldr	r2, .L100+4
 2300 0078 A2FB0323 		umull	r2, r3, r2, r3
 2301 007c 9B09     		lsrs	r3, r3, #6
 2302              		.loc 2 504 21
 2303 007e BB60     		str	r3, [r7, #8]
 505:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     while (wait_loop_index != 0UL)
 2304              		.loc 2 505 11
 2305 0080 02E0     		b	.L80
 2306              	.L81:
 506:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     {
 507:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       wait_loop_index--;
 2307              		.loc 2 507 22
 2308 0082 BB68     		ldr	r3, [r7, #8]
 2309 0084 013B     		subs	r3, r3, #1
 2310 0086 BB60     		str	r3, [r7, #8]
 2311              	.L80:
 505:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     while (wait_loop_index != 0UL)
 2312              		.loc 2 505 28
 2313 0088 BB68     		ldr	r3, [r7, #8]
 505:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     while (wait_loop_index != 0UL)
 2314              		.loc 2 505 11
 2315 008a 002B     		cmp	r3, #0
 2316 008c F9D1     		bne	.L81
 2317              	.L79:
 508:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     }
 509:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   }
 510:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
 511:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   /* Verification that ADC voltage regulator is correctly enabled, whether    */
 512:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   /* or not ADC is coming from state reset (if any potential problem of       */
 513:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   /* clocking, voltage regulator would not be enabled).                       */
 514:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 2318              		.loc 2 514 7
 2319 008e 7B68     		ldr	r3, [r7, #4]
 2320 0090 1B68     		ldr	r3, [r3]
 2321 0092 1846     		mov	r0, r3
 2322 0094 FFF7FEFF 		bl	LL_ADC_IsInternalRegulatorEnabled
 2323 0098 0346     		mov	r3, r0
 2324              		.loc 2 514 6
 2325 009a 002B     		cmp	r3, #0
 2326 009c 0DD1     		bne	.L82
 515:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   {
 516:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     /* Update ADC state machine to error */
 517:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 2327              		.loc 2 517 5
 2328 009e 7B68     		ldr	r3, [r7, #4]
 2329 00a0 DB6D     		ldr	r3, [r3, #92]
 2330 00a2 43F01002 		orr	r2, r3, #16
 2331 00a6 7B68     		ldr	r3, [r7, #4]
 2332 00a8 DA65     		str	r2, [r3, #92]
 518:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
ARM GAS  /tmp/ccZ0TYFG.s 			page 188


 519:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     /* Set ADC error code to ADC peripheral internal error */
 520:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 2333              		.loc 2 520 5
 2334 00aa 7B68     		ldr	r3, [r7, #4]
 2335 00ac 1B6E     		ldr	r3, [r3, #96]
 2336 00ae 43F00102 		orr	r2, r3, #1
 2337 00b2 7B68     		ldr	r3, [r7, #4]
 2338 00b4 1A66     		str	r2, [r3, #96]
 521:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
 522:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     tmp_hal_status = HAL_ERROR;
 2339              		.loc 2 522 20
 2340 00b6 0123     		movs	r3, #1
 2341 00b8 FB77     		strb	r3, [r7, #31]
 2342              	.L82:
 523:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   }
 524:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
 525:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   /* Configuration of ADC parameters if previous preliminary actions are      */
 526:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   /* correctly completed and if there is no conversion on going on regular    */
 527:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
 528:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   /* called to update a parameter on the fly).                                */
 529:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 2343              		.loc 2 529 40
 2344 00ba 7B68     		ldr	r3, [r7, #4]
 2345 00bc 1B68     		ldr	r3, [r3]
 2346 00be 1846     		mov	r0, r3
 2347 00c0 FFF7FEFF 		bl	LL_ADC_REG_IsConversionOngoing
 2348 00c4 7861     		str	r0, [r7, #20]
 530:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
 531:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 2349              		.loc 2 531 13
 2350 00c6 7B68     		ldr	r3, [r7, #4]
 2351 00c8 DB6D     		ldr	r3, [r3, #92]
 2352              		.loc 2 531 21
 2353 00ca 03F01003 		and	r3, r3, #16
 2354              		.loc 2 531 6
 2355 00ce 002B     		cmp	r3, #0
 2356 00d0 40F04881 		bne	.L83
 532:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       && (tmp_adc_reg_is_conversion_on_going == 0UL)
 2357              		.loc 2 532 7
 2358 00d4 7B69     		ldr	r3, [r7, #20]
 2359 00d6 002B     		cmp	r3, #0
 2360 00d8 40F04481 		bne	.L83
 533:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****      )
 534:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   {
 535:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     /* Set ADC state */
 536:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     ADC_STATE_CLR_SET(hadc->State,
 2361              		.loc 2 536 5
 2362 00dc 7B68     		ldr	r3, [r7, #4]
 2363 00de DB6D     		ldr	r3, [r3, #92]
 2364 00e0 23F48173 		bic	r3, r3, #258
 2365 00e4 43F00202 		orr	r2, r3, #2
 2366 00e8 7B68     		ldr	r3, [r7, #4]
 2367 00ea DA65     		str	r2, [r3, #92]
 537:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****                       HAL_ADC_STATE_REG_BUSY,
 538:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****                       HAL_ADC_STATE_BUSY_INTERNAL);
 539:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
 540:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     /* Configuration of common ADC parameters                                 */
ARM GAS  /tmp/ccZ0TYFG.s 			page 189


 541:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
 542:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     /* Parameters update conditioned to ADC state:                            */
 543:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     /* Parameters that can be updated only when ADC is disabled:              */
 544:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     /*  - clock configuration                                                 */
 545:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 2368              		.loc 2 545 9
 2369 00ec 7B68     		ldr	r3, [r7, #4]
 2370 00ee 1B68     		ldr	r3, [r3]
 2371 00f0 1846     		mov	r0, r3
 2372 00f2 FFF7FEFF 		bl	LL_ADC_IsEnabled
 2373 00f6 0346     		mov	r3, r0
 2374              		.loc 2 545 8
 2375 00f8 002B     		cmp	r3, #0
 2376 00fa 41D1     		bne	.L84
 546:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     {
 547:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 2377              		.loc 2 547 11
 2378 00fc 7B68     		ldr	r3, [r7, #4]
 2379 00fe 1B68     		ldr	r3, [r3]
 2380              		.loc 2 547 93
 2381 0100 B3F1A04F 		cmp	r3, #1342177280
 2382 0104 04D0     		beq	.L85
 2383              		.loc 2 547 11 discriminator 2
 2384 0106 7B68     		ldr	r3, [r7, #4]
 2385 0108 1B68     		ldr	r3, [r3]
 2386 010a 7A4A     		ldr	r2, .L100+8
 2387 010c 9342     		cmp	r3, r2
 2388 010e 0FD1     		bne	.L86
 2389              	.L85:
 2390              		.loc 2 547 11 is_stmt 0 discriminator 3
 2391 0110 4FF0A040 		mov	r0, #1342177280
 2392 0114 FFF7FEFF 		bl	LL_ADC_IsEnabled
 2393 0118 0446     		mov	r4, r0
 2394 011a 7648     		ldr	r0, .L100+8
 2395 011c FFF7FEFF 		bl	LL_ADC_IsEnabled
 2396 0120 0346     		mov	r3, r0
 2397 0122 2343     		orrs	r3, r3, r4
 2398              		.loc 2 547 93 is_stmt 1 discriminator 3
 2399 0124 002B     		cmp	r3, #0
 2400 0126 0CBF     		ite	eq
 2401 0128 0123     		moveq	r3, #1
 2402 012a 0023     		movne	r3, #0
 2403 012c DBB2     		uxtb	r3, r3
 2404 012e 12E0     		b	.L87
 2405              	.L86:
 2406              		.loc 2 547 11 discriminator 4
 2407 0130 7148     		ldr	r0, .L100+12
 2408 0132 FFF7FEFF 		bl	LL_ADC_IsEnabled
 2409 0136 0446     		mov	r4, r0
 2410 0138 7048     		ldr	r0, .L100+16
 2411 013a FFF7FEFF 		bl	LL_ADC_IsEnabled
 2412 013e 0346     		mov	r3, r0
 2413 0140 1C43     		orrs	r4, r4, r3
 2414 0142 6F48     		ldr	r0, .L100+20
 2415 0144 FFF7FEFF 		bl	LL_ADC_IsEnabled
 2416 0148 0346     		mov	r3, r0
 2417 014a 2343     		orrs	r3, r3, r4
ARM GAS  /tmp/ccZ0TYFG.s 			page 190


 2418              		.loc 2 547 93 discriminator 4
 2419 014c 002B     		cmp	r3, #0
 2420 014e 0CBF     		ite	eq
 2421 0150 0123     		moveq	r3, #1
 2422 0152 0023     		movne	r3, #0
 2423 0154 DBB2     		uxtb	r3, r3
 2424              	.L87:
 2425              		.loc 2 547 10 discriminator 6
 2426 0156 002B     		cmp	r3, #0
 2427 0158 12D0     		beq	.L84
 548:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       {
 549:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         /* Reset configuration of ADC common register CCR:                      */
 550:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         /*                                                                      */
 551:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         /*   - ADC clock mode and ACC prescaler (CKMODE and PRESC bits)are set  */
 552:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         /*     according to adc->Init.ClockPrescaler. It selects the clock      */
 553:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         /*    source and sets the clock division factor.                        */
 554:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         /*                                                                      */
 555:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         /* Some parameters of this register are not reset, since they are set   */
 556:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         /* by other functions and must be kept in case of usage of this         */
 557:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         /* function on the fly (update of a parameter of ADC_InitTypeDef        */
 558:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         /* without needing to reconfigure all other ADC groups/channels         */
 559:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         /* parameters):                                                         */
 560:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         /*   - when multimode feature is available, multimode-related           */
 561:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
 562:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
 563:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
 564:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         /*     (set into HAL_ADC_ConfigChannel() or                             */
 565:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         /*     HAL_ADCEx_InjectedConfigChannel() )                              */
 566:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 2428              		.loc 2 566 31
 2429 015a 7B68     		ldr	r3, [r7, #4]
 2430 015c 1B68     		ldr	r3, [r3]
 2431              		.loc 2 566 9
 2432 015e B3F1A04F 		cmp	r3, #1342177280
 2433 0162 04D0     		beq	.L88
 2434              		.loc 2 566 31 discriminator 2
 2435 0164 7B68     		ldr	r3, [r7, #4]
 2436 0166 1B68     		ldr	r3, [r3]
 2437 0168 624A     		ldr	r2, .L100+8
 2438 016a 9342     		cmp	r3, r2
 2439 016c 01D1     		bne	.L89
 2440              	.L88:
 2441              		.loc 2 566 9 discriminator 3
 2442 016e 654A     		ldr	r2, .L100+24
 2443 0170 00E0     		b	.L90
 2444              	.L89:
 2445              		.loc 2 566 9 is_stmt 0 discriminator 4
 2446 0172 654A     		ldr	r2, .L100+28
 2447              	.L90:
 2448              		.loc 2 566 9 discriminator 6
 2449 0174 7B68     		ldr	r3, [r7, #4]
 2450 0176 5B68     		ldr	r3, [r3, #4]
 2451 0178 1946     		mov	r1, r3
 2452 017a 1046     		mov	r0, r2
 2453 017c FFF7FEFF 		bl	LL_ADC_SetCommonClock
 2454              	.L84:
 567:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       }
ARM GAS  /tmp/ccZ0TYFG.s 			page 191


 568:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     }
 569:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
 570:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     /* Configuration of ADC:                                                  */
 571:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     /*  - resolution                               Init.Resolution            */
 572:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     /*  - data alignment                           Init.DataAlign             */
 573:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     /*  - external trigger to start conversion     Init.ExternalTrigConv      */
 574:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
 575:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     /*  - continuous conversion mode               Init.ContinuousConvMode    */
 576:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     /*  - overrun                                  Init.Overrun               */
 577:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     /*  - discontinuous mode                       Init.DiscontinuousConvMode */
 578:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
 579:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 2455              		.loc 2 579 17 is_stmt 1
 2456 0180 7B68     		ldr	r3, [r7, #4]
 2457 0182 5B7F     		ldrb	r3, [r3, #29]	@ zero_extendqisi2
 2458 0184 5A03     		lsls	r2, r3, #13
 580:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****                 hadc->Init.Overrun                                                     |
 2459              		.loc 2 580 27
 2460 0186 7B68     		ldr	r3, [r7, #4]
 2461 0188 DB6B     		ldr	r3, [r3, #60]
 579:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****                 hadc->Init.Overrun                                                     |
 2462              		.loc 2 579 88
 2463 018a 1A43     		orrs	r2, r2, r3
 581:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****                 hadc->Init.DataAlign                                                   |
 2464              		.loc 2 581 27
 2465 018c 7B68     		ldr	r3, [r7, #4]
 2466 018e DB68     		ldr	r3, [r3, #12]
 580:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****                 hadc->Init.Overrun                                                     |
 2467              		.loc 2 580 88
 2468 0190 1A43     		orrs	r2, r2, r3
 582:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****                 hadc->Init.Resolution                                                  |
 2469              		.loc 2 582 27
 2470 0192 7B68     		ldr	r3, [r7, #4]
 2471 0194 9B68     		ldr	r3, [r3, #8]
 581:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****                 hadc->Init.DataAlign                                                   |
 2472              		.loc 2 581 88
 2473 0196 1A43     		orrs	r2, r2, r3
 583:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 2474              		.loc 2 583 17
 2475 0198 7B68     		ldr	r3, [r7, #4]
 2476 019a 93F82430 		ldrb	r3, [r3, #36]	@ zero_extendqisi2
 2477 019e 1B04     		lsls	r3, r3, #16
 579:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****                 hadc->Init.Overrun                                                     |
 2478              		.loc 2 579 14
 2479 01a0 1343     		orrs	r3, r3, r2
 2480 01a2 BB61     		str	r3, [r7, #24]
 584:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
 585:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     if (hadc->Init.DiscontinuousConvMode == ENABLE)
 2481              		.loc 2 585 19
 2482 01a4 7B68     		ldr	r3, [r7, #4]
 2483 01a6 93F82430 		ldrb	r3, [r3, #36]	@ zero_extendqisi2
 2484              		.loc 2 585 8
 2485 01aa 012B     		cmp	r3, #1
 2486 01ac 06D1     		bne	.L91
 586:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     {
 587:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 2487              		.loc 2 587 18
ARM GAS  /tmp/ccZ0TYFG.s 			page 192


 2488 01ae 7B68     		ldr	r3, [r7, #4]
 2489 01b0 9B6A     		ldr	r3, [r3, #40]
 2490 01b2 013B     		subs	r3, r3, #1
 2491 01b4 5B04     		lsls	r3, r3, #17
 2492              		.loc 2 587 15
 2493 01b6 BA69     		ldr	r2, [r7, #24]
 2494 01b8 1343     		orrs	r3, r3, r2
 2495 01ba BB61     		str	r3, [r7, #24]
 2496              	.L91:
 588:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     }
 589:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
 590:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     /* Enable external trigger if trigger selection is different of software  */
 591:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     /* start.                                                                 */
 592:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     /* Note: This configuration keeps the hardware feature of parameter       */
 593:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
 594:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     /*       software start.                                                  */
 595:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 2497              		.loc 2 595 19
 2498 01bc 7B68     		ldr	r3, [r7, #4]
 2499 01be DB6A     		ldr	r3, [r3, #44]
 2500              		.loc 2 595 8
 2501 01c0 002B     		cmp	r3, #0
 2502 01c2 09D0     		beq	.L92
 596:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     {
 597:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 2503              		.loc 2 597 30
 2504 01c4 7B68     		ldr	r3, [r7, #4]
 2505 01c6 DB6A     		ldr	r3, [r3, #44]
 2506              		.loc 2 597 48
 2507 01c8 03F47872 		and	r2, r3, #992
 598:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****                   | hadc->Init.ExternalTrigConvEdge
 2508              		.loc 2 598 31
 2509 01cc 7B68     		ldr	r3, [r7, #4]
 2510 01ce 1B6B     		ldr	r3, [r3, #48]
 2511              		.loc 2 598 19
 2512 01d0 1343     		orrs	r3, r3, r2
 597:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****                   | hadc->Init.ExternalTrigConvEdge
 2513              		.loc 2 597 15
 2514 01d2 BA69     		ldr	r2, [r7, #24]
 2515 01d4 1343     		orrs	r3, r3, r2
 2516 01d6 BB61     		str	r3, [r7, #24]
 2517              	.L92:
 599:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****                  );
 600:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     }
 601:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
 602:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     /* Update Configuration Register CFGR */
 603:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 2518              		.loc 2 603 5
 2519 01d8 7B68     		ldr	r3, [r7, #4]
 2520 01da 1B68     		ldr	r3, [r3]
 2521 01dc DA68     		ldr	r2, [r3, #12]
 2522 01de 4B4B     		ldr	r3, .L100+32
 2523 01e0 1340     		ands	r3, r3, r2
 2524 01e2 7A68     		ldr	r2, [r7, #4]
 2525 01e4 1268     		ldr	r2, [r2]
 2526 01e6 B969     		ldr	r1, [r7, #24]
 2527 01e8 0B43     		orrs	r3, r3, r1
ARM GAS  /tmp/ccZ0TYFG.s 			page 193


 2528 01ea D360     		str	r3, [r2, #12]
 604:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
 605:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     /* Configuration of sampling mode */
 606:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 2529              		.loc 2 606 5
 2530 01ec 7B68     		ldr	r3, [r7, #4]
 2531 01ee 1B68     		ldr	r3, [r3]
 2532 01f0 1B69     		ldr	r3, [r3, #16]
 2533 01f2 23F04061 		bic	r1, r3, #201326592
 2534 01f6 7B68     		ldr	r3, [r7, #4]
 2535 01f8 5A6B     		ldr	r2, [r3, #52]
 2536 01fa 7B68     		ldr	r3, [r7, #4]
 2537 01fc 1B68     		ldr	r3, [r3]
 2538 01fe 0A43     		orrs	r2, r2, r1
 2539 0200 1A61     		str	r2, [r3, #16]
 607:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
 608:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     /* Parameters update conditioned to ADC state:                            */
 609:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     /* Parameters that can be updated when ADC is disabled or enabled without */
 610:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     /* conversion on going on regular and injected groups:                    */
 611:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     /*  - Gain Compensation               Init.GainCompensation               */
 612:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     /*  - DMA continuous request          Init.DMAContinuousRequests          */
 613:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
 614:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     /*  - Oversampling parameters         Init.Oversampling                   */
 615:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 2540              		.loc 2 615 46
 2541 0202 7B68     		ldr	r3, [r7, #4]
 2542 0204 1B68     		ldr	r3, [r3]
 2543 0206 1846     		mov	r0, r3
 2544 0208 FFF7FEFF 		bl	LL_ADC_REG_IsConversionOngoing
 2545 020c 3861     		str	r0, [r7, #16]
 616:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 2546              		.loc 2 616 47
 2547 020e 7B68     		ldr	r3, [r7, #4]
 2548 0210 1B68     		ldr	r3, [r3]
 2549 0212 1846     		mov	r0, r3
 2550 0214 FFF7FEFF 		bl	LL_ADC_INJ_IsConversionOngoing
 2551 0218 F860     		str	r0, [r7, #12]
 617:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 2552              		.loc 2 617 8
 2553 021a 3B69     		ldr	r3, [r7, #16]
 2554 021c 002B     		cmp	r3, #0
 2555 021e 7FD1     		bne	.L93
 618:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         && (tmp_adc_is_conversion_on_going_injected == 0UL)
 2556              		.loc 2 618 9
 2557 0220 FB68     		ldr	r3, [r7, #12]
 2558 0222 002B     		cmp	r3, #0
 2559 0224 7CD1     		bne	.L93
 619:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****        )
 620:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     {
 621:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 622:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 2560              		.loc 2 622 18
 2561 0226 7B68     		ldr	r3, [r7, #4]
 2562 0228 1B7F     		ldrb	r3, [r3, #28]	@ zero_extendqisi2
 621:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 2563              		.loc 2 621 82
 2564 022a 9A03     		lsls	r2, r3, #14
ARM GAS  /tmp/ccZ0TYFG.s 			page 194


 623:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 2565              		.loc 2 623 18
 2566 022c 7B68     		ldr	r3, [r7, #4]
 2567 022e 93F83830 		ldrb	r3, [r3, #56]	@ zero_extendqisi2
 2568 0232 5B00     		lsls	r3, r3, #1
 621:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 2569              		.loc 2 621 15
 2570 0234 1343     		orrs	r3, r3, r2
 2571 0236 BB61     		str	r3, [r7, #24]
 624:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
 625:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 2572              		.loc 2 625 7
 2573 0238 7B68     		ldr	r3, [r7, #4]
 2574 023a 1B68     		ldr	r3, [r3]
 2575 023c DB68     		ldr	r3, [r3, #12]
 2576 023e 23F48043 		bic	r3, r3, #16384
 2577 0242 23F00203 		bic	r3, r3, #2
 2578 0246 7A68     		ldr	r2, [r7, #4]
 2579 0248 1268     		ldr	r2, [r2]
 2580 024a B969     		ldr	r1, [r7, #24]
 2581 024c 0B43     		orrs	r3, r3, r1
 2582 024e D360     		str	r3, [r2, #12]
 626:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
 627:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       if (hadc->Init.GainCompensation != 0UL)
 2583              		.loc 2 627 21
 2584 0250 7B68     		ldr	r3, [r7, #4]
 2585 0252 1B69     		ldr	r3, [r3, #16]
 2586              		.loc 2 627 10
 2587 0254 002B     		cmp	r3, #0
 2588 0256 17D0     		beq	.L94
 628:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       {
 629:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 2589              		.loc 2 629 9
 2590 0258 7B68     		ldr	r3, [r7, #4]
 2591 025a 1B68     		ldr	r3, [r3]
 2592 025c 1A69     		ldr	r2, [r3, #16]
 2593 025e 7B68     		ldr	r3, [r7, #4]
 2594 0260 1B68     		ldr	r3, [r3]
 2595 0262 42F48032 		orr	r2, r2, #65536
 2596 0266 1A61     		str	r2, [r3, #16]
 630:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 2597              		.loc 2 630 9
 2598 0268 7B68     		ldr	r3, [r7, #4]
 2599 026a 1B68     		ldr	r3, [r3]
 2600 026c D3F8C030 		ldr	r3, [r3, #192]
 2601 0270 23F47F53 		bic	r3, r3, #16320
 2602 0274 23F03F03 		bic	r3, r3, #63
 2603 0278 7A68     		ldr	r2, [r7, #4]
 2604 027a 1169     		ldr	r1, [r2, #16]
 2605 027c 7A68     		ldr	r2, [r7, #4]
 2606 027e 1268     		ldr	r2, [r2]
 2607 0280 0B43     		orrs	r3, r3, r1
 2608 0282 C2F8C030 		str	r3, [r2, #192]
 2609 0286 13E0     		b	.L95
 2610              	.L94:
 631:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       }
 632:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       else
ARM GAS  /tmp/ccZ0TYFG.s 			page 195


 633:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       {
 634:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 2611              		.loc 2 634 9
 2612 0288 7B68     		ldr	r3, [r7, #4]
 2613 028a 1B68     		ldr	r3, [r3]
 2614 028c 1A69     		ldr	r2, [r3, #16]
 2615 028e 7B68     		ldr	r3, [r7, #4]
 2616 0290 1B68     		ldr	r3, [r3]
 2617 0292 22F48032 		bic	r2, r2, #65536
 2618 0296 1A61     		str	r2, [r3, #16]
 635:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 2619              		.loc 2 635 9
 2620 0298 7B68     		ldr	r3, [r7, #4]
 2621 029a 1B68     		ldr	r3, [r3]
 2622 029c D3F8C030 		ldr	r3, [r3, #192]
 2623 02a0 7A68     		ldr	r2, [r7, #4]
 2624 02a2 1268     		ldr	r2, [r2]
 2625 02a4 23F47F53 		bic	r3, r3, #16320
 2626 02a8 23F03F03 		bic	r3, r3, #63
 2627 02ac C2F8C030 		str	r3, [r2, #192]
 2628              	.L95:
 636:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       }
 637:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
 638:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       if (hadc->Init.OversamplingMode == ENABLE)
 2629              		.loc 2 638 21
 2630 02b0 7B68     		ldr	r3, [r7, #4]
 2631 02b2 93F84030 		ldrb	r3, [r3, #64]	@ zero_extendqisi2
 2632              		.loc 2 638 10
 2633 02b6 012B     		cmp	r3, #1
 2634 02b8 2AD1     		bne	.L96
 639:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       {
 640:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         assert_param(IS_ADC_OVERSAMPLING_RATIO(hadc->Init.Oversampling.Ratio));
 641:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
 642:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
 643:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));
 644:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
 645:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         /* Configuration of Oversampler:                                      */
 646:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         /*  - Oversampling Ratio                                              */
 647:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         /*  - Right bit shift                                                 */
 648:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         /*  - Triggered mode                                                  */
 649:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         /*  - Oversampling mode (continued/resumed)                           */
 650:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         MODIFY_REG(hadc->Instance->CFGR2,
 2635              		.loc 2 650 9
 2636 02ba 7B68     		ldr	r3, [r7, #4]
 2637 02bc 1B68     		ldr	r3, [r3]
 2638 02be 1B69     		ldr	r3, [r3, #16]
 2639 02c0 23F4FF63 		bic	r3, r3, #2040
 2640 02c4 23F00403 		bic	r3, r3, #4
 2641 02c8 7A68     		ldr	r2, [r7, #4]
 2642 02ca 516C     		ldr	r1, [r2, #68]
 2643 02cc 7A68     		ldr	r2, [r7, #4]
 2644 02ce 926C     		ldr	r2, [r2, #72]
 2645 02d0 1143     		orrs	r1, r1, r2
 2646 02d2 7A68     		ldr	r2, [r7, #4]
 2647 02d4 D26C     		ldr	r2, [r2, #76]
 2648 02d6 1143     		orrs	r1, r1, r2
 2649 02d8 7A68     		ldr	r2, [r7, #4]
ARM GAS  /tmp/ccZ0TYFG.s 			page 196


 2650 02da 126D     		ldr	r2, [r2, #80]
 2651 02dc 0A43     		orrs	r2, r2, r1
 2652 02de 1A43     		orrs	r2, r2, r3
 2653 02e0 7B68     		ldr	r3, [r7, #4]
 2654 02e2 1B68     		ldr	r3, [r3]
 2655 02e4 42F00102 		orr	r2, r2, #1
 2656 02e8 1A61     		str	r2, [r3, #16]
 2657 02ea 19E0     		b	.L93
 2658              	.L101:
 2659              		.align	2
 2660              	.L100:
 2661 02ec 00000000 		.word	SystemCoreClock
 2662 02f0 632D3E05 		.word	87960931
 2663 02f4 00010050 		.word	1342177536
 2664 02f8 00040050 		.word	1342178304
 2665 02fc 00050050 		.word	1342178560
 2666 0300 00060050 		.word	1342178816
 2667 0304 00030050 		.word	1342178048
 2668 0308 00070050 		.word	1342179072
 2669 030c 0740F0FF 		.word	-1032185
 2670              	.L96:
 651:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****                    ADC_CFGR2_OVSR  |
 652:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****                    ADC_CFGR2_OVSS  |
 653:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****                    ADC_CFGR2_TROVS |
 654:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****                    ADC_CFGR2_ROVSM,
 655:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****                    ADC_CFGR2_ROVSE                       |
 656:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****                    hadc->Init.Oversampling.Ratio         |
 657:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****                    hadc->Init.Oversampling.RightBitShift |
 658:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****                    hadc->Init.Oversampling.TriggeredMode |
 659:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****                    hadc->Init.Oversampling.OversamplingStopReset
 660:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****                   );
 661:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       }
 662:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       else
 663:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       {
 664:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         /* Disable ADC oversampling scope on ADC group regular */
 665:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 2671              		.loc 2 665 9
 2672 0310 7B68     		ldr	r3, [r7, #4]
 2673 0312 1B68     		ldr	r3, [r3]
 2674 0314 1A69     		ldr	r2, [r3, #16]
 2675 0316 7B68     		ldr	r3, [r7, #4]
 2676 0318 1B68     		ldr	r3, [r3]
 2677 031a 22F00102 		bic	r2, r2, #1
 2678 031e 1A61     		str	r2, [r3, #16]
 2679              	.L93:
 666:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       }
 667:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
 668:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     }
 669:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
 670:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     /* Configuration of regular group sequencer:                              */
 671:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     /* - if scan mode is disabled, regular channels sequence length is set to */
 672:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     /*   0x00: 1 channel converted (channel on regular rank 1)                */
 673:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     /*   Parameter "NbrOfConversion" is discarded.                            */
 674:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     /*   Note: Scan mode is not present by hardware on this device, but       */
 675:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     /*   emulated by software for alignment over all STM32 devices.           */
 676:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     /* - if scan mode is enabled, regular channels sequence length is set to  */
 677:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     /*   parameter "NbrOfConversion".                                         */
ARM GAS  /tmp/ccZ0TYFG.s 			page 197


 678:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
 679:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 2680              		.loc 2 679 19
 2681 0320 7B68     		ldr	r3, [r7, #4]
 2682 0322 5B69     		ldr	r3, [r3, #20]
 2683              		.loc 2 679 8
 2684 0324 012B     		cmp	r3, #1
 2685 0326 0CD1     		bne	.L97
 680:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     {
 681:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       /* Set number of ranks in regular group sequencer */
 682:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 2686              		.loc 2 682 7
 2687 0328 7B68     		ldr	r3, [r7, #4]
 2688 032a 1B68     		ldr	r3, [r3]
 2689 032c 1B6B     		ldr	r3, [r3, #48]
 2690 032e 23F00F01 		bic	r1, r3, #15
 2691 0332 7B68     		ldr	r3, [r7, #4]
 2692 0334 1B6A     		ldr	r3, [r3, #32]
 2693 0336 5A1E     		subs	r2, r3, #1
 2694 0338 7B68     		ldr	r3, [r7, #4]
 2695 033a 1B68     		ldr	r3, [r3]
 2696 033c 0A43     		orrs	r2, r2, r1
 2697 033e 1A63     		str	r2, [r3, #48]
 2698 0340 07E0     		b	.L98
 2699              	.L97:
 683:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     }
 684:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     else
 685:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     {
 686:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 2700              		.loc 2 686 7
 2701 0342 7B68     		ldr	r3, [r7, #4]
 2702 0344 1B68     		ldr	r3, [r3]
 2703 0346 1A6B     		ldr	r2, [r3, #48]
 2704 0348 7B68     		ldr	r3, [r7, #4]
 2705 034a 1B68     		ldr	r3, [r3]
 2706 034c 22F00F02 		bic	r2, r2, #15
 2707 0350 1A63     		str	r2, [r3, #48]
 2708              	.L98:
 687:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     }
 688:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
 689:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     /* Initialize the ADC state */
 690:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
 691:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 2709              		.loc 2 691 5
 2710 0352 7B68     		ldr	r3, [r7, #4]
 2711 0354 DB6D     		ldr	r3, [r3, #92]
 2712 0356 23F00303 		bic	r3, r3, #3
 2713 035a 43F00102 		orr	r2, r3, #1
 2714 035e 7B68     		ldr	r3, [r7, #4]
 2715 0360 DA65     		str	r2, [r3, #92]
 2716 0362 07E0     		b	.L99
 2717              	.L83:
 692:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   }
 693:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   else
 694:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   {
 695:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     /* Update ADC state machine to error */
 696:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
ARM GAS  /tmp/ccZ0TYFG.s 			page 198


 2718              		.loc 2 696 5
 2719 0364 7B68     		ldr	r3, [r7, #4]
 2720 0366 DB6D     		ldr	r3, [r3, #92]
 2721 0368 43F01002 		orr	r2, r3, #16
 2722 036c 7B68     		ldr	r3, [r7, #4]
 2723 036e DA65     		str	r2, [r3, #92]
 697:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
 698:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     tmp_hal_status = HAL_ERROR;
 2724              		.loc 2 698 20
 2725 0370 0123     		movs	r3, #1
 2726 0372 FB77     		strb	r3, [r7, #31]
 2727              	.L99:
 699:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   }
 700:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
 701:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   /* Return function status */
 702:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   return tmp_hal_status;
 2728              		.loc 2 702 10
 2729 0374 FB7F     		ldrb	r3, [r7, #31]	@ zero_extendqisi2
 2730              	.L75:
 703:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** }
 2731              		.loc 2 703 1
 2732 0376 1846     		mov	r0, r3
 2733 0378 2437     		adds	r7, r7, #36
 2734              	.LCFI243:
 2735              		.cfi_def_cfa_offset 12
 2736 037a BD46     		mov	sp, r7
 2737              	.LCFI244:
 2738              		.cfi_def_cfa_register 13
 2739              		@ sp needed
 2740 037c 90BD     		pop	{r4, r7, pc}
 2741              		.cfi_endproc
 2742              	.LFE325:
 2744 037e 00BF     		.section	.text.HAL_ADC_DeInit,"ax",%progbits
 2745              		.align	1
 2746              		.global	HAL_ADC_DeInit
 2747              		.syntax unified
 2748              		.thumb
 2749              		.thumb_func
 2750              		.fpu fpv4-sp-d16
 2752              	HAL_ADC_DeInit:
 2753              	.LFB326:
 704:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
 705:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** /**
 706:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   * @brief  Deinitialize the ADC peripheral registers to their default reset
 707:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   *         values, with deinitialization of the ADC MSP.
 708:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   * @note   For devices with several ADCs: reset of ADC common registers is done
 709:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   *         only if all ADCs sharing the same common group are disabled.
 710:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   *         (function "HAL_ADC_MspDeInit()" is also called under the same conditions:
 711:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   *         all ADC instances use the same core clock at RCC level, disabling
 712:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   *         the core clock reset all ADC instances).
 713:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   *         If this is not the case, reset of these common parameters reset is
 714:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   *         bypassed without error reporting: it can be the intended behavior in
 715:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   *         case of reset of a single ADC while the other ADCs sharing the same
 716:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   *         common group is still running.
 717:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   * @note   By default, HAL_ADC_DeInit() set ADC in mode deep power-down:
 718:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   *         this saves more power by reducing leakage currents
 719:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   *         and is particularly interesting before entering MCU low-power modes.
ARM GAS  /tmp/ccZ0TYFG.s 			page 199


 720:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   * @param hadc ADC handle
 721:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   * @retval HAL status
 722:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   */
 723:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_DeInit(ADC_HandleTypeDef *hadc)
 724:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** {
 2754              		.loc 2 724 1
 2755              		.cfi_startproc
 2756              		@ args = 0, pretend = 0, frame = 16
 2757              		@ frame_needed = 1, uses_anonymous_args = 0
 2758 0000 90B5     		push	{r4, r7, lr}
 2759              	.LCFI245:
 2760              		.cfi_def_cfa_offset 12
 2761              		.cfi_offset 4, -12
 2762              		.cfi_offset 7, -8
 2763              		.cfi_offset 14, -4
 2764 0002 85B0     		sub	sp, sp, #20
 2765              	.LCFI246:
 2766              		.cfi_def_cfa_offset 32
 2767 0004 00AF     		add	r7, sp, #0
 2768              	.LCFI247:
 2769              		.cfi_def_cfa_register 7
 2770 0006 7860     		str	r0, [r7, #4]
 725:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status;
 726:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
 727:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   /* Check ADC handle */
 728:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   if (hadc == NULL)
 2771              		.loc 2 728 6
 2772 0008 7B68     		ldr	r3, [r7, #4]
 2773 000a 002B     		cmp	r3, #0
 2774 000c 01D1     		bne	.L103
 729:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   {
 730:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     return HAL_ERROR;
 2775              		.loc 2 730 12
 2776 000e 0123     		movs	r3, #1
 2777 0010 4DE1     		b	.L104
 2778              	.L103:
 731:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   }
 732:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
 733:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   /* Check the parameters */
 734:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 735:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
 736:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   /* Set ADC state */
 737:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 2779              		.loc 2 737 3
 2780 0012 7B68     		ldr	r3, [r7, #4]
 2781 0014 DB6D     		ldr	r3, [r3, #92]
 2782 0016 43F00202 		orr	r2, r3, #2
 2783 001a 7B68     		ldr	r3, [r7, #4]
 2784 001c DA65     		str	r2, [r3, #92]
 738:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
 739:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   /* Stop potential conversion on going */
 740:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 2785              		.loc 2 740 20
 2786 001e 0321     		movs	r1, #3
 2787 0020 7868     		ldr	r0, [r7, #4]
 2788 0022 FFF7FEFF 		bl	ADC_ConversionStop
 2789 0026 0346     		mov	r3, r0
ARM GAS  /tmp/ccZ0TYFG.s 			page 200


 2790 0028 FB73     		strb	r3, [r7, #15]
 741:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
 742:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   /* Disable ADC peripheral if conversions are effectively stopped            */
 743:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   /* Flush register JSQR: reset the queue sequencer when injected             */
 744:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   /* queue sequencer is enabled and ADC disabled.                             */
 745:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   /* The software and hardware triggers of the injected sequence are both     */
 746:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   /* internally disabled just after the completion of the last valid          */
 747:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   /* injected sequence.                                                       */
 748:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   SET_BIT(hadc->Instance->CFGR, ADC_CFGR_JQM);
 2791              		.loc 2 748 3
 2792 002a 7B68     		ldr	r3, [r7, #4]
 2793 002c 1B68     		ldr	r3, [r3]
 2794 002e DA68     		ldr	r2, [r3, #12]
 2795 0030 7B68     		ldr	r3, [r7, #4]
 2796 0032 1B68     		ldr	r3, [r3]
 2797 0034 42F40012 		orr	r2, r2, #2097152
 2798 0038 DA60     		str	r2, [r3, #12]
 749:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
 750:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   /* Disable ADC peripheral if conversions are effectively stopped */
 751:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   if (tmp_hal_status == HAL_OK)
 2799              		.loc 2 751 6
 2800 003a FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2801 003c 002B     		cmp	r3, #0
 2802 003e 0AD1     		bne	.L105
 752:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   {
 753:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     /* Disable the ADC peripheral */
 754:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     tmp_hal_status = ADC_Disable(hadc);
 2803              		.loc 2 754 22
 2804 0040 7868     		ldr	r0, [r7, #4]
 2805 0042 FFF7FEFF 		bl	ADC_Disable
 2806 0046 0346     		mov	r3, r0
 2807 0048 FB73     		strb	r3, [r7, #15]
 755:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
 756:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     /* Check if ADC is effectively disabled */
 757:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     if (tmp_hal_status == HAL_OK)
 2808              		.loc 2 757 8
 2809 004a FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2810 004c 002B     		cmp	r3, #0
 2811 004e 02D1     		bne	.L105
 758:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     {
 759:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       /* Change ADC state */
 760:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       hadc->State = HAL_ADC_STATE_READY;
 2812              		.loc 2 760 19
 2813 0050 7B68     		ldr	r3, [r7, #4]
 2814 0052 0122     		movs	r2, #1
 2815 0054 DA65     		str	r2, [r3, #92]
 2816              	.L105:
 761:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     }
 762:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   }
 763:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
 764:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   /* Note: HAL ADC deInit is done independently of ADC conversion stop        */
 765:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   /*       and disable return status. In case of status fail, attempt to      */
 766:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   /*       perform deinitialization anyway and it is up user code in          */
 767:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   /*       in HAL_ADC_MspDeInit() to reset the ADC peripheral using           */
 768:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   /*       system RCC hard reset.                                             */
 769:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
 770:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   /* ========== Reset ADC registers ========== */
ARM GAS  /tmp/ccZ0TYFG.s 			page 201


 771:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   /* Reset register IER */
 772:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_AWD3  | ADC_IT_AWD2 | ADC_IT_AWD1 |
 2817              		.loc 2 772 3
 2818 0056 7B68     		ldr	r3, [r7, #4]
 2819 0058 1B68     		ldr	r3, [r3]
 2820 005a 5B68     		ldr	r3, [r3, #4]
 2821 005c 7A68     		ldr	r2, [r7, #4]
 2822 005e 1268     		ldr	r2, [r2]
 2823 0060 23F4FF63 		bic	r3, r3, #2040
 2824 0064 23F00703 		bic	r3, r3, #7
 2825 0068 5360     		str	r3, [r2, #4]
 773:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****                               ADC_IT_JQOVF | ADC_IT_OVR  |
 774:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****                               ADC_IT_JEOS  | ADC_IT_JEOC |
 775:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****                               ADC_IT_EOS   | ADC_IT_EOC  |
 776:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****                               ADC_IT_EOSMP | ADC_IT_RDY));
 777:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
 778:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   /* Reset register ISR */
 779:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD3  | ADC_FLAG_AWD2 | ADC_FLAG_AWD1 |
 2826              		.loc 2 779 3
 2827 006a 7B68     		ldr	r3, [r7, #4]
 2828 006c 1B68     		ldr	r3, [r3]
 2829 006e 40F2FF72 		movw	r2, #2047
 2830 0072 1A60     		str	r2, [r3]
 780:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****                               ADC_FLAG_JQOVF | ADC_FLAG_OVR  |
 781:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****                               ADC_FLAG_JEOS  | ADC_FLAG_JEOC |
 782:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****                               ADC_FLAG_EOS   | ADC_FLAG_EOC  |
 783:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****                               ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 784:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
 785:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   /* Reset register CR */
 786:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   /* Bits ADC_CR_JADSTP, ADC_CR_ADSTP, ADC_CR_JADSTART, ADC_CR_ADSTART,
 787:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****      ADC_CR_ADCAL, ADC_CR_ADDIS and ADC_CR_ADEN are in access mode "read-set":
 788:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****      no direct reset applicable.
 789:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****      Update CR register to reset value where doable by software */
 790:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   CLEAR_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN | ADC_CR_ADCALDIF);
 2831              		.loc 2 790 3
 2832 0074 7B68     		ldr	r3, [r7, #4]
 2833 0076 1B68     		ldr	r3, [r3]
 2834 0078 9A68     		ldr	r2, [r3, #8]
 2835 007a 7B68     		ldr	r3, [r7, #4]
 2836 007c 1B68     		ldr	r3, [r3]
 2837 007e 22F0A042 		bic	r2, r2, #1342177280
 2838 0082 9A60     		str	r2, [r3, #8]
 791:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   SET_BIT(hadc->Instance->CR, ADC_CR_DEEPPWD);
 2839              		.loc 2 791 3
 2840 0084 7B68     		ldr	r3, [r7, #4]
 2841 0086 1B68     		ldr	r3, [r3]
 2842 0088 9A68     		ldr	r2, [r3, #8]
 2843 008a 7B68     		ldr	r3, [r7, #4]
 2844 008c 1B68     		ldr	r3, [r3]
 2845 008e 42F00052 		orr	r2, r2, #536870912
 2846 0092 9A60     		str	r2, [r3, #8]
 792:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
 793:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   /* Reset register CFGR */
 794:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_FIELDS);
 2847              		.loc 2 794 3
 2848 0094 7B68     		ldr	r3, [r7, #4]
 2849 0096 1B68     		ldr	r3, [r3]
ARM GAS  /tmp/ccZ0TYFG.s 			page 202


 2850 0098 D968     		ldr	r1, [r3, #12]
 2851 009a 7B68     		ldr	r3, [r7, #4]
 2852 009c 1A68     		ldr	r2, [r3]
 2853 009e 864B     		ldr	r3, .L116
 2854 00a0 0B40     		ands	r3, r3, r1
 2855 00a2 D360     		str	r3, [r2, #12]
 795:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   SET_BIT(hadc->Instance->CFGR, ADC_CFGR_JQDIS);
 2856              		.loc 2 795 3
 2857 00a4 7B68     		ldr	r3, [r7, #4]
 2858 00a6 1B68     		ldr	r3, [r3]
 2859 00a8 DA68     		ldr	r2, [r3, #12]
 2860 00aa 7B68     		ldr	r3, [r7, #4]
 2861 00ac 1B68     		ldr	r3, [r3]
 2862 00ae 42F00042 		orr	r2, r2, #-2147483648
 2863 00b2 DA60     		str	r2, [r3, #12]
 796:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
 797:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   /* Reset register CFGR2 */
 798:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSM  | ADC_CFGR2_TROVS   | ADC_CFGR2_OVSS |
 2864              		.loc 2 798 3
 2865 00b4 7B68     		ldr	r3, [r7, #4]
 2866 00b6 1B68     		ldr	r3, [r3]
 2867 00b8 1B69     		ldr	r3, [r3, #16]
 2868 00ba 7A68     		ldr	r2, [r7, #4]
 2869 00bc 1268     		ldr	r2, [r2]
 2870 00be 23F4FF63 		bic	r3, r3, #2040
 2871 00c2 23F00703 		bic	r3, r3, #7
 2872 00c6 1361     		str	r3, [r2, #16]
 799:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****             ADC_CFGR2_OVSR  | ADC_CFGR2_JOVSE | ADC_CFGR2_ROVSE);
 800:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
 801:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   /* Reset register SMPR1 */
 802:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   CLEAR_BIT(hadc->Instance->SMPR1, ADC_SMPR1_FIELDS);
 2873              		.loc 2 802 3
 2874 00c8 7B68     		ldr	r3, [r7, #4]
 2875 00ca 1B68     		ldr	r3, [r3]
 2876 00cc 5A69     		ldr	r2, [r3, #20]
 2877 00ce 7B68     		ldr	r3, [r7, #4]
 2878 00d0 1B68     		ldr	r3, [r3]
 2879 00d2 02F08042 		and	r2, r2, #1073741824
 2880 00d6 5A61     		str	r2, [r3, #20]
 803:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
 804:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   /* Reset register SMPR2 */
 805:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   CLEAR_BIT(hadc->Instance->SMPR2, ADC_SMPR2_SMP18 | ADC_SMPR2_SMP17 | ADC_SMPR2_SMP16 |
 2881              		.loc 2 805 3
 2882 00d8 7B68     		ldr	r3, [r7, #4]
 2883 00da 1B68     		ldr	r3, [r3]
 2884 00dc 9A69     		ldr	r2, [r3, #24]
 2885 00de 7B68     		ldr	r3, [r7, #4]
 2886 00e0 1B68     		ldr	r3, [r3]
 2887 00e2 02F07842 		and	r2, r2, #-134217728
 2888 00e6 9A61     		str	r2, [r3, #24]
 806:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****             ADC_SMPR2_SMP15 | ADC_SMPR2_SMP14 | ADC_SMPR2_SMP13 |
 807:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****             ADC_SMPR2_SMP12 | ADC_SMPR2_SMP11 | ADC_SMPR2_SMP10);
 808:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
 809:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   /* Reset register TR1 */
 810:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   CLEAR_BIT(hadc->Instance->TR1, ADC_TR1_HT1 | ADC_TR1_LT1);
 2889              		.loc 2 810 3
 2890 00e8 7B68     		ldr	r3, [r7, #4]
ARM GAS  /tmp/ccZ0TYFG.s 			page 203


 2891 00ea 1B68     		ldr	r3, [r3]
 2892 00ec 1A6A     		ldr	r2, [r3, #32]
 2893 00ee 7B68     		ldr	r3, [r7, #4]
 2894 00f0 1B68     		ldr	r3, [r3]
 2895 00f2 02F0F022 		and	r2, r2, #-268374016
 2896 00f6 1A62     		str	r2, [r3, #32]
 811:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
 812:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   /* Reset register TR2 */
 813:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   CLEAR_BIT(hadc->Instance->TR2, ADC_TR2_HT2 | ADC_TR2_LT2);
 2897              		.loc 2 813 3
 2898 00f8 7B68     		ldr	r3, [r7, #4]
 2899 00fa 1B68     		ldr	r3, [r3]
 2900 00fc 5A6A     		ldr	r2, [r3, #36]
 2901 00fe 7B68     		ldr	r3, [r7, #4]
 2902 0100 1B68     		ldr	r3, [r3]
 2903 0102 02F0FF22 		and	r2, r2, #-16711936
 2904 0106 5A62     		str	r2, [r3, #36]
 814:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
 815:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   /* Reset register TR3 */
 816:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   CLEAR_BIT(hadc->Instance->TR3, ADC_TR3_HT3 | ADC_TR3_LT3);
 2905              		.loc 2 816 3
 2906 0108 7B68     		ldr	r3, [r7, #4]
 2907 010a 1B68     		ldr	r3, [r3]
 2908 010c 9A6A     		ldr	r2, [r3, #40]
 2909 010e 7B68     		ldr	r3, [r7, #4]
 2910 0110 1B68     		ldr	r3, [r3]
 2911 0112 02F0FF22 		and	r2, r2, #-16711936
 2912 0116 9A62     		str	r2, [r3, #40]
 817:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
 818:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   /* Reset register SQR1 */
 819:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_SQ4 | ADC_SQR1_SQ3 | ADC_SQR1_SQ2 |
 2913              		.loc 2 819 3
 2914 0118 7B68     		ldr	r3, [r7, #4]
 2915 011a 1B68     		ldr	r3, [r3]
 2916 011c 196B     		ldr	r1, [r3, #48]
 2917 011e 7B68     		ldr	r3, [r7, #4]
 2918 0120 1A68     		ldr	r2, [r3]
 2919 0122 664B     		ldr	r3, .L116+4
 2920 0124 0B40     		ands	r3, r3, r1
 2921 0126 1363     		str	r3, [r2, #48]
 820:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****             ADC_SQR1_SQ1 | ADC_SQR1_L);
 821:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
 822:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   /* Reset register SQR2 */
 823:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   CLEAR_BIT(hadc->Instance->SQR2, ADC_SQR2_SQ9 | ADC_SQR2_SQ8 | ADC_SQR2_SQ7 |
 2922              		.loc 2 823 3
 2923 0128 7B68     		ldr	r3, [r7, #4]
 2924 012a 1B68     		ldr	r3, [r3]
 2925 012c 596B     		ldr	r1, [r3, #52]
 2926 012e 7B68     		ldr	r3, [r7, #4]
 2927 0130 1A68     		ldr	r2, [r3]
 2928 0132 634B     		ldr	r3, .L116+8
 2929 0134 0B40     		ands	r3, r3, r1
 2930 0136 5363     		str	r3, [r2, #52]
 824:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****             ADC_SQR2_SQ6 | ADC_SQR2_SQ5);
 825:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
 826:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   /* Reset register SQR3 */
 827:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   CLEAR_BIT(hadc->Instance->SQR3, ADC_SQR3_SQ14 | ADC_SQR3_SQ13 | ADC_SQR3_SQ12 |
ARM GAS  /tmp/ccZ0TYFG.s 			page 204


 2931              		.loc 2 827 3
 2932 0138 7B68     		ldr	r3, [r7, #4]
 2933 013a 1B68     		ldr	r3, [r3]
 2934 013c 996B     		ldr	r1, [r3, #56]
 2935 013e 7B68     		ldr	r3, [r7, #4]
 2936 0140 1A68     		ldr	r2, [r3]
 2937 0142 5F4B     		ldr	r3, .L116+8
 2938 0144 0B40     		ands	r3, r3, r1
 2939 0146 9363     		str	r3, [r2, #56]
 828:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****             ADC_SQR3_SQ11 | ADC_SQR3_SQ10);
 829:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
 830:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   /* Reset register SQR4 */
 831:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   CLEAR_BIT(hadc->Instance->SQR4, ADC_SQR4_SQ16 | ADC_SQR4_SQ15);
 2940              		.loc 2 831 3
 2941 0148 7B68     		ldr	r3, [r7, #4]
 2942 014a 1B68     		ldr	r3, [r3]
 2943 014c DB6B     		ldr	r3, [r3, #60]
 2944 014e 7A68     		ldr	r2, [r7, #4]
 2945 0150 1268     		ldr	r2, [r2]
 2946 0152 23F4FB63 		bic	r3, r3, #2008
 2947 0156 23F00703 		bic	r3, r3, #7
 2948 015a D363     		str	r3, [r2, #60]
 832:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
 833:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   /* Register JSQR was reset when the ADC was disabled */
 834:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
 835:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   /* Reset register DR */
 836:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   /* bits in access mode read only, no direct reset applicable*/
 837:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
 838:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   /* Reset register OFR1 */
 839:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1);
 2949              		.loc 2 839 3
 2950 015c 7B68     		ldr	r3, [r7, #4]
 2951 015e 1B68     		ldr	r3, [r3]
 2952 0160 196E     		ldr	r1, [r3, #96]
 2953 0162 7B68     		ldr	r3, [r7, #4]
 2954 0164 1A68     		ldr	r2, [r3]
 2955 0166 574B     		ldr	r3, .L116+12
 2956 0168 0B40     		ands	r3, r3, r1
 2957 016a 1366     		str	r3, [r2, #96]
 840:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   /* Reset register OFR2 */
 841:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN | ADC_OFR2_OFFSET2_CH | ADC_OFR2_OFFSET2);
 2958              		.loc 2 841 3
 2959 016c 7B68     		ldr	r3, [r7, #4]
 2960 016e 1B68     		ldr	r3, [r3]
 2961 0170 596E     		ldr	r1, [r3, #100]
 2962 0172 7B68     		ldr	r3, [r7, #4]
 2963 0174 1A68     		ldr	r2, [r3]
 2964 0176 534B     		ldr	r3, .L116+12
 2965 0178 0B40     		ands	r3, r3, r1
 2966 017a 5366     		str	r3, [r2, #100]
 842:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   /* Reset register OFR3 */
 843:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN | ADC_OFR3_OFFSET3_CH | ADC_OFR3_OFFSET3);
 2967              		.loc 2 843 3
 2968 017c 7B68     		ldr	r3, [r7, #4]
 2969 017e 1B68     		ldr	r3, [r3]
 2970 0180 996E     		ldr	r1, [r3, #104]
 2971 0182 7B68     		ldr	r3, [r7, #4]
ARM GAS  /tmp/ccZ0TYFG.s 			page 205


 2972 0184 1A68     		ldr	r2, [r3]
 2973 0186 4F4B     		ldr	r3, .L116+12
 2974 0188 0B40     		ands	r3, r3, r1
 2975 018a 9366     		str	r3, [r2, #104]
 844:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   /* Reset register OFR4 */
 845:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN | ADC_OFR4_OFFSET4_CH | ADC_OFR4_OFFSET4);
 2976              		.loc 2 845 3
 2977 018c 7B68     		ldr	r3, [r7, #4]
 2978 018e 1B68     		ldr	r3, [r3]
 2979 0190 D96E     		ldr	r1, [r3, #108]
 2980 0192 7B68     		ldr	r3, [r7, #4]
 2981 0194 1A68     		ldr	r2, [r3]
 2982 0196 4B4B     		ldr	r3, .L116+12
 2983 0198 0B40     		ands	r3, r3, r1
 2984 019a D366     		str	r3, [r2, #108]
 846:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
 847:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   /* Reset registers JDR1, JDR2, JDR3, JDR4 */
 848:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   /* bits in access mode read only, no direct reset applicable*/
 849:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
 850:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   /* Reset register AWD2CR */
 851:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   CLEAR_BIT(hadc->Instance->AWD2CR, ADC_AWD2CR_AWD2CH);
 2985              		.loc 2 851 3
 2986 019c 7B68     		ldr	r3, [r7, #4]
 2987 019e 1B68     		ldr	r3, [r3]
 2988 01a0 D3F8A030 		ldr	r3, [r3, #160]
 2989 01a4 7A68     		ldr	r2, [r7, #4]
 2990 01a6 1268     		ldr	r2, [r2]
 2991 01a8 DB0C     		lsrs	r3, r3, #19
 2992 01aa DB04     		lsls	r3, r3, #19
 2993 01ac C2F8A030 		str	r3, [r2, #160]
 852:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
 853:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   /* Reset register AWD3CR */
 854:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   CLEAR_BIT(hadc->Instance->AWD3CR, ADC_AWD3CR_AWD3CH);
 2994              		.loc 2 854 3
 2995 01b0 7B68     		ldr	r3, [r7, #4]
 2996 01b2 1B68     		ldr	r3, [r3]
 2997 01b4 D3F8A430 		ldr	r3, [r3, #164]
 2998 01b8 7A68     		ldr	r2, [r7, #4]
 2999 01ba 1268     		ldr	r2, [r2]
 3000 01bc DB0C     		lsrs	r3, r3, #19
 3001 01be DB04     		lsls	r3, r3, #19
 3002 01c0 C2F8A430 		str	r3, [r2, #164]
 855:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
 856:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   /* Reset register DIFSEL */
 857:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_DIFSEL);
 3003              		.loc 2 857 3
 3004 01c4 7B68     		ldr	r3, [r7, #4]
 3005 01c6 1B68     		ldr	r3, [r3]
 3006 01c8 D3F8B030 		ldr	r3, [r3, #176]
 3007 01cc 7A68     		ldr	r2, [r7, #4]
 3008 01ce 1268     		ldr	r2, [r2]
 3009 01d0 DB0C     		lsrs	r3, r3, #19
 3010 01d2 DB04     		lsls	r3, r3, #19
 3011 01d4 C2F8B030 		str	r3, [r2, #176]
 858:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
 859:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   /* Reset register CALFACT */
 860:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   CLEAR_BIT(hadc->Instance->CALFACT, ADC_CALFACT_CALFACT_D | ADC_CALFACT_CALFACT_S);
ARM GAS  /tmp/ccZ0TYFG.s 			page 206


 3012              		.loc 2 860 3
 3013 01d8 7B68     		ldr	r3, [r7, #4]
 3014 01da 1B68     		ldr	r3, [r3]
 3015 01dc D3F8B420 		ldr	r2, [r3, #180]
 3016 01e0 7B68     		ldr	r3, [r7, #4]
 3017 01e2 1B68     		ldr	r3, [r3]
 3018 01e4 22F07F12 		bic	r2, r2, #8323199
 3019 01e8 C3F8B420 		str	r2, [r3, #180]
 861:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
 862:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
 863:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   /* ========== Reset common ADC registers ========== */
 864:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
 865:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   /* Software is allowed to change common parameters only when all the other
 866:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****      ADCs are disabled.   */
 867:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 3020              		.loc 2 867 7
 3021 01ec 7B68     		ldr	r3, [r7, #4]
 3022 01ee 1B68     		ldr	r3, [r3]
 3023              		.loc 2 867 89
 3024 01f0 B3F1A04F 		cmp	r3, #1342177280
 3025 01f4 04D0     		beq	.L106
 3026              		.loc 2 867 7 discriminator 2
 3027 01f6 7B68     		ldr	r3, [r7, #4]
 3028 01f8 1B68     		ldr	r3, [r3]
 3029 01fa 334A     		ldr	r2, .L116+16
 3030 01fc 9342     		cmp	r3, r2
 3031 01fe 0FD1     		bne	.L107
 3032              	.L106:
 3033              		.loc 2 867 7 is_stmt 0 discriminator 3
 3034 0200 4FF0A040 		mov	r0, #1342177280
 3035 0204 FFF7FEFF 		bl	LL_ADC_IsEnabled
 3036 0208 0446     		mov	r4, r0
 3037 020a 2F48     		ldr	r0, .L116+16
 3038 020c FFF7FEFF 		bl	LL_ADC_IsEnabled
 3039 0210 0346     		mov	r3, r0
 3040 0212 2343     		orrs	r3, r3, r4
 3041              		.loc 2 867 89 is_stmt 1 discriminator 3
 3042 0214 002B     		cmp	r3, #0
 3043 0216 0CBF     		ite	eq
 3044 0218 0123     		moveq	r3, #1
 3045 021a 0023     		movne	r3, #0
 3046 021c DBB2     		uxtb	r3, r3
 3047 021e 12E0     		b	.L108
 3048              	.L107:
 3049              		.loc 2 867 7 discriminator 4
 3050 0220 2A48     		ldr	r0, .L116+20
 3051 0222 FFF7FEFF 		bl	LL_ADC_IsEnabled
 3052 0226 0446     		mov	r4, r0
 3053 0228 2948     		ldr	r0, .L116+24
 3054 022a FFF7FEFF 		bl	LL_ADC_IsEnabled
 3055 022e 0346     		mov	r3, r0
 3056 0230 1C43     		orrs	r4, r4, r3
 3057 0232 2848     		ldr	r0, .L116+28
 3058 0234 FFF7FEFF 		bl	LL_ADC_IsEnabled
 3059 0238 0346     		mov	r3, r0
 3060 023a 2343     		orrs	r3, r3, r4
 3061              		.loc 2 867 89 discriminator 4
ARM GAS  /tmp/ccZ0TYFG.s 			page 207


 3062 023c 002B     		cmp	r3, #0
 3063 023e 0CBF     		ite	eq
 3064 0240 0123     		moveq	r3, #1
 3065 0242 0023     		movne	r3, #0
 3066 0244 DBB2     		uxtb	r3, r3
 3067              	.L108:
 3068              		.loc 2 867 6 discriminator 6
 3069 0246 002B     		cmp	r3, #0
 3070 0248 1DD0     		beq	.L109
 868:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   {
 869:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     /* Reset configuration of ADC common register CCR:
 870:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       - clock mode: CKMODE, PRESCEN
 871:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       - multimode related parameters (when this feature is available): MDMA,
 872:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         DMACFG, DELAY, DUAL (set by HAL_ADCEx_MultiModeConfigChannel() API)
 873:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       - internal measurement paths: Vbat, temperature sensor, Vref (set into
 874:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         HAL_ADC_ConfigChannel() or HAL_ADCEx_InjectedConfigChannel() )
 875:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     */
 876:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     ADC_CLEAR_COMMON_CONTROL_REGISTER(hadc);
 3071              		.loc 2 876 5
 3072 024a 7B68     		ldr	r3, [r7, #4]
 3073 024c 1B68     		ldr	r3, [r3]
 3074 024e B3F1A04F 		cmp	r3, #1342177280
 3075 0252 04D0     		beq	.L110
 3076              		.loc 2 876 5 is_stmt 0 discriminator 2
 3077 0254 7B68     		ldr	r3, [r7, #4]
 3078 0256 1B68     		ldr	r3, [r3]
 3079 0258 1B4A     		ldr	r2, .L116+16
 3080 025a 9342     		cmp	r3, r2
 3081 025c 01D1     		bne	.L111
 3082              	.L110:
 3083              		.loc 2 876 5 discriminator 3
 3084 025e 1E4B     		ldr	r3, .L116+32
 3085 0260 00E0     		b	.L112
 3086              	.L111:
 3087              		.loc 2 876 5 discriminator 4
 3088 0262 1E4B     		ldr	r3, .L116+36
 3089              	.L112:
 3090              		.loc 2 876 5 discriminator 6
 3091 0264 9968     		ldr	r1, [r3, #8]
 3092 0266 7B68     		ldr	r3, [r7, #4]
 3093 0268 1B68     		ldr	r3, [r3]
 3094 026a B3F1A04F 		cmp	r3, #1342177280
 3095 026e 04D0     		beq	.L113
 3096              		.loc 2 876 5 discriminator 8
 3097 0270 7B68     		ldr	r3, [r7, #4]
 3098 0272 1B68     		ldr	r3, [r3]
 3099 0274 144A     		ldr	r2, .L116+16
 3100 0276 9342     		cmp	r3, r2
 3101 0278 01D1     		bne	.L114
 3102              	.L113:
 3103              		.loc 2 876 5 discriminator 9
 3104 027a 174A     		ldr	r2, .L116+32
 3105 027c 00E0     		b	.L115
 3106              	.L114:
 3107              		.loc 2 876 5 discriminator 10
 3108 027e 174A     		ldr	r2, .L116+36
 3109              	.L115:
ARM GAS  /tmp/ccZ0TYFG.s 			page 208


 3110              		.loc 2 876 5 discriminator 12
 3111 0280 174B     		ldr	r3, .L116+40
 3112 0282 0B40     		ands	r3, r3, r1
 3113 0284 9360     		str	r3, [r2, #8]
 3114              	.L109:
 877:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   }
 878:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
 879:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   /* DeInit the low level hardware.
 880:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
 881:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****      For example:
 882:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     __HAL_RCC_ADC_FORCE_RESET();
 883:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     __HAL_RCC_ADC_RELEASE_RESET();
 884:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     __HAL_RCC_ADC_CLK_DISABLE();
 885:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
 886:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     Keep in mind that all ADCs use the same clock: disabling
 887:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     the clock will reset all ADCs.
 888:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
 889:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   */
 890:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** #if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
 891:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   if (hadc->MspDeInitCallback == NULL)
 892:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   {
 893:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     hadc->MspDeInitCallback = HAL_ADC_MspDeInit; /* Legacy weak MspDeInit  */
 894:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   }
 895:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
 896:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   /* DeInit the low level hardware: RCC clock, NVIC */
 897:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   hadc->MspDeInitCallback(hadc);
 898:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** #else
 899:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   /* DeInit the low level hardware: RCC clock, NVIC */
 900:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   HAL_ADC_MspDeInit(hadc);
 3115              		.loc 2 900 3 is_stmt 1
 3116 0286 7868     		ldr	r0, [r7, #4]
 3117 0288 FFF7FEFF 		bl	HAL_ADC_MspDeInit
 901:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** #endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
 902:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
 903:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   /* Set ADC error code to none */
 904:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   ADC_CLEAR_ERRORCODE(hadc);
 3118              		.loc 2 904 3
 3119 028c 7B68     		ldr	r3, [r7, #4]
 3120 028e 0022     		movs	r2, #0
 3121 0290 1A66     		str	r2, [r3, #96]
 905:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
 906:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   /* Reset injected channel configuration parameters */
 907:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   hadc->InjectionConfig.ContextQueue = 0;
 3122              		.loc 2 907 38
 3123 0292 7B68     		ldr	r3, [r7, #4]
 3124 0294 0022     		movs	r2, #0
 3125 0296 5A66     		str	r2, [r3, #100]
 908:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   hadc->InjectionConfig.ChannelCount = 0;
 3126              		.loc 2 908 38
 3127 0298 7B68     		ldr	r3, [r7, #4]
 3128 029a 0022     		movs	r2, #0
 3129 029c 9A66     		str	r2, [r3, #104]
 909:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
 910:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   /* Set ADC state */
 911:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   hadc->State = HAL_ADC_STATE_RESET;
 3130              		.loc 2 911 15
 3131 029e 7B68     		ldr	r3, [r7, #4]
ARM GAS  /tmp/ccZ0TYFG.s 			page 209


 3132 02a0 0022     		movs	r2, #0
 3133 02a2 DA65     		str	r2, [r3, #92]
 912:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
 913:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   /* Process unlocked */
 914:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   __HAL_UNLOCK(hadc);
 3134              		.loc 2 914 3
 3135 02a4 7B68     		ldr	r3, [r7, #4]
 3136 02a6 0022     		movs	r2, #0
 3137 02a8 83F85820 		strb	r2, [r3, #88]
 915:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
 916:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   /* Return function status */
 917:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   return tmp_hal_status;
 3138              		.loc 2 917 10
 3139 02ac FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 3140              	.L104:
 918:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** }
 3141              		.loc 2 918 1
 3142 02ae 1846     		mov	r0, r3
 3143 02b0 1437     		adds	r7, r7, #20
 3144              	.LCFI248:
 3145              		.cfi_def_cfa_offset 12
 3146 02b2 BD46     		mov	sp, r7
 3147              	.LCFI249:
 3148              		.cfi_def_cfa_register 13
 3149              		@ sp needed
 3150 02b4 90BD     		pop	{r4, r7, pc}
 3151              	.L117:
 3152 02b6 00BF     		.align	2
 3153              	.L116:
 3154 02b8 04000080 		.word	-2147483644
 3155 02bc 300882E0 		.word	-528349136
 3156 02c0 200882E0 		.word	-528349152
 3157 02c4 00F0FF03 		.word	67104768
 3158 02c8 00010050 		.word	1342177536
 3159 02cc 00040050 		.word	1342178304
 3160 02d0 00050050 		.word	1342178560
 3161 02d4 00060050 		.word	1342178816
 3162 02d8 00030050 		.word	1342178048
 3163 02dc 00070050 		.word	1342179072
 3164 02e0 E01000FE 		.word	-33550112
 3165              		.cfi_endproc
 3166              	.LFE326:
 3168              		.section	.text.HAL_ADC_MspInit,"ax",%progbits
 3169              		.align	1
 3170              		.weak	HAL_ADC_MspInit
 3171              		.syntax unified
 3172              		.thumb
 3173              		.thumb_func
 3174              		.fpu fpv4-sp-d16
 3176              	HAL_ADC_MspInit:
 3177              	.LFB327:
 919:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
 920:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** /**
 921:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   * @brief  Initialize the ADC MSP.
 922:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   * @param hadc ADC handle
 923:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   * @retval None
 924:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   */
ARM GAS  /tmp/ccZ0TYFG.s 			page 210


 925:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** __weak void HAL_ADC_MspInit(ADC_HandleTypeDef *hadc)
 926:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** {
 3178              		.loc 2 926 1
 3179              		.cfi_startproc
 3180              		@ args = 0, pretend = 0, frame = 8
 3181              		@ frame_needed = 1, uses_anonymous_args = 0
 3182              		@ link register save eliminated.
 3183 0000 80B4     		push	{r7}
 3184              	.LCFI250:
 3185              		.cfi_def_cfa_offset 4
 3186              		.cfi_offset 7, -4
 3187 0002 83B0     		sub	sp, sp, #12
 3188              	.LCFI251:
 3189              		.cfi_def_cfa_offset 16
 3190 0004 00AF     		add	r7, sp, #0
 3191              	.LCFI252:
 3192              		.cfi_def_cfa_register 7
 3193 0006 7860     		str	r0, [r7, #4]
 927:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   /* Prevent unused argument(s) compilation warning */
 928:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   UNUSED(hadc);
 929:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
 930:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   /* NOTE : This function should not be modified. When the callback is needed,
 931:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****             function HAL_ADC_MspInit must be implemented in the user file.
 932:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****    */
 933:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** }
 3194              		.loc 2 933 1
 3195 0008 00BF     		nop
 3196 000a 0C37     		adds	r7, r7, #12
 3197              	.LCFI253:
 3198              		.cfi_def_cfa_offset 4
 3199 000c BD46     		mov	sp, r7
 3200              	.LCFI254:
 3201              		.cfi_def_cfa_register 13
 3202              		@ sp needed
 3203 000e 5DF8047B 		ldr	r7, [sp], #4
 3204              	.LCFI255:
 3205              		.cfi_restore 7
 3206              		.cfi_def_cfa_offset 0
 3207 0012 7047     		bx	lr
 3208              		.cfi_endproc
 3209              	.LFE327:
 3211              		.section	.text.HAL_ADC_MspDeInit,"ax",%progbits
 3212              		.align	1
 3213              		.weak	HAL_ADC_MspDeInit
 3214              		.syntax unified
 3215              		.thumb
 3216              		.thumb_func
 3217              		.fpu fpv4-sp-d16
 3219              	HAL_ADC_MspDeInit:
 3220              	.LFB328:
 934:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
 935:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** /**
 936:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   * @brief  DeInitialize the ADC MSP.
 937:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   * @param hadc ADC handle
 938:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   * @note   All ADC instances use the same core clock at RCC level, disabling
 939:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   *         the core clock reset all ADC instances).
 940:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   * @retval None
ARM GAS  /tmp/ccZ0TYFG.s 			page 211


 941:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   */
 942:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** __weak void HAL_ADC_MspDeInit(ADC_HandleTypeDef *hadc)
 943:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** {
 3221              		.loc 2 943 1
 3222              		.cfi_startproc
 3223              		@ args = 0, pretend = 0, frame = 8
 3224              		@ frame_needed = 1, uses_anonymous_args = 0
 3225              		@ link register save eliminated.
 3226 0000 80B4     		push	{r7}
 3227              	.LCFI256:
 3228              		.cfi_def_cfa_offset 4
 3229              		.cfi_offset 7, -4
 3230 0002 83B0     		sub	sp, sp, #12
 3231              	.LCFI257:
 3232              		.cfi_def_cfa_offset 16
 3233 0004 00AF     		add	r7, sp, #0
 3234              	.LCFI258:
 3235              		.cfi_def_cfa_register 7
 3236 0006 7860     		str	r0, [r7, #4]
 944:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   /* Prevent unused argument(s) compilation warning */
 945:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   UNUSED(hadc);
 946:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
 947:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   /* NOTE : This function should not be modified. When the callback is needed,
 948:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****             function HAL_ADC_MspDeInit must be implemented in the user file.
 949:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****    */
 950:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** }
 3237              		.loc 2 950 1
 3238 0008 00BF     		nop
 3239 000a 0C37     		adds	r7, r7, #12
 3240              	.LCFI259:
 3241              		.cfi_def_cfa_offset 4
 3242 000c BD46     		mov	sp, r7
 3243              	.LCFI260:
 3244              		.cfi_def_cfa_register 13
 3245              		@ sp needed
 3246 000e 5DF8047B 		ldr	r7, [sp], #4
 3247              	.LCFI261:
 3248              		.cfi_restore 7
 3249              		.cfi_def_cfa_offset 0
 3250 0012 7047     		bx	lr
 3251              		.cfi_endproc
 3252              	.LFE328:
 3254              		.section	.text.HAL_ADC_Start,"ax",%progbits
 3255              		.align	1
 3256              		.global	HAL_ADC_Start
 3257              		.syntax unified
 3258              		.thumb
 3259              		.thumb_func
 3260              		.fpu fpv4-sp-d16
 3262              	HAL_ADC_Start:
 3263              	.LFB329:
 951:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
 952:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** #if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
 953:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** /**
 954:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   * @brief  Register a User ADC Callback
 955:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   *         To be used instead of the weak predefined callback
 956:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   * @param  hadc Pointer to a ADC_HandleTypeDef structure that contains
ARM GAS  /tmp/ccZ0TYFG.s 			page 212


 957:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   *                the configuration information for the specified ADC.
 958:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   * @param  CallbackID ID of the callback to be registered
 959:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   *         This parameter can be one of the following values:
 960:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   *          @arg @ref HAL_ADC_CONVERSION_COMPLETE_CB_ID      ADC conversion complete callback ID
 961:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   *          @arg @ref HAL_ADC_CONVERSION_HALF_CB_ID          ADC conversion DMA half-transfer call
 962:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   *          @arg @ref HAL_ADC_LEVEL_OUT_OF_WINDOW_1_CB_ID    ADC analog watchdog 1 callback ID
 963:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   *          @arg @ref HAL_ADC_ERROR_CB_ID                    ADC error callback ID
 964:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   *          @arg @ref HAL_ADC_INJ_CONVERSION_COMPLETE_CB_ID  ADC group injected conversion complet
 965:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   *          @arg @ref HAL_ADC_INJ_QUEUE_OVEFLOW_CB_ID        ADC group injected context queue over
 966:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   *          @arg @ref HAL_ADC_LEVEL_OUT_OF_WINDOW_2_CB_ID    ADC analog watchdog 2 callback ID
 967:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   *          @arg @ref HAL_ADC_LEVEL_OUT_OF_WINDOW_3_CB_ID    ADC analog watchdog 3 callback ID
 968:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   *          @arg @ref HAL_ADC_END_OF_SAMPLING_CB_ID          ADC end of sampling callback ID
 969:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   *          @arg @ref HAL_ADC_MSPINIT_CB_ID                  ADC Msp Init callback ID
 970:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   *          @arg @ref HAL_ADC_MSPDEINIT_CB_ID                ADC Msp DeInit callback ID
 971:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   *          @arg @ref HAL_ADC_MSPINIT_CB_ID MspInit callback ID
 972:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   *          @arg @ref HAL_ADC_MSPDEINIT_CB_ID MspDeInit callback ID
 973:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   * @param  pCallback pointer to the Callback function
 974:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   * @retval HAL status
 975:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   */
 976:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_RegisterCallback(ADC_HandleTypeDef *hadc, HAL_ADC_CallbackIDTypeDef Callb
 977:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** {
 978:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   HAL_StatusTypeDef status = HAL_OK;
 979:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
 980:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   if (pCallback == NULL)
 981:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   {
 982:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     /* Update the error code */
 983:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     hadc->ErrorCode |= HAL_ADC_ERROR_INVALID_CALLBACK;
 984:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
 985:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     return HAL_ERROR;
 986:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   }
 987:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
 988:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   if ((hadc->State & HAL_ADC_STATE_READY) != 0UL)
 989:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   {
 990:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     switch (CallbackID)
 991:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     {
 992:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       case HAL_ADC_CONVERSION_COMPLETE_CB_ID :
 993:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         hadc->ConvCpltCallback = pCallback;
 994:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         break;
 995:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
 996:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       case HAL_ADC_CONVERSION_HALF_CB_ID :
 997:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         hadc->ConvHalfCpltCallback = pCallback;
 998:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         break;
 999:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
1000:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       case HAL_ADC_LEVEL_OUT_OF_WINDOW_1_CB_ID :
1001:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         hadc->LevelOutOfWindowCallback = pCallback;
1002:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         break;
1003:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
1004:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       case HAL_ADC_ERROR_CB_ID :
1005:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         hadc->ErrorCallback = pCallback;
1006:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         break;
1007:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
1008:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       case HAL_ADC_INJ_CONVERSION_COMPLETE_CB_ID :
1009:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         hadc->InjectedConvCpltCallback = pCallback;
1010:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         break;
1011:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
1012:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       case HAL_ADC_INJ_QUEUE_OVEFLOW_CB_ID :
1013:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         hadc->InjectedQueueOverflowCallback = pCallback;
ARM GAS  /tmp/ccZ0TYFG.s 			page 213


1014:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         break;
1015:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
1016:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       case HAL_ADC_LEVEL_OUT_OF_WINDOW_2_CB_ID :
1017:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         hadc->LevelOutOfWindow2Callback = pCallback;
1018:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         break;
1019:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
1020:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       case HAL_ADC_LEVEL_OUT_OF_WINDOW_3_CB_ID :
1021:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         hadc->LevelOutOfWindow3Callback = pCallback;
1022:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         break;
1023:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
1024:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       case HAL_ADC_END_OF_SAMPLING_CB_ID :
1025:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         hadc->EndOfSamplingCallback = pCallback;
1026:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         break;
1027:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
1028:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       case HAL_ADC_MSPINIT_CB_ID :
1029:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         hadc->MspInitCallback = pCallback;
1030:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         break;
1031:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
1032:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       case HAL_ADC_MSPDEINIT_CB_ID :
1033:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         hadc->MspDeInitCallback = pCallback;
1034:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         break;
1035:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
1036:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       default :
1037:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         /* Update the error code */
1038:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         hadc->ErrorCode |= HAL_ADC_ERROR_INVALID_CALLBACK;
1039:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
1040:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         /* Return error status */
1041:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         status = HAL_ERROR;
1042:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         break;
1043:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     }
1044:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   }
1045:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   else if (HAL_ADC_STATE_RESET == hadc->State)
1046:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   {
1047:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     switch (CallbackID)
1048:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     {
1049:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       case HAL_ADC_MSPINIT_CB_ID :
1050:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         hadc->MspInitCallback = pCallback;
1051:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         break;
1052:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
1053:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       case HAL_ADC_MSPDEINIT_CB_ID :
1054:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         hadc->MspDeInitCallback = pCallback;
1055:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         break;
1056:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
1057:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       default :
1058:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         /* Update the error code */
1059:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         hadc->ErrorCode |= HAL_ADC_ERROR_INVALID_CALLBACK;
1060:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
1061:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         /* Return error status */
1062:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         status = HAL_ERROR;
1063:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         break;
1064:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     }
1065:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   }
1066:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   else
1067:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   {
1068:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     /* Update the error code */
1069:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     hadc->ErrorCode |= HAL_ADC_ERROR_INVALID_CALLBACK;
1070:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
ARM GAS  /tmp/ccZ0TYFG.s 			page 214


1071:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     /* Return error status */
1072:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     status =  HAL_ERROR;
1073:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   }
1074:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
1075:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   return status;
1076:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** }
1077:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
1078:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** /**
1079:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   * @brief  Unregister a ADC Callback
1080:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   *         ADC callback is redirected to the weak predefined callback
1081:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   * @param  hadc Pointer to a ADC_HandleTypeDef structure that contains
1082:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   *                the configuration information for the specified ADC.
1083:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   * @param  CallbackID ID of the callback to be unregistered
1084:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   *         This parameter can be one of the following values:
1085:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   *          @arg @ref HAL_ADC_CONVERSION_COMPLETE_CB_ID      ADC conversion complete callback ID
1086:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   *          @arg @ref HAL_ADC_CONVERSION_HALF_CB_ID          ADC conversion DMA half-transfer call
1087:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   *          @arg @ref HAL_ADC_LEVEL_OUT_OF_WINDOW_1_CB_ID    ADC analog watchdog 1 callback ID
1088:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   *          @arg @ref HAL_ADC_ERROR_CB_ID                    ADC error callback ID
1089:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   *          @arg @ref HAL_ADC_INJ_CONVERSION_COMPLETE_CB_ID  ADC group injected conversion complet
1090:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   *          @arg @ref HAL_ADC_INJ_QUEUE_OVEFLOW_CB_ID        ADC group injected context queue over
1091:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   *          @arg @ref HAL_ADC_LEVEL_OUT_OF_WINDOW_2_CB_ID    ADC analog watchdog 2 callback ID
1092:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   *          @arg @ref HAL_ADC_LEVEL_OUT_OF_WINDOW_3_CB_ID    ADC analog watchdog 3 callback ID
1093:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   *          @arg @ref HAL_ADC_END_OF_SAMPLING_CB_ID          ADC end of sampling callback ID
1094:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   *          @arg @ref HAL_ADC_MSPINIT_CB_ID                  ADC Msp Init callback ID
1095:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   *          @arg @ref HAL_ADC_MSPDEINIT_CB_ID                ADC Msp DeInit callback ID
1096:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   *          @arg @ref HAL_ADC_MSPINIT_CB_ID MspInit callback ID
1097:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   *          @arg @ref HAL_ADC_MSPDEINIT_CB_ID MspDeInit callback ID
1098:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   * @retval HAL status
1099:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   */
1100:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_UnRegisterCallback(ADC_HandleTypeDef *hadc, HAL_ADC_CallbackIDTypeDef Cal
1101:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** {
1102:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   HAL_StatusTypeDef status = HAL_OK;
1103:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
1104:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   if ((hadc->State & HAL_ADC_STATE_READY) != 0UL)
1105:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   {
1106:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     switch (CallbackID)
1107:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     {
1108:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       case HAL_ADC_CONVERSION_COMPLETE_CB_ID :
1109:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         hadc->ConvCpltCallback = HAL_ADC_ConvCpltCallback;
1110:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         break;
1111:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
1112:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       case HAL_ADC_CONVERSION_HALF_CB_ID :
1113:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         hadc->ConvHalfCpltCallback = HAL_ADC_ConvHalfCpltCallback;
1114:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         break;
1115:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
1116:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       case HAL_ADC_LEVEL_OUT_OF_WINDOW_1_CB_ID :
1117:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         hadc->LevelOutOfWindowCallback = HAL_ADC_LevelOutOfWindowCallback;
1118:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         break;
1119:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
1120:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       case HAL_ADC_ERROR_CB_ID :
1121:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         hadc->ErrorCallback = HAL_ADC_ErrorCallback;
1122:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         break;
1123:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
1124:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       case HAL_ADC_INJ_CONVERSION_COMPLETE_CB_ID :
1125:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         hadc->InjectedConvCpltCallback = HAL_ADCEx_InjectedConvCpltCallback;
1126:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         break;
1127:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
ARM GAS  /tmp/ccZ0TYFG.s 			page 215


1128:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       case HAL_ADC_INJ_QUEUE_OVEFLOW_CB_ID :
1129:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         hadc->InjectedQueueOverflowCallback = HAL_ADCEx_InjectedQueueOverflowCallback;
1130:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         break;
1131:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
1132:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       case HAL_ADC_LEVEL_OUT_OF_WINDOW_2_CB_ID :
1133:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         hadc->LevelOutOfWindow2Callback = HAL_ADCEx_LevelOutOfWindow2Callback;
1134:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         break;
1135:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
1136:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       case HAL_ADC_LEVEL_OUT_OF_WINDOW_3_CB_ID :
1137:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         hadc->LevelOutOfWindow3Callback = HAL_ADCEx_LevelOutOfWindow3Callback;
1138:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         break;
1139:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
1140:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       case HAL_ADC_END_OF_SAMPLING_CB_ID :
1141:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         hadc->EndOfSamplingCallback = HAL_ADCEx_EndOfSamplingCallback;
1142:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         break;
1143:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
1144:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       case HAL_ADC_MSPINIT_CB_ID :
1145:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         hadc->MspInitCallback = HAL_ADC_MspInit; /* Legacy weak MspInit              */
1146:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         break;
1147:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
1148:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       case HAL_ADC_MSPDEINIT_CB_ID :
1149:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         hadc->MspDeInitCallback = HAL_ADC_MspDeInit; /* Legacy weak MspDeInit            */
1150:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         break;
1151:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
1152:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       default :
1153:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         /* Update the error code */
1154:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         hadc->ErrorCode |= HAL_ADC_ERROR_INVALID_CALLBACK;
1155:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
1156:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         /* Return error status */
1157:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         status =  HAL_ERROR;
1158:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         break;
1159:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     }
1160:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   }
1161:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   else if (HAL_ADC_STATE_RESET == hadc->State)
1162:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   {
1163:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     switch (CallbackID)
1164:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     {
1165:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       case HAL_ADC_MSPINIT_CB_ID :
1166:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         hadc->MspInitCallback = HAL_ADC_MspInit;                   /* Legacy weak MspInit          
1167:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         break;
1168:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
1169:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       case HAL_ADC_MSPDEINIT_CB_ID :
1170:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         hadc->MspDeInitCallback = HAL_ADC_MspDeInit;               /* Legacy weak MspDeInit        
1171:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         break;
1172:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
1173:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       default :
1174:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         /* Update the error code */
1175:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         hadc->ErrorCode |= HAL_ADC_ERROR_INVALID_CALLBACK;
1176:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
1177:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         /* Return error status */
1178:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         status =  HAL_ERROR;
1179:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         break;
1180:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     }
1181:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   }
1182:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   else
1183:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   {
1184:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     /* Update the error code */
ARM GAS  /tmp/ccZ0TYFG.s 			page 216


1185:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     hadc->ErrorCode |= HAL_ADC_ERROR_INVALID_CALLBACK;
1186:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
1187:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     /* Return error status */
1188:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     status =  HAL_ERROR;
1189:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   }
1190:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
1191:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   return status;
1192:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** }
1193:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
1194:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** #endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
1195:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
1196:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** /**
1197:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   * @}
1198:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   */
1199:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
1200:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** /** @defgroup ADC_Exported_Functions_Group2 ADC Input and Output operation functions
1201:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   * @brief    ADC IO operation functions
1202:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   *
1203:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** @verbatim
1204:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****  ===============================================================================
1205:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****                       ##### IO operation functions #####
1206:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****  ===============================================================================
1207:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     [..]  This section provides functions allowing to:
1208:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       (+) Start conversion of regular group.
1209:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       (+) Stop conversion of regular group.
1210:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       (+) Poll for conversion complete on regular group.
1211:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       (+) Poll for conversion event.
1212:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       (+) Get result of regular channel conversion.
1213:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       (+) Start conversion of regular group and enable interruptions.
1214:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       (+) Stop conversion of regular group and disable interruptions.
1215:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       (+) Handle ADC interrupt request
1216:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       (+) Start conversion of regular group and enable DMA transfer.
1217:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       (+) Stop conversion of regular group and disable ADC DMA transfer.
1218:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** @endverbatim
1219:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   * @{
1220:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   */
1221:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
1222:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** /**
1223:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   * @brief  Enable ADC, start conversion of regular group.
1224:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   * @note   Interruptions enabled in this function: None.
1225:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   * @note   Case of multimode enabled (when multimode feature is available):
1226:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   *           if ADC is Slave, ADC is enabled but conversion is not started,
1227:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   *           if ADC is master, ADC is enabled and multimode conversion is started.
1228:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   * @param hadc ADC handle
1229:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   * @retval HAL status
1230:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   */
1231:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
1232:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** {
 3264              		.loc 2 1232 1
 3265              		.cfi_startproc
 3266              		@ args = 0, pretend = 0, frame = 24
 3267              		@ frame_needed = 1, uses_anonymous_args = 0
 3268 0000 80B5     		push	{r7, lr}
 3269              	.LCFI262:
 3270              		.cfi_def_cfa_offset 8
 3271              		.cfi_offset 7, -8
 3272              		.cfi_offset 14, -4
ARM GAS  /tmp/ccZ0TYFG.s 			page 217


 3273 0002 86B0     		sub	sp, sp, #24
 3274              	.LCFI263:
 3275              		.cfi_def_cfa_offset 32
 3276 0004 00AF     		add	r7, sp, #0
 3277              	.LCFI264:
 3278              		.cfi_def_cfa_register 7
 3279 0006 7860     		str	r0, [r7, #4]
1233:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status;
1234:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** #if defined(ADC_MULTIMODE_SUPPORT)
1235:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   const ADC_TypeDef *tmpADC_Master;
1236:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 3280              		.loc 2 1236 55
 3281 0008 7B68     		ldr	r3, [r7, #4]
 3282 000a 1B68     		ldr	r3, [r3]
 3283              		.loc 2 1236 35
 3284 000c B3F1A04F 		cmp	r3, #1342177280
 3285 0010 04D0     		beq	.L121
 3286              		.loc 2 1236 55 discriminator 2
 3287 0012 7B68     		ldr	r3, [r7, #4]
 3288 0014 1B68     		ldr	r3, [r3]
 3289 0016 674A     		ldr	r2, .L150
 3290 0018 9342     		cmp	r3, r2
 3291 001a 01D1     		bne	.L122
 3292              	.L121:
 3293              		.loc 2 1236 35 discriminator 3
 3294 001c 664B     		ldr	r3, .L150+4
 3295 001e 00E0     		b	.L123
 3296              	.L122:
 3297              		.loc 2 1236 35 is_stmt 0 discriminator 4
 3298 0020 664B     		ldr	r3, .L150+8
 3299              	.L123:
 3300              		.loc 2 1236 35 discriminator 6
 3301 0022 1846     		mov	r0, r3
 3302 0024 FFF7FEFF 		bl	LL_ADC_GetMultimode
 3303 0028 3861     		str	r0, [r7, #16]
1237:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** #endif
1238:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
1239:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   /* Check the parameters */
1240:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
1241:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
1242:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   /* Perform ADC enable and conversion start if no conversion is on going */
1243:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 3304              		.loc 2 1243 7 is_stmt 1 discriminator 6
 3305 002a 7B68     		ldr	r3, [r7, #4]
 3306 002c 1B68     		ldr	r3, [r3]
 3307 002e 1846     		mov	r0, r3
 3308 0030 FFF7FEFF 		bl	LL_ADC_REG_IsConversionOngoing
 3309 0034 0346     		mov	r3, r0
 3310              		.loc 2 1243 6 discriminator 6
 3311 0036 002B     		cmp	r3, #0
 3312 0038 40F0B480 		bne	.L124
1244:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   {
1245:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     /* Process locked */
1246:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     __HAL_LOCK(hadc);
 3313              		.loc 2 1246 5
 3314 003c 7B68     		ldr	r3, [r7, #4]
 3315 003e 93F85830 		ldrb	r3, [r3, #88]	@ zero_extendqisi2
ARM GAS  /tmp/ccZ0TYFG.s 			page 218


 3316 0042 012B     		cmp	r3, #1
 3317 0044 01D1     		bne	.L125
 3318              		.loc 2 1246 5 is_stmt 0 discriminator 1
 3319 0046 0223     		movs	r3, #2
 3320 0048 AFE0     		b	.L126
 3321              	.L125:
 3322              		.loc 2 1246 5 discriminator 2
 3323 004a 7B68     		ldr	r3, [r7, #4]
 3324 004c 0122     		movs	r2, #1
 3325 004e 83F85820 		strb	r2, [r3, #88]
1247:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
1248:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     /* Enable the ADC peripheral */
1249:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     tmp_hal_status = ADC_Enable(hadc);
 3326              		.loc 2 1249 22 is_stmt 1 discriminator 2
 3327 0052 7868     		ldr	r0, [r7, #4]
 3328 0054 FFF7FEFF 		bl	ADC_Enable
 3329 0058 0346     		mov	r3, r0
 3330 005a FB75     		strb	r3, [r7, #23]
1250:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
1251:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     /* Start conversion if ADC is effectively enabled */
1252:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     if (tmp_hal_status == HAL_OK)
 3331              		.loc 2 1252 8 discriminator 2
 3332 005c FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 3333 005e 002B     		cmp	r3, #0
 3334 0060 40F09B80 		bne	.L127
1253:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     {
1254:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       /* Set ADC state                                                        */
1255:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       /* - Clear state bitfield related to regular group conversion results   */
1256:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       /* - Set state bitfield related to regular operation                    */
1257:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       ADC_STATE_CLR_SET(hadc->State,
 3335              		.loc 2 1257 7
 3336 0064 7B68     		ldr	r3, [r7, #4]
 3337 0066 DB6D     		ldr	r3, [r3, #92]
 3338 0068 23F47063 		bic	r3, r3, #3840
 3339 006c 23F00103 		bic	r3, r3, #1
 3340 0070 43F48072 		orr	r2, r3, #256
 3341 0074 7B68     		ldr	r3, [r7, #4]
 3342 0076 DA65     		str	r2, [r3, #92]
1258:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****                         HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_A
1259:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****                         HAL_ADC_STATE_REG_BUSY);
1260:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
1261:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** #if defined(ADC_MULTIMODE_SUPPORT)
1262:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
1263:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         - if ADC instance is master or if multimode feature is not available
1264:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         - if multimode setting is disabled (ADC instance slave in independent mode) */
1265:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 3343              		.loc 2 1265 12
 3344 0078 7B68     		ldr	r3, [r7, #4]
 3345 007a 1B68     		ldr	r3, [r3]
 3346 007c 4D4A     		ldr	r2, .L150
 3347 007e 9342     		cmp	r3, r2
 3348 0080 09D0     		beq	.L128
 3349              		.loc 2 1265 12 is_stmt 0 discriminator 1
 3350 0082 7B68     		ldr	r3, [r7, #4]
 3351 0084 1B68     		ldr	r3, [r3]
 3352 0086 4E4A     		ldr	r2, .L150+12
 3353 0088 9342     		cmp	r3, r2
ARM GAS  /tmp/ccZ0TYFG.s 			page 219


 3354 008a 02D0     		beq	.L129
 3355              		.loc 2 1265 12 discriminator 3
 3356 008c 7B68     		ldr	r3, [r7, #4]
 3357 008e 1B68     		ldr	r3, [r3]
 3358 0090 03E0     		b	.L131
 3359              	.L129:
 3360              		.loc 2 1265 12 discriminator 4
 3361 0092 4C4B     		ldr	r3, .L150+16
 3362 0094 01E0     		b	.L131
 3363              	.L128:
 3364              		.loc 2 1265 12 discriminator 2
 3365 0096 4FF0A043 		mov	r3, #1342177280
 3366              	.L131:
 3367              		.loc 2 1265 66 is_stmt 1 discriminator 8
 3368 009a 7A68     		ldr	r2, [r7, #4]
 3369 009c 1268     		ldr	r2, [r2]
 3370              		.loc 2 1265 10 discriminator 8
 3371 009e 9342     		cmp	r3, r2
 3372 00a0 02D0     		beq	.L132
1266:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****           || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 3373              		.loc 2 1266 11
 3374 00a2 3B69     		ldr	r3, [r7, #16]
 3375 00a4 002B     		cmp	r3, #0
 3376 00a6 05D1     		bne	.L133
 3377              	.L132:
1267:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****          )
1268:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       {
1269:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 3378              		.loc 2 1269 9
 3379 00a8 7B68     		ldr	r3, [r7, #4]
 3380 00aa DB6D     		ldr	r3, [r3, #92]
 3381 00ac 23F48012 		bic	r2, r3, #1048576
 3382 00b0 7B68     		ldr	r3, [r7, #4]
 3383 00b2 DA65     		str	r2, [r3, #92]
 3384              	.L133:
1270:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       }
1271:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** #endif
1272:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
1273:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       /* Set ADC error code */
1274:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       /* Check if a conversion is on going on ADC group injected */
1275:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 3385              		.loc 2 1275 11
 3386 00b4 7B68     		ldr	r3, [r7, #4]
 3387 00b6 DB6D     		ldr	r3, [r3, #92]
 3388 00b8 03F48053 		and	r3, r3, #4096
 3389              		.loc 2 1275 10
 3390 00bc B3F5805F 		cmp	r3, #4096
 3391 00c0 06D1     		bne	.L134
1276:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       {
1277:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         /* Reset ADC error code fields related to regular conversions only */
1278:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 3392              		.loc 2 1278 9
 3393 00c2 7B68     		ldr	r3, [r7, #4]
 3394 00c4 1B6E     		ldr	r3, [r3, #96]
 3395 00c6 23F00602 		bic	r2, r3, #6
 3396 00ca 7B68     		ldr	r3, [r7, #4]
 3397 00cc 1A66     		str	r2, [r3, #96]
ARM GAS  /tmp/ccZ0TYFG.s 			page 220


 3398 00ce 02E0     		b	.L135
 3399              	.L134:
1279:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       }
1280:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       else
1281:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       {
1282:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         /* Reset all ADC error code fields */
1283:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         ADC_CLEAR_ERRORCODE(hadc);
 3400              		.loc 2 1283 9
 3401 00d0 7B68     		ldr	r3, [r7, #4]
 3402 00d2 0022     		movs	r2, #0
 3403 00d4 1A66     		str	r2, [r3, #96]
 3404              	.L135:
1284:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       }
1285:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
1286:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       /* Clear ADC group regular conversion flag and overrun flag               */
1287:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       /* (To ensure of no unknown state from potential previous ADC operations) */
1288:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 3405              		.loc 2 1288 7
 3406 00d6 7B68     		ldr	r3, [r7, #4]
 3407 00d8 1B68     		ldr	r3, [r3]
 3408 00da 1C22     		movs	r2, #28
 3409 00dc 1A60     		str	r2, [r3]
1289:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
1290:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       /* Process unlocked */
1291:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       /* Unlock before starting ADC conversions: in case of potential         */
1292:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       /* interruption, to let the process to ADC IRQ Handler.                 */
1293:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       __HAL_UNLOCK(hadc);
 3410              		.loc 2 1293 7
 3411 00de 7B68     		ldr	r3, [r7, #4]
 3412 00e0 0022     		movs	r2, #0
 3413 00e2 83F85820 		strb	r2, [r3, #88]
1294:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
1295:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       /* Enable conversion of regular group.                                  */
1296:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       /* If software start has been selected, conversion starts immediately.  */
1297:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       /* If external trigger has been selected, conversion will start at next */
1298:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       /* trigger event.                                                       */
1299:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       /* Case of multimode enabled (when multimode feature is available):     */
1300:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
1301:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       /*    enabled only (conversion is not started),                         */
1302:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       /*  - if ADC is master, ADC is enabled and conversion is started.       */
1303:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** #if defined(ADC_MULTIMODE_SUPPORT)
1304:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 3414              		.loc 2 1304 12
 3415 00e6 7B68     		ldr	r3, [r7, #4]
 3416 00e8 1B68     		ldr	r3, [r3]
 3417 00ea 324A     		ldr	r2, .L150
 3418 00ec 9342     		cmp	r3, r2
 3419 00ee 09D0     		beq	.L136
 3420              		.loc 2 1304 12 is_stmt 0 discriminator 1
 3421 00f0 7B68     		ldr	r3, [r7, #4]
 3422 00f2 1B68     		ldr	r3, [r3]
 3423 00f4 324A     		ldr	r2, .L150+12
 3424 00f6 9342     		cmp	r3, r2
 3425 00f8 02D0     		beq	.L137
 3426              		.loc 2 1304 12 discriminator 3
 3427 00fa 7B68     		ldr	r3, [r7, #4]
 3428 00fc 1B68     		ldr	r3, [r3]
ARM GAS  /tmp/ccZ0TYFG.s 			page 221


 3429 00fe 03E0     		b	.L139
 3430              	.L137:
 3431              		.loc 2 1304 12 discriminator 4
 3432 0100 304B     		ldr	r3, .L150+16
 3433 0102 01E0     		b	.L139
 3434              	.L136:
 3435              		.loc 2 1304 12 discriminator 2
 3436 0104 4FF0A043 		mov	r3, #1342177280
 3437              	.L139:
 3438              		.loc 2 1304 66 is_stmt 1 discriminator 8
 3439 0108 7A68     		ldr	r2, [r7, #4]
 3440 010a 1268     		ldr	r2, [r2]
 3441              		.loc 2 1304 10 discriminator 8
 3442 010c 9342     		cmp	r3, r2
 3443 010e 08D0     		beq	.L140
1305:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****           || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 3444              		.loc 2 1305 11
 3445 0110 3B69     		ldr	r3, [r7, #16]
 3446 0112 002B     		cmp	r3, #0
 3447 0114 05D0     		beq	.L140
1306:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****           || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 3448              		.loc 2 1306 11
 3449 0116 3B69     		ldr	r3, [r7, #16]
 3450 0118 052B     		cmp	r3, #5
 3451 011a 02D0     		beq	.L140
1307:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****           || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 3452              		.loc 2 1307 11
 3453 011c 3B69     		ldr	r3, [r7, #16]
 3454 011e 092B     		cmp	r3, #9
 3455 0120 14D1     		bne	.L141
 3456              	.L140:
1308:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****          )
1309:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       {
1310:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         /* ADC instance is not a multimode slave instance with multimode regular conversions enable
1311:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 3457              		.loc 2 1311 13
 3458 0122 7B68     		ldr	r3, [r7, #4]
 3459 0124 1B68     		ldr	r3, [r3]
 3460 0126 DB68     		ldr	r3, [r3, #12]
 3461 0128 03F00073 		and	r3, r3, #33554432
 3462              		.loc 2 1311 12
 3463 012c 002B     		cmp	r3, #0
 3464 012e 07D0     		beq	.L142
1312:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         {
1313:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****           ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 3465              		.loc 2 1313 11
 3466 0130 7B68     		ldr	r3, [r7, #4]
 3467 0132 DB6D     		ldr	r3, [r3, #92]
 3468 0134 23F44053 		bic	r3, r3, #12288
 3469 0138 43F48052 		orr	r2, r3, #4096
 3470 013c 7B68     		ldr	r3, [r7, #4]
 3471 013e DA65     		str	r2, [r3, #92]
 3472              	.L142:
1314:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         }
1315:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
1316:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         /* Start ADC group regular conversion */
1317:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         LL_ADC_REG_StartConversion(hadc->Instance);
ARM GAS  /tmp/ccZ0TYFG.s 			page 222


 3473              		.loc 2 1317 9
 3474 0140 7B68     		ldr	r3, [r7, #4]
 3475 0142 1B68     		ldr	r3, [r3]
 3476 0144 1846     		mov	r0, r3
 3477 0146 FFF7FEFF 		bl	LL_ADC_REG_StartConversion
 3478 014a 2DE0     		b	.L149
 3479              	.L141:
1318:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       }
1319:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       else
1320:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       {
1321:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
1322:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 3480              		.loc 2 1322 9
 3481 014c 7B68     		ldr	r3, [r7, #4]
 3482 014e DB6D     		ldr	r3, [r3, #92]
 3483 0150 43F48012 		orr	r2, r3, #1048576
 3484 0154 7B68     		ldr	r3, [r7, #4]
 3485 0156 DA65     		str	r2, [r3, #92]
1323:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         /* if Master ADC JAUTO bit is set, update Slave State in setting
1324:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****            HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
1325:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 3486              		.loc 2 1325 25
 3487 0158 7B68     		ldr	r3, [r7, #4]
 3488 015a 1B68     		ldr	r3, [r3]
 3489 015c 154A     		ldr	r2, .L150
 3490 015e 9342     		cmp	r3, r2
 3491 0160 09D0     		beq	.L144
 3492              		.loc 2 1325 25 is_stmt 0 discriminator 1
 3493 0162 7B68     		ldr	r3, [r7, #4]
 3494 0164 1B68     		ldr	r3, [r3]
 3495 0166 164A     		ldr	r2, .L150+12
 3496 0168 9342     		cmp	r3, r2
 3497 016a 02D0     		beq	.L145
 3498              		.loc 2 1325 25 discriminator 3
 3499 016c 7B68     		ldr	r3, [r7, #4]
 3500 016e 1B68     		ldr	r3, [r3]
 3501 0170 03E0     		b	.L147
 3502              	.L145:
 3503              		.loc 2 1325 25 discriminator 4
 3504 0172 144B     		ldr	r3, .L150+16
 3505 0174 01E0     		b	.L147
 3506              	.L144:
 3507              		.loc 2 1325 25 discriminator 2
 3508 0176 4FF0A043 		mov	r3, #1342177280
 3509              	.L147:
 3510              		.loc 2 1325 23 is_stmt 1 discriminator 8
 3511 017a FB60     		str	r3, [r7, #12]
1326:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 3512              		.loc 2 1326 13 discriminator 8
 3513 017c FB68     		ldr	r3, [r7, #12]
 3514 017e DB68     		ldr	r3, [r3, #12]
 3515 0180 03F00073 		and	r3, r3, #33554432
 3516              		.loc 2 1326 12 discriminator 8
 3517 0184 002B     		cmp	r3, #0
 3518 0186 0FD0     		beq	.L149
1327:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         {
1328:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****           ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
ARM GAS  /tmp/ccZ0TYFG.s 			page 223


 3519              		.loc 2 1328 11
 3520 0188 7B68     		ldr	r3, [r7, #4]
 3521 018a DB6D     		ldr	r3, [r3, #92]
 3522 018c 23F44053 		bic	r3, r3, #12288
 3523 0190 43F48052 		orr	r2, r3, #4096
 3524 0194 7B68     		ldr	r3, [r7, #4]
 3525 0196 DA65     		str	r2, [r3, #92]
 3526 0198 06E0     		b	.L149
 3527              	.L127:
1329:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         }
1330:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
1331:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       }
1332:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** #else
1333:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
1334:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       {
1335:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
1336:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       }
1337:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
1338:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       /* Start ADC group regular conversion */
1339:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       LL_ADC_REG_StartConversion(hadc->Instance);
1340:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** #endif
1341:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     }
1342:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     else
1343:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     {
1344:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       /* Process unlocked */
1345:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       __HAL_UNLOCK(hadc);
 3528              		.loc 2 1345 7
 3529 019a 7B68     		ldr	r3, [r7, #4]
 3530 019c 0022     		movs	r2, #0
 3531 019e 83F85820 		strb	r2, [r3, #88]
 3532 01a2 01E0     		b	.L149
 3533              	.L124:
1346:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     }
1347:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   }
1348:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   else
1349:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   {
1350:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     tmp_hal_status = HAL_BUSY;
 3534              		.loc 2 1350 20
 3535 01a4 0223     		movs	r3, #2
 3536 01a6 FB75     		strb	r3, [r7, #23]
 3537              	.L149:
1351:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   }
1352:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
1353:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   /* Return function status */
1354:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   return tmp_hal_status;
 3538              		.loc 2 1354 10
 3539 01a8 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 3540              	.L126:
1355:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** }
 3541              		.loc 2 1355 1
 3542 01aa 1846     		mov	r0, r3
 3543 01ac 1837     		adds	r7, r7, #24
 3544              	.LCFI265:
 3545              		.cfi_def_cfa_offset 8
 3546 01ae BD46     		mov	sp, r7
 3547              	.LCFI266:
 3548              		.cfi_def_cfa_register 13
ARM GAS  /tmp/ccZ0TYFG.s 			page 224


 3549              		@ sp needed
 3550 01b0 80BD     		pop	{r7, pc}
 3551              	.L151:
 3552 01b2 00BF     		.align	2
 3553              	.L150:
 3554 01b4 00010050 		.word	1342177536
 3555 01b8 00030050 		.word	1342178048
 3556 01bc 00070050 		.word	1342179072
 3557 01c0 00050050 		.word	1342178560
 3558 01c4 00040050 		.word	1342178304
 3559              		.cfi_endproc
 3560              	.LFE329:
 3562              		.section	.text.HAL_ADC_Stop,"ax",%progbits
 3563              		.align	1
 3564              		.global	HAL_ADC_Stop
 3565              		.syntax unified
 3566              		.thumb
 3567              		.thumb_func
 3568              		.fpu fpv4-sp-d16
 3570              	HAL_ADC_Stop:
 3571              	.LFB330:
1356:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
1357:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** /**
1358:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   * @brief  Stop ADC conversion of regular group (and injected channels in
1359:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   *         case of auto_injection mode), disable ADC peripheral.
1360:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   * @note:  ADC peripheral disable is forcing stop of potential
1361:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   *         conversion on injected group. If injected group is under use, it
1362:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
1363:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   * @param hadc ADC handle
1364:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   * @retval HAL status.
1365:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   */
1366:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
1367:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** {
 3572              		.loc 2 1367 1
 3573              		.cfi_startproc
 3574              		@ args = 0, pretend = 0, frame = 16
 3575              		@ frame_needed = 1, uses_anonymous_args = 0
 3576 0000 80B5     		push	{r7, lr}
 3577              	.LCFI267:
 3578              		.cfi_def_cfa_offset 8
 3579              		.cfi_offset 7, -8
 3580              		.cfi_offset 14, -4
 3581 0002 84B0     		sub	sp, sp, #16
 3582              	.LCFI268:
 3583              		.cfi_def_cfa_offset 24
 3584 0004 00AF     		add	r7, sp, #0
 3585              	.LCFI269:
 3586              		.cfi_def_cfa_register 7
 3587 0006 7860     		str	r0, [r7, #4]
1368:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status;
1369:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
1370:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   /* Check the parameters */
1371:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
1372:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
1373:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   /* Process locked */
1374:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   __HAL_LOCK(hadc);
 3588              		.loc 2 1374 3
ARM GAS  /tmp/ccZ0TYFG.s 			page 225


 3589 0008 7B68     		ldr	r3, [r7, #4]
 3590 000a 93F85830 		ldrb	r3, [r3, #88]	@ zero_extendqisi2
 3591 000e 012B     		cmp	r3, #1
 3592 0010 01D1     		bne	.L153
 3593              		.loc 2 1374 3 is_stmt 0 discriminator 1
 3594 0012 0223     		movs	r3, #2
 3595 0014 23E0     		b	.L154
 3596              	.L153:
 3597              		.loc 2 1374 3 discriminator 2
 3598 0016 7B68     		ldr	r3, [r7, #4]
 3599 0018 0122     		movs	r2, #1
 3600 001a 83F85820 		strb	r2, [r3, #88]
1375:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
1376:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   /* 1. Stop potential conversion on going, on ADC groups regular and injected */
1377:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 3601              		.loc 2 1377 20 is_stmt 1 discriminator 2
 3602 001e 0321     		movs	r1, #3
 3603 0020 7868     		ldr	r0, [r7, #4]
 3604 0022 FFF7FEFF 		bl	ADC_ConversionStop
 3605 0026 0346     		mov	r3, r0
 3606 0028 FB73     		strb	r3, [r7, #15]
1378:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
1379:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   /* Disable ADC peripheral if conversions are effectively stopped */
1380:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   if (tmp_hal_status == HAL_OK)
 3607              		.loc 2 1380 6 discriminator 2
 3608 002a FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 3609 002c 002B     		cmp	r3, #0
 3610 002e 11D1     		bne	.L155
1381:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   {
1382:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     /* 2. Disable the ADC peripheral */
1383:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     tmp_hal_status = ADC_Disable(hadc);
 3611              		.loc 2 1383 22
 3612 0030 7868     		ldr	r0, [r7, #4]
 3613 0032 FFF7FEFF 		bl	ADC_Disable
 3614 0036 0346     		mov	r3, r0
 3615 0038 FB73     		strb	r3, [r7, #15]
1384:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
1385:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     /* Check if ADC is effectively disabled */
1386:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     if (tmp_hal_status == HAL_OK)
 3616              		.loc 2 1386 8
 3617 003a FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 3618 003c 002B     		cmp	r3, #0
 3619 003e 09D1     		bne	.L155
1387:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     {
1388:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       /* Set ADC state */
1389:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       ADC_STATE_CLR_SET(hadc->State,
 3620              		.loc 2 1389 7
 3621 0040 7B68     		ldr	r3, [r7, #4]
 3622 0042 DB6D     		ldr	r3, [r3, #92]
 3623 0044 23F48853 		bic	r3, r3, #4352
 3624 0048 23F00103 		bic	r3, r3, #1
 3625 004c 43F00102 		orr	r2, r3, #1
 3626 0050 7B68     		ldr	r3, [r7, #4]
 3627 0052 DA65     		str	r2, [r3, #92]
 3628              	.L155:
1390:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****                         HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
1391:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****                         HAL_ADC_STATE_READY);
ARM GAS  /tmp/ccZ0TYFG.s 			page 226


1392:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     }
1393:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   }
1394:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
1395:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   /* Process unlocked */
1396:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   __HAL_UNLOCK(hadc);
 3629              		.loc 2 1396 3
 3630 0054 7B68     		ldr	r3, [r7, #4]
 3631 0056 0022     		movs	r2, #0
 3632 0058 83F85820 		strb	r2, [r3, #88]
1397:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
1398:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   /* Return function status */
1399:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   return tmp_hal_status;
 3633              		.loc 2 1399 10
 3634 005c FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 3635              	.L154:
1400:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** }
 3636              		.loc 2 1400 1
 3637 005e 1846     		mov	r0, r3
 3638 0060 1037     		adds	r7, r7, #16
 3639              	.LCFI270:
 3640              		.cfi_def_cfa_offset 8
 3641 0062 BD46     		mov	sp, r7
 3642              	.LCFI271:
 3643              		.cfi_def_cfa_register 13
 3644              		@ sp needed
 3645 0064 80BD     		pop	{r7, pc}
 3646              		.cfi_endproc
 3647              	.LFE330:
 3649              		.section	.text.HAL_ADC_PollForConversion,"ax",%progbits
 3650              		.align	1
 3651              		.global	HAL_ADC_PollForConversion
 3652              		.syntax unified
 3653              		.thumb
 3654              		.thumb_func
 3655              		.fpu fpv4-sp-d16
 3657              	HAL_ADC_PollForConversion:
 3658              	.LFB331:
1401:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
1402:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** /**
1403:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   * @brief  Wait for regular group conversion to be completed.
1404:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   * @note   ADC conversion flags EOS (end of sequence) and EOC (end of
1405:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   *         conversion) are cleared by this function, with an exception:
1406:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   *         if low power feature "LowPowerAutoWait" is enabled, flags are
1407:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   *         not cleared to not interfere with this feature until data register
1408:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   *         is read using function HAL_ADC_GetValue().
1409:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   * @note   This function cannot be used in a particular setup: ADC configured
1410:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   *         in DMA mode and polling for end of each conversion (ADC init
1411:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   *         parameter "EOCSelection" set to ADC_EOC_SINGLE_CONV).
1412:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   *         In this case, DMA resets the flag EOC and polling cannot be
1413:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   *         performed on each conversion. Nevertheless, polling can still
1414:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   *         be performed on the complete sequence (ADC init
1415:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   *         parameter "EOCSelection" set to ADC_EOC_SEQ_CONV).
1416:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   * @param hadc ADC handle
1417:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   * @param Timeout Timeout value in millisecond.
1418:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   * @retval HAL status
1419:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   */
1420:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
ARM GAS  /tmp/ccZ0TYFG.s 			page 227


1421:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** {
 3659              		.loc 2 1421 1
 3660              		.cfi_startproc
 3661              		@ args = 0, pretend = 0, frame = 32
 3662              		@ frame_needed = 1, uses_anonymous_args = 0
 3663 0000 80B5     		push	{r7, lr}
 3664              	.LCFI272:
 3665              		.cfi_def_cfa_offset 8
 3666              		.cfi_offset 7, -8
 3667              		.cfi_offset 14, -4
 3668 0002 88B0     		sub	sp, sp, #32
 3669              	.LCFI273:
 3670              		.cfi_def_cfa_offset 40
 3671 0004 00AF     		add	r7, sp, #0
 3672              	.LCFI274:
 3673              		.cfi_def_cfa_register 7
 3674 0006 7860     		str	r0, [r7, #4]
 3675 0008 3960     		str	r1, [r7]
1422:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   uint32_t tickstart;
1423:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   uint32_t tmp_Flag_End;
1424:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   uint32_t tmp_cfgr;
1425:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** #if defined(ADC_MULTIMODE_SUPPORT)
1426:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   const ADC_TypeDef *tmpADC_Master;
1427:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 3676              		.loc 2 1427 55
 3677 000a 7B68     		ldr	r3, [r7, #4]
 3678 000c 1B68     		ldr	r3, [r3]
 3679              		.loc 2 1427 35
 3680 000e B3F1A04F 		cmp	r3, #1342177280
 3681 0012 04D0     		beq	.L157
 3682              		.loc 2 1427 55 discriminator 2
 3683 0014 7B68     		ldr	r3, [r7, #4]
 3684 0016 1B68     		ldr	r3, [r3]
 3685 0018 734A     		ldr	r2, .L187
 3686 001a 9342     		cmp	r3, r2
 3687 001c 01D1     		bne	.L158
 3688              	.L157:
 3689              		.loc 2 1427 35 discriminator 3
 3690 001e 734B     		ldr	r3, .L187+4
 3691 0020 00E0     		b	.L159
 3692              	.L158:
 3693              		.loc 2 1427 35 is_stmt 0 discriminator 4
 3694 0022 734B     		ldr	r3, .L187+8
 3695              	.L159:
 3696              		.loc 2 1427 35 discriminator 6
 3697 0024 1846     		mov	r0, r3
 3698 0026 FFF7FEFF 		bl	LL_ADC_GetMultimode
 3699 002a 7861     		str	r0, [r7, #20]
1428:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** #endif
1429:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
1430:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   /* Check the parameters */
1431:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
1432:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
1433:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   /* If end of conversion selected to end of sequence conversions */
1434:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 3700              		.loc 2 1434 17 is_stmt 1 discriminator 6
 3701 002c 7B68     		ldr	r3, [r7, #4]
ARM GAS  /tmp/ccZ0TYFG.s 			page 228


 3702 002e 9B69     		ldr	r3, [r3, #24]
 3703              		.loc 2 1434 6 discriminator 6
 3704 0030 082B     		cmp	r3, #8
 3705 0032 02D1     		bne	.L160
1435:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   {
1436:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     tmp_Flag_End = ADC_FLAG_EOS;
 3706              		.loc 2 1436 18
 3707 0034 0823     		movs	r3, #8
 3708 0036 FB61     		str	r3, [r7, #28]
 3709 0038 37E0     		b	.L161
 3710              	.L160:
1437:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   }
1438:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   /* If end of conversion selected to end of unitary conversion */
1439:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   else /* ADC_EOC_SINGLE_CONV */
1440:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   {
1441:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     /* Verification that ADC configuration is compliant with polling for      */
1442:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     /* each conversion:                                                       */
1443:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
1444:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     /* several ranks and polling for end of each conversion.                  */
1445:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     /* For code simplicity sake, this particular case is generalized to       */
1446:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     /* ADC configured in DMA mode and and polling for end of each conversion. */
1447:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** #if defined(ADC_MULTIMODE_SUPPORT)
1448:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 3711              		.loc 2 1448 8
 3712 003a 7B69     		ldr	r3, [r7, #20]
 3713 003c 002B     		cmp	r3, #0
 3714 003e 05D0     		beq	.L162
1449:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 3715              		.loc 2 1449 9
 3716 0040 7B69     		ldr	r3, [r7, #20]
 3717 0042 052B     		cmp	r3, #5
 3718 0044 02D0     		beq	.L162
1450:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 3719              		.loc 2 1450 9
 3720 0046 7B69     		ldr	r3, [r7, #20]
 3721 0048 092B     		cmp	r3, #9
 3722 004a 11D1     		bne	.L163
 3723              	.L162:
1451:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****        )
1452:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     {
1453:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       /* Check ADC DMA mode in independent mode on ADC group regular */
1454:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 3724              		.loc 2 1454 11
 3725 004c 7B68     		ldr	r3, [r7, #4]
 3726 004e 1B68     		ldr	r3, [r3]
 3727 0050 DB68     		ldr	r3, [r3, #12]
 3728 0052 03F00103 		and	r3, r3, #1
 3729              		.loc 2 1454 10
 3730 0056 002B     		cmp	r3, #0
 3731 0058 07D0     		beq	.L164
1455:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       {
1456:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 3732              		.loc 2 1456 9
 3733 005a 7B68     		ldr	r3, [r7, #4]
 3734 005c DB6D     		ldr	r3, [r3, #92]
 3735 005e 43F02002 		orr	r2, r3, #32
 3736 0062 7B68     		ldr	r3, [r7, #4]
ARM GAS  /tmp/ccZ0TYFG.s 			page 229


 3737 0064 DA65     		str	r2, [r3, #92]
1457:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         return HAL_ERROR;
 3738              		.loc 2 1457 16
 3739 0066 0123     		movs	r3, #1
 3740 0068 BAE0     		b	.L165
 3741              	.L164:
1458:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       }
1459:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       else
1460:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       {
1461:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         tmp_Flag_End = (ADC_FLAG_EOC);
 3742              		.loc 2 1461 22
 3743 006a 0423     		movs	r3, #4
 3744 006c FB61     		str	r3, [r7, #28]
1454:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       {
 3745              		.loc 2 1454 10
 3746 006e 1CE0     		b	.L161
 3747              	.L163:
1462:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       }
1463:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     }
1464:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     else
1465:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     {
1466:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       /* Check ADC DMA mode in multimode on ADC group regular */
1467:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_
 3748              		.loc 2 1467 38
 3749 0070 7B68     		ldr	r3, [r7, #4]
 3750 0072 1B68     		ldr	r3, [r3]
 3751              		.loc 2 1467 11
 3752 0074 B3F1A04F 		cmp	r3, #1342177280
 3753 0078 04D0     		beq	.L166
 3754              		.loc 2 1467 38 discriminator 2
 3755 007a 7B68     		ldr	r3, [r7, #4]
 3756 007c 1B68     		ldr	r3, [r3]
 3757 007e 5A4A     		ldr	r2, .L187
 3758 0080 9342     		cmp	r3, r2
 3759 0082 01D1     		bne	.L167
 3760              	.L166:
 3761              		.loc 2 1467 11 discriminator 3
 3762 0084 594B     		ldr	r3, .L187+4
 3763 0086 00E0     		b	.L168
 3764              	.L167:
 3765              		.loc 2 1467 11 is_stmt 0 discriminator 4
 3766 0088 594B     		ldr	r3, .L187+8
 3767              	.L168:
 3768              		.loc 2 1467 11 discriminator 6
 3769 008a 1846     		mov	r0, r3
 3770 008c FFF7FEFF 		bl	LL_ADC_GetMultiDMATransfer
 3771 0090 0346     		mov	r3, r0
 3772              		.loc 2 1467 10 is_stmt 1 discriminator 6
 3773 0092 002B     		cmp	r3, #0
 3774 0094 07D0     		beq	.L169
1468:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       {
1469:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 3775              		.loc 2 1469 9
 3776 0096 7B68     		ldr	r3, [r7, #4]
 3777 0098 DB6D     		ldr	r3, [r3, #92]
 3778 009a 43F02002 		orr	r2, r3, #32
 3779 009e 7B68     		ldr	r3, [r7, #4]
ARM GAS  /tmp/ccZ0TYFG.s 			page 230


 3780 00a0 DA65     		str	r2, [r3, #92]
1470:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         return HAL_ERROR;
 3781              		.loc 2 1470 16
 3782 00a2 0123     		movs	r3, #1
 3783 00a4 9CE0     		b	.L165
 3784              	.L169:
1471:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       }
1472:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       else
1473:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       {
1474:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         tmp_Flag_End = (ADC_FLAG_EOC);
 3785              		.loc 2 1474 22
 3786 00a6 0423     		movs	r3, #4
 3787 00a8 FB61     		str	r3, [r7, #28]
 3788              	.L161:
1475:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       }
1476:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     }
1477:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** #else
1478:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     /* Check ADC DMA mode */
1479:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
1480:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     {
1481:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
1482:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       return HAL_ERROR;
1483:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     }
1484:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     else
1485:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     {
1486:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       tmp_Flag_End = (ADC_FLAG_EOC);
1487:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     }
1488:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** #endif
1489:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   }
1490:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
1491:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   /* Get tick count */
1492:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   tickstart = HAL_GetTick();
 3789              		.loc 2 1492 15
 3790 00aa FFF7FEFF 		bl	HAL_GetTick
 3791 00ae 3861     		str	r0, [r7, #16]
1493:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
1494:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   /* Wait until End of unitary conversion or sequence conversions flag is raised */
1495:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 3792              		.loc 2 1495 9
 3793 00b0 1AE0     		b	.L170
 3794              	.L172:
1496:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   {
1497:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     /* Check if timeout is disabled (set to infinite wait) */
1498:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     if (Timeout != HAL_MAX_DELAY)
 3795              		.loc 2 1498 8
 3796 00b2 3B68     		ldr	r3, [r7]
 3797 00b4 B3F1FF3F 		cmp	r3, #-1
 3798 00b8 16D0     		beq	.L170
1499:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     {
1500:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 3799              		.loc 2 1500 13
 3800 00ba FFF7FEFF 		bl	HAL_GetTick
 3801 00be 0246     		mov	r2, r0
 3802              		.loc 2 1500 27
 3803 00c0 3B69     		ldr	r3, [r7, #16]
 3804 00c2 D31A     		subs	r3, r2, r3
 3805              		.loc 2 1500 10
ARM GAS  /tmp/ccZ0TYFG.s 			page 231


 3806 00c4 3A68     		ldr	r2, [r7]
 3807 00c6 9A42     		cmp	r2, r3
 3808 00c8 02D3     		bcc	.L171
 3809              		.loc 2 1500 51 discriminator 1
 3810 00ca 3B68     		ldr	r3, [r7]
 3811 00cc 002B     		cmp	r3, #0
 3812 00ce 0BD1     		bne	.L170
 3813              	.L171:
1501:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       {
1502:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         /* Update ADC state machine to timeout */
1503:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 3814              		.loc 2 1503 9
 3815 00d0 7B68     		ldr	r3, [r7, #4]
 3816 00d2 DB6D     		ldr	r3, [r3, #92]
 3817 00d4 43F00402 		orr	r2, r3, #4
 3818 00d8 7B68     		ldr	r3, [r7, #4]
 3819 00da DA65     		str	r2, [r3, #92]
1504:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
1505:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         /* Process unlocked */
1506:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         __HAL_UNLOCK(hadc);
 3820              		.loc 2 1506 9
 3821 00dc 7B68     		ldr	r3, [r7, #4]
 3822 00de 0022     		movs	r2, #0
 3823 00e0 83F85820 		strb	r2, [r3, #88]
1507:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
1508:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         return HAL_TIMEOUT;
 3824              		.loc 2 1508 16
 3825 00e4 0323     		movs	r3, #3
 3826 00e6 7BE0     		b	.L165
 3827              	.L170:
1495:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   {
 3828              		.loc 2 1495 15
 3829 00e8 7B68     		ldr	r3, [r7, #4]
 3830 00ea 1B68     		ldr	r3, [r3]
1495:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   {
 3831              		.loc 2 1495 25
 3832 00ec 1A68     		ldr	r2, [r3]
1495:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   {
 3833              		.loc 2 1495 31
 3834 00ee FB69     		ldr	r3, [r7, #28]
 3835 00f0 1340     		ands	r3, r3, r2
1495:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   {
 3836              		.loc 2 1495 9
 3837 00f2 002B     		cmp	r3, #0
 3838 00f4 DDD0     		beq	.L172
1509:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       }
1510:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     }
1511:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   }
1512:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
1513:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   /* Update ADC state machine */
1514:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 3839              		.loc 2 1514 3
 3840 00f6 7B68     		ldr	r3, [r7, #4]
 3841 00f8 DB6D     		ldr	r3, [r3, #92]
 3842 00fa 43F40072 		orr	r2, r3, #512
 3843 00fe 7B68     		ldr	r3, [r7, #4]
 3844 0100 DA65     		str	r2, [r3, #92]
ARM GAS  /tmp/ccZ0TYFG.s 			page 232


1515:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
1516:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   /* Determine whether any further conversion upcoming on group regular       */
1517:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   /* by external trigger, continuous mode or scan sequence on going.          */
1518:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 3845              		.loc 2 1518 8
 3846 0102 7B68     		ldr	r3, [r7, #4]
 3847 0104 1B68     		ldr	r3, [r3]
 3848 0106 1846     		mov	r0, r3
 3849 0108 FFF7FEFF 		bl	LL_ADC_REG_IsTriggerSourceSWStart
 3850 010c 0346     		mov	r3, r0
 3851              		.loc 2 1518 6
 3852 010e 002B     		cmp	r3, #0
 3853 0110 1CD0     		beq	.L173
1519:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       && (hadc->Init.ContinuousConvMode == DISABLE)
 3854              		.loc 2 1519 21
 3855 0112 7B68     		ldr	r3, [r7, #4]
 3856 0114 5B7F     		ldrb	r3, [r3, #29]	@ zero_extendqisi2
 3857              		.loc 2 1519 7
 3858 0116 002B     		cmp	r3, #0
 3859 0118 18D1     		bne	.L173
1520:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****      )
1521:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   {
1522:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     /* Check whether end of sequence is reached */
1523:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 3860              		.loc 2 1523 9
 3861 011a 7B68     		ldr	r3, [r7, #4]
 3862 011c 1B68     		ldr	r3, [r3]
 3863 011e 1B68     		ldr	r3, [r3]
 3864 0120 03F00803 		and	r3, r3, #8
 3865              		.loc 2 1523 8
 3866 0124 082B     		cmp	r3, #8
 3867 0126 11D1     		bne	.L173
1524:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     {
1525:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       /* Set ADC state */
1526:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 3868              		.loc 2 1526 7
 3869 0128 7B68     		ldr	r3, [r7, #4]
 3870 012a DB6D     		ldr	r3, [r3, #92]
 3871 012c 23F48072 		bic	r2, r3, #256
 3872 0130 7B68     		ldr	r3, [r7, #4]
 3873 0132 DA65     		str	r2, [r3, #92]
1527:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
1528:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 3874              		.loc 2 1528 16
 3875 0134 7B68     		ldr	r3, [r7, #4]
 3876 0136 DB6D     		ldr	r3, [r3, #92]
 3877              		.loc 2 1528 24
 3878 0138 03F48053 		and	r3, r3, #4096
 3879              		.loc 2 1528 10
 3880 013c 002B     		cmp	r3, #0
 3881 013e 05D1     		bne	.L173
1529:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       {
1530:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 3882              		.loc 2 1530 9
 3883 0140 7B68     		ldr	r3, [r7, #4]
 3884 0142 DB6D     		ldr	r3, [r3, #92]
 3885 0144 43F00102 		orr	r2, r3, #1
ARM GAS  /tmp/ccZ0TYFG.s 			page 233


 3886 0148 7B68     		ldr	r3, [r7, #4]
 3887 014a DA65     		str	r2, [r3, #92]
 3888              	.L173:
1531:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       }
1532:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     }
1533:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   }
1534:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
1535:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   /* Get relevant register CFGR in ADC instance of ADC master or slave        */
1536:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   /* in function of multimode state (for devices with multimode               */
1537:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   /* available).                                                              */
1538:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** #if defined(ADC_MULTIMODE_SUPPORT)
1539:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 3889              		.loc 2 1539 8
 3890 014c 7B68     		ldr	r3, [r7, #4]
 3891 014e 1B68     		ldr	r3, [r3]
 3892 0150 254A     		ldr	r2, .L187
 3893 0152 9342     		cmp	r3, r2
 3894 0154 09D0     		beq	.L174
 3895              		.loc 2 1539 8 is_stmt 0 discriminator 1
 3896 0156 7B68     		ldr	r3, [r7, #4]
 3897 0158 1B68     		ldr	r3, [r3]
 3898 015a 264A     		ldr	r2, .L187+12
 3899 015c 9342     		cmp	r3, r2
 3900 015e 02D0     		beq	.L175
 3901              		.loc 2 1539 8 discriminator 3
 3902 0160 7B68     		ldr	r3, [r7, #4]
 3903 0162 1B68     		ldr	r3, [r3]
 3904 0164 03E0     		b	.L177
 3905              	.L175:
 3906              		.loc 2 1539 8 discriminator 4
 3907 0166 244B     		ldr	r3, .L187+16
 3908 0168 01E0     		b	.L177
 3909              	.L174:
 3910              		.loc 2 1539 8 discriminator 2
 3911 016a 4FF0A043 		mov	r3, #1342177280
 3912              	.L177:
 3913              		.loc 2 1539 62 is_stmt 1 discriminator 8
 3914 016e 7A68     		ldr	r2, [r7, #4]
 3915 0170 1268     		ldr	r2, [r2]
 3916              		.loc 2 1539 6 discriminator 8
 3917 0172 9342     		cmp	r3, r2
 3918 0174 08D0     		beq	.L178
1540:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 3919              		.loc 2 1540 7
 3920 0176 7B69     		ldr	r3, [r7, #20]
 3921 0178 002B     		cmp	r3, #0
 3922 017a 05D0     		beq	.L178
1541:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 3923              		.loc 2 1541 7
 3924 017c 7B69     		ldr	r3, [r7, #20]
 3925 017e 052B     		cmp	r3, #5
 3926 0180 02D0     		beq	.L178
1542:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 3927              		.loc 2 1542 7
 3928 0182 7B69     		ldr	r3, [r7, #20]
 3929 0184 092B     		cmp	r3, #9
 3930 0186 04D1     		bne	.L179
ARM GAS  /tmp/ccZ0TYFG.s 			page 234


 3931              	.L178:
1543:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****      )
1544:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   {
1545:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     /* Retrieve handle ADC CFGR register */
1546:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 3932              		.loc 2 1546 16
 3933 0188 7B68     		ldr	r3, [r7, #4]
 3934 018a 1B68     		ldr	r3, [r3]
 3935              		.loc 2 1546 14
 3936 018c DB68     		ldr	r3, [r3, #12]
 3937 018e BB61     		str	r3, [r7, #24]
 3938 0190 14E0     		b	.L180
 3939              	.L179:
1547:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   }
1548:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   else
1549:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   {
1550:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     /* Retrieve Master ADC CFGR register */
1551:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 3940              		.loc 2 1551 21
 3941 0192 7B68     		ldr	r3, [r7, #4]
 3942 0194 1B68     		ldr	r3, [r3]
 3943 0196 144A     		ldr	r2, .L187
 3944 0198 9342     		cmp	r3, r2
 3945 019a 09D0     		beq	.L181
 3946              		.loc 2 1551 21 is_stmt 0 discriminator 1
 3947 019c 7B68     		ldr	r3, [r7, #4]
 3948 019e 1B68     		ldr	r3, [r3]
 3949 01a0 144A     		ldr	r2, .L187+12
 3950 01a2 9342     		cmp	r3, r2
 3951 01a4 02D0     		beq	.L182
 3952              		.loc 2 1551 21 discriminator 3
 3953 01a6 7B68     		ldr	r3, [r7, #4]
 3954 01a8 1B68     		ldr	r3, [r3]
 3955 01aa 03E0     		b	.L184
 3956              	.L182:
 3957              		.loc 2 1551 21 discriminator 4
 3958 01ac 124B     		ldr	r3, .L187+16
 3959 01ae 01E0     		b	.L184
 3960              	.L181:
 3961              		.loc 2 1551 21 discriminator 2
 3962 01b0 4FF0A043 		mov	r3, #1342177280
 3963              	.L184:
 3964              		.loc 2 1551 19 is_stmt 1 discriminator 8
 3965 01b4 FB60     		str	r3, [r7, #12]
1552:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 3966              		.loc 2 1552 14 discriminator 8
 3967 01b6 FB68     		ldr	r3, [r7, #12]
 3968 01b8 DB68     		ldr	r3, [r3, #12]
 3969 01ba BB61     		str	r3, [r7, #24]
 3970              	.L180:
1553:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   }
1554:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** #else
1555:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   /* Retrieve handle ADC CFGR register */
1556:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   tmp_cfgr = READ_REG(hadc->Instance->CFGR);
1557:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** #endif
1558:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
1559:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   /* Clear polled flag */
ARM GAS  /tmp/ccZ0TYFG.s 			page 235


1560:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   if (tmp_Flag_End == ADC_FLAG_EOS)
 3971              		.loc 2 1560 6
 3972 01bc FB69     		ldr	r3, [r7, #28]
 3973 01be 082B     		cmp	r3, #8
 3974 01c0 04D1     		bne	.L185
1561:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   {
1562:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 3975              		.loc 2 1562 5
 3976 01c2 7B68     		ldr	r3, [r7, #4]
 3977 01c4 1B68     		ldr	r3, [r3]
 3978 01c6 0822     		movs	r2, #8
 3979 01c8 1A60     		str	r2, [r3]
 3980 01ca 08E0     		b	.L186
 3981              	.L185:
1563:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   }
1564:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   else
1565:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   {
1566:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     /* Clear end of conversion EOC flag of regular group if low power feature */
1567:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
1568:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     /* until data register is read using function HAL_ADC_GetValue().         */
1569:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 3982              		.loc 2 1569 9
 3983 01cc BB69     		ldr	r3, [r7, #24]
 3984 01ce 03F48043 		and	r3, r3, #16384
 3985              		.loc 2 1569 8
 3986 01d2 002B     		cmp	r3, #0
 3987 01d4 03D1     		bne	.L186
1570:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     {
1571:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 3988              		.loc 2 1571 7
 3989 01d6 7B68     		ldr	r3, [r7, #4]
 3990 01d8 1B68     		ldr	r3, [r3]
 3991 01da 0C22     		movs	r2, #12
 3992 01dc 1A60     		str	r2, [r3]
 3993              	.L186:
1572:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     }
1573:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   }
1574:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
1575:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   /* Return function status */
1576:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   return HAL_OK;
 3994              		.loc 2 1576 10
 3995 01de 0023     		movs	r3, #0
 3996              	.L165:
1577:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** }
 3997              		.loc 2 1577 1
 3998 01e0 1846     		mov	r0, r3
 3999 01e2 2037     		adds	r7, r7, #32
 4000              	.LCFI275:
 4001              		.cfi_def_cfa_offset 8
 4002 01e4 BD46     		mov	sp, r7
 4003              	.LCFI276:
 4004              		.cfi_def_cfa_register 13
 4005              		@ sp needed
 4006 01e6 80BD     		pop	{r7, pc}
 4007              	.L188:
 4008              		.align	2
 4009              	.L187:
ARM GAS  /tmp/ccZ0TYFG.s 			page 236


 4010 01e8 00010050 		.word	1342177536
 4011 01ec 00030050 		.word	1342178048
 4012 01f0 00070050 		.word	1342179072
 4013 01f4 00050050 		.word	1342178560
 4014 01f8 00040050 		.word	1342178304
 4015              		.cfi_endproc
 4016              	.LFE331:
 4018              		.section	.text.HAL_ADC_PollForEvent,"ax",%progbits
 4019              		.align	1
 4020              		.global	HAL_ADC_PollForEvent
 4021              		.syntax unified
 4022              		.thumb
 4023              		.thumb_func
 4024              		.fpu fpv4-sp-d16
 4026              	HAL_ADC_PollForEvent:
 4027              	.LFB332:
1578:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
1579:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** /**
1580:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   * @brief  Poll for ADC event.
1581:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   * @param hadc ADC handle
1582:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   * @param EventType the ADC event type.
1583:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   *          This parameter can be one of the following values:
1584:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   *            @arg @ref ADC_EOSMP_EVENT  ADC End of Sampling event
1585:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   *            @arg @ref ADC_AWD1_EVENT   ADC Analog watchdog 1 event (main analog watchdog, presen
1586:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   *            @arg @ref ADC_AWD2_EVENT   ADC Analog watchdog 2 event (additional analog watchdog, 
1587:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   *            @arg @ref ADC_AWD3_EVENT   ADC Analog watchdog 3 event (additional analog watchdog, 
1588:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   *            @arg @ref ADC_OVR_EVENT    ADC Overrun event
1589:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   *            @arg @ref ADC_JQOVF_EVENT  ADC Injected context queue overflow event
1590:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   * @param Timeout Timeout value in millisecond.
1591:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   * @note   The relevant flag is cleared if found to be set, except for ADC_FLAG_OVR.
1592:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   *         Indeed, the latter is reset only if hadc->Init.Overrun field is set
1593:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   *         to ADC_OVR_DATA_OVERWRITTEN. Otherwise, data register may be potentially overwritten
1594:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   *         by a new converted data as soon as OVR is cleared.
1595:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   *         To reset OVR flag once the preserved data is retrieved, the user can resort
1596:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   *         to macro __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
1597:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   * @retval HAL status
1598:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   */
1599:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_PollForEvent(ADC_HandleTypeDef *hadc, uint32_t EventType, uint32_t Timeou
1600:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** {
 4028              		.loc 2 1600 1
 4029              		.cfi_startproc
 4030              		@ args = 0, pretend = 0, frame = 24
 4031              		@ frame_needed = 1, uses_anonymous_args = 0
 4032 0000 80B5     		push	{r7, lr}
 4033              	.LCFI277:
 4034              		.cfi_def_cfa_offset 8
 4035              		.cfi_offset 7, -8
 4036              		.cfi_offset 14, -4
 4037 0002 86B0     		sub	sp, sp, #24
 4038              	.LCFI278:
 4039              		.cfi_def_cfa_offset 32
 4040 0004 00AF     		add	r7, sp, #0
 4041              	.LCFI279:
 4042              		.cfi_def_cfa_register 7
 4043 0006 F860     		str	r0, [r7, #12]
 4044 0008 B960     		str	r1, [r7, #8]
 4045 000a 7A60     		str	r2, [r7, #4]
ARM GAS  /tmp/ccZ0TYFG.s 			page 237


1601:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   uint32_t tickstart;
1602:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
1603:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   /* Check the parameters */
1604:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
1605:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   assert_param(IS_ADC_EVENT_TYPE(EventType));
1606:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
1607:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   /* Get tick count */
1608:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   tickstart = HAL_GetTick();
 4046              		.loc 2 1608 15
 4047 000c FFF7FEFF 		bl	HAL_GetTick
 4048 0010 7861     		str	r0, [r7, #20]
1609:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
1610:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   /* Check selected event flag */
1611:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   while (__HAL_ADC_GET_FLAG(hadc, EventType) == 0UL)
 4049              		.loc 2 1611 9
 4050 0012 1AE0     		b	.L190
 4051              	.L193:
1612:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   {
1613:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     /* Check if timeout is disabled (set to infinite wait) */
1614:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     if (Timeout != HAL_MAX_DELAY)
 4052              		.loc 2 1614 8
 4053 0014 7B68     		ldr	r3, [r7, #4]
 4054 0016 B3F1FF3F 		cmp	r3, #-1
 4055 001a 16D0     		beq	.L190
1615:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     {
1616:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 4056              		.loc 2 1616 13
 4057 001c FFF7FEFF 		bl	HAL_GetTick
 4058 0020 0246     		mov	r2, r0
 4059              		.loc 2 1616 27
 4060 0022 7B69     		ldr	r3, [r7, #20]
 4061 0024 D31A     		subs	r3, r2, r3
 4062              		.loc 2 1616 10
 4063 0026 7A68     		ldr	r2, [r7, #4]
 4064 0028 9A42     		cmp	r2, r3
 4065 002a 02D3     		bcc	.L191
 4066              		.loc 2 1616 51 discriminator 1
 4067 002c 7B68     		ldr	r3, [r7, #4]
 4068 002e 002B     		cmp	r3, #0
 4069 0030 0BD1     		bne	.L190
 4070              	.L191:
1617:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       {
1618:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         /* Update ADC state machine to timeout */
1619:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 4071              		.loc 2 1619 9
 4072 0032 FB68     		ldr	r3, [r7, #12]
 4073 0034 DB6D     		ldr	r3, [r3, #92]
 4074 0036 43F00402 		orr	r2, r3, #4
 4075 003a FB68     		ldr	r3, [r7, #12]
 4076 003c DA65     		str	r2, [r3, #92]
1620:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
1621:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         /* Process unlocked */
1622:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         __HAL_UNLOCK(hadc);
 4077              		.loc 2 1622 9
 4078 003e FB68     		ldr	r3, [r7, #12]
 4079 0040 0022     		movs	r2, #0
 4080 0042 83F85820 		strb	r2, [r3, #88]
ARM GAS  /tmp/ccZ0TYFG.s 			page 238


1623:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
1624:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         return HAL_TIMEOUT;
 4081              		.loc 2 1624 16
 4082 0046 0323     		movs	r3, #3
 4083 0048 76E0     		b	.L192
 4084              	.L190:
1611:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   {
 4085              		.loc 2 1611 10
 4086 004a FB68     		ldr	r3, [r7, #12]
 4087 004c 1B68     		ldr	r3, [r3]
 4088 004e 1A68     		ldr	r2, [r3]
 4089 0050 BB68     		ldr	r3, [r7, #8]
 4090 0052 1340     		ands	r3, r3, r2
1611:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   {
 4091              		.loc 2 1611 9
 4092 0054 BA68     		ldr	r2, [r7, #8]
 4093 0056 9A42     		cmp	r2, r3
 4094 0058 DCD1     		bne	.L193
1625:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       }
1626:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     }
1627:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   }
1628:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
1629:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   switch (EventType)
 4095              		.loc 2 1629 3
 4096 005a BB68     		ldr	r3, [r7, #8]
 4097 005c B3F5807F 		cmp	r3, #256
 4098 0060 29D0     		beq	.L194
 4099 0062 BB68     		ldr	r3, [r7, #8]
 4100 0064 B3F5807F 		cmp	r3, #256
 4101 0068 06D8     		bhi	.L195
 4102 006a BB68     		ldr	r3, [r7, #8]
 4103 006c 022B     		cmp	r3, #2
 4104 006e 0CD0     		beq	.L196
 4105 0070 BB68     		ldr	r3, [r7, #8]
 4106 0072 802B     		cmp	r3, #128
 4107 0074 14D0     		beq	.L197
 4108 0076 48E0     		b	.L198
 4109              	.L195:
 4110 0078 BB68     		ldr	r3, [r7, #8]
 4111 007a B3F5007F 		cmp	r3, #512
 4112 007e 26D0     		beq	.L199
 4113 0080 BB68     		ldr	r3, [r7, #8]
 4114 0082 B3F5806F 		cmp	r3, #1024
 4115 0086 2ED0     		beq	.L200
 4116 0088 3FE0     		b	.L198
 4117              	.L196:
1630:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   {
1631:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     /* End Of Sampling event */
1632:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     case ADC_EOSMP_EVENT:
1633:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       /* Set ADC state */
1634:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 4118              		.loc 2 1634 7
 4119 008a FB68     		ldr	r3, [r7, #12]
 4120 008c DB6D     		ldr	r3, [r3, #92]
 4121 008e 43F40062 		orr	r2, r3, #2048
 4122 0092 FB68     		ldr	r3, [r7, #12]
 4123 0094 DA65     		str	r2, [r3, #92]
ARM GAS  /tmp/ccZ0TYFG.s 			page 239


1635:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
1636:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       /* Clear the End Of Sampling flag */
1637:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 4124              		.loc 2 1637 7
 4125 0096 FB68     		ldr	r3, [r7, #12]
 4126 0098 1B68     		ldr	r3, [r3]
 4127 009a 0222     		movs	r2, #2
 4128 009c 1A60     		str	r2, [r3]
1638:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
1639:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       break;
 4129              		.loc 2 1639 7
 4130 009e 4AE0     		b	.L201
 4131              	.L197:
1640:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
1641:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     /* Analog watchdog (level out of window) event */
1642:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     /* Note: In case of several analog watchdog enabled, if needed to know      */
1643:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     /* which one triggered and on which ADCx, test ADC state of analog watchdog */
1644:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     /* flags HAL_ADC_STATE_AWD1/2/3 using function "HAL_ADC_GetState()".        */
1645:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     /* For example:                                                             */
1646:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     /*  " if ((HAL_ADC_GetState(hadc1) & HAL_ADC_STATE_AWD1) != 0UL) "          */
1647:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     /*  " if ((HAL_ADC_GetState(hadc1) & HAL_ADC_STATE_AWD2) != 0UL) "          */
1648:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     /*  " if ((HAL_ADC_GetState(hadc1) & HAL_ADC_STATE_AWD3) != 0UL) "          */
1649:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
1650:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     /* Check analog watchdog 1 flag */
1651:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     case ADC_AWD_EVENT:
1652:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       /* Set ADC state */
1653:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 4132              		.loc 2 1653 7
 4133 00a0 FB68     		ldr	r3, [r7, #12]
 4134 00a2 DB6D     		ldr	r3, [r3, #92]
 4135 00a4 43F48032 		orr	r2, r3, #65536
 4136 00a8 FB68     		ldr	r3, [r7, #12]
 4137 00aa DA65     		str	r2, [r3, #92]
1654:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
1655:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       /* Clear ADC analog watchdog flag */
1656:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 4138              		.loc 2 1656 7
 4139 00ac FB68     		ldr	r3, [r7, #12]
 4140 00ae 1B68     		ldr	r3, [r3]
 4141 00b0 8022     		movs	r2, #128
 4142 00b2 1A60     		str	r2, [r3]
1657:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
1658:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       break;
 4143              		.loc 2 1658 7
 4144 00b4 3FE0     		b	.L201
 4145              	.L194:
1659:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
1660:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     /* Check analog watchdog 2 flag */
1661:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     case ADC_AWD2_EVENT:
1662:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       /* Set ADC state */
1663:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 4146              		.loc 2 1663 7
 4147 00b6 FB68     		ldr	r3, [r7, #12]
 4148 00b8 DB6D     		ldr	r3, [r3, #92]
 4149 00ba 43F40032 		orr	r2, r3, #131072
 4150 00be FB68     		ldr	r3, [r7, #12]
 4151 00c0 DA65     		str	r2, [r3, #92]
ARM GAS  /tmp/ccZ0TYFG.s 			page 240


1664:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
1665:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       /* Clear ADC analog watchdog flag */
1666:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 4152              		.loc 2 1666 7
 4153 00c2 FB68     		ldr	r3, [r7, #12]
 4154 00c4 1B68     		ldr	r3, [r3]
 4155 00c6 4FF48072 		mov	r2, #256
 4156 00ca 1A60     		str	r2, [r3]
1667:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
1668:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       break;
 4157              		.loc 2 1668 7
 4158 00cc 33E0     		b	.L201
 4159              	.L199:
1669:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
1670:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     /* Check analog watchdog 3 flag */
1671:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     case ADC_AWD3_EVENT:
1672:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       /* Set ADC state */
1673:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 4160              		.loc 2 1673 7
 4161 00ce FB68     		ldr	r3, [r7, #12]
 4162 00d0 DB6D     		ldr	r3, [r3, #92]
 4163 00d2 43F48022 		orr	r2, r3, #262144
 4164 00d6 FB68     		ldr	r3, [r7, #12]
 4165 00d8 DA65     		str	r2, [r3, #92]
1674:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
1675:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       /* Clear ADC analog watchdog flag */
1676:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 4166              		.loc 2 1676 7
 4167 00da FB68     		ldr	r3, [r7, #12]
 4168 00dc 1B68     		ldr	r3, [r3]
 4169 00de 4FF40072 		mov	r2, #512
 4170 00e2 1A60     		str	r2, [r3]
1677:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
1678:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       break;
 4171              		.loc 2 1678 7
 4172 00e4 27E0     		b	.L201
 4173              	.L200:
1679:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
1680:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     /* Injected context queue overflow event */
1681:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     case ADC_JQOVF_EVENT:
1682:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       /* Set ADC state */
1683:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 4174              		.loc 2 1683 7
 4175 00e6 FB68     		ldr	r3, [r7, #12]
 4176 00e8 DB6D     		ldr	r3, [r3, #92]
 4177 00ea 43F48042 		orr	r2, r3, #16384
 4178 00ee FB68     		ldr	r3, [r7, #12]
 4179 00f0 DA65     		str	r2, [r3, #92]
1684:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
1685:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       /* Set ADC error code to Injected context queue overflow */
1686:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 4180              		.loc 2 1686 7
 4181 00f2 FB68     		ldr	r3, [r7, #12]
 4182 00f4 1B6E     		ldr	r3, [r3, #96]
 4183 00f6 43F00802 		orr	r2, r3, #8
 4184 00fa FB68     		ldr	r3, [r7, #12]
 4185 00fc 1A66     		str	r2, [r3, #96]
ARM GAS  /tmp/ccZ0TYFG.s 			page 241


1687:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
1688:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       /* Clear ADC Injected context queue overflow flag */
1689:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 4186              		.loc 2 1689 7
 4187 00fe FB68     		ldr	r3, [r7, #12]
 4188 0100 1B68     		ldr	r3, [r3]
 4189 0102 4FF48062 		mov	r2, #1024
 4190 0106 1A60     		str	r2, [r3]
1690:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
1691:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       break;
 4191              		.loc 2 1691 7
 4192 0108 15E0     		b	.L201
 4193              	.L198:
1692:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
1693:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     /* Overrun event */
1694:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     default: /* Case ADC_OVR_EVENT */
1695:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       /* If overrun is set to overwrite previous data, overrun event is not     */
1696:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       /* considered as an error.                                                */
1697:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       /* (cf ref manual "Managing conversions without using the DMA and without */
1698:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       /* overrun ")                                                             */
1699:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 4194              		.loc 2 1699 21
 4195 010a FB68     		ldr	r3, [r7, #12]
 4196 010c DB6B     		ldr	r3, [r3, #60]
 4197              		.loc 2 1699 10
 4198 010e 002B     		cmp	r3, #0
 4199 0110 0CD1     		bne	.L202
1700:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       {
1701:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         /* Set ADC state */
1702:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 4200              		.loc 2 1702 9
 4201 0112 FB68     		ldr	r3, [r7, #12]
 4202 0114 DB6D     		ldr	r3, [r3, #92]
 4203 0116 43F48062 		orr	r2, r3, #1024
 4204 011a FB68     		ldr	r3, [r7, #12]
 4205 011c DA65     		str	r2, [r3, #92]
1703:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
1704:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         /* Set ADC error code to overrun */
1705:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 4206              		.loc 2 1705 9
 4207 011e FB68     		ldr	r3, [r7, #12]
 4208 0120 1B6E     		ldr	r3, [r3, #96]
 4209 0122 43F00202 		orr	r2, r3, #2
 4210 0126 FB68     		ldr	r3, [r7, #12]
 4211 0128 1A66     		str	r2, [r3, #96]
1706:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       }
1707:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       else
1708:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       {
1709:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         /* Clear ADC Overrun flag only if Overrun is set to ADC_OVR_DATA_OVERWRITTEN
1710:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****            otherwise, data register is potentially overwritten by new converted data as soon
1711:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****            as OVR is cleared. */
1712:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
1713:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       }
1714:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       break;
 4212              		.loc 2 1714 7
 4213 012a 03E0     		b	.L204
 4214              	.L202:
ARM GAS  /tmp/ccZ0TYFG.s 			page 242


1712:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       }
 4215              		.loc 2 1712 9
 4216 012c FB68     		ldr	r3, [r7, #12]
 4217 012e 1B68     		ldr	r3, [r3]
 4218 0130 1022     		movs	r2, #16
 4219 0132 1A60     		str	r2, [r3]
 4220              	.L204:
 4221              		.loc 2 1714 7
 4222 0134 00BF     		nop
 4223              	.L201:
1715:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   }
1716:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
1717:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   /* Return function status */
1718:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   return HAL_OK;
 4224              		.loc 2 1718 10
 4225 0136 0023     		movs	r3, #0
 4226              	.L192:
1719:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** }
 4227              		.loc 2 1719 1
 4228 0138 1846     		mov	r0, r3
 4229 013a 1837     		adds	r7, r7, #24
 4230              	.LCFI280:
 4231              		.cfi_def_cfa_offset 8
 4232 013c BD46     		mov	sp, r7
 4233              	.LCFI281:
 4234              		.cfi_def_cfa_register 13
 4235              		@ sp needed
 4236 013e 80BD     		pop	{r7, pc}
 4237              		.cfi_endproc
 4238              	.LFE332:
 4240              		.section	.text.HAL_ADC_Start_IT,"ax",%progbits
 4241              		.align	1
 4242              		.global	HAL_ADC_Start_IT
 4243              		.syntax unified
 4244              		.thumb
 4245              		.thumb_func
 4246              		.fpu fpv4-sp-d16
 4248              	HAL_ADC_Start_IT:
 4249              	.LFB333:
1720:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
1721:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** /**
1722:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   * @brief  Enable ADC, start conversion of regular group with interruption.
1723:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   * @note   Interruptions enabled in this function according to initialization
1724:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   *         setting : EOC (end of conversion), EOS (end of sequence),
1725:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   *         OVR overrun.
1726:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   *         Each of these interruptions has its dedicated callback function.
1727:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   * @note   Case of multimode enabled (when multimode feature is available):
1728:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   *         HAL_ADC_Start_IT() must be called for ADC Slave first, then for
1729:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   *         ADC Master.
1730:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   *         For ADC Slave, ADC is enabled only (conversion is not started).
1731:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   *         For ADC Master, ADC is enabled and multimode conversion is started.
1732:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   * @note   To guarantee a proper reset of all interruptions once all the needed
1733:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   *         conversions are obtained, HAL_ADC_Stop_IT() must be called to ensure
1734:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   *         a correct stop of the IT-based conversions.
1735:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   * @note   By default, HAL_ADC_Start_IT() does not enable the End Of Sampling
1736:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   *         interruption. If required (e.g. in case of oversampling with trigger
1737:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   *         mode), the user must:
ARM GAS  /tmp/ccZ0TYFG.s 			page 243


1738:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   *          1. first clear the EOSMP flag if set with macro __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EO
1739:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   *          2. then enable the EOSMP interrupt with macro __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOSMP)
1740:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   *          before calling HAL_ADC_Start_IT().
1741:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   * @param hadc ADC handle
1742:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   * @retval HAL status
1743:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   */
1744:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
1745:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** {
 4250              		.loc 2 1745 1
 4251              		.cfi_startproc
 4252              		@ args = 0, pretend = 0, frame = 24
 4253              		@ frame_needed = 1, uses_anonymous_args = 0
 4254 0000 80B5     		push	{r7, lr}
 4255              	.LCFI282:
 4256              		.cfi_def_cfa_offset 8
 4257              		.cfi_offset 7, -8
 4258              		.cfi_offset 14, -4
 4259 0002 86B0     		sub	sp, sp, #24
 4260              	.LCFI283:
 4261              		.cfi_def_cfa_offset 32
 4262 0004 00AF     		add	r7, sp, #0
 4263              	.LCFI284:
 4264              		.cfi_def_cfa_register 7
 4265 0006 7860     		str	r0, [r7, #4]
1746:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status;
1747:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** #if defined(ADC_MULTIMODE_SUPPORT)
1748:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   const ADC_TypeDef *tmpADC_Master;
1749:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 4266              		.loc 2 1749 55
 4267 0008 7B68     		ldr	r3, [r7, #4]
 4268 000a 1B68     		ldr	r3, [r3]
 4269              		.loc 2 1749 35
 4270 000c B3F1A04F 		cmp	r3, #1342177280
 4271 0010 04D0     		beq	.L206
 4272              		.loc 2 1749 55 discriminator 2
 4273 0012 7B68     		ldr	r3, [r7, #4]
 4274 0014 1B68     		ldr	r3, [r3]
 4275 0016 934A     		ldr	r2, .L242
 4276 0018 9342     		cmp	r3, r2
 4277 001a 01D1     		bne	.L207
 4278              	.L206:
 4279              		.loc 2 1749 35 discriminator 3
 4280 001c 924B     		ldr	r3, .L242+4
 4281 001e 00E0     		b	.L208
 4282              	.L207:
 4283              		.loc 2 1749 35 is_stmt 0 discriminator 4
 4284 0020 924B     		ldr	r3, .L242+8
 4285              	.L208:
 4286              		.loc 2 1749 35 discriminator 6
 4287 0022 1846     		mov	r0, r3
 4288 0024 FFF7FEFF 		bl	LL_ADC_GetMultimode
 4289 0028 3861     		str	r0, [r7, #16]
1750:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** #endif
1751:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
1752:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   /* Check the parameters */
1753:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
1754:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
ARM GAS  /tmp/ccZ0TYFG.s 			page 244


1755:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   /* Perform ADC enable and conversion start if no conversion is on going */
1756:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 4290              		.loc 2 1756 7 is_stmt 1 discriminator 6
 4291 002a 7B68     		ldr	r3, [r7, #4]
 4292 002c 1B68     		ldr	r3, [r3]
 4293 002e 1846     		mov	r0, r3
 4294 0030 FFF7FEFF 		bl	LL_ADC_REG_IsConversionOngoing
 4295 0034 0346     		mov	r3, r0
 4296              		.loc 2 1756 6 discriminator 6
 4297 0036 002B     		cmp	r3, #0
 4298 0038 40F03581 		bne	.L209
1757:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   {
1758:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     /* Process locked */
1759:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     __HAL_LOCK(hadc);
 4299              		.loc 2 1759 5
 4300 003c 7B68     		ldr	r3, [r7, #4]
 4301 003e 93F85830 		ldrb	r3, [r3, #88]	@ zero_extendqisi2
 4302 0042 012B     		cmp	r3, #1
 4303 0044 01D1     		bne	.L210
 4304              		.loc 2 1759 5 is_stmt 0 discriminator 1
 4305 0046 0223     		movs	r3, #2
 4306 0048 32E1     		b	.L211
 4307              	.L210:
 4308              		.loc 2 1759 5 discriminator 2
 4309 004a 7B68     		ldr	r3, [r7, #4]
 4310 004c 0122     		movs	r2, #1
 4311 004e 83F85820 		strb	r2, [r3, #88]
1760:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
1761:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     /* Enable the ADC peripheral */
1762:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     tmp_hal_status = ADC_Enable(hadc);
 4312              		.loc 2 1762 22 is_stmt 1 discriminator 2
 4313 0052 7868     		ldr	r0, [r7, #4]
 4314 0054 FFF7FEFF 		bl	ADC_Enable
 4315 0058 0346     		mov	r3, r0
 4316 005a FB75     		strb	r3, [r7, #23]
1763:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
1764:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     /* Start conversion if ADC is effectively enabled */
1765:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     if (tmp_hal_status == HAL_OK)
 4317              		.loc 2 1765 8 discriminator 2
 4318 005c FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 4319 005e 002B     		cmp	r3, #0
 4320 0060 40F01C81 		bne	.L212
1766:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     {
1767:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       /* Set ADC state                                                        */
1768:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       /* - Clear state bitfield related to regular group conversion results   */
1769:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       /* - Set state bitfield related to regular operation                    */
1770:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       ADC_STATE_CLR_SET(hadc->State,
 4321              		.loc 2 1770 7
 4322 0064 7B68     		ldr	r3, [r7, #4]
 4323 0066 DB6D     		ldr	r3, [r3, #92]
 4324 0068 23F47063 		bic	r3, r3, #3840
 4325 006c 23F00103 		bic	r3, r3, #1
 4326 0070 43F48072 		orr	r2, r3, #256
 4327 0074 7B68     		ldr	r3, [r7, #4]
 4328 0076 DA65     		str	r2, [r3, #92]
1771:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****                         HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_A
1772:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****                         HAL_ADC_STATE_REG_BUSY);
ARM GAS  /tmp/ccZ0TYFG.s 			page 245


1773:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
1774:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** #if defined(ADC_MULTIMODE_SUPPORT)
1775:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
1776:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         - if ADC instance is master or if multimode feature is not available
1777:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         - if multimode setting is disabled (ADC instance slave in independent mode) */
1778:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 4329              		.loc 2 1778 12
 4330 0078 7B68     		ldr	r3, [r7, #4]
 4331 007a 1B68     		ldr	r3, [r3]
 4332 007c 794A     		ldr	r2, .L242
 4333 007e 9342     		cmp	r3, r2
 4334 0080 09D0     		beq	.L213
 4335              		.loc 2 1778 12 is_stmt 0 discriminator 1
 4336 0082 7B68     		ldr	r3, [r7, #4]
 4337 0084 1B68     		ldr	r3, [r3]
 4338 0086 7A4A     		ldr	r2, .L242+12
 4339 0088 9342     		cmp	r3, r2
 4340 008a 02D0     		beq	.L214
 4341              		.loc 2 1778 12 discriminator 3
 4342 008c 7B68     		ldr	r3, [r7, #4]
 4343 008e 1B68     		ldr	r3, [r3]
 4344 0090 03E0     		b	.L216
 4345              	.L214:
 4346              		.loc 2 1778 12 discriminator 4
 4347 0092 784B     		ldr	r3, .L242+16
 4348 0094 01E0     		b	.L216
 4349              	.L213:
 4350              		.loc 2 1778 12 discriminator 2
 4351 0096 4FF0A043 		mov	r3, #1342177280
 4352              	.L216:
 4353              		.loc 2 1778 66 is_stmt 1 discriminator 8
 4354 009a 7A68     		ldr	r2, [r7, #4]
 4355 009c 1268     		ldr	r2, [r2]
 4356              		.loc 2 1778 10 discriminator 8
 4357 009e 9342     		cmp	r3, r2
 4358 00a0 02D0     		beq	.L217
1779:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****           || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 4359              		.loc 2 1779 11
 4360 00a2 3B69     		ldr	r3, [r7, #16]
 4361 00a4 002B     		cmp	r3, #0
 4362 00a6 05D1     		bne	.L218
 4363              	.L217:
1780:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****          )
1781:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       {
1782:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 4364              		.loc 2 1782 9
 4365 00a8 7B68     		ldr	r3, [r7, #4]
 4366 00aa DB6D     		ldr	r3, [r3, #92]
 4367 00ac 23F48012 		bic	r2, r3, #1048576
 4368 00b0 7B68     		ldr	r3, [r7, #4]
 4369 00b2 DA65     		str	r2, [r3, #92]
 4370              	.L218:
1783:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       }
1784:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** #endif
1785:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
1786:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       /* Set ADC error code */
1787:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       /* Check if a conversion is on going on ADC group injected */
ARM GAS  /tmp/ccZ0TYFG.s 			page 246


1788:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 4371              		.loc 2 1788 16
 4372 00b4 7B68     		ldr	r3, [r7, #4]
 4373 00b6 DB6D     		ldr	r3, [r3, #92]
 4374              		.loc 2 1788 24
 4375 00b8 03F48053 		and	r3, r3, #4096
 4376              		.loc 2 1788 10
 4377 00bc 002B     		cmp	r3, #0
 4378 00be 06D0     		beq	.L219
1789:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       {
1790:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         /* Reset ADC error code fields related to regular conversions only */
1791:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 4379              		.loc 2 1791 9
 4380 00c0 7B68     		ldr	r3, [r7, #4]
 4381 00c2 1B6E     		ldr	r3, [r3, #96]
 4382 00c4 23F00602 		bic	r2, r3, #6
 4383 00c8 7B68     		ldr	r3, [r7, #4]
 4384 00ca 1A66     		str	r2, [r3, #96]
 4385 00cc 02E0     		b	.L220
 4386              	.L219:
1792:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       }
1793:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       else
1794:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       {
1795:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         /* Reset all ADC error code fields */
1796:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         ADC_CLEAR_ERRORCODE(hadc);
 4387              		.loc 2 1796 9
 4388 00ce 7B68     		ldr	r3, [r7, #4]
 4389 00d0 0022     		movs	r2, #0
 4390 00d2 1A66     		str	r2, [r3, #96]
 4391              	.L220:
1797:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       }
1798:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
1799:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       /* Clear ADC group regular conversion flag and overrun flag               */
1800:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       /* (To ensure of no unknown state from potential previous ADC operations) */
1801:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 4392              		.loc 2 1801 7
 4393 00d4 7B68     		ldr	r3, [r7, #4]
 4394 00d6 1B68     		ldr	r3, [r3]
 4395 00d8 1C22     		movs	r2, #28
 4396 00da 1A60     		str	r2, [r3]
1802:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
1803:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       /* Process unlocked */
1804:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       /* Unlock before starting ADC conversions: in case of potential         */
1805:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       /* interruption, to let the process to ADC IRQ Handler.                 */
1806:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       __HAL_UNLOCK(hadc);
 4397              		.loc 2 1806 7
 4398 00dc 7B68     		ldr	r3, [r7, #4]
 4399 00de 0022     		movs	r2, #0
 4400 00e0 83F85820 		strb	r2, [r3, #88]
1807:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
1808:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       /* Disable all interruptions before enabling the desired ones */
1809:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 4401              		.loc 2 1809 7
 4402 00e4 7B68     		ldr	r3, [r7, #4]
 4403 00e6 1B68     		ldr	r3, [r3]
 4404 00e8 5A68     		ldr	r2, [r3, #4]
 4405 00ea 7B68     		ldr	r3, [r7, #4]
ARM GAS  /tmp/ccZ0TYFG.s 			page 247


 4406 00ec 1B68     		ldr	r3, [r3]
 4407 00ee 22F01C02 		bic	r2, r2, #28
 4408 00f2 5A60     		str	r2, [r3, #4]
1810:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
1811:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       /* Enable ADC end of conversion interrupt */
1812:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       switch (hadc->Init.EOCSelection)
 4409              		.loc 2 1812 25
 4410 00f4 7B68     		ldr	r3, [r7, #4]
 4411 00f6 9B69     		ldr	r3, [r3, #24]
 4412              		.loc 2 1812 7
 4413 00f8 082B     		cmp	r3, #8
 4414 00fa 08D1     		bne	.L221
1813:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       {
1814:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         case ADC_EOC_SEQ_CONV:
1815:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****           __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 4415              		.loc 2 1815 11
 4416 00fc 7B68     		ldr	r3, [r7, #4]
 4417 00fe 1B68     		ldr	r3, [r3]
 4418 0100 5A68     		ldr	r2, [r3, #4]
 4419 0102 7B68     		ldr	r3, [r7, #4]
 4420 0104 1B68     		ldr	r3, [r3]
 4421 0106 42F00802 		orr	r2, r2, #8
 4422 010a 5A60     		str	r2, [r3, #4]
1816:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****           break;
 4423              		.loc 2 1816 11
 4424 010c 08E0     		b	.L222
 4425              	.L221:
1817:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         /* case ADC_EOC_SINGLE_CONV */
1818:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         default:
1819:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****           __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 4426              		.loc 2 1819 11
 4427 010e 7B68     		ldr	r3, [r7, #4]
 4428 0110 1B68     		ldr	r3, [r3]
 4429 0112 5A68     		ldr	r2, [r3, #4]
 4430 0114 7B68     		ldr	r3, [r7, #4]
 4431 0116 1B68     		ldr	r3, [r3]
 4432 0118 42F00402 		orr	r2, r2, #4
 4433 011c 5A60     		str	r2, [r3, #4]
1820:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****           break;
 4434              		.loc 2 1820 11
 4435 011e 00BF     		nop
 4436              	.L222:
1821:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       }
1822:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
1823:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       /* Enable ADC overrun interrupt */
1824:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       /* If hadc->Init.Overrun is set to ADC_OVR_DATA_PRESERVED, only then is
1825:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****          ADC_IT_OVR enabled; otherwise data overwrite is considered as normal
1826:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****          behavior and no CPU time is lost for a non-processed interruption */
1827:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 4437              		.loc 2 1827 21
 4438 0120 7B68     		ldr	r3, [r7, #4]
 4439 0122 DB6B     		ldr	r3, [r3, #60]
 4440              		.loc 2 1827 10
 4441 0124 002B     		cmp	r3, #0
 4442 0126 07D1     		bne	.L223
1828:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       {
1829:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
ARM GAS  /tmp/ccZ0TYFG.s 			page 248


 4443              		.loc 2 1829 9
 4444 0128 7B68     		ldr	r3, [r7, #4]
 4445 012a 1B68     		ldr	r3, [r3]
 4446 012c 5A68     		ldr	r2, [r3, #4]
 4447 012e 7B68     		ldr	r3, [r7, #4]
 4448 0130 1B68     		ldr	r3, [r3]
 4449 0132 42F01002 		orr	r2, r2, #16
 4450 0136 5A60     		str	r2, [r3, #4]
 4451              	.L223:
1830:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       }
1831:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
1832:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       /* Enable conversion of regular group.                                  */
1833:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       /* If software start has been selected, conversion starts immediately.  */
1834:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       /* If external trigger has been selected, conversion will start at next */
1835:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       /* trigger event.                                                       */
1836:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       /* Case of multimode enabled (when multimode feature is available):     */
1837:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
1838:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       /*    enabled only (conversion is not started),                         */
1839:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       /*  - if ADC is master, ADC is enabled and conversion is started.       */
1840:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** #if defined(ADC_MULTIMODE_SUPPORT)
1841:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 4452              		.loc 2 1841 12
 4453 0138 7B68     		ldr	r3, [r7, #4]
 4454 013a 1B68     		ldr	r3, [r3]
 4455 013c 494A     		ldr	r2, .L242
 4456 013e 9342     		cmp	r3, r2
 4457 0140 09D0     		beq	.L224
 4458              		.loc 2 1841 12 is_stmt 0 discriminator 1
 4459 0142 7B68     		ldr	r3, [r7, #4]
 4460 0144 1B68     		ldr	r3, [r3]
 4461 0146 4A4A     		ldr	r2, .L242+12
 4462 0148 9342     		cmp	r3, r2
 4463 014a 02D0     		beq	.L225
 4464              		.loc 2 1841 12 discriminator 3
 4465 014c 7B68     		ldr	r3, [r7, #4]
 4466 014e 1B68     		ldr	r3, [r3]
 4467 0150 03E0     		b	.L227
 4468              	.L225:
 4469              		.loc 2 1841 12 discriminator 4
 4470 0152 484B     		ldr	r3, .L242+16
 4471 0154 01E0     		b	.L227
 4472              	.L224:
 4473              		.loc 2 1841 12 discriminator 2
 4474 0156 4FF0A043 		mov	r3, #1342177280
 4475              	.L227:
 4476              		.loc 2 1841 66 is_stmt 1 discriminator 8
 4477 015a 7A68     		ldr	r2, [r7, #4]
 4478 015c 1268     		ldr	r2, [r2]
 4479              		.loc 2 1841 10 discriminator 8
 4480 015e 9342     		cmp	r3, r2
 4481 0160 08D0     		beq	.L228
1842:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****           || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 4482              		.loc 2 1842 11
 4483 0162 3B69     		ldr	r3, [r7, #16]
 4484 0164 002B     		cmp	r3, #0
 4485 0166 05D0     		beq	.L228
1843:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****           || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
ARM GAS  /tmp/ccZ0TYFG.s 			page 249


 4486              		.loc 2 1843 11
 4487 0168 3B69     		ldr	r3, [r7, #16]
 4488 016a 052B     		cmp	r3, #5
 4489 016c 02D0     		beq	.L228
1844:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****           || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 4490              		.loc 2 1844 11
 4491 016e 3B69     		ldr	r3, [r7, #16]
 4492 0170 092B     		cmp	r3, #9
 4493 0172 3BD1     		bne	.L229
 4494              	.L228:
1845:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****          )
1846:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       {
1847:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         /* ADC instance is not a multimode slave instance with multimode regular conversions enable
1848:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 4495              		.loc 2 1848 13
 4496 0174 7B68     		ldr	r3, [r7, #4]
 4497 0176 1B68     		ldr	r3, [r3]
 4498 0178 DB68     		ldr	r3, [r3, #12]
 4499 017a 03F00073 		and	r3, r3, #33554432
 4500              		.loc 2 1848 12
 4501 017e 002B     		cmp	r3, #0
 4502 0180 2DD0     		beq	.L240
1849:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         {
1850:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****           ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 4503              		.loc 2 1850 11
 4504 0182 7B68     		ldr	r3, [r7, #4]
 4505 0184 DB6D     		ldr	r3, [r3, #92]
 4506 0186 23F44053 		bic	r3, r3, #12288
 4507 018a 43F48052 		orr	r2, r3, #4096
 4508 018e 7B68     		ldr	r3, [r7, #4]
 4509 0190 DA65     		str	r2, [r3, #92]
1851:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
1852:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****           /* Enable as well injected interruptions in case
1853:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****            HAL_ADCEx_InjectedStart_IT() has not been called beforehand. This
1854:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****            allows to start regular and injected conversions when JAUTO is
1855:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****            set with a single call to HAL_ADC_Start_IT() */
1856:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****           switch (hadc->Init.EOCSelection)
 4510              		.loc 2 1856 29
 4511 0192 7B68     		ldr	r3, [r7, #4]
 4512 0194 9B69     		ldr	r3, [r3, #24]
 4513              		.loc 2 1856 11
 4514 0196 082B     		cmp	r3, #8
 4515 0198 10D1     		bne	.L231
1857:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****           {
1858:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****             case ADC_EOC_SEQ_CONV:
1859:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****               __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 4516              		.loc 2 1859 15
 4517 019a 7B68     		ldr	r3, [r7, #4]
 4518 019c 1B68     		ldr	r3, [r3]
 4519 019e 5A68     		ldr	r2, [r3, #4]
 4520 01a0 7B68     		ldr	r3, [r7, #4]
 4521 01a2 1B68     		ldr	r3, [r3]
 4522 01a4 22F02002 		bic	r2, r2, #32
 4523 01a8 5A60     		str	r2, [r3, #4]
1860:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****               __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 4524              		.loc 2 1860 15
 4525 01aa 7B68     		ldr	r3, [r7, #4]
ARM GAS  /tmp/ccZ0TYFG.s 			page 250


 4526 01ac 1B68     		ldr	r3, [r3]
 4527 01ae 5A68     		ldr	r2, [r3, #4]
 4528 01b0 7B68     		ldr	r3, [r7, #4]
 4529 01b2 1B68     		ldr	r3, [r3]
 4530 01b4 42F04002 		orr	r2, r2, #64
 4531 01b8 5A60     		str	r2, [r3, #4]
1861:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****               break;
 4532              		.loc 2 1861 15
 4533 01ba 11E0     		b	.L230
 4534              	.L231:
1862:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****             /* case ADC_EOC_SINGLE_CONV */
1863:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****             default:
1864:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****               __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 4535              		.loc 2 1864 15
 4536 01bc 7B68     		ldr	r3, [r7, #4]
 4537 01be 1B68     		ldr	r3, [r3]
 4538 01c0 5A68     		ldr	r2, [r3, #4]
 4539 01c2 7B68     		ldr	r3, [r7, #4]
 4540 01c4 1B68     		ldr	r3, [r3]
 4541 01c6 22F04002 		bic	r2, r2, #64
 4542 01ca 5A60     		str	r2, [r3, #4]
1865:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****               __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 4543              		.loc 2 1865 15
 4544 01cc 7B68     		ldr	r3, [r7, #4]
 4545 01ce 1B68     		ldr	r3, [r3]
 4546 01d0 5A68     		ldr	r2, [r3, #4]
 4547 01d2 7B68     		ldr	r3, [r7, #4]
 4548 01d4 1B68     		ldr	r3, [r3]
 4549 01d6 42F02002 		orr	r2, r2, #32
 4550 01da 5A60     		str	r2, [r3, #4]
1866:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****               break;
 4551              		.loc 2 1866 15
 4552 01dc 00E0     		b	.L230
 4553              	.L240:
1867:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****           }
1868:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         }
 4554              		.loc 2 1868 9
 4555 01de 00BF     		nop
 4556              	.L230:
1869:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
1870:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         /* Start ADC group regular conversion */
1871:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         LL_ADC_REG_StartConversion(hadc->Instance);
 4557              		.loc 2 1871 9
 4558 01e0 7B68     		ldr	r3, [r7, #4]
 4559 01e2 1B68     		ldr	r3, [r3]
 4560 01e4 1846     		mov	r0, r3
 4561 01e6 FFF7FEFF 		bl	LL_ADC_REG_StartConversion
 4562 01ea 60E0     		b	.L239
 4563              	.L229:
1872:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       }
1873:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       else
1874:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       {
1875:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
1876:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 4564              		.loc 2 1876 9
 4565 01ec 7B68     		ldr	r3, [r7, #4]
 4566 01ee DB6D     		ldr	r3, [r3, #92]
ARM GAS  /tmp/ccZ0TYFG.s 			page 251


 4567 01f0 43F48012 		orr	r2, r3, #1048576
 4568 01f4 7B68     		ldr	r3, [r7, #4]
 4569 01f6 DA65     		str	r2, [r3, #92]
1877:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         /* if Master ADC JAUTO bit is set, Slave injected interruptions
1878:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****            are enabled nevertheless (for same reason as above) */
1879:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 4570              		.loc 2 1879 25
 4571 01f8 7B68     		ldr	r3, [r7, #4]
 4572 01fa 1B68     		ldr	r3, [r3]
 4573 01fc 194A     		ldr	r2, .L242
 4574 01fe 9342     		cmp	r3, r2
 4575 0200 09D0     		beq	.L233
 4576              		.loc 2 1879 25 is_stmt 0 discriminator 1
 4577 0202 7B68     		ldr	r3, [r7, #4]
 4578 0204 1B68     		ldr	r3, [r3]
 4579 0206 1A4A     		ldr	r2, .L242+12
 4580 0208 9342     		cmp	r3, r2
 4581 020a 02D0     		beq	.L234
 4582              		.loc 2 1879 25 discriminator 3
 4583 020c 7B68     		ldr	r3, [r7, #4]
 4584 020e 1B68     		ldr	r3, [r3]
 4585 0210 03E0     		b	.L236
 4586              	.L234:
 4587              		.loc 2 1879 25 discriminator 4
 4588 0212 184B     		ldr	r3, .L242+16
 4589 0214 01E0     		b	.L236
 4590              	.L233:
 4591              		.loc 2 1879 25 discriminator 2
 4592 0216 4FF0A043 		mov	r3, #1342177280
 4593              	.L236:
 4594              		.loc 2 1879 23 is_stmt 1 discriminator 8
 4595 021a FB60     		str	r3, [r7, #12]
1880:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 4596              		.loc 2 1880 13 discriminator 8
 4597 021c FB68     		ldr	r3, [r7, #12]
 4598 021e DB68     		ldr	r3, [r3, #12]
 4599 0220 03F00073 		and	r3, r3, #33554432
 4600              		.loc 2 1880 12 discriminator 8
 4601 0224 002B     		cmp	r3, #0
 4602 0226 41D0     		beq	.L241
1881:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         {
1882:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****           /* First, update Slave State in setting HAL_ADC_STATE_INJ_BUSY bit
1883:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****              and in resetting HAL_ADC_STATE_INJ_EOC bit */
1884:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****           ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 4603              		.loc 2 1884 11
 4604 0228 7B68     		ldr	r3, [r7, #4]
 4605 022a DB6D     		ldr	r3, [r3, #92]
 4606 022c 23F44053 		bic	r3, r3, #12288
 4607 0230 43F48052 		orr	r2, r3, #4096
 4608 0234 7B68     		ldr	r3, [r7, #4]
 4609 0236 DA65     		str	r2, [r3, #92]
1885:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****           /* Next, set Slave injected interruptions */
1886:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****           switch (hadc->Init.EOCSelection)
 4610              		.loc 2 1886 29
 4611 0238 7B68     		ldr	r3, [r7, #4]
 4612 023a 9B69     		ldr	r3, [r3, #24]
 4613              		.loc 2 1886 11
ARM GAS  /tmp/ccZ0TYFG.s 			page 252


 4614 023c 082B     		cmp	r3, #8
 4615 023e 1BD1     		bne	.L237
1887:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****           {
1888:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****             case ADC_EOC_SEQ_CONV:
1889:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****               __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 4616              		.loc 2 1889 15
 4617 0240 7B68     		ldr	r3, [r7, #4]
 4618 0242 1B68     		ldr	r3, [r3]
 4619 0244 5A68     		ldr	r2, [r3, #4]
 4620 0246 7B68     		ldr	r3, [r7, #4]
 4621 0248 1B68     		ldr	r3, [r3]
 4622 024a 22F02002 		bic	r2, r2, #32
 4623 024e 5A60     		str	r2, [r3, #4]
1890:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****               __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 4624              		.loc 2 1890 15
 4625 0250 7B68     		ldr	r3, [r7, #4]
 4626 0252 1B68     		ldr	r3, [r3]
 4627 0254 5A68     		ldr	r2, [r3, #4]
 4628 0256 7B68     		ldr	r3, [r7, #4]
 4629 0258 1B68     		ldr	r3, [r3]
 4630 025a 42F04002 		orr	r2, r2, #64
 4631 025e 5A60     		str	r2, [r3, #4]
1891:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****               break;
 4632              		.loc 2 1891 15
 4633 0260 25E0     		b	.L239
 4634              	.L243:
 4635 0262 00BF     		.align	2
 4636              	.L242:
 4637 0264 00010050 		.word	1342177536
 4638 0268 00030050 		.word	1342178048
 4639 026c 00070050 		.word	1342179072
 4640 0270 00050050 		.word	1342178560
 4641 0274 00040050 		.word	1342178304
 4642              	.L237:
1892:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****             /* case ADC_EOC_SINGLE_CONV */
1893:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****             default:
1894:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****               __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 4643              		.loc 2 1894 15
 4644 0278 7B68     		ldr	r3, [r7, #4]
 4645 027a 1B68     		ldr	r3, [r3]
 4646 027c 5A68     		ldr	r2, [r3, #4]
 4647 027e 7B68     		ldr	r3, [r7, #4]
 4648 0280 1B68     		ldr	r3, [r3]
 4649 0282 22F04002 		bic	r2, r2, #64
 4650 0286 5A60     		str	r2, [r3, #4]
1895:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****               __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 4651              		.loc 2 1895 15
 4652 0288 7B68     		ldr	r3, [r7, #4]
 4653 028a 1B68     		ldr	r3, [r3]
 4654 028c 5A68     		ldr	r2, [r3, #4]
 4655 028e 7B68     		ldr	r3, [r7, #4]
 4656 0290 1B68     		ldr	r3, [r3]
 4657 0292 42F02002 		orr	r2, r2, #32
 4658 0296 5A60     		str	r2, [r3, #4]
1896:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****               break;
 4659              		.loc 2 1896 15
 4660 0298 00BF     		nop
ARM GAS  /tmp/ccZ0TYFG.s 			page 253


 4661 029a 08E0     		b	.L239
 4662              	.L212:
1897:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****           }
1898:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         }
1899:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       }
1900:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** #else
1901:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       /* ADC instance is not a multimode slave instance with multimode regular conversions enabled 
1902:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
1903:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       {
1904:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
1905:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
1906:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         /* Enable as well injected interruptions in case
1907:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****          HAL_ADCEx_InjectedStart_IT() has not been called beforehand. This
1908:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****          allows to start regular and injected conversions when JAUTO is
1909:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****          set with a single call to HAL_ADC_Start_IT() */
1910:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         switch (hadc->Init.EOCSelection)
1911:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         {
1912:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****           case ADC_EOC_SEQ_CONV:
1913:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****             __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
1914:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****             __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
1915:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****             break;
1916:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****           /* case ADC_EOC_SINGLE_CONV */
1917:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****           default:
1918:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****             __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
1919:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****             __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
1920:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****             break;
1921:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         }
1922:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       }
1923:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
1924:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       /* Start ADC group regular conversion */
1925:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       LL_ADC_REG_StartConversion(hadc->Instance);
1926:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** #endif
1927:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     }
1928:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     else
1929:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     {
1930:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       /* Process unlocked */
1931:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       __HAL_UNLOCK(hadc);
 4663              		.loc 2 1931 7
 4664 029c 7B68     		ldr	r3, [r7, #4]
 4665 029e 0022     		movs	r2, #0
 4666 02a0 83F85820 		strb	r2, [r3, #88]
 4667 02a4 03E0     		b	.L239
 4668              	.L209:
1932:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     }
1933:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
1934:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   }
1935:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   else
1936:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   {
1937:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     tmp_hal_status = HAL_BUSY;
 4669              		.loc 2 1937 20
 4670 02a6 0223     		movs	r3, #2
 4671 02a8 FB75     		strb	r3, [r7, #23]
 4672 02aa 00E0     		b	.L239
 4673              	.L241:
1898:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       }
 4674              		.loc 2 1898 9
 4675 02ac 00BF     		nop
ARM GAS  /tmp/ccZ0TYFG.s 			page 254


 4676              	.L239:
1938:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   }
1939:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
1940:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   /* Return function status */
1941:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   return tmp_hal_status;
 4677              		.loc 2 1941 10
 4678 02ae FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 4679              	.L211:
1942:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** }
 4680              		.loc 2 1942 1
 4681 02b0 1846     		mov	r0, r3
 4682 02b2 1837     		adds	r7, r7, #24
 4683              	.LCFI285:
 4684              		.cfi_def_cfa_offset 8
 4685 02b4 BD46     		mov	sp, r7
 4686              	.LCFI286:
 4687              		.cfi_def_cfa_register 13
 4688              		@ sp needed
 4689 02b6 80BD     		pop	{r7, pc}
 4690              		.cfi_endproc
 4691              	.LFE333:
 4693              		.section	.text.HAL_ADC_Stop_IT,"ax",%progbits
 4694              		.align	1
 4695              		.global	HAL_ADC_Stop_IT
 4696              		.syntax unified
 4697              		.thumb
 4698              		.thumb_func
 4699              		.fpu fpv4-sp-d16
 4701              	HAL_ADC_Stop_IT:
 4702              	.LFB334:
1943:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
1944:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** /**
1945:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   * @brief  Stop ADC conversion of regular group (and injected group in
1946:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   *         case of auto_injection mode), disable interrution of
1947:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   *         end-of-conversion, disable ADC peripheral.
1948:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   * @param hadc ADC handle
1949:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   * @retval HAL status.
1950:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   */
1951:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_Stop_IT(ADC_HandleTypeDef *hadc)
1952:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** {
 4703              		.loc 2 1952 1
 4704              		.cfi_startproc
 4705              		@ args = 0, pretend = 0, frame = 16
 4706              		@ frame_needed = 1, uses_anonymous_args = 0
 4707 0000 80B5     		push	{r7, lr}
 4708              	.LCFI287:
 4709              		.cfi_def_cfa_offset 8
 4710              		.cfi_offset 7, -8
 4711              		.cfi_offset 14, -4
 4712 0002 84B0     		sub	sp, sp, #16
 4713              	.LCFI288:
 4714              		.cfi_def_cfa_offset 24
 4715 0004 00AF     		add	r7, sp, #0
 4716              	.LCFI289:
 4717              		.cfi_def_cfa_register 7
 4718 0006 7860     		str	r0, [r7, #4]
1953:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status;
ARM GAS  /tmp/ccZ0TYFG.s 			page 255


1954:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
1955:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   /* Check the parameters */
1956:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
1957:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
1958:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   /* Process locked */
1959:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   __HAL_LOCK(hadc);
 4719              		.loc 2 1959 3
 4720 0008 7B68     		ldr	r3, [r7, #4]
 4721 000a 93F85830 		ldrb	r3, [r3, #88]	@ zero_extendqisi2
 4722 000e 012B     		cmp	r3, #1
 4723 0010 01D1     		bne	.L245
 4724              		.loc 2 1959 3 is_stmt 0 discriminator 1
 4725 0012 0223     		movs	r3, #2
 4726 0014 2BE0     		b	.L246
 4727              	.L245:
 4728              		.loc 2 1959 3 discriminator 2
 4729 0016 7B68     		ldr	r3, [r7, #4]
 4730 0018 0122     		movs	r2, #1
 4731 001a 83F85820 		strb	r2, [r3, #88]
1960:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
1961:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   /* 1. Stop potential conversion on going, on ADC groups regular and injected */
1962:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 4732              		.loc 2 1962 20 is_stmt 1 discriminator 2
 4733 001e 0321     		movs	r1, #3
 4734 0020 7868     		ldr	r0, [r7, #4]
 4735 0022 FFF7FEFF 		bl	ADC_ConversionStop
 4736 0026 0346     		mov	r3, r0
 4737 0028 FB73     		strb	r3, [r7, #15]
1963:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
1964:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   /* Disable ADC peripheral if conversions are effectively stopped */
1965:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   if (tmp_hal_status == HAL_OK)
 4738              		.loc 2 1965 6 discriminator 2
 4739 002a FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 4740 002c 002B     		cmp	r3, #0
 4741 002e 19D1     		bne	.L247
1966:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   {
1967:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     /* Disable ADC end of conversion interrupt for regular group */
1968:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     /* Disable ADC overrun interrupt */
1969:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 4742              		.loc 2 1969 5
 4743 0030 7B68     		ldr	r3, [r7, #4]
 4744 0032 1B68     		ldr	r3, [r3]
 4745 0034 5A68     		ldr	r2, [r3, #4]
 4746 0036 7B68     		ldr	r3, [r7, #4]
 4747 0038 1B68     		ldr	r3, [r3]
 4748 003a 22F01C02 		bic	r2, r2, #28
 4749 003e 5A60     		str	r2, [r3, #4]
1970:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
1971:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     /* 2. Disable the ADC peripheral */
1972:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     tmp_hal_status = ADC_Disable(hadc);
 4750              		.loc 2 1972 22
 4751 0040 7868     		ldr	r0, [r7, #4]
 4752 0042 FFF7FEFF 		bl	ADC_Disable
 4753 0046 0346     		mov	r3, r0
 4754 0048 FB73     		strb	r3, [r7, #15]
1973:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
1974:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     /* Check if ADC is effectively disabled */
ARM GAS  /tmp/ccZ0TYFG.s 			page 256


1975:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     if (tmp_hal_status == HAL_OK)
 4755              		.loc 2 1975 8
 4756 004a FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 4757 004c 002B     		cmp	r3, #0
 4758 004e 09D1     		bne	.L247
1976:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     {
1977:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       /* Set ADC state */
1978:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       ADC_STATE_CLR_SET(hadc->State,
 4759              		.loc 2 1978 7
 4760 0050 7B68     		ldr	r3, [r7, #4]
 4761 0052 DB6D     		ldr	r3, [r3, #92]
 4762 0054 23F48853 		bic	r3, r3, #4352
 4763 0058 23F00103 		bic	r3, r3, #1
 4764 005c 43F00102 		orr	r2, r3, #1
 4765 0060 7B68     		ldr	r3, [r7, #4]
 4766 0062 DA65     		str	r2, [r3, #92]
 4767              	.L247:
1979:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****                         HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
1980:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****                         HAL_ADC_STATE_READY);
1981:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     }
1982:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   }
1983:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
1984:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   /* Process unlocked */
1985:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   __HAL_UNLOCK(hadc);
 4768              		.loc 2 1985 3
 4769 0064 7B68     		ldr	r3, [r7, #4]
 4770 0066 0022     		movs	r2, #0
 4771 0068 83F85820 		strb	r2, [r3, #88]
1986:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
1987:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   /* Return function status */
1988:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   return tmp_hal_status;
 4772              		.loc 2 1988 10
 4773 006c FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 4774              	.L246:
1989:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** }
 4775              		.loc 2 1989 1
 4776 006e 1846     		mov	r0, r3
 4777 0070 1037     		adds	r7, r7, #16
 4778              	.LCFI290:
 4779              		.cfi_def_cfa_offset 8
 4780 0072 BD46     		mov	sp, r7
 4781              	.LCFI291:
 4782              		.cfi_def_cfa_register 13
 4783              		@ sp needed
 4784 0074 80BD     		pop	{r7, pc}
 4785              		.cfi_endproc
 4786              	.LFE334:
 4788              		.section	.text.HAL_ADC_Start_DMA,"ax",%progbits
 4789              		.align	1
 4790              		.global	HAL_ADC_Start_DMA
 4791              		.syntax unified
 4792              		.thumb
 4793              		.thumb_func
 4794              		.fpu fpv4-sp-d16
 4796              	HAL_ADC_Start_DMA:
 4797              	.LFB335:
1990:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
ARM GAS  /tmp/ccZ0TYFG.s 			page 257


1991:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** /**
1992:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   * @brief  Enable ADC, start conversion of regular group and transfer result through DMA.
1993:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   * @note   Interruptions enabled in this function:
1994:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   *         overrun (if applicable), DMA half transfer, DMA transfer complete.
1995:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   *         Each of these interruptions has its dedicated callback function.
1996:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   * @note   Case of multimode enabled (when multimode feature is available): HAL_ADC_Start_DMA()
1997:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   *         is designed for single-ADC mode only. For multimode, the dedicated
1998:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   *         HAL_ADCEx_MultiModeStart_DMA() function must be used.
1999:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   * @param hadc ADC handle
2000:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   * @param pData Destination Buffer address.
2001:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   * @param Length Number of data to be transferred from ADC peripheral to memory
2002:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   * @retval HAL status.
2003:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   */
2004:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
2005:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** {
 4798              		.loc 2 2005 1
 4799              		.cfi_startproc
 4800              		@ args = 0, pretend = 0, frame = 24
 4801              		@ frame_needed = 1, uses_anonymous_args = 0
 4802 0000 80B5     		push	{r7, lr}
 4803              	.LCFI292:
 4804              		.cfi_def_cfa_offset 8
 4805              		.cfi_offset 7, -8
 4806              		.cfi_offset 14, -4
 4807 0002 86B0     		sub	sp, sp, #24
 4808              	.LCFI293:
 4809              		.cfi_def_cfa_offset 32
 4810 0004 00AF     		add	r7, sp, #0
 4811              	.LCFI294:
 4812              		.cfi_def_cfa_register 7
 4813 0006 F860     		str	r0, [r7, #12]
 4814 0008 B960     		str	r1, [r7, #8]
 4815 000a 7A60     		str	r2, [r7, #4]
2006:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status;
2007:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** #if defined(ADC_MULTIMODE_SUPPORT)
2008:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 4816              		.loc 2 2008 55
 4817 000c FB68     		ldr	r3, [r7, #12]
 4818 000e 1B68     		ldr	r3, [r3]
 4819              		.loc 2 2008 35
 4820 0010 B3F1A04F 		cmp	r3, #1342177280
 4821 0014 04D0     		beq	.L249
 4822              		.loc 2 2008 55 discriminator 2
 4823 0016 FB68     		ldr	r3, [r7, #12]
 4824 0018 1B68     		ldr	r3, [r3]
 4825 001a 584A     		ldr	r2, .L269
 4826 001c 9342     		cmp	r3, r2
 4827 001e 01D1     		bne	.L250
 4828              	.L249:
 4829              		.loc 2 2008 35 discriminator 3
 4830 0020 574B     		ldr	r3, .L269+4
 4831 0022 00E0     		b	.L251
 4832              	.L250:
 4833              		.loc 2 2008 35 is_stmt 0 discriminator 4
 4834 0024 574B     		ldr	r3, .L269+8
 4835              	.L251:
 4836              		.loc 2 2008 35 discriminator 6
ARM GAS  /tmp/ccZ0TYFG.s 			page 258


 4837 0026 1846     		mov	r0, r3
 4838 0028 FFF7FEFF 		bl	LL_ADC_GetMultimode
 4839 002c 3861     		str	r0, [r7, #16]
2009:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** #endif
2010:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
2011:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   /* Check the parameters */
2012:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
2013:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
2014:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   /* Perform ADC enable and conversion start if no conversion is on going */
2015:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 4840              		.loc 2 2015 7 is_stmt 1 discriminator 6
 4841 002e FB68     		ldr	r3, [r7, #12]
 4842 0030 1B68     		ldr	r3, [r3]
 4843 0032 1846     		mov	r0, r3
 4844 0034 FFF7FEFF 		bl	LL_ADC_REG_IsConversionOngoing
 4845 0038 0346     		mov	r3, r0
 4846              		.loc 2 2015 6 discriminator 6
 4847 003a 002B     		cmp	r3, #0
 4848 003c 40F09680 		bne	.L252
2016:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   {
2017:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     /* Process locked */
2018:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     __HAL_LOCK(hadc);
 4849              		.loc 2 2018 5
 4850 0040 FB68     		ldr	r3, [r7, #12]
 4851 0042 93F85830 		ldrb	r3, [r3, #88]	@ zero_extendqisi2
 4852 0046 012B     		cmp	r3, #1
 4853 0048 01D1     		bne	.L253
 4854              		.loc 2 2018 5 is_stmt 0 discriminator 1
 4855 004a 0223     		movs	r3, #2
 4856 004c 91E0     		b	.L254
 4857              	.L253:
 4858              		.loc 2 2018 5 discriminator 2
 4859 004e FB68     		ldr	r3, [r7, #12]
 4860 0050 0122     		movs	r2, #1
 4861 0052 83F85820 		strb	r2, [r3, #88]
2019:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
2020:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** #if defined(ADC_MULTIMODE_SUPPORT)
2021:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     /* Ensure that multimode regular conversions are not enabled.   */
2022:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
2023:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 4862              		.loc 2 2023 8 is_stmt 1 discriminator 2
 4863 0056 3B69     		ldr	r3, [r7, #16]
 4864 0058 002B     		cmp	r3, #0
 4865 005a 05D0     		beq	.L255
2024:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 4866              		.loc 2 2024 9
 4867 005c 3B69     		ldr	r3, [r7, #16]
 4868 005e 052B     		cmp	r3, #5
 4869 0060 02D0     		beq	.L255
2025:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 4870              		.loc 2 2025 9
 4871 0062 3B69     		ldr	r3, [r7, #16]
 4872 0064 092B     		cmp	r3, #9
 4873 0066 7AD1     		bne	.L256
 4874              	.L255:
2026:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****        )
2027:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** #endif
ARM GAS  /tmp/ccZ0TYFG.s 			page 259


2028:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     {
2029:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       /* Enable the ADC peripheral */
2030:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       tmp_hal_status = ADC_Enable(hadc);
 4875              		.loc 2 2030 24
 4876 0068 F868     		ldr	r0, [r7, #12]
 4877 006a FFF7FEFF 		bl	ADC_Enable
 4878 006e 0346     		mov	r3, r0
 4879 0070 FB75     		strb	r3, [r7, #23]
2031:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
2032:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       /* Start conversion if ADC is effectively enabled */
2033:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       if (tmp_hal_status == HAL_OK)
 4880              		.loc 2 2033 10
 4881 0072 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 4882 0074 002B     		cmp	r3, #0
 4883 0076 6DD1     		bne	.L257
2034:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       {
2035:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         /* Set ADC state                                                        */
2036:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         /* - Clear state bitfield related to regular group conversion results   */
2037:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         /* - Set state bitfield related to regular operation                    */
2038:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         ADC_STATE_CLR_SET(hadc->State,
 4884              		.loc 2 2038 9
 4885 0078 FB68     		ldr	r3, [r7, #12]
 4886 007a DB6D     		ldr	r3, [r3, #92]
 4887 007c 23F47063 		bic	r3, r3, #3840
 4888 0080 23F00103 		bic	r3, r3, #1
 4889 0084 43F48072 		orr	r2, r3, #256
 4890 0088 FB68     		ldr	r3, [r7, #12]
 4891 008a DA65     		str	r2, [r3, #92]
2039:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****                           HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL
2040:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****                           HAL_ADC_STATE_REG_BUSY);
2041:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
2042:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** #if defined(ADC_MULTIMODE_SUPPORT)
2043:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
2044:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****           - if ADC instance is master or if multimode feature is not available
2045:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****           - if multimode setting is disabled (ADC instance slave in independent mode) */
2046:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 4892              		.loc 2 2046 14
 4893 008c FB68     		ldr	r3, [r7, #12]
 4894 008e 1B68     		ldr	r3, [r3]
 4895 0090 3A4A     		ldr	r2, .L269
 4896 0092 9342     		cmp	r3, r2
 4897 0094 09D0     		beq	.L258
 4898              		.loc 2 2046 14 is_stmt 0 discriminator 1
 4899 0096 FB68     		ldr	r3, [r7, #12]
 4900 0098 1B68     		ldr	r3, [r3]
 4901 009a 3B4A     		ldr	r2, .L269+12
 4902 009c 9342     		cmp	r3, r2
 4903 009e 02D0     		beq	.L259
 4904              		.loc 2 2046 14 discriminator 3
 4905 00a0 FB68     		ldr	r3, [r7, #12]
 4906 00a2 1B68     		ldr	r3, [r3]
 4907 00a4 03E0     		b	.L261
 4908              	.L259:
 4909              		.loc 2 2046 14 discriminator 4
 4910 00a6 394B     		ldr	r3, .L269+16
 4911 00a8 01E0     		b	.L261
 4912              	.L258:
ARM GAS  /tmp/ccZ0TYFG.s 			page 260


 4913              		.loc 2 2046 14 discriminator 2
 4914 00aa 4FF0A043 		mov	r3, #1342177280
 4915              	.L261:
 4916              		.loc 2 2046 68 is_stmt 1 discriminator 8
 4917 00ae FA68     		ldr	r2, [r7, #12]
 4918 00b0 1268     		ldr	r2, [r2]
 4919              		.loc 2 2046 12 discriminator 8
 4920 00b2 9342     		cmp	r3, r2
 4921 00b4 02D0     		beq	.L262
2047:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****             || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 4922              		.loc 2 2047 13
 4923 00b6 3B69     		ldr	r3, [r7, #16]
 4924 00b8 002B     		cmp	r3, #0
 4925 00ba 05D1     		bne	.L263
 4926              	.L262:
2048:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****            )
2049:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         {
2050:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****           CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 4927              		.loc 2 2050 11
 4928 00bc FB68     		ldr	r3, [r7, #12]
 4929 00be DB6D     		ldr	r3, [r3, #92]
 4930 00c0 23F48012 		bic	r2, r3, #1048576
 4931 00c4 FB68     		ldr	r3, [r7, #12]
 4932 00c6 DA65     		str	r2, [r3, #92]
 4933              	.L263:
2051:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         }
2052:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** #endif
2053:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
2054:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         /* Check if a conversion is on going on ADC group injected */
2055:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 4934              		.loc 2 2055 18
 4935 00c8 FB68     		ldr	r3, [r7, #12]
 4936 00ca DB6D     		ldr	r3, [r3, #92]
 4937              		.loc 2 2055 26
 4938 00cc 03F48053 		and	r3, r3, #4096
 4939              		.loc 2 2055 12
 4940 00d0 002B     		cmp	r3, #0
 4941 00d2 06D0     		beq	.L264
2056:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         {
2057:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****           /* Reset ADC error code fields related to regular conversions only */
2058:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****           CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 4942              		.loc 2 2058 11
 4943 00d4 FB68     		ldr	r3, [r7, #12]
 4944 00d6 1B6E     		ldr	r3, [r3, #96]
 4945 00d8 23F00602 		bic	r2, r3, #6
 4946 00dc FB68     		ldr	r3, [r7, #12]
 4947 00de 1A66     		str	r2, [r3, #96]
 4948 00e0 02E0     		b	.L265
 4949              	.L264:
2059:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         }
2060:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         else
2061:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         {
2062:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****           /* Reset all ADC error code fields */
2063:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****           ADC_CLEAR_ERRORCODE(hadc);
 4950              		.loc 2 2063 11
 4951 00e2 FB68     		ldr	r3, [r7, #12]
 4952 00e4 0022     		movs	r2, #0
ARM GAS  /tmp/ccZ0TYFG.s 			page 261


 4953 00e6 1A66     		str	r2, [r3, #96]
 4954              	.L265:
2064:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         }
2065:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
2066:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         /* Set the DMA transfer complete callback */
2067:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 4955              		.loc 2 2067 13
 4956 00e8 FB68     		ldr	r3, [r7, #12]
 4957 00ea 5B6D     		ldr	r3, [r3, #84]
 4958              		.loc 2 2067 44
 4959 00ec 284A     		ldr	r2, .L269+20
 4960 00ee DA62     		str	r2, [r3, #44]
2068:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
2069:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         /* Set the DMA half transfer complete callback */
2070:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 4961              		.loc 2 2070 13
 4962 00f0 FB68     		ldr	r3, [r7, #12]
 4963 00f2 5B6D     		ldr	r3, [r3, #84]
 4964              		.loc 2 2070 48
 4965 00f4 274A     		ldr	r2, .L269+24
 4966 00f6 1A63     		str	r2, [r3, #48]
2071:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
2072:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         /* Set the DMA error callback */
2073:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 4967              		.loc 2 2073 13
 4968 00f8 FB68     		ldr	r3, [r7, #12]
 4969 00fa 5B6D     		ldr	r3, [r3, #84]
 4970              		.loc 2 2073 45
 4971 00fc 264A     		ldr	r2, .L269+28
 4972 00fe 5A63     		str	r2, [r3, #52]
2074:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
2075:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
2076:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         /* Manage ADC and DMA start: ADC overrun interruption, DMA start,     */
2077:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         /* ADC start (in case of SW start):                                   */
2078:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
2079:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         /* Clear regular group conversion flag and overrun flag               */
2080:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         /* (To ensure of no unknown state from potential previous ADC         */
2081:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         /* operations)                                                        */
2082:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 4973              		.loc 2 2082 9
 4974 0100 FB68     		ldr	r3, [r7, #12]
 4975 0102 1B68     		ldr	r3, [r3]
 4976 0104 1C22     		movs	r2, #28
 4977 0106 1A60     		str	r2, [r3]
2083:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
2084:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         /* Process unlocked */
2085:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         /* Unlock before starting ADC conversions: in case of potential         */
2086:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         /* interruption, to let the process to ADC IRQ Handler.                 */
2087:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         __HAL_UNLOCK(hadc);
 4978              		.loc 2 2087 9
 4979 0108 FB68     		ldr	r3, [r7, #12]
 4980 010a 0022     		movs	r2, #0
 4981 010c 83F85820 		strb	r2, [r3, #88]
2088:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
2089:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         /* With DMA, overrun event is always considered as an error even if
2090:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****            hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
2091:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****            ADC_IT_OVR is enabled. */
ARM GAS  /tmp/ccZ0TYFG.s 			page 262


2092:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 4982              		.loc 2 2092 9
 4983 0110 FB68     		ldr	r3, [r7, #12]
 4984 0112 1B68     		ldr	r3, [r3]
 4985 0114 5A68     		ldr	r2, [r3, #4]
 4986 0116 FB68     		ldr	r3, [r7, #12]
 4987 0118 1B68     		ldr	r3, [r3]
 4988 011a 42F01002 		orr	r2, r2, #16
 4989 011e 5A60     		str	r2, [r3, #4]
2093:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
2094:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         /* Enable ADC DMA mode */
2095:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 4990              		.loc 2 2095 9
 4991 0120 FB68     		ldr	r3, [r7, #12]
 4992 0122 1B68     		ldr	r3, [r3]
 4993 0124 DA68     		ldr	r2, [r3, #12]
 4994 0126 FB68     		ldr	r3, [r7, #12]
 4995 0128 1B68     		ldr	r3, [r3]
 4996 012a 42F00102 		orr	r2, r2, #1
 4997 012e DA60     		str	r2, [r3, #12]
2096:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
2097:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         /* Start the DMA channel */
2098:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_
 4998              		.loc 2 2098 26
 4999 0130 FB68     		ldr	r3, [r7, #12]
 5000 0132 586D     		ldr	r0, [r3, #84]
 5001              		.loc 2 2098 76
 5002 0134 FB68     		ldr	r3, [r7, #12]
 5003 0136 1B68     		ldr	r3, [r3]
 5004              		.loc 2 2098 71
 5005 0138 4033     		adds	r3, r3, #64
 5006              		.loc 2 2098 26
 5007 013a 1946     		mov	r1, r3
 5008 013c BA68     		ldr	r2, [r7, #8]
 5009 013e 7B68     		ldr	r3, [r7, #4]
 5010 0140 FFF7FEFF 		bl	HAL_DMA_Start_IT
 5011 0144 0346     		mov	r3, r0
 5012 0146 FB75     		strb	r3, [r7, #23]
2099:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
2100:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         /* Enable conversion of regular group.                                  */
2101:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         /* If software start has been selected, conversion starts immediately.  */
2102:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         /* If external trigger has been selected, conversion will start at next */
2103:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         /* trigger event.                                                       */
2104:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         /* Start ADC group regular conversion */
2105:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         LL_ADC_REG_StartConversion(hadc->Instance);
 5013              		.loc 2 2105 9
 5014 0148 FB68     		ldr	r3, [r7, #12]
 5015 014a 1B68     		ldr	r3, [r3]
 5016 014c 1846     		mov	r0, r3
 5017 014e FFF7FEFF 		bl	LL_ADC_REG_StartConversion
2033:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       {
 5018              		.loc 2 2033 10
 5019 0152 0DE0     		b	.L268
 5020              	.L257:
2106:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       }
2107:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       else
2108:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       {
ARM GAS  /tmp/ccZ0TYFG.s 			page 263


2109:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         /* Process unlocked */
2110:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         __HAL_UNLOCK(hadc);
 5021              		.loc 2 2110 9
 5022 0154 FB68     		ldr	r3, [r7, #12]
 5023 0156 0022     		movs	r2, #0
 5024 0158 83F85820 		strb	r2, [r3, #88]
2033:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       {
 5025              		.loc 2 2033 10
 5026 015c 08E0     		b	.L268
 5027              	.L256:
2111:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       }
2112:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
2113:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     }
2114:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** #if defined(ADC_MULTIMODE_SUPPORT)
2115:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     else
2116:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     {
2117:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       tmp_hal_status = HAL_ERROR;
 5028              		.loc 2 2117 22
 5029 015e 0123     		movs	r3, #1
 5030 0160 FB75     		strb	r3, [r7, #23]
2118:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       /* Process unlocked */
2119:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       __HAL_UNLOCK(hadc);
 5031              		.loc 2 2119 7
 5032 0162 FB68     		ldr	r3, [r7, #12]
 5033 0164 0022     		movs	r2, #0
 5034 0166 83F85820 		strb	r2, [r3, #88]
 5035 016a 01E0     		b	.L268
 5036              	.L252:
2120:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     }
2121:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** #endif
2122:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   }
2123:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   else
2124:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   {
2125:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     tmp_hal_status = HAL_BUSY;
 5037              		.loc 2 2125 20
 5038 016c 0223     		movs	r3, #2
 5039 016e FB75     		strb	r3, [r7, #23]
 5040              	.L268:
2126:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   }
2127:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
2128:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   /* Return function status */
2129:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   return tmp_hal_status;
 5041              		.loc 2 2129 10
 5042 0170 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 5043              	.L254:
2130:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** }
 5044              		.loc 2 2130 1
 5045 0172 1846     		mov	r0, r3
 5046 0174 1837     		adds	r7, r7, #24
 5047              	.LCFI295:
 5048              		.cfi_def_cfa_offset 8
 5049 0176 BD46     		mov	sp, r7
 5050              	.LCFI296:
 5051              		.cfi_def_cfa_register 13
 5052              		@ sp needed
 5053 0178 80BD     		pop	{r7, pc}
 5054              	.L270:
ARM GAS  /tmp/ccZ0TYFG.s 			page 264


 5055 017a 00BF     		.align	2
 5056              	.L269:
 5057 017c 00010050 		.word	1342177536
 5058 0180 00030050 		.word	1342178048
 5059 0184 00070050 		.word	1342179072
 5060 0188 00050050 		.word	1342178560
 5061 018c 00040050 		.word	1342178304
 5062 0190 00000000 		.word	ADC_DMAConvCplt
 5063 0194 00000000 		.word	ADC_DMAHalfConvCplt
 5064 0198 00000000 		.word	ADC_DMAError
 5065              		.cfi_endproc
 5066              	.LFE335:
 5068              		.section	.text.HAL_ADC_Stop_DMA,"ax",%progbits
 5069              		.align	1
 5070              		.global	HAL_ADC_Stop_DMA
 5071              		.syntax unified
 5072              		.thumb
 5073              		.thumb_func
 5074              		.fpu fpv4-sp-d16
 5076              	HAL_ADC_Stop_DMA:
 5077              	.LFB336:
2131:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
2132:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** /**
2133:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   * @brief  Stop ADC conversion of regular group (and injected group in
2134:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   *         case of auto_injection mode), disable ADC DMA transfer, disable
2135:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   *         ADC peripheral.
2136:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   * @note:  ADC peripheral disable is forcing stop of potential
2137:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   *         conversion on ADC group injected. If ADC group injected is under use, it
2138:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
2139:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   * @note   Case of multimode enabled (when multimode feature is available):
2140:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   *         HAL_ADC_Stop_DMA() function is dedicated to single-ADC mode only.
2141:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   *         For multimode, the dedicated HAL_ADCEx_MultiModeStop_DMA() API must be used.
2142:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   * @param hadc ADC handle
2143:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   * @retval HAL status.
2144:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   */
2145:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
2146:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** {
 5078              		.loc 2 2146 1
 5079              		.cfi_startproc
 5080              		@ args = 0, pretend = 0, frame = 16
 5081              		@ frame_needed = 1, uses_anonymous_args = 0
 5082 0000 80B5     		push	{r7, lr}
 5083              	.LCFI297:
 5084              		.cfi_def_cfa_offset 8
 5085              		.cfi_offset 7, -8
 5086              		.cfi_offset 14, -4
 5087 0002 84B0     		sub	sp, sp, #16
 5088              	.LCFI298:
 5089              		.cfi_def_cfa_offset 24
 5090 0004 00AF     		add	r7, sp, #0
 5091              	.LCFI299:
 5092              		.cfi_def_cfa_register 7
 5093 0006 7860     		str	r0, [r7, #4]
2147:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status;
2148:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
2149:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   /* Check the parameters */
2150:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
ARM GAS  /tmp/ccZ0TYFG.s 			page 265


2151:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
2152:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   /* Process locked */
2153:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   __HAL_LOCK(hadc);
 5094              		.loc 2 2153 3
 5095 0008 7B68     		ldr	r3, [r7, #4]
 5096 000a 93F85830 		ldrb	r3, [r3, #88]	@ zero_extendqisi2
 5097 000e 012B     		cmp	r3, #1
 5098 0010 01D1     		bne	.L272
 5099              		.loc 2 2153 3 is_stmt 0 discriminator 1
 5100 0012 0223     		movs	r3, #2
 5101 0014 51E0     		b	.L273
 5102              	.L272:
 5103              		.loc 2 2153 3 discriminator 2
 5104 0016 7B68     		ldr	r3, [r7, #4]
 5105 0018 0122     		movs	r2, #1
 5106 001a 83F85820 		strb	r2, [r3, #88]
2154:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
2155:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   /* 1. Stop potential ADC group regular conversion on going */
2156:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 5107              		.loc 2 2156 20 is_stmt 1 discriminator 2
 5108 001e 0321     		movs	r1, #3
 5109 0020 7868     		ldr	r0, [r7, #4]
 5110 0022 FFF7FEFF 		bl	ADC_ConversionStop
 5111 0026 0346     		mov	r3, r0
 5112 0028 FB73     		strb	r3, [r7, #15]
2157:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
2158:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   /* Disable ADC peripheral if conversions are effectively stopped */
2159:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   if (tmp_hal_status == HAL_OK)
 5113              		.loc 2 2159 6 discriminator 2
 5114 002a FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 5115 002c 002B     		cmp	r3, #0
 5116 002e 3FD1     		bne	.L274
2160:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   {
2161:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     /* Disable ADC DMA (ADC DMA configuration of continous requests is kept) */
2162:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 5117              		.loc 2 2162 5
 5118 0030 7B68     		ldr	r3, [r7, #4]
 5119 0032 1B68     		ldr	r3, [r3]
 5120 0034 DA68     		ldr	r2, [r3, #12]
 5121 0036 7B68     		ldr	r3, [r7, #4]
 5122 0038 1B68     		ldr	r3, [r3]
 5123 003a 22F00102 		bic	r2, r2, #1
 5124 003e DA60     		str	r2, [r3, #12]
2163:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
2164:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     /* Disable the DMA channel (in case of DMA in circular mode or stop       */
2165:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     /* while DMA transfer is on going)                                        */
2166:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 5125              		.loc 2 2166 13
 5126 0040 7B68     		ldr	r3, [r7, #4]
 5127 0042 5B6D     		ldr	r3, [r3, #84]
 5128              		.loc 2 2166 25
 5129 0044 93F82530 		ldrb	r3, [r3, #37]
 5130 0048 DBB2     		uxtb	r3, r3
 5131              		.loc 2 2166 8
 5132 004a 022B     		cmp	r3, #2
 5133 004c 0FD1     		bne	.L275
2167:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     {
ARM GAS  /tmp/ccZ0TYFG.s 			page 266


2168:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 5134              		.loc 2 2168 24
 5135 004e 7B68     		ldr	r3, [r7, #4]
 5136 0050 5B6D     		ldr	r3, [r3, #84]
 5137 0052 1846     		mov	r0, r3
 5138 0054 FFF7FEFF 		bl	HAL_DMA_Abort
 5139 0058 0346     		mov	r3, r0
 5140 005a FB73     		strb	r3, [r7, #15]
2169:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
2170:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       /* Check if DMA channel effectively disabled */
2171:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       if (tmp_hal_status != HAL_OK)
 5141              		.loc 2 2171 10
 5142 005c FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 5143 005e 002B     		cmp	r3, #0
 5144 0060 05D0     		beq	.L275
2172:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       {
2173:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         /* Update ADC state machine to error */
2174:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 5145              		.loc 2 2174 9
 5146 0062 7B68     		ldr	r3, [r7, #4]
 5147 0064 DB6D     		ldr	r3, [r3, #92]
 5148 0066 43F04002 		orr	r2, r3, #64
 5149 006a 7B68     		ldr	r3, [r7, #4]
 5150 006c DA65     		str	r2, [r3, #92]
 5151              	.L275:
2175:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       }
2176:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     }
2177:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
2178:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     /* Disable ADC overrun interrupt */
2179:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 5152              		.loc 2 2179 5
 5153 006e 7B68     		ldr	r3, [r7, #4]
 5154 0070 1B68     		ldr	r3, [r3]
 5155 0072 5A68     		ldr	r2, [r3, #4]
 5156 0074 7B68     		ldr	r3, [r7, #4]
 5157 0076 1B68     		ldr	r3, [r3]
 5158 0078 22F01002 		bic	r2, r2, #16
 5159 007c 5A60     		str	r2, [r3, #4]
2180:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
2181:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     /* 2. Disable the ADC peripheral */
2182:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
2183:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     /* to keep in memory a potential failing status.                          */
2184:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     if (tmp_hal_status == HAL_OK)
 5160              		.loc 2 2184 8
 5161 007e FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 5162 0080 002B     		cmp	r3, #0
 5163 0082 05D1     		bne	.L276
2185:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     {
2186:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       tmp_hal_status = ADC_Disable(hadc);
 5164              		.loc 2 2186 24
 5165 0084 7868     		ldr	r0, [r7, #4]
 5166 0086 FFF7FEFF 		bl	ADC_Disable
 5167 008a 0346     		mov	r3, r0
 5168 008c FB73     		strb	r3, [r7, #15]
 5169 008e 02E0     		b	.L277
 5170              	.L276:
2187:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     }
ARM GAS  /tmp/ccZ0TYFG.s 			page 267


2188:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     else
2189:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     {
2190:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       (void)ADC_Disable(hadc);
 5171              		.loc 2 2190 13
 5172 0090 7868     		ldr	r0, [r7, #4]
 5173 0092 FFF7FEFF 		bl	ADC_Disable
 5174              	.L277:
2191:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     }
2192:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
2193:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     /* Check if ADC is effectively disabled */
2194:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     if (tmp_hal_status == HAL_OK)
 5175              		.loc 2 2194 8
 5176 0096 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 5177 0098 002B     		cmp	r3, #0
 5178 009a 09D1     		bne	.L274
2195:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     {
2196:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       /* Set ADC state */
2197:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       ADC_STATE_CLR_SET(hadc->State,
 5179              		.loc 2 2197 7
 5180 009c 7B68     		ldr	r3, [r7, #4]
 5181 009e DB6D     		ldr	r3, [r3, #92]
 5182 00a0 23F48853 		bic	r3, r3, #4352
 5183 00a4 23F00103 		bic	r3, r3, #1
 5184 00a8 43F00102 		orr	r2, r3, #1
 5185 00ac 7B68     		ldr	r3, [r7, #4]
 5186 00ae DA65     		str	r2, [r3, #92]
 5187              	.L274:
2198:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****                         HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
2199:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****                         HAL_ADC_STATE_READY);
2200:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     }
2201:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
2202:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   }
2203:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
2204:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   /* Process unlocked */
2205:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   __HAL_UNLOCK(hadc);
 5188              		.loc 2 2205 3
 5189 00b0 7B68     		ldr	r3, [r7, #4]
 5190 00b2 0022     		movs	r2, #0
 5191 00b4 83F85820 		strb	r2, [r3, #88]
2206:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
2207:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   /* Return function status */
2208:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   return tmp_hal_status;
 5192              		.loc 2 2208 10
 5193 00b8 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 5194              	.L273:
2209:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** }
 5195              		.loc 2 2209 1
 5196 00ba 1846     		mov	r0, r3
 5197 00bc 1037     		adds	r7, r7, #16
 5198              	.LCFI300:
 5199              		.cfi_def_cfa_offset 8
 5200 00be BD46     		mov	sp, r7
 5201              	.LCFI301:
 5202              		.cfi_def_cfa_register 13
 5203              		@ sp needed
 5204 00c0 80BD     		pop	{r7, pc}
 5205              		.cfi_endproc
ARM GAS  /tmp/ccZ0TYFG.s 			page 268


 5206              	.LFE336:
 5208              		.section	.text.HAL_ADC_GetValue,"ax",%progbits
 5209              		.align	1
 5210              		.global	HAL_ADC_GetValue
 5211              		.syntax unified
 5212              		.thumb
 5213              		.thumb_func
 5214              		.fpu fpv4-sp-d16
 5216              	HAL_ADC_GetValue:
 5217              	.LFB337:
2210:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
2211:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** /**
2212:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   * @brief  Get ADC regular group conversion result.
2213:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   * @note   Reading register DR automatically clears ADC flag EOC
2214:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   *         (ADC group regular end of unitary conversion).
2215:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   * @note   This function does not clear ADC flag EOS
2216:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   *         (ADC group regular end of sequence conversion).
2217:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   *         Occurrence of flag EOS rising:
2218:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   *          - If sequencer is composed of 1 rank, flag EOS is equivalent
2219:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   *            to flag EOC.
2220:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   *          - If sequencer is composed of several ranks, during the scan
2221:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   *            sequence flag EOC only is raised, at the end of the scan sequence
2222:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   *            both flags EOC and EOS are raised.
2223:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   *         To clear this flag, either use function:
2224:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   *         in programming model IT: @ref HAL_ADC_IRQHandler(), in programming
2225:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   *         model polling: @ref HAL_ADC_PollForConversion()
2226:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
2227:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   * @param hadc ADC handle
2228:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   * @retval ADC group regular conversion data
2229:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   */
2230:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
2231:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** {
 5218              		.loc 2 2231 1
 5219              		.cfi_startproc
 5220              		@ args = 0, pretend = 0, frame = 8
 5221              		@ frame_needed = 1, uses_anonymous_args = 0
 5222              		@ link register save eliminated.
 5223 0000 80B4     		push	{r7}
 5224              	.LCFI302:
 5225              		.cfi_def_cfa_offset 4
 5226              		.cfi_offset 7, -4
 5227 0002 83B0     		sub	sp, sp, #12
 5228              	.LCFI303:
 5229              		.cfi_def_cfa_offset 16
 5230 0004 00AF     		add	r7, sp, #0
 5231              	.LCFI304:
 5232              		.cfi_def_cfa_register 7
 5233 0006 7860     		str	r0, [r7, #4]
2232:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   /* Check the parameters */
2233:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
2234:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
2235:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   /* Note: EOC flag is not cleared here by software because automatically     */
2236:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   /*       cleared by hardware when reading register DR.                      */
2237:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
2238:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   /* Return ADC converted value */
2239:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   return hadc->Instance->DR;
 5234              		.loc 2 2239 14
ARM GAS  /tmp/ccZ0TYFG.s 			page 269


 5235 0008 7B68     		ldr	r3, [r7, #4]
 5236 000a 1B68     		ldr	r3, [r3]
 5237              		.loc 2 2239 24
 5238 000c 1B6C     		ldr	r3, [r3, #64]
2240:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** }
 5239              		.loc 2 2240 1
 5240 000e 1846     		mov	r0, r3
 5241 0010 0C37     		adds	r7, r7, #12
 5242              	.LCFI305:
 5243              		.cfi_def_cfa_offset 4
 5244 0012 BD46     		mov	sp, r7
 5245              	.LCFI306:
 5246              		.cfi_def_cfa_register 13
 5247              		@ sp needed
 5248 0014 5DF8047B 		ldr	r7, [sp], #4
 5249              	.LCFI307:
 5250              		.cfi_restore 7
 5251              		.cfi_def_cfa_offset 0
 5252 0018 7047     		bx	lr
 5253              		.cfi_endproc
 5254              	.LFE337:
 5256              		.section	.text.HAL_ADC_StartSampling,"ax",%progbits
 5257              		.align	1
 5258              		.global	HAL_ADC_StartSampling
 5259              		.syntax unified
 5260              		.thumb
 5261              		.thumb_func
 5262              		.fpu fpv4-sp-d16
 5264              	HAL_ADC_StartSampling:
 5265              	.LFB338:
2241:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
2242:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** /**
2243:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   * @brief  Start ADC conversion sampling phase of regular group
2244:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   * @note:  This function should only be called to start sampling when
2245:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   *         - @ref ADC_SAMPLING_MODE_TRIGGER_CONTROLED sampling
2246:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   *         mode has been selected
2247:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   *         - @ref ADC_SOFTWARE_START has been selected as trigger source
2248:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   * @param hadc ADC handle
2249:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   * @retval HAL status.
2250:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   */
2251:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_StartSampling(ADC_HandleTypeDef *hadc)
2252:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** {
 5266              		.loc 2 2252 1
 5267              		.cfi_startproc
 5268              		@ args = 0, pretend = 0, frame = 8
 5269              		@ frame_needed = 1, uses_anonymous_args = 0
 5270              		@ link register save eliminated.
 5271 0000 80B4     		push	{r7}
 5272              	.LCFI308:
 5273              		.cfi_def_cfa_offset 4
 5274              		.cfi_offset 7, -4
 5275 0002 83B0     		sub	sp, sp, #12
 5276              	.LCFI309:
 5277              		.cfi_def_cfa_offset 16
 5278 0004 00AF     		add	r7, sp, #0
 5279              	.LCFI310:
 5280              		.cfi_def_cfa_register 7
ARM GAS  /tmp/ccZ0TYFG.s 			page 270


 5281 0006 7860     		str	r0, [r7, #4]
2253:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   /* Check the parameters */
2254:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
2255:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
2256:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   /* Start sampling */
2257:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_SWTRIG);
 5282              		.loc 2 2257 3
 5283 0008 7B68     		ldr	r3, [r7, #4]
 5284 000a 1B68     		ldr	r3, [r3]
 5285 000c 1A69     		ldr	r2, [r3, #16]
 5286 000e 7B68     		ldr	r3, [r7, #4]
 5287 0010 1B68     		ldr	r3, [r3]
 5288 0012 42F00072 		orr	r2, r2, #33554432
 5289 0016 1A61     		str	r2, [r3, #16]
2258:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
2259:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   /* Return function status */
2260:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   return HAL_OK;
 5290              		.loc 2 2260 10
 5291 0018 0023     		movs	r3, #0
2261:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** }
 5292              		.loc 2 2261 1
 5293 001a 1846     		mov	r0, r3
 5294 001c 0C37     		adds	r7, r7, #12
 5295              	.LCFI311:
 5296              		.cfi_def_cfa_offset 4
 5297 001e BD46     		mov	sp, r7
 5298              	.LCFI312:
 5299              		.cfi_def_cfa_register 13
 5300              		@ sp needed
 5301 0020 5DF8047B 		ldr	r7, [sp], #4
 5302              	.LCFI313:
 5303              		.cfi_restore 7
 5304              		.cfi_def_cfa_offset 0
 5305 0024 7047     		bx	lr
 5306              		.cfi_endproc
 5307              	.LFE338:
 5309              		.section	.text.HAL_ADC_StopSampling,"ax",%progbits
 5310              		.align	1
 5311              		.global	HAL_ADC_StopSampling
 5312              		.syntax unified
 5313              		.thumb
 5314              		.thumb_func
 5315              		.fpu fpv4-sp-d16
 5317              	HAL_ADC_StopSampling:
 5318              	.LFB339:
2262:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
2263:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** /**
2264:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   * @brief  Stop ADC conversion sampling phase of regular group and start conversion
2265:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   * @note:  This function should only be called to stop sampling when
2266:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   *         - @ref ADC_SAMPLING_MODE_TRIGGER_CONTROLED sampling
2267:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   *         mode has been selected
2268:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   *         - @ref ADC_SOFTWARE_START has been selected as trigger source
2269:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   *         - after sampling has been started using @ref HAL_ADC_StartSampling.
2270:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   * @param hadc ADC handle
2271:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   * @retval HAL status.
2272:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   */
2273:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_StopSampling(ADC_HandleTypeDef *hadc)
ARM GAS  /tmp/ccZ0TYFG.s 			page 271


2274:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** {
 5319              		.loc 2 2274 1
 5320              		.cfi_startproc
 5321              		@ args = 0, pretend = 0, frame = 8
 5322              		@ frame_needed = 1, uses_anonymous_args = 0
 5323              		@ link register save eliminated.
 5324 0000 80B4     		push	{r7}
 5325              	.LCFI314:
 5326              		.cfi_def_cfa_offset 4
 5327              		.cfi_offset 7, -4
 5328 0002 83B0     		sub	sp, sp, #12
 5329              	.LCFI315:
 5330              		.cfi_def_cfa_offset 16
 5331 0004 00AF     		add	r7, sp, #0
 5332              	.LCFI316:
 5333              		.cfi_def_cfa_register 7
 5334 0006 7860     		str	r0, [r7, #4]
2275:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   /* Check the parameters */
2276:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
2277:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
2278:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   /* Start sampling */
2279:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_SWTRIG);
 5335              		.loc 2 2279 3
 5336 0008 7B68     		ldr	r3, [r7, #4]
 5337 000a 1B68     		ldr	r3, [r3]
 5338 000c 1A69     		ldr	r2, [r3, #16]
 5339 000e 7B68     		ldr	r3, [r7, #4]
 5340 0010 1B68     		ldr	r3, [r3]
 5341 0012 22F00072 		bic	r2, r2, #33554432
 5342 0016 1A61     		str	r2, [r3, #16]
2280:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
2281:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   /* Return function status */
2282:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   return HAL_OK;
 5343              		.loc 2 2282 10
 5344 0018 0023     		movs	r3, #0
2283:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** }
 5345              		.loc 2 2283 1
 5346 001a 1846     		mov	r0, r3
 5347 001c 0C37     		adds	r7, r7, #12
 5348              	.LCFI317:
 5349              		.cfi_def_cfa_offset 4
 5350 001e BD46     		mov	sp, r7
 5351              	.LCFI318:
 5352              		.cfi_def_cfa_register 13
 5353              		@ sp needed
 5354 0020 5DF8047B 		ldr	r7, [sp], #4
 5355              	.LCFI319:
 5356              		.cfi_restore 7
 5357              		.cfi_def_cfa_offset 0
 5358 0024 7047     		bx	lr
 5359              		.cfi_endproc
 5360              	.LFE339:
 5362              		.section	.text.HAL_ADC_IRQHandler,"ax",%progbits
 5363              		.align	1
 5364              		.global	HAL_ADC_IRQHandler
 5365              		.syntax unified
 5366              		.thumb
ARM GAS  /tmp/ccZ0TYFG.s 			page 272


 5367              		.thumb_func
 5368              		.fpu fpv4-sp-d16
 5370              	HAL_ADC_IRQHandler:
 5371              	.LFB340:
2284:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
2285:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** /**
2286:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   * @brief  Handle ADC interrupt request.
2287:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   * @param hadc ADC handle
2288:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   * @retval None
2289:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   */
2290:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
2291:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** {
 5372              		.loc 2 2291 1
 5373              		.cfi_startproc
 5374              		@ args = 0, pretend = 0, frame = 40
 5375              		@ frame_needed = 1, uses_anonymous_args = 0
 5376 0000 80B5     		push	{r7, lr}
 5377              	.LCFI320:
 5378              		.cfi_def_cfa_offset 8
 5379              		.cfi_offset 7, -8
 5380              		.cfi_offset 14, -4
 5381 0002 8AB0     		sub	sp, sp, #40
 5382              	.LCFI321:
 5383              		.cfi_def_cfa_offset 48
 5384 0004 00AF     		add	r7, sp, #0
 5385              	.LCFI322:
 5386              		.cfi_def_cfa_register 7
 5387 0006 7860     		str	r0, [r7, #4]
2292:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error 
 5388              		.loc 2 2292 12
 5389 0008 0023     		movs	r3, #0
 5390 000a 7B62     		str	r3, [r7, #36]
2293:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   uint32_t tmp_isr = hadc->Instance->ISR;
 5391              		.loc 2 2293 26
 5392 000c 7B68     		ldr	r3, [r7, #4]
 5393 000e 1B68     		ldr	r3, [r3]
 5394              		.loc 2 2293 12
 5395 0010 1B68     		ldr	r3, [r3]
 5396 0012 FB61     		str	r3, [r7, #28]
2294:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   uint32_t tmp_ier = hadc->Instance->IER;
 5397              		.loc 2 2294 26
 5398 0014 7B68     		ldr	r3, [r7, #4]
 5399 0016 1B68     		ldr	r3, [r3]
 5400              		.loc 2 2294 12
 5401 0018 5B68     		ldr	r3, [r3, #4]
 5402 001a BB61     		str	r3, [r7, #24]
2295:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   uint32_t tmp_adc_inj_is_trigger_source_sw_start;
2296:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   uint32_t tmp_adc_reg_is_trigger_source_sw_start;
2297:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   uint32_t tmp_cfgr;
2298:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** #if defined(ADC_MULTIMODE_SUPPORT)
2299:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   const ADC_TypeDef *tmpADC_Master;
2300:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 5403              		.loc 2 2300 55
 5404 001c 7B68     		ldr	r3, [r7, #4]
 5405 001e 1B68     		ldr	r3, [r3]
 5406              		.loc 2 2300 35
 5407 0020 B3F1A04F 		cmp	r3, #1342177280
ARM GAS  /tmp/ccZ0TYFG.s 			page 273


 5408 0024 04D0     		beq	.L285
 5409              		.loc 2 2300 55 discriminator 2
 5410 0026 7B68     		ldr	r3, [r7, #4]
 5411 0028 1B68     		ldr	r3, [r3]
 5412 002a 954A     		ldr	r2, .L341
 5413 002c 9342     		cmp	r3, r2
 5414 002e 01D1     		bne	.L286
 5415              	.L285:
 5416              		.loc 2 2300 35 discriminator 3
 5417 0030 944B     		ldr	r3, .L341+4
 5418 0032 00E0     		b	.L287
 5419              	.L286:
 5420              		.loc 2 2300 35 is_stmt 0 discriminator 4
 5421 0034 944B     		ldr	r3, .L341+8
 5422              	.L287:
 5423              		.loc 2 2300 35 discriminator 6
 5424 0036 1846     		mov	r0, r3
 5425 0038 FFF7FEFF 		bl	LL_ADC_GetMultimode
 5426 003c 7861     		str	r0, [r7, #20]
2301:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** #endif
2302:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
2303:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   /* Check the parameters */
2304:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
2305:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
2306:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
2307:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   /* ========== Check End of Sampling flag for ADC group regular ========== */
2308:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 5427              		.loc 2 2308 17 is_stmt 1 discriminator 6
 5428 003e FB69     		ldr	r3, [r7, #28]
 5429 0040 03F00203 		and	r3, r3, #2
 5430              		.loc 2 2308 6 discriminator 6
 5431 0044 002B     		cmp	r3, #0
 5432 0046 17D0     		beq	.L288
 5433              		.loc 2 2308 67 discriminator 1
 5434 0048 BB69     		ldr	r3, [r7, #24]
 5435 004a 03F00203 		and	r3, r3, #2
 5436              		.loc 2 2308 54 discriminator 1
 5437 004e 002B     		cmp	r3, #0
 5438 0050 12D0     		beq	.L288
2309:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   {
2310:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     /* Update state machine on end of sampling status if not in error state */
2311:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 5439              		.loc 2 2311 14
 5440 0052 7B68     		ldr	r3, [r7, #4]
 5441 0054 DB6D     		ldr	r3, [r3, #92]
 5442              		.loc 2 2311 22
 5443 0056 03F01003 		and	r3, r3, #16
 5444              		.loc 2 2311 8
 5445 005a 002B     		cmp	r3, #0
 5446 005c 05D1     		bne	.L289
2312:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     {
2313:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       /* Set ADC state */
2314:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 5447              		.loc 2 2314 7
 5448 005e 7B68     		ldr	r3, [r7, #4]
 5449 0060 DB6D     		ldr	r3, [r3, #92]
 5450 0062 43F40062 		orr	r2, r3, #2048
ARM GAS  /tmp/ccZ0TYFG.s 			page 274


 5451 0066 7B68     		ldr	r3, [r7, #4]
 5452 0068 DA65     		str	r2, [r3, #92]
 5453              	.L289:
2315:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     }
2316:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
2317:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     /* End Of Sampling callback */
2318:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** #if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
2319:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     hadc->EndOfSamplingCallback(hadc);
2320:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** #else
2321:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     HAL_ADCEx_EndOfSamplingCallback(hadc);
 5454              		.loc 2 2321 5
 5455 006a 7868     		ldr	r0, [r7, #4]
 5456 006c FFF7FEFF 		bl	HAL_ADCEx_EndOfSamplingCallback
2322:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** #endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
2323:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
2324:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     /* Clear regular group conversion flag */
2325:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 5457              		.loc 2 2325 5
 5458 0070 7B68     		ldr	r3, [r7, #4]
 5459 0072 1B68     		ldr	r3, [r3]
 5460 0074 0222     		movs	r2, #2
 5461 0076 1A60     		str	r2, [r3]
 5462              	.L288:
2326:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   }
2327:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
2328:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
2329:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 5463              		.loc 2 2329 18
 5464 0078 FB69     		ldr	r3, [r7, #28]
 5465 007a 03F00403 		and	r3, r3, #4
 5466              		.loc 2 2329 6
 5467 007e 002B     		cmp	r3, #0
 5468 0080 04D0     		beq	.L290
 5469              		.loc 2 2329 64 discriminator 1
 5470 0082 BB69     		ldr	r3, [r7, #24]
 5471 0084 03F00403 		and	r3, r3, #4
 5472              		.loc 2 2329 51 discriminator 1
 5473 0088 002B     		cmp	r3, #0
 5474 008a 0BD1     		bne	.L291
 5475              	.L290:
2330:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 5476              		.loc 2 2330 18 discriminator 3
 5477 008c FB69     		ldr	r3, [r7, #28]
 5478 008e 03F00803 		and	r3, r3, #8
2329:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 5479              		.loc 2 2329 94 discriminator 3
 5480 0092 002B     		cmp	r3, #0
 5481 0094 00F09480 		beq	.L292
 5482              		.loc 2 2330 64
 5483 0098 BB69     		ldr	r3, [r7, #24]
 5484 009a 03F00803 		and	r3, r3, #8
 5485              		.loc 2 2330 51
 5486 009e 002B     		cmp	r3, #0
 5487 00a0 00F08E80 		beq	.L292
 5488              	.L291:
2331:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   {
2332:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     /* Update state machine on conversion status if not in error state */
ARM GAS  /tmp/ccZ0TYFG.s 			page 275


2333:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 5489              		.loc 2 2333 14
 5490 00a4 7B68     		ldr	r3, [r7, #4]
 5491 00a6 DB6D     		ldr	r3, [r3, #92]
 5492              		.loc 2 2333 22
 5493 00a8 03F01003 		and	r3, r3, #16
 5494              		.loc 2 2333 8
 5495 00ac 002B     		cmp	r3, #0
 5496 00ae 05D1     		bne	.L293
2334:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     {
2335:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       /* Set ADC state */
2336:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 5497              		.loc 2 2336 7
 5498 00b0 7B68     		ldr	r3, [r7, #4]
 5499 00b2 DB6D     		ldr	r3, [r3, #92]
 5500 00b4 43F40072 		orr	r2, r3, #512
 5501 00b8 7B68     		ldr	r3, [r7, #4]
 5502 00ba DA65     		str	r2, [r3, #92]
 5503              	.L293:
2337:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     }
2338:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
2339:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     /* Determine whether any further conversion upcoming on group regular     */
2340:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     /* by external trigger, continuous mode or scan sequence on going         */
2341:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     /* to disable interruption.                                               */
2342:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 5504              		.loc 2 2342 9
 5505 00bc 7B68     		ldr	r3, [r7, #4]
 5506 00be 1B68     		ldr	r3, [r3]
 5507 00c0 1846     		mov	r0, r3
 5508 00c2 FFF7FEFF 		bl	LL_ADC_REG_IsTriggerSourceSWStart
 5509 00c6 0346     		mov	r3, r0
 5510              		.loc 2 2342 8
 5511 00c8 002B     		cmp	r3, #0
 5512 00ca 72D0     		beq	.L294
2343:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     {
2344:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       /* Get relevant register CFGR in ADC instance of ADC master or slave    */
2345:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       /* in function of multimode state (for devices with multimode           */
2346:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       /* available).                                                          */
2347:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** #if defined(ADC_MULTIMODE_SUPPORT)
2348:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 5513              		.loc 2 2348 12
 5514 00cc 7B68     		ldr	r3, [r7, #4]
 5515 00ce 1B68     		ldr	r3, [r3]
 5516 00d0 6B4A     		ldr	r2, .L341
 5517 00d2 9342     		cmp	r3, r2
 5518 00d4 09D0     		beq	.L295
 5519              		.loc 2 2348 12 is_stmt 0 discriminator 1
 5520 00d6 7B68     		ldr	r3, [r7, #4]
 5521 00d8 1B68     		ldr	r3, [r3]
 5522 00da 6C4A     		ldr	r2, .L341+12
 5523 00dc 9342     		cmp	r3, r2
 5524 00de 02D0     		beq	.L296
 5525              		.loc 2 2348 12 discriminator 3
 5526 00e0 7B68     		ldr	r3, [r7, #4]
 5527 00e2 1B68     		ldr	r3, [r3]
 5528 00e4 03E0     		b	.L298
 5529              	.L296:
ARM GAS  /tmp/ccZ0TYFG.s 			page 276


 5530              		.loc 2 2348 12 discriminator 4
 5531 00e6 6A4B     		ldr	r3, .L341+16
 5532 00e8 01E0     		b	.L298
 5533              	.L295:
 5534              		.loc 2 2348 12 discriminator 2
 5535 00ea 4FF0A043 		mov	r3, #1342177280
 5536              	.L298:
 5537              		.loc 2 2348 66 is_stmt 1 discriminator 8
 5538 00ee 7A68     		ldr	r2, [r7, #4]
 5539 00f0 1268     		ldr	r2, [r2]
 5540              		.loc 2 2348 10 discriminator 8
 5541 00f2 9342     		cmp	r3, r2
 5542 00f4 08D0     		beq	.L299
2349:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****           || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 5543              		.loc 2 2349 11
 5544 00f6 7B69     		ldr	r3, [r7, #20]
 5545 00f8 002B     		cmp	r3, #0
 5546 00fa 05D0     		beq	.L299
2350:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****           || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 5547              		.loc 2 2350 11
 5548 00fc 7B69     		ldr	r3, [r7, #20]
 5549 00fe 052B     		cmp	r3, #5
 5550 0100 02D0     		beq	.L299
2351:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****           || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 5551              		.loc 2 2351 11
 5552 0102 7B69     		ldr	r3, [r7, #20]
 5553 0104 092B     		cmp	r3, #9
 5554 0106 04D1     		bne	.L300
 5555              	.L299:
2352:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****          )
2353:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       {
2354:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         /* check CONT bit directly in handle ADC CFGR register */
2355:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 5556              		.loc 2 2355 20
 5557 0108 7B68     		ldr	r3, [r7, #4]
 5558 010a 1B68     		ldr	r3, [r3]
 5559              		.loc 2 2355 18
 5560 010c DB68     		ldr	r3, [r3, #12]
 5561 010e 3B62     		str	r3, [r7, #32]
 5562 0110 14E0     		b	.L301
 5563              	.L300:
2356:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       }
2357:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       else
2358:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       {
2359:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         /* else need to check Master ADC CONT bit */
2360:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 5564              		.loc 2 2360 25
 5565 0112 7B68     		ldr	r3, [r7, #4]
 5566 0114 1B68     		ldr	r3, [r3]
 5567 0116 5A4A     		ldr	r2, .L341
 5568 0118 9342     		cmp	r3, r2
 5569 011a 09D0     		beq	.L302
 5570              		.loc 2 2360 25 is_stmt 0 discriminator 1
 5571 011c 7B68     		ldr	r3, [r7, #4]
 5572 011e 1B68     		ldr	r3, [r3]
 5573 0120 5A4A     		ldr	r2, .L341+12
 5574 0122 9342     		cmp	r3, r2
ARM GAS  /tmp/ccZ0TYFG.s 			page 277


 5575 0124 02D0     		beq	.L303
 5576              		.loc 2 2360 25 discriminator 3
 5577 0126 7B68     		ldr	r3, [r7, #4]
 5578 0128 1B68     		ldr	r3, [r3]
 5579 012a 03E0     		b	.L305
 5580              	.L303:
 5581              		.loc 2 2360 25 discriminator 4
 5582 012c 584B     		ldr	r3, .L341+16
 5583 012e 01E0     		b	.L305
 5584              	.L302:
 5585              		.loc 2 2360 25 discriminator 2
 5586 0130 4FF0A043 		mov	r3, #1342177280
 5587              	.L305:
 5588              		.loc 2 2360 23 is_stmt 1 discriminator 8
 5589 0134 3B61     		str	r3, [r7, #16]
2361:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 5590              		.loc 2 2361 18 discriminator 8
 5591 0136 3B69     		ldr	r3, [r7, #16]
 5592 0138 DB68     		ldr	r3, [r3, #12]
 5593 013a 3B62     		str	r3, [r7, #32]
 5594              	.L301:
2362:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       }
2363:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** #else
2364:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       tmp_cfgr = READ_REG(hadc->Instance->CFGR);
2365:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** #endif
2366:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
2367:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       /* Carry on if continuous mode is disabled */
2368:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 5595              		.loc 2 2368 11
 5596 013c 3B6A     		ldr	r3, [r7, #32]
 5597 013e 03F40053 		and	r3, r3, #8192
 5598              		.loc 2 2368 10
 5599 0142 002B     		cmp	r3, #0
 5600 0144 35D1     		bne	.L294
2369:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       {
2370:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         /* If End of Sequence is reached, disable interrupts */
2371:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 5601              		.loc 2 2371 13
 5602 0146 7B68     		ldr	r3, [r7, #4]
 5603 0148 1B68     		ldr	r3, [r3]
 5604 014a 1B68     		ldr	r3, [r3]
 5605 014c 03F00803 		and	r3, r3, #8
 5606              		.loc 2 2371 12
 5607 0150 082B     		cmp	r3, #8
 5608 0152 2ED1     		bne	.L294
2372:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         {
2373:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****           /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
2374:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****           /* ADSTART==0 (no conversion on going)                              */
2375:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****           if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 5609              		.loc 2 2375 15
 5610 0154 7B68     		ldr	r3, [r7, #4]
 5611 0156 1B68     		ldr	r3, [r3]
 5612 0158 1846     		mov	r0, r3
 5613 015a FFF7FEFF 		bl	LL_ADC_REG_IsConversionOngoing
 5614 015e 0346     		mov	r3, r0
 5615              		.loc 2 2375 14
 5616 0160 002B     		cmp	r3, #0
ARM GAS  /tmp/ccZ0TYFG.s 			page 278


 5617 0162 1AD1     		bne	.L306
2376:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****           {
2377:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****             /* Disable ADC end of sequence conversion interrupt */
2378:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****             /* Note: Overrun interrupt was enabled with EOC interrupt in      */
2379:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****             /* HAL_Start_IT(), but is not disabled here because can be used   */
2380:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****             /* by overrun IRQ process below.                                  */
2381:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****             __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 5618              		.loc 2 2381 13
 5619 0164 7B68     		ldr	r3, [r7, #4]
 5620 0166 1B68     		ldr	r3, [r3]
 5621 0168 5A68     		ldr	r2, [r3, #4]
 5622 016a 7B68     		ldr	r3, [r7, #4]
 5623 016c 1B68     		ldr	r3, [r3]
 5624 016e 22F00C02 		bic	r2, r2, #12
 5625 0172 5A60     		str	r2, [r3, #4]
2382:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
2383:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****             /* Set ADC state */
2384:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****             CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 5626              		.loc 2 2384 13
 5627 0174 7B68     		ldr	r3, [r7, #4]
 5628 0176 DB6D     		ldr	r3, [r3, #92]
 5629 0178 23F48072 		bic	r2, r3, #256
 5630 017c 7B68     		ldr	r3, [r7, #4]
 5631 017e DA65     		str	r2, [r3, #92]
2385:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
2386:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****             if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 5632              		.loc 2 2386 22
 5633 0180 7B68     		ldr	r3, [r7, #4]
 5634 0182 DB6D     		ldr	r3, [r3, #92]
 5635              		.loc 2 2386 30
 5636 0184 03F48053 		and	r3, r3, #4096
 5637              		.loc 2 2386 16
 5638 0188 002B     		cmp	r3, #0
 5639 018a 12D1     		bne	.L294
2387:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****             {
2388:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****               SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 5640              		.loc 2 2388 15
 5641 018c 7B68     		ldr	r3, [r7, #4]
 5642 018e DB6D     		ldr	r3, [r3, #92]
 5643 0190 43F00102 		orr	r2, r3, #1
 5644 0194 7B68     		ldr	r3, [r7, #4]
 5645 0196 DA65     		str	r2, [r3, #92]
 5646 0198 0BE0     		b	.L294
 5647              	.L306:
2389:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****             }
2390:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****           }
2391:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****           else
2392:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****           {
2393:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****             /* Change ADC state to error state */
2394:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****             SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 5648              		.loc 2 2394 13
 5649 019a 7B68     		ldr	r3, [r7, #4]
 5650 019c DB6D     		ldr	r3, [r3, #92]
 5651 019e 43F01002 		orr	r2, r3, #16
 5652 01a2 7B68     		ldr	r3, [r7, #4]
 5653 01a4 DA65     		str	r2, [r3, #92]
2395:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
ARM GAS  /tmp/ccZ0TYFG.s 			page 279


2396:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****             /* Set ADC error code to ADC peripheral internal error */
2397:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****             SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 5654              		.loc 2 2397 13
 5655 01a6 7B68     		ldr	r3, [r7, #4]
 5656 01a8 1B6E     		ldr	r3, [r3, #96]
 5657 01aa 43F00102 		orr	r2, r3, #1
 5658 01ae 7B68     		ldr	r3, [r7, #4]
 5659 01b0 1A66     		str	r2, [r3, #96]
 5660              	.L294:
2398:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****           }
2399:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         }
2400:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       }
2401:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     }
2402:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
2403:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     /* Conversion complete callback */
2404:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     /* Note: Into callback function "HAL_ADC_ConvCpltCallback()",             */
2405:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     /*       to determine if conversion has been triggered from EOC or EOS,   */
2406:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     /*       possibility to use:                                              */
2407:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
2408:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** #if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
2409:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     hadc->ConvCpltCallback(hadc);
2410:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** #else
2411:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     HAL_ADC_ConvCpltCallback(hadc);
 5661              		.loc 2 2411 5
 5662 01b2 7868     		ldr	r0, [r7, #4]
 5663 01b4 FFF7FEFF 		bl	HAL_ADC_ConvCpltCallback
2412:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** #endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
2413:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
2414:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     /* Clear regular group conversion flag */
2415:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
2416:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     /*       conversion flags clear induces the release of the preserved data.*/
2417:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     /*       Therefore, if the preserved data value is needed, it must be     */
2418:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
2419:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 5664              		.loc 2 2419 5
 5665 01b8 7B68     		ldr	r3, [r7, #4]
 5666 01ba 1B68     		ldr	r3, [r3]
 5667 01bc 0C22     		movs	r2, #12
 5668 01be 1A60     		str	r2, [r3]
 5669              	.L292:
2420:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   }
2421:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
2422:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
2423:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 5670              		.loc 2 2423 18
 5671 01c0 FB69     		ldr	r3, [r7, #28]
 5672 01c2 03F02003 		and	r3, r3, #32
 5673              		.loc 2 2423 6
 5674 01c6 002B     		cmp	r3, #0
 5675 01c8 04D0     		beq	.L308
 5676              		.loc 2 2423 66 discriminator 1
 5677 01ca BB69     		ldr	r3, [r7, #24]
 5678 01cc 03F02003 		and	r3, r3, #32
 5679              		.loc 2 2423 53 discriminator 1
 5680 01d0 002B     		cmp	r3, #0
 5681 01d2 0BD1     		bne	.L309
 5682              	.L308:
ARM GAS  /tmp/ccZ0TYFG.s 			page 280


2424:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 5683              		.loc 2 2424 18 discriminator 3
 5684 01d4 FB69     		ldr	r3, [r7, #28]
 5685 01d6 03F04003 		and	r3, r3, #64
2423:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 5686              		.loc 2 2423 98 discriminator 3
 5687 01da 002B     		cmp	r3, #0
 5688 01dc 00F0B280 		beq	.L310
 5689              		.loc 2 2424 66
 5690 01e0 BB69     		ldr	r3, [r7, #24]
 5691 01e2 03F04003 		and	r3, r3, #64
 5692              		.loc 2 2424 53
 5693 01e6 002B     		cmp	r3, #0
 5694 01e8 00F0AC80 		beq	.L310
 5695              	.L309:
2425:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   {
2426:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     /* Update state machine on conversion status if not in error state */
2427:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 5696              		.loc 2 2427 14
 5697 01ec 7B68     		ldr	r3, [r7, #4]
 5698 01ee DB6D     		ldr	r3, [r3, #92]
 5699              		.loc 2 2427 22
 5700 01f0 03F01003 		and	r3, r3, #16
 5701              		.loc 2 2427 8
 5702 01f4 002B     		cmp	r3, #0
 5703 01f6 05D1     		bne	.L311
2428:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     {
2429:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       /* Set ADC state */
2430:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 5704              		.loc 2 2430 7
 5705 01f8 7B68     		ldr	r3, [r7, #4]
 5706 01fa DB6D     		ldr	r3, [r3, #92]
 5707 01fc 43F40052 		orr	r2, r3, #8192
 5708 0200 7B68     		ldr	r3, [r7, #4]
 5709 0202 DA65     		str	r2, [r3, #92]
 5710              	.L311:
2431:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     }
2432:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
2433:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     /* Retrieve ADC configuration */
2434:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 5711              		.loc 2 2434 46
 5712 0204 7B68     		ldr	r3, [r7, #4]
 5713 0206 1B68     		ldr	r3, [r3]
 5714 0208 1846     		mov	r0, r3
 5715 020a FFF7FEFF 		bl	LL_ADC_INJ_IsTriggerSourceSWStart
 5716 020e F860     		str	r0, [r7, #12]
2435:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 5717              		.loc 2 2435 46
 5718 0210 7B68     		ldr	r3, [r7, #4]
 5719 0212 1B68     		ldr	r3, [r3]
 5720 0214 1846     		mov	r0, r3
 5721 0216 FFF7FEFF 		bl	LL_ADC_REG_IsTriggerSourceSWStart
 5722 021a B860     		str	r0, [r7, #8]
2436:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     /* Get relevant register CFGR in ADC instance of ADC master or slave  */
2437:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     /* in function of multimode state (for devices with multimode         */
2438:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     /* available).                                                        */
2439:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** #if defined(ADC_MULTIMODE_SUPPORT)
ARM GAS  /tmp/ccZ0TYFG.s 			page 281


2440:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 5723              		.loc 2 2440 10
 5724 021c 7B68     		ldr	r3, [r7, #4]
 5725 021e 1B68     		ldr	r3, [r3]
 5726 0220 174A     		ldr	r2, .L341
 5727 0222 9342     		cmp	r3, r2
 5728 0224 09D0     		beq	.L312
 5729              		.loc 2 2440 10 is_stmt 0 discriminator 1
 5730 0226 7B68     		ldr	r3, [r7, #4]
 5731 0228 1B68     		ldr	r3, [r3]
 5732 022a 184A     		ldr	r2, .L341+12
 5733 022c 9342     		cmp	r3, r2
 5734 022e 02D0     		beq	.L313
 5735              		.loc 2 2440 10 discriminator 3
 5736 0230 7B68     		ldr	r3, [r7, #4]
 5737 0232 1B68     		ldr	r3, [r3]
 5738 0234 03E0     		b	.L315
 5739              	.L313:
 5740              		.loc 2 2440 10 discriminator 4
 5741 0236 164B     		ldr	r3, .L341+16
 5742 0238 01E0     		b	.L315
 5743              	.L312:
 5744              		.loc 2 2440 10 discriminator 2
 5745 023a 4FF0A043 		mov	r3, #1342177280
 5746              	.L315:
 5747              		.loc 2 2440 64 is_stmt 1 discriminator 8
 5748 023e 7A68     		ldr	r2, [r7, #4]
 5749 0240 1268     		ldr	r2, [r2]
 5750              		.loc 2 2440 8 discriminator 8
 5751 0242 9342     		cmp	r3, r2
 5752 0244 08D0     		beq	.L316
2441:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 5753              		.loc 2 2441 9
 5754 0246 7B69     		ldr	r3, [r7, #20]
 5755 0248 002B     		cmp	r3, #0
 5756 024a 05D0     		beq	.L316
2442:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 5757              		.loc 2 2442 9
 5758 024c 7B69     		ldr	r3, [r7, #20]
 5759 024e 062B     		cmp	r3, #6
 5760 0250 02D0     		beq	.L316
2443:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 5761              		.loc 2 2443 9
 5762 0252 7B69     		ldr	r3, [r7, #20]
 5763 0254 072B     		cmp	r3, #7
 5764 0256 04D1     		bne	.L317
 5765              	.L316:
2444:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****        )
2445:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     {
2446:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 5766              		.loc 2 2446 18
 5767 0258 7B68     		ldr	r3, [r7, #4]
 5768 025a 1B68     		ldr	r3, [r3]
 5769              		.loc 2 2446 16
 5770 025c DB68     		ldr	r3, [r3, #12]
 5771 025e 3B62     		str	r3, [r7, #32]
 5772 0260 1EE0     		b	.L318
ARM GAS  /tmp/ccZ0TYFG.s 			page 282


 5773              	.L317:
2447:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     }
2448:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     else
2449:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     {
2450:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 5774              		.loc 2 2450 23
 5775 0262 7B68     		ldr	r3, [r7, #4]
 5776 0264 1B68     		ldr	r3, [r3]
 5777 0266 064A     		ldr	r2, .L341
 5778 0268 9342     		cmp	r3, r2
 5779 026a 13D0     		beq	.L319
 5780              		.loc 2 2450 23 is_stmt 0 discriminator 1
 5781 026c 7B68     		ldr	r3, [r7, #4]
 5782 026e 1B68     		ldr	r3, [r3]
 5783 0270 064A     		ldr	r2, .L341+12
 5784 0272 9342     		cmp	r3, r2
 5785 0274 02D0     		beq	.L320
 5786              		.loc 2 2450 23 discriminator 3
 5787 0276 7B68     		ldr	r3, [r7, #4]
 5788 0278 1B68     		ldr	r3, [r3]
 5789 027a 0DE0     		b	.L322
 5790              	.L320:
 5791              		.loc 2 2450 23 discriminator 4
 5792 027c 044B     		ldr	r3, .L341+16
 5793 027e 0BE0     		b	.L322
 5794              	.L342:
 5795              		.align	2
 5796              	.L341:
 5797 0280 00010050 		.word	1342177536
 5798 0284 00030050 		.word	1342178048
 5799 0288 00070050 		.word	1342179072
 5800 028c 00050050 		.word	1342178560
 5801 0290 00040050 		.word	1342178304
 5802              	.L319:
 5803              		.loc 2 2450 23 discriminator 2
 5804 0294 4FF0A043 		mov	r3, #1342177280
 5805              	.L322:
 5806              		.loc 2 2450 21 is_stmt 1 discriminator 8
 5807 0298 3B61     		str	r3, [r7, #16]
2451:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 5808              		.loc 2 2451 16 discriminator 8
 5809 029a 3B69     		ldr	r3, [r7, #16]
 5810 029c DB68     		ldr	r3, [r3, #12]
 5811 029e 3B62     		str	r3, [r7, #32]
 5812              	.L318:
2452:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     }
2453:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** #else
2454:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     tmp_cfgr = READ_REG(hadc->Instance->CFGR);
2455:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** #endif
2456:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
2457:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     /* Disable interruption if no further conversion upcoming by injected     */
2458:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     /* external trigger or by automatic injected conversion with regular      */
2459:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     /* group having no further conversion upcoming (same conditions as        */
2460:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     /* regular group interruption disabling above),                           */
2461:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     /* and if injected scan sequence is completed.                            */
2462:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     if ((tmp_adc_inj_is_trigger_source_sw_start != 0UL)            ||
 5813              		.loc 2 2462 8
ARM GAS  /tmp/ccZ0TYFG.s 			page 283


 5814 02a0 FB68     		ldr	r3, [r7, #12]
 5815 02a2 002B     		cmp	r3, #0
 5816 02a4 0CD1     		bne	.L323
2463:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL)      &&
 5817              		.loc 2 2463 11 discriminator 1
 5818 02a6 3B6A     		ldr	r3, [r7, #32]
 5819 02a8 03F00073 		and	r3, r3, #33554432
2462:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL)      &&
 5820              		.loc 2 2462 68 discriminator 1
 5821 02ac 002B     		cmp	r3, #0
 5822 02ae 42D1     		bne	.L324
 5823              		.loc 2 2463 59
 5824 02b0 BB68     		ldr	r3, [r7, #8]
 5825 02b2 002B     		cmp	r3, #0
 5826 02b4 3FD0     		beq	.L324
2464:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL)  &&
2465:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL))))
 5827              		.loc 2 2465 12
 5828 02b6 3B6A     		ldr	r3, [r7, #32]
 5829 02b8 03F40053 		and	r3, r3, #8192
2464:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL)  &&
 5830              		.loc 2 2464 60
 5831 02bc 002B     		cmp	r3, #0
 5832 02be 3AD1     		bne	.L324
 5833              	.L323:
2466:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     {
2467:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       /* If End of Sequence is reached, disable interrupts */
2468:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 5834              		.loc 2 2468 11
 5835 02c0 7B68     		ldr	r3, [r7, #4]
 5836 02c2 1B68     		ldr	r3, [r3]
 5837 02c4 1B68     		ldr	r3, [r3]
 5838 02c6 03F04003 		and	r3, r3, #64
 5839              		.loc 2 2468 10
 5840 02ca 402B     		cmp	r3, #64
 5841 02cc 33D1     		bne	.L324
2469:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       {
2470:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         /* Particular case if injected contexts queue is enabled:             */
2471:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         /* when the last context has been fully processed, JSQR is reset      */
2472:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         /* by the hardware. Even if no injected conversion is planned to come */
2473:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         /* (queue empty, triggers are ignored), it can start again            */
2474:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         /* immediately after setting a new context (JADSTART is still set).   */
2475:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         /* Therefore, state of HAL ADC injected group is kept to busy.        */
2476:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 5842              		.loc 2 2476 13
 5843 02ce 3B6A     		ldr	r3, [r7, #32]
 5844 02d0 03F40013 		and	r3, r3, #2097152
 5845              		.loc 2 2476 12
 5846 02d4 002B     		cmp	r3, #0
 5847 02d6 2ED1     		bne	.L324
2477:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         {
2478:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****           /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
2479:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****           /* JADSTART==0 (no conversion on going)                             */
2480:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****           if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 5848              		.loc 2 2480 15
 5849 02d8 7B68     		ldr	r3, [r7, #4]
 5850 02da 1B68     		ldr	r3, [r3]
ARM GAS  /tmp/ccZ0TYFG.s 			page 284


 5851 02dc 1846     		mov	r0, r3
 5852 02de FFF7FEFF 		bl	LL_ADC_INJ_IsConversionOngoing
 5853 02e2 0346     		mov	r3, r0
 5854              		.loc 2 2480 14
 5855 02e4 002B     		cmp	r3, #0
 5856 02e6 1AD1     		bne	.L325
2481:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****           {
2482:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****             /* Disable ADC end of sequence conversion interrupt  */
2483:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****             __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 5857              		.loc 2 2483 13
 5858 02e8 7B68     		ldr	r3, [r7, #4]
 5859 02ea 1B68     		ldr	r3, [r3]
 5860 02ec 5A68     		ldr	r2, [r3, #4]
 5861 02ee 7B68     		ldr	r3, [r7, #4]
 5862 02f0 1B68     		ldr	r3, [r3]
 5863 02f2 22F06002 		bic	r2, r2, #96
 5864 02f6 5A60     		str	r2, [r3, #4]
2484:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
2485:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****             /* Set ADC state */
2486:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****             CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 5865              		.loc 2 2486 13
 5866 02f8 7B68     		ldr	r3, [r7, #4]
 5867 02fa DB6D     		ldr	r3, [r3, #92]
 5868 02fc 23F48052 		bic	r2, r3, #4096
 5869 0300 7B68     		ldr	r3, [r7, #4]
 5870 0302 DA65     		str	r2, [r3, #92]
2487:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
2488:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****             if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 5871              		.loc 2 2488 22
 5872 0304 7B68     		ldr	r3, [r7, #4]
 5873 0306 DB6D     		ldr	r3, [r3, #92]
 5874              		.loc 2 2488 30
 5875 0308 03F48073 		and	r3, r3, #256
 5876              		.loc 2 2488 16
 5877 030c 002B     		cmp	r3, #0
 5878 030e 12D1     		bne	.L324
2489:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****             {
2490:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****               SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 5879              		.loc 2 2490 15
 5880 0310 7B68     		ldr	r3, [r7, #4]
 5881 0312 DB6D     		ldr	r3, [r3, #92]
 5882 0314 43F00102 		orr	r2, r3, #1
 5883 0318 7B68     		ldr	r3, [r7, #4]
 5884 031a DA65     		str	r2, [r3, #92]
 5885 031c 0BE0     		b	.L324
 5886              	.L325:
2491:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****             }
2492:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****           }
2493:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****           else
2494:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****           {
2495:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****             /* Update ADC state machine to error */
2496:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****             SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 5887              		.loc 2 2496 13
 5888 031e 7B68     		ldr	r3, [r7, #4]
 5889 0320 DB6D     		ldr	r3, [r3, #92]
 5890 0322 43F01002 		orr	r2, r3, #16
 5891 0326 7B68     		ldr	r3, [r7, #4]
ARM GAS  /tmp/ccZ0TYFG.s 			page 285


 5892 0328 DA65     		str	r2, [r3, #92]
2497:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
2498:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****             /* Set ADC error code to ADC peripheral internal error */
2499:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****             SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 5893              		.loc 2 2499 13
 5894 032a 7B68     		ldr	r3, [r7, #4]
 5895 032c 1B6E     		ldr	r3, [r3, #96]
 5896 032e 43F00102 		orr	r2, r3, #1
 5897 0332 7B68     		ldr	r3, [r7, #4]
 5898 0334 1A66     		str	r2, [r3, #96]
 5899              	.L324:
2500:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****           }
2501:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         }
2502:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       }
2503:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     }
2504:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
2505:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     /* Injected Conversion complete callback */
2506:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     /* Note:  HAL_ADCEx_InjectedConvCpltCallback can resort to
2507:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****               if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_JEOS)) or
2508:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****               if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_JEOC)) to determine whether
2509:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****               interruption has been triggered by end of conversion or end of
2510:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****               sequence.    */
2511:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** #if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
2512:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     hadc->InjectedConvCpltCallback(hadc);
2513:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** #else
2514:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     HAL_ADCEx_InjectedConvCpltCallback(hadc);
 5900              		.loc 2 2514 5
 5901 0336 7868     		ldr	r0, [r7, #4]
 5902 0338 FFF7FEFF 		bl	HAL_ADCEx_InjectedConvCpltCallback
2515:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** #endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
2516:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
2517:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     /* Clear injected group conversion flag */
2518:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 5903              		.loc 2 2518 5
 5904 033c 7B68     		ldr	r3, [r7, #4]
 5905 033e 1B68     		ldr	r3, [r3]
 5906 0340 6022     		movs	r2, #96
 5907 0342 1A60     		str	r2, [r3]
 5908              	.L310:
2519:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   }
2520:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
2521:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   /* ========== Check Analog watchdog 1 flag ========== */
2522:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 5909              		.loc 2 2522 17
 5910 0344 FB69     		ldr	r3, [r7, #28]
 5911 0346 03F08003 		and	r3, r3, #128
 5912              		.loc 2 2522 6
 5913 034a 002B     		cmp	r3, #0
 5914 034c 11D0     		beq	.L327
 5915              		.loc 2 2522 65 discriminator 1
 5916 034e BB69     		ldr	r3, [r7, #24]
 5917 0350 03F08003 		and	r3, r3, #128
 5918              		.loc 2 2522 52 discriminator 1
 5919 0354 002B     		cmp	r3, #0
 5920 0356 0CD0     		beq	.L327
2523:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   {
2524:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     /* Set ADC state */
ARM GAS  /tmp/ccZ0TYFG.s 			page 286


2525:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 5921              		.loc 2 2525 5
 5922 0358 7B68     		ldr	r3, [r7, #4]
 5923 035a DB6D     		ldr	r3, [r3, #92]
 5924 035c 43F48032 		orr	r2, r3, #65536
 5925 0360 7B68     		ldr	r3, [r7, #4]
 5926 0362 DA65     		str	r2, [r3, #92]
2526:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
2527:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     /* Level out of window 1 callback */
2528:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** #if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
2529:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     hadc->LevelOutOfWindowCallback(hadc);
2530:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** #else
2531:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     HAL_ADC_LevelOutOfWindowCallback(hadc);
 5927              		.loc 2 2531 5
 5928 0364 7868     		ldr	r0, [r7, #4]
 5929 0366 FFF7FEFF 		bl	HAL_ADC_LevelOutOfWindowCallback
2532:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** #endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
2533:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
2534:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     /* Clear ADC analog watchdog flag */
2535:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 5930              		.loc 2 2535 5
 5931 036a 7B68     		ldr	r3, [r7, #4]
 5932 036c 1B68     		ldr	r3, [r3]
 5933 036e 8022     		movs	r2, #128
 5934 0370 1A60     		str	r2, [r3]
 5935              	.L327:
2536:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   }
2537:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
2538:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   /* ========== Check analog watchdog 2 flag ========== */
2539:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 5936              		.loc 2 2539 17
 5937 0372 FB69     		ldr	r3, [r7, #28]
 5938 0374 03F48073 		and	r3, r3, #256
 5939              		.loc 2 2539 6
 5940 0378 002B     		cmp	r3, #0
 5941 037a 12D0     		beq	.L328
 5942              		.loc 2 2539 65 discriminator 1
 5943 037c BB69     		ldr	r3, [r7, #24]
 5944 037e 03F48073 		and	r3, r3, #256
 5945              		.loc 2 2539 52 discriminator 1
 5946 0382 002B     		cmp	r3, #0
 5947 0384 0DD0     		beq	.L328
2540:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   {
2541:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     /* Set ADC state */
2542:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 5948              		.loc 2 2542 5
 5949 0386 7B68     		ldr	r3, [r7, #4]
 5950 0388 DB6D     		ldr	r3, [r3, #92]
 5951 038a 43F40032 		orr	r2, r3, #131072
 5952 038e 7B68     		ldr	r3, [r7, #4]
 5953 0390 DA65     		str	r2, [r3, #92]
2543:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
2544:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     /* Level out of window 2 callback */
2545:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** #if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
2546:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     hadc->LevelOutOfWindow2Callback(hadc);
2547:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** #else
2548:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
ARM GAS  /tmp/ccZ0TYFG.s 			page 287


 5954              		.loc 2 2548 5
 5955 0392 7868     		ldr	r0, [r7, #4]
 5956 0394 FFF7FEFF 		bl	HAL_ADCEx_LevelOutOfWindow2Callback
2549:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** #endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
2550:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
2551:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     /* Clear ADC analog watchdog flag */
2552:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 5957              		.loc 2 2552 5
 5958 0398 7B68     		ldr	r3, [r7, #4]
 5959 039a 1B68     		ldr	r3, [r3]
 5960 039c 4FF48072 		mov	r2, #256
 5961 03a0 1A60     		str	r2, [r3]
 5962              	.L328:
2553:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   }
2554:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
2555:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   /* ========== Check analog watchdog 3 flag ========== */
2556:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 5963              		.loc 2 2556 17
 5964 03a2 FB69     		ldr	r3, [r7, #28]
 5965 03a4 03F40073 		and	r3, r3, #512
 5966              		.loc 2 2556 6
 5967 03a8 002B     		cmp	r3, #0
 5968 03aa 12D0     		beq	.L329
 5969              		.loc 2 2556 65 discriminator 1
 5970 03ac BB69     		ldr	r3, [r7, #24]
 5971 03ae 03F40073 		and	r3, r3, #512
 5972              		.loc 2 2556 52 discriminator 1
 5973 03b2 002B     		cmp	r3, #0
 5974 03b4 0DD0     		beq	.L329
2557:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   {
2558:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     /* Set ADC state */
2559:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 5975              		.loc 2 2559 5
 5976 03b6 7B68     		ldr	r3, [r7, #4]
 5977 03b8 DB6D     		ldr	r3, [r3, #92]
 5978 03ba 43F48022 		orr	r2, r3, #262144
 5979 03be 7B68     		ldr	r3, [r7, #4]
 5980 03c0 DA65     		str	r2, [r3, #92]
2560:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
2561:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     /* Level out of window 3 callback */
2562:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** #if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
2563:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     hadc->LevelOutOfWindow3Callback(hadc);
2564:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** #else
2565:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 5981              		.loc 2 2565 5
 5982 03c2 7868     		ldr	r0, [r7, #4]
 5983 03c4 FFF7FEFF 		bl	HAL_ADCEx_LevelOutOfWindow3Callback
2566:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** #endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
2567:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
2568:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     /* Clear ADC analog watchdog flag */
2569:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 5984              		.loc 2 2569 5
 5985 03c8 7B68     		ldr	r3, [r7, #4]
 5986 03ca 1B68     		ldr	r3, [r3]
 5987 03cc 4FF40072 		mov	r2, #512
 5988 03d0 1A60     		str	r2, [r3]
 5989              	.L329:
ARM GAS  /tmp/ccZ0TYFG.s 			page 288


2570:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   }
2571:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
2572:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   /* ========== Check Overrun flag ========== */
2573:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 5990              		.loc 2 2573 17
 5991 03d2 FB69     		ldr	r3, [r7, #28]
 5992 03d4 03F01003 		and	r3, r3, #16
 5993              		.loc 2 2573 6
 5994 03d8 002B     		cmp	r3, #0
 5995 03da 43D0     		beq	.L330
 5996              		.loc 2 2573 63 discriminator 1
 5997 03dc BB69     		ldr	r3, [r7, #24]
 5998 03de 03F01003 		and	r3, r3, #16
 5999              		.loc 2 2573 50 discriminator 1
 6000 03e2 002B     		cmp	r3, #0
 6001 03e4 3ED0     		beq	.L330
2574:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   {
2575:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     /* If overrun is set to overwrite previous data (default setting),        */
2576:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     /* overrun event is not considered as an error.                           */
2577:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     /* (cf ref manual "Managing conversions without using the DMA and without */
2578:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     /* overrun ")                                                             */
2579:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     /* Exception for usage with DMA overrun event always considered as an     */
2580:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     /* error.                                                                 */
2581:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 6002              		.loc 2 2581 19
 6003 03e6 7B68     		ldr	r3, [r7, #4]
 6004 03e8 DB6B     		ldr	r3, [r3, #60]
 6005              		.loc 2 2581 8
 6006 03ea 002B     		cmp	r3, #0
 6007 03ec 02D1     		bne	.L331
2582:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     {
2583:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       overrun_error = 1UL;
 6008              		.loc 2 2583 21
 6009 03ee 0123     		movs	r3, #1
 6010 03f0 7B62     		str	r3, [r7, #36]
 6011 03f2 21E0     		b	.L332
 6012              	.L331:
2584:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     }
2585:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     else
2586:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     {
2587:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       /* Check DMA configuration */
2588:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** #if defined(ADC_MULTIMODE_SUPPORT)
2589:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 6013              		.loc 2 2589 10
 6014 03f4 7B69     		ldr	r3, [r7, #20]
 6015 03f6 002B     		cmp	r3, #0
 6016 03f8 15D0     		beq	.L333
2590:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       {
2591:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         /* Multimode (when feature is available) is enabled,
2592:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****            Common Control Register MDMA bits must be checked. */
2593:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_RE
 6017              		.loc 2 2593 40
 6018 03fa 7B68     		ldr	r3, [r7, #4]
 6019 03fc 1B68     		ldr	r3, [r3]
 6020              		.loc 2 2593 13
 6021 03fe B3F1A04F 		cmp	r3, #1342177280
 6022 0402 04D0     		beq	.L334
ARM GAS  /tmp/ccZ0TYFG.s 			page 289


 6023              		.loc 2 2593 40 discriminator 2
 6024 0404 7B68     		ldr	r3, [r7, #4]
 6025 0406 1B68     		ldr	r3, [r3]
 6026 0408 274A     		ldr	r2, .L343
 6027 040a 9342     		cmp	r3, r2
 6028 040c 01D1     		bne	.L335
 6029              	.L334:
 6030              		.loc 2 2593 13 discriminator 3
 6031 040e 274B     		ldr	r3, .L343+4
 6032 0410 00E0     		b	.L336
 6033              	.L335:
 6034              		.loc 2 2593 13 is_stmt 0 discriminator 4
 6035 0412 274B     		ldr	r3, .L343+8
 6036              	.L336:
 6037              		.loc 2 2593 13 discriminator 6
 6038 0414 1846     		mov	r0, r3
 6039 0416 FFF7FEFF 		bl	LL_ADC_GetMultiDMATransfer
 6040 041a 0346     		mov	r3, r0
 6041              		.loc 2 2593 12 is_stmt 1 discriminator 6
 6042 041c 002B     		cmp	r3, #0
 6043 041e 0BD0     		beq	.L332
2594:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         {
2595:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****           overrun_error = 1UL;
 6044              		.loc 2 2595 25
 6045 0420 0123     		movs	r3, #1
 6046 0422 7B62     		str	r3, [r7, #36]
 6047 0424 08E0     		b	.L332
 6048              	.L333:
2596:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         }
2597:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       }
2598:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       else
2599:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** #endif
2600:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       {
2601:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         /* Multimode not set or feature not available or ADC independent */
2602:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 6049              		.loc 2 2602 18
 6050 0426 7B68     		ldr	r3, [r7, #4]
 6051 0428 1B68     		ldr	r3, [r3]
 6052              		.loc 2 2602 28
 6053 042a DB68     		ldr	r3, [r3, #12]
 6054              		.loc 2 2602 35
 6055 042c 03F00103 		and	r3, r3, #1
 6056              		.loc 2 2602 12
 6057 0430 002B     		cmp	r3, #0
 6058 0432 01D0     		beq	.L332
2603:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         {
2604:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****           overrun_error = 1UL;
 6059              		.loc 2 2604 25
 6060 0434 0123     		movs	r3, #1
 6061 0436 7B62     		str	r3, [r7, #36]
 6062              	.L332:
2605:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         }
2606:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       }
2607:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     }
2608:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
2609:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     if (overrun_error == 1UL)
 6063              		.loc 2 2609 8
ARM GAS  /tmp/ccZ0TYFG.s 			page 290


 6064 0438 7B6A     		ldr	r3, [r7, #36]
 6065 043a 012B     		cmp	r3, #1
 6066 043c 0ED1     		bne	.L338
2610:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     {
2611:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       /* Change ADC state to error state */
2612:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 6067              		.loc 2 2612 7
 6068 043e 7B68     		ldr	r3, [r7, #4]
 6069 0440 DB6D     		ldr	r3, [r3, #92]
 6070 0442 43F48062 		orr	r2, r3, #1024
 6071 0446 7B68     		ldr	r3, [r7, #4]
 6072 0448 DA65     		str	r2, [r3, #92]
2613:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
2614:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       /* Set ADC error code to overrun */
2615:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 6073              		.loc 2 2615 7
 6074 044a 7B68     		ldr	r3, [r7, #4]
 6075 044c 1B6E     		ldr	r3, [r3, #96]
 6076 044e 43F00202 		orr	r2, r3, #2
 6077 0452 7B68     		ldr	r3, [r7, #4]
 6078 0454 1A66     		str	r2, [r3, #96]
2616:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
2617:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       /* Error callback */
2618:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       /* Note: In case of overrun, ADC conversion data is preserved until     */
2619:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       /*       flag OVR is reset.                                             */
2620:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       /*       Therefore, old ADC conversion data can be retrieved in         */
2621:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       /*       function "HAL_ADC_ErrorCallback()".                            */
2622:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** #if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
2623:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       hadc->ErrorCallback(hadc);
2624:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** #else
2625:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       HAL_ADC_ErrorCallback(hadc);
 6079              		.loc 2 2625 7
 6080 0456 7868     		ldr	r0, [r7, #4]
 6081 0458 FFF7FEFF 		bl	HAL_ADC_ErrorCallback
 6082              	.L338:
2626:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** #endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
2627:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     }
2628:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
2629:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     /* Clear ADC overrun flag */
2630:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 6083              		.loc 2 2630 5
 6084 045c 7B68     		ldr	r3, [r7, #4]
 6085 045e 1B68     		ldr	r3, [r3]
 6086 0460 1022     		movs	r2, #16
 6087 0462 1A60     		str	r2, [r3]
 6088              	.L330:
2631:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   }
2632:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
2633:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   /* ========== Check Injected context queue overflow flag ========== */
2634:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 6089              		.loc 2 2634 17
 6090 0464 FB69     		ldr	r3, [r7, #28]
 6091 0466 03F48063 		and	r3, r3, #1024
 6092              		.loc 2 2634 6
 6093 046a 002B     		cmp	r3, #0
 6094 046c 18D0     		beq	.L340
 6095              		.loc 2 2634 67 discriminator 1
ARM GAS  /tmp/ccZ0TYFG.s 			page 291


 6096 046e BB69     		ldr	r3, [r7, #24]
 6097 0470 03F48063 		and	r3, r3, #1024
 6098              		.loc 2 2634 54 discriminator 1
 6099 0474 002B     		cmp	r3, #0
 6100 0476 13D0     		beq	.L340
2635:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   {
2636:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     /* Change ADC state to overrun state */
2637:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 6101              		.loc 2 2637 5
 6102 0478 7B68     		ldr	r3, [r7, #4]
 6103 047a DB6D     		ldr	r3, [r3, #92]
 6104 047c 43F48042 		orr	r2, r3, #16384
 6105 0480 7B68     		ldr	r3, [r7, #4]
 6106 0482 DA65     		str	r2, [r3, #92]
2638:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
2639:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     /* Set ADC error code to Injected context queue overflow */
2640:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 6107              		.loc 2 2640 5
 6108 0484 7B68     		ldr	r3, [r7, #4]
 6109 0486 1B6E     		ldr	r3, [r3, #96]
 6110 0488 43F00802 		orr	r2, r3, #8
 6111 048c 7B68     		ldr	r3, [r7, #4]
 6112 048e 1A66     		str	r2, [r3, #96]
2641:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
2642:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     /* Clear the Injected context queue overflow flag */
2643:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 6113              		.loc 2 2643 5
 6114 0490 7B68     		ldr	r3, [r7, #4]
 6115 0492 1B68     		ldr	r3, [r3]
 6116 0494 4FF48062 		mov	r2, #1024
 6117 0498 1A60     		str	r2, [r3]
2644:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
2645:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     /* Injected context queue overflow callback */
2646:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** #if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
2647:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     hadc->InjectedQueueOverflowCallback(hadc);
2648:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** #else
2649:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 6118              		.loc 2 2649 5
 6119 049a 7868     		ldr	r0, [r7, #4]
 6120 049c FFF7FEFF 		bl	HAL_ADCEx_InjectedQueueOverflowCallback
 6121              	.L340:
2650:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** #endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
2651:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   }
2652:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
2653:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** }
 6122              		.loc 2 2653 1
 6123 04a0 00BF     		nop
 6124 04a2 2837     		adds	r7, r7, #40
 6125              	.LCFI323:
 6126              		.cfi_def_cfa_offset 8
 6127 04a4 BD46     		mov	sp, r7
 6128              	.LCFI324:
 6129              		.cfi_def_cfa_register 13
 6130              		@ sp needed
 6131 04a6 80BD     		pop	{r7, pc}
 6132              	.L344:
 6133              		.align	2
ARM GAS  /tmp/ccZ0TYFG.s 			page 292


 6134              	.L343:
 6135 04a8 00010050 		.word	1342177536
 6136 04ac 00030050 		.word	1342178048
 6137 04b0 00070050 		.word	1342179072
 6138              		.cfi_endproc
 6139              	.LFE340:
 6141              		.section	.text.HAL_ADC_ConvCpltCallback,"ax",%progbits
 6142              		.align	1
 6143              		.weak	HAL_ADC_ConvCpltCallback
 6144              		.syntax unified
 6145              		.thumb
 6146              		.thumb_func
 6147              		.fpu fpv4-sp-d16
 6149              	HAL_ADC_ConvCpltCallback:
 6150              	.LFB341:
2654:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
2655:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** /**
2656:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   * @brief  Conversion complete callback in non-blocking mode.
2657:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   * @param hadc ADC handle
2658:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   * @retval None
2659:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   */
2660:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** __weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
2661:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** {
 6151              		.loc 2 2661 1
 6152              		.cfi_startproc
 6153              		@ args = 0, pretend = 0, frame = 8
 6154              		@ frame_needed = 1, uses_anonymous_args = 0
 6155              		@ link register save eliminated.
 6156 0000 80B4     		push	{r7}
 6157              	.LCFI325:
 6158              		.cfi_def_cfa_offset 4
 6159              		.cfi_offset 7, -4
 6160 0002 83B0     		sub	sp, sp, #12
 6161              	.LCFI326:
 6162              		.cfi_def_cfa_offset 16
 6163 0004 00AF     		add	r7, sp, #0
 6164              	.LCFI327:
 6165              		.cfi_def_cfa_register 7
 6166 0006 7860     		str	r0, [r7, #4]
2662:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   /* Prevent unused argument(s) compilation warning */
2663:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   UNUSED(hadc);
2664:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
2665:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   /* NOTE : This function should not be modified. When the callback is needed,
2666:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****             function HAL_ADC_ConvCpltCallback must be implemented in the user file.
2667:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****    */
2668:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** }
 6167              		.loc 2 2668 1
 6168 0008 00BF     		nop
 6169 000a 0C37     		adds	r7, r7, #12
 6170              	.LCFI328:
 6171              		.cfi_def_cfa_offset 4
 6172 000c BD46     		mov	sp, r7
 6173              	.LCFI329:
 6174              		.cfi_def_cfa_register 13
 6175              		@ sp needed
 6176 000e 5DF8047B 		ldr	r7, [sp], #4
 6177              	.LCFI330:
ARM GAS  /tmp/ccZ0TYFG.s 			page 293


 6178              		.cfi_restore 7
 6179              		.cfi_def_cfa_offset 0
 6180 0012 7047     		bx	lr
 6181              		.cfi_endproc
 6182              	.LFE341:
 6184              		.section	.text.HAL_ADC_ConvHalfCpltCallback,"ax",%progbits
 6185              		.align	1
 6186              		.weak	HAL_ADC_ConvHalfCpltCallback
 6187              		.syntax unified
 6188              		.thumb
 6189              		.thumb_func
 6190              		.fpu fpv4-sp-d16
 6192              	HAL_ADC_ConvHalfCpltCallback:
 6193              	.LFB342:
2669:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
2670:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** /**
2671:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   * @brief  Conversion DMA half-transfer callback in non-blocking mode.
2672:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   * @param hadc ADC handle
2673:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   * @retval None
2674:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   */
2675:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** __weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
2676:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** {
 6194              		.loc 2 2676 1
 6195              		.cfi_startproc
 6196              		@ args = 0, pretend = 0, frame = 8
 6197              		@ frame_needed = 1, uses_anonymous_args = 0
 6198              		@ link register save eliminated.
 6199 0000 80B4     		push	{r7}
 6200              	.LCFI331:
 6201              		.cfi_def_cfa_offset 4
 6202              		.cfi_offset 7, -4
 6203 0002 83B0     		sub	sp, sp, #12
 6204              	.LCFI332:
 6205              		.cfi_def_cfa_offset 16
 6206 0004 00AF     		add	r7, sp, #0
 6207              	.LCFI333:
 6208              		.cfi_def_cfa_register 7
 6209 0006 7860     		str	r0, [r7, #4]
2677:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   /* Prevent unused argument(s) compilation warning */
2678:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   UNUSED(hadc);
2679:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
2680:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   /* NOTE : This function should not be modified. When the callback is needed,
2681:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****             function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
2682:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   */
2683:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** }
 6210              		.loc 2 2683 1
 6211 0008 00BF     		nop
 6212 000a 0C37     		adds	r7, r7, #12
 6213              	.LCFI334:
 6214              		.cfi_def_cfa_offset 4
 6215 000c BD46     		mov	sp, r7
 6216              	.LCFI335:
 6217              		.cfi_def_cfa_register 13
 6218              		@ sp needed
 6219 000e 5DF8047B 		ldr	r7, [sp], #4
 6220              	.LCFI336:
 6221              		.cfi_restore 7
ARM GAS  /tmp/ccZ0TYFG.s 			page 294


 6222              		.cfi_def_cfa_offset 0
 6223 0012 7047     		bx	lr
 6224              		.cfi_endproc
 6225              	.LFE342:
 6227              		.section	.text.HAL_ADC_LevelOutOfWindowCallback,"ax",%progbits
 6228              		.align	1
 6229              		.weak	HAL_ADC_LevelOutOfWindowCallback
 6230              		.syntax unified
 6231              		.thumb
 6232              		.thumb_func
 6233              		.fpu fpv4-sp-d16
 6235              	HAL_ADC_LevelOutOfWindowCallback:
 6236              	.LFB343:
2684:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
2685:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** /**
2686:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   * @brief  Analog watchdog 1 callback in non-blocking mode.
2687:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   * @param hadc ADC handle
2688:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   * @retval None
2689:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   */
2690:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** __weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
2691:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** {
 6237              		.loc 2 2691 1
 6238              		.cfi_startproc
 6239              		@ args = 0, pretend = 0, frame = 8
 6240              		@ frame_needed = 1, uses_anonymous_args = 0
 6241              		@ link register save eliminated.
 6242 0000 80B4     		push	{r7}
 6243              	.LCFI337:
 6244              		.cfi_def_cfa_offset 4
 6245              		.cfi_offset 7, -4
 6246 0002 83B0     		sub	sp, sp, #12
 6247              	.LCFI338:
 6248              		.cfi_def_cfa_offset 16
 6249 0004 00AF     		add	r7, sp, #0
 6250              	.LCFI339:
 6251              		.cfi_def_cfa_register 7
 6252 0006 7860     		str	r0, [r7, #4]
2692:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   /* Prevent unused argument(s) compilation warning */
2693:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   UNUSED(hadc);
2694:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
2695:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   /* NOTE : This function should not be modified. When the callback is needed,
2696:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****             function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
2697:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   */
2698:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** }
 6253              		.loc 2 2698 1
 6254 0008 00BF     		nop
 6255 000a 0C37     		adds	r7, r7, #12
 6256              	.LCFI340:
 6257              		.cfi_def_cfa_offset 4
 6258 000c BD46     		mov	sp, r7
 6259              	.LCFI341:
 6260              		.cfi_def_cfa_register 13
 6261              		@ sp needed
 6262 000e 5DF8047B 		ldr	r7, [sp], #4
 6263              	.LCFI342:
 6264              		.cfi_restore 7
 6265              		.cfi_def_cfa_offset 0
ARM GAS  /tmp/ccZ0TYFG.s 			page 295


 6266 0012 7047     		bx	lr
 6267              		.cfi_endproc
 6268              	.LFE343:
 6270              		.section	.text.HAL_ADC_ErrorCallback,"ax",%progbits
 6271              		.align	1
 6272              		.weak	HAL_ADC_ErrorCallback
 6273              		.syntax unified
 6274              		.thumb
 6275              		.thumb_func
 6276              		.fpu fpv4-sp-d16
 6278              	HAL_ADC_ErrorCallback:
 6279              	.LFB344:
2699:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
2700:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** /**
2701:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   * @brief  ADC error callback in non-blocking mode
2702:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   *         (ADC conversion with interruption or transfer by DMA).
2703:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   * @note   In case of error due to overrun when using ADC with DMA transfer
2704:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   *         (HAL ADC handle parameter "ErrorCode" to state "HAL_ADC_ERROR_OVR"):
2705:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   *         - Reinitialize the DMA using function "HAL_ADC_Stop_DMA()".
2706:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   *         - If needed, restart a new ADC conversion using function
2707:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   *           "HAL_ADC_Start_DMA()"
2708:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   *           (this function is also clearing overrun flag)
2709:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   * @param hadc ADC handle
2710:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   * @retval None
2711:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   */
2712:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** __weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
2713:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** {
 6280              		.loc 2 2713 1
 6281              		.cfi_startproc
 6282              		@ args = 0, pretend = 0, frame = 8
 6283              		@ frame_needed = 1, uses_anonymous_args = 0
 6284              		@ link register save eliminated.
 6285 0000 80B4     		push	{r7}
 6286              	.LCFI343:
 6287              		.cfi_def_cfa_offset 4
 6288              		.cfi_offset 7, -4
 6289 0002 83B0     		sub	sp, sp, #12
 6290              	.LCFI344:
 6291              		.cfi_def_cfa_offset 16
 6292 0004 00AF     		add	r7, sp, #0
 6293              	.LCFI345:
 6294              		.cfi_def_cfa_register 7
 6295 0006 7860     		str	r0, [r7, #4]
2714:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   /* Prevent unused argument(s) compilation warning */
2715:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   UNUSED(hadc);
2716:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
2717:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   /* NOTE : This function should not be modified. When the callback is needed,
2718:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****             function HAL_ADC_ErrorCallback must be implemented in the user file.
2719:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   */
2720:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** }
 6296              		.loc 2 2720 1
 6297 0008 00BF     		nop
 6298 000a 0C37     		adds	r7, r7, #12
 6299              	.LCFI346:
 6300              		.cfi_def_cfa_offset 4
 6301 000c BD46     		mov	sp, r7
 6302              	.LCFI347:
ARM GAS  /tmp/ccZ0TYFG.s 			page 296


 6303              		.cfi_def_cfa_register 13
 6304              		@ sp needed
 6305 000e 5DF8047B 		ldr	r7, [sp], #4
 6306              	.LCFI348:
 6307              		.cfi_restore 7
 6308              		.cfi_def_cfa_offset 0
 6309 0012 7047     		bx	lr
 6310              		.cfi_endproc
 6311              	.LFE344:
 6313              		.section	.text.HAL_ADC_ConfigChannel,"ax",%progbits
 6314              		.align	1
 6315              		.global	HAL_ADC_ConfigChannel
 6316              		.syntax unified
 6317              		.thumb
 6318              		.thumb_func
 6319              		.fpu fpv4-sp-d16
 6321              	HAL_ADC_ConfigChannel:
 6322              	.LFB345:
2721:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
2722:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** /**
2723:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   * @}
2724:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   */
2725:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
2726:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** /** @defgroup ADC_Exported_Functions_Group3 Peripheral Control functions
2727:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   * @brief    Peripheral Control functions
2728:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   *
2729:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** @verbatim
2730:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****  ===============================================================================
2731:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****              ##### Peripheral Control functions #####
2732:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****  ===============================================================================
2733:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     [..]  This section provides functions allowing to:
2734:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       (+) Configure channels on regular group
2735:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       (+) Configure the analog watchdog
2736:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
2737:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** @endverbatim
2738:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   * @{
2739:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   */
2740:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
2741:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** /**
2742:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   * @brief  Configure a channel to be assigned to ADC group regular.
2743:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   * @note   In case of usage of internal measurement channels:
2744:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   *         Vbat/VrefInt/TempSensor.
2745:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   *         These internal paths can be disabled using function
2746:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   *         HAL_ADC_DeInit().
2747:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   * @note   Possibility to update parameters on the fly:
2748:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   *         This function initializes channel into ADC group regular,
2749:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   *         following calls to this function can be used to reconfigure
2750:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   *         some parameters of structure "ADC_ChannelConfTypeDef" on the fly,
2751:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   *         without resetting the ADC.
2752:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   *         The setting of these parameters is conditioned to ADC state:
2753:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   *         Refer to comments of structure "ADC_ChannelConfTypeDef".
2754:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   * @param hadc ADC handle
2755:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   * @param sConfig Structure of ADC channel assigned to ADC group regular.
2756:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   * @retval HAL status
2757:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   */
2758:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
2759:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** {
ARM GAS  /tmp/ccZ0TYFG.s 			page 297


 6323              		.loc 2 2759 1
 6324              		.cfi_startproc
 6325              		@ args = 0, pretend = 0, frame = 152
 6326              		@ frame_needed = 1, uses_anonymous_args = 0
 6327 0000 80B5     		push	{r7, lr}
 6328              	.LCFI349:
 6329              		.cfi_def_cfa_offset 8
 6330              		.cfi_offset 7, -8
 6331              		.cfi_offset 14, -4
 6332 0002 A6B0     		sub	sp, sp, #152
 6333              	.LCFI350:
 6334              		.cfi_def_cfa_offset 160
 6335 0004 00AF     		add	r7, sp, #0
 6336              	.LCFI351:
 6337              		.cfi_def_cfa_register 7
 6338 0006 7860     		str	r0, [r7, #4]
 6339 0008 3960     		str	r1, [r7]
2760:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 6340              		.loc 2 2760 21
 6341 000a 0023     		movs	r3, #0
 6342 000c 87F89730 		strb	r3, [r7, #151]
2761:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   uint32_t tmpOffsetShifted;
2762:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   uint32_t tmp_config_internal_channel;
2763:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   __IO uint32_t wait_loop_index = 0;
 6343              		.loc 2 2763 17
 6344 0010 0023     		movs	r3, #0
 6345 0012 BB60     		str	r3, [r7, #8]
2764:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   uint32_t tmp_adc_is_conversion_on_going_regular;
2765:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   uint32_t tmp_adc_is_conversion_on_going_injected;
2766:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
2767:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   /* Check the parameters */
2768:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
2769:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
2770:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
2771:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
2772:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
2773:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   assert_param(IS_ADC_RANGE(ADC_GET_RESOLUTION(hadc), sConfig->Offset));
2774:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
2775:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
2776:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****      ignored (considered as reset) */
2777:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENAB
2778:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
2779:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   /* Verification of channel number */
2780:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
2781:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   {
2782:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     assert_param(IS_ADC_CHANNEL(hadc, sConfig->Channel));
2783:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   }
2784:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   else
2785:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   {
2786:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
2787:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   }
2788:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
2789:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   /* Process locked */
2790:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   __HAL_LOCK(hadc);
 6346              		.loc 2 2790 3
 6347 0014 7B68     		ldr	r3, [r7, #4]
 6348 0016 93F85830 		ldrb	r3, [r3, #88]	@ zero_extendqisi2
ARM GAS  /tmp/ccZ0TYFG.s 			page 298


 6349 001a 012B     		cmp	r3, #1
 6350 001c 01D1     		bne	.L350
 6351              		.loc 2 2790 3 is_stmt 0 discriminator 1
 6352 001e 0223     		movs	r3, #2
 6353 0020 8EE3     		b	.L351
 6354              	.L350:
 6355              		.loc 2 2790 3 discriminator 2
 6356 0022 7B68     		ldr	r3, [r7, #4]
 6357 0024 0122     		movs	r2, #1
 6358 0026 83F85820 		strb	r2, [r3, #88]
2791:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
2792:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   /* Parameters update conditioned to ADC state:                              */
2793:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   /* Parameters that can be updated when ADC is disabled or enabled without   */
2794:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   /* conversion on going on regular group:                                    */
2795:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   /*  - Channel number                                                        */
2796:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   /*  - Channel rank                                                          */
2797:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 6359              		.loc 2 2797 7 is_stmt 1 discriminator 2
 6360 002a 7B68     		ldr	r3, [r7, #4]
 6361 002c 1B68     		ldr	r3, [r3]
 6362 002e 1846     		mov	r0, r3
 6363 0030 FFF7FEFF 		bl	LL_ADC_REG_IsConversionOngoing
 6364 0034 0346     		mov	r3, r0
 6365              		.loc 2 2797 6 discriminator 2
 6366 0036 002B     		cmp	r3, #0
 6367 0038 40F06F83 		bne	.L352
2798:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   {
2799:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     /* Set ADC group regular sequence: channel on the selected scan sequence rank */
2800:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 6368              		.loc 2 2800 5
 6369 003c 7B68     		ldr	r3, [r7, #4]
 6370 003e 1868     		ldr	r0, [r3]
 6371 0040 3B68     		ldr	r3, [r7]
 6372 0042 5968     		ldr	r1, [r3, #4]
 6373 0044 3B68     		ldr	r3, [r7]
 6374 0046 1B68     		ldr	r3, [r3]
 6375 0048 1A46     		mov	r2, r3
 6376 004a FFF7FEFF 		bl	LL_ADC_REG_SetSequencerRanks
2801:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
2802:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     /* Parameters update conditioned to ADC state:                              */
2803:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     /* Parameters that can be updated when ADC is disabled or enabled without   */
2804:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     /* conversion on going on regular group:                                    */
2805:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     /*  - Channel sampling time                                                 */
2806:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     /*  - Channel offset                                                        */
2807:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 6377              		.loc 2 2807 46
 6378 004e 7B68     		ldr	r3, [r7, #4]
 6379 0050 1B68     		ldr	r3, [r3]
 6380 0052 1846     		mov	r0, r3
 6381 0054 FFF7FEFF 		bl	LL_ADC_REG_IsConversionOngoing
 6382 0058 C7F89000 		str	r0, [r7, #144]
2808:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 6383              		.loc 2 2808 47
 6384 005c 7B68     		ldr	r3, [r7, #4]
 6385 005e 1B68     		ldr	r3, [r3]
 6386 0060 1846     		mov	r0, r3
 6387 0062 FFF7FEFF 		bl	LL_ADC_INJ_IsConversionOngoing
ARM GAS  /tmp/ccZ0TYFG.s 			page 299


 6388 0066 C7F88C00 		str	r0, [r7, #140]
2809:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 6389              		.loc 2 2809 8
 6390 006a D7F89030 		ldr	r3, [r7, #144]
 6391 006e 002B     		cmp	r3, #0
 6392 0070 40F07B81 		bne	.L353
2810:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         && (tmp_adc_is_conversion_on_going_injected == 0UL)
 6393              		.loc 2 2810 9
 6394 0074 D7F88C30 		ldr	r3, [r7, #140]
 6395 0078 002B     		cmp	r3, #0
 6396 007a 40F07681 		bne	.L353
2811:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****        )
2812:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     {
2813:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
2814:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 6397              		.loc 2 2814 18
 6398 007e 3B68     		ldr	r3, [r7]
 6399 0080 9B68     		ldr	r3, [r3, #8]
 6400              		.loc 2 2814 10
 6401 0082 B3F1004F 		cmp	r3, #-2147483648
 6402 0086 0FD1     		bne	.L354
2815:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       {
2816:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         /* Set sampling time of the selected ADC channel */
2817:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES
 6403              		.loc 2 2817 9
 6404 0088 7B68     		ldr	r3, [r7, #4]
 6405 008a 1868     		ldr	r0, [r3]
 6406 008c 3B68     		ldr	r3, [r7]
 6407 008e 1B68     		ldr	r3, [r3]
 6408 0090 0022     		movs	r2, #0
 6409 0092 1946     		mov	r1, r3
 6410 0094 FFF7FEFF 		bl	LL_ADC_SetChannelSamplingTime
2818:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
2819:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         /* Set ADC sampling time common configuration */
2820:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5)
 6411              		.loc 2 2820 9
 6412 0098 7B68     		ldr	r3, [r7, #4]
 6413 009a 1B68     		ldr	r3, [r3]
 6414 009c 4FF00041 		mov	r1, #-2147483648
 6415 00a0 1846     		mov	r0, r3
 6416 00a2 FFF7FEFF 		bl	LL_ADC_SetSamplingTimeCommonConfig
 6417 00a6 0EE0     		b	.L355
 6418              	.L354:
2821:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       }
2822:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       else
2823:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       {
2824:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         /* Set sampling time of the selected ADC channel */
2825:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 6419              		.loc 2 2825 9
 6420 00a8 7B68     		ldr	r3, [r7, #4]
 6421 00aa 1868     		ldr	r0, [r3]
 6422 00ac 3B68     		ldr	r3, [r7]
 6423 00ae 1968     		ldr	r1, [r3]
 6424 00b0 3B68     		ldr	r3, [r7]
 6425 00b2 9B68     		ldr	r3, [r3, #8]
 6426 00b4 1A46     		mov	r2, r3
 6427 00b6 FFF7FEFF 		bl	LL_ADC_SetChannelSamplingTime
ARM GAS  /tmp/ccZ0TYFG.s 			page 300


2826:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
2827:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         /* Set ADC sampling time common configuration */
2828:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 6428              		.loc 2 2828 9
 6429 00ba 7B68     		ldr	r3, [r7, #4]
 6430 00bc 1B68     		ldr	r3, [r3]
 6431 00be 0021     		movs	r1, #0
 6432 00c0 1846     		mov	r0, r3
 6433 00c2 FFF7FEFF 		bl	LL_ADC_SetSamplingTimeCommonConfig
 6434              	.L355:
2829:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       }
2830:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
2831:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       /* Configure the offset: offset enable/disable, channel, offset value */
2832:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
2833:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       /* Shift the offset with respect to the selected ADC resolution. */
2834:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
2835:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 6435              		.loc 2 2835 26
 6436 00c6 3B68     		ldr	r3, [r7]
 6437 00c8 5A69     		ldr	r2, [r3, #20]
 6438 00ca 7B68     		ldr	r3, [r7, #4]
 6439 00cc 1B68     		ldr	r3, [r3]
 6440 00ce DB68     		ldr	r3, [r3, #12]
 6441 00d0 DB08     		lsrs	r3, r3, #3
 6442 00d2 03F00303 		and	r3, r3, #3
 6443 00d6 5B00     		lsls	r3, r3, #1
 6444              		.loc 2 2835 24
 6445 00d8 02FA03F3 		lsl	r3, r2, r3
 6446 00dc C7F88830 		str	r3, [r7, #136]
2836:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
2837:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 6447              		.loc 2 2837 18
 6448 00e0 3B68     		ldr	r3, [r7]
 6449 00e2 1B69     		ldr	r3, [r3, #16]
 6450              		.loc 2 2837 10
 6451 00e4 042B     		cmp	r3, #4
 6452 00e6 22D0     		beq	.L356
2838:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       {
2839:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         /* Set ADC selected offset number */
2840:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted)
 6453              		.loc 2 2840 9
 6454 00e8 7B68     		ldr	r3, [r7, #4]
 6455 00ea 1868     		ldr	r0, [r3]
 6456 00ec 3B68     		ldr	r3, [r7]
 6457 00ee 1969     		ldr	r1, [r3, #16]
 6458 00f0 3B68     		ldr	r3, [r7]
 6459 00f2 1A68     		ldr	r2, [r3]
 6460 00f4 D7F88830 		ldr	r3, [r7, #136]
 6461 00f8 FFF7FEFF 		bl	LL_ADC_SetOffset
2841:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
2842:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
2843:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
2844:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         /* Set ADC selected offset sign & saturation */
2845:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 6462              		.loc 2 2845 9
 6463 00fc 7B68     		ldr	r3, [r7, #4]
 6464 00fe 1868     		ldr	r0, [r3]
ARM GAS  /tmp/ccZ0TYFG.s 			page 301


 6465 0100 3B68     		ldr	r3, [r7]
 6466 0102 1969     		ldr	r1, [r3, #16]
 6467 0104 3B68     		ldr	r3, [r7]
 6468 0106 9B69     		ldr	r3, [r3, #24]
 6469 0108 1A46     		mov	r2, r3
 6470 010a FFF7FEFF 		bl	LL_ADC_SetOffsetSign
2846:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturatio
 6471              		.loc 2 2846 9
 6472 010e 7B68     		ldr	r3, [r7, #4]
 6473 0110 1868     		ldr	r0, [r3]
 6474 0112 3B68     		ldr	r3, [r7]
 6475 0114 1969     		ldr	r1, [r3, #16]
 6476              		.loc 2 2846 83
 6477 0116 3B68     		ldr	r3, [r7]
 6478 0118 1B7F     		ldrb	r3, [r3, #28]	@ zero_extendqisi2
 6479              		.loc 2 2846 9
 6480 011a 012B     		cmp	r3, #1
 6481 011c 02D1     		bne	.L357
 6482              		.loc 2 2846 9 is_stmt 0 discriminator 1
 6483 011e 4FF00073 		mov	r3, #33554432
 6484 0122 00E0     		b	.L358
 6485              	.L357:
 6486              		.loc 2 2846 9 discriminator 2
 6487 0124 0023     		movs	r3, #0
 6488              	.L358:
 6489              		.loc 2 2846 9 discriminator 4
 6490 0126 1A46     		mov	r2, r3
 6491 0128 FFF7FEFF 		bl	LL_ADC_SetOffsetSaturation
 6492 012c 1DE1     		b	.L353
 6493              	.L356:
2847:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       }
2848:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       else
2849:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       {
2850:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         /* Scan each offset register to check if the selected channel is targeted. */
2851:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         /* If this is the case, the corresponding offset number is disabled.       */
2852:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 6494              		.loc 2 2852 12 is_stmt 1
 6495 012e 7B68     		ldr	r3, [r7, #4]
 6496 0130 1B68     		ldr	r3, [r3]
 6497 0132 0021     		movs	r1, #0
 6498 0134 1846     		mov	r0, r3
 6499 0136 FFF7FEFF 		bl	LL_ADC_GetOffsetChannel
 6500 013a 0346     		mov	r3, r0
 6501 013c C3F31203 		ubfx	r3, r3, #0, #19
 6502 0140 002B     		cmp	r3, #0
 6503 0142 0AD1     		bne	.L359
 6504              		.loc 2 2852 12 is_stmt 0 discriminator 1
 6505 0144 7B68     		ldr	r3, [r7, #4]
 6506 0146 1B68     		ldr	r3, [r3]
 6507 0148 0021     		movs	r1, #0
 6508 014a 1846     		mov	r0, r3
 6509 014c FFF7FEFF 		bl	LL_ADC_GetOffsetChannel
 6510 0150 0346     		mov	r3, r0
 6511 0152 9B0E     		lsrs	r3, r3, #26
 6512 0154 03F01F02 		and	r2, r3, #31
 6513 0158 12E0     		b	.L360
 6514              	.L359:
ARM GAS  /tmp/ccZ0TYFG.s 			page 302


 6515              		.loc 2 2852 12 discriminator 2
 6516 015a 7B68     		ldr	r3, [r7, #4]
 6517 015c 1B68     		ldr	r3, [r3]
 6518 015e 0021     		movs	r1, #0
 6519 0160 1846     		mov	r0, r3
 6520 0162 FFF7FEFF 		bl	LL_ADC_GetOffsetChannel
 6521 0166 0346     		mov	r3, r0
 6522 0168 C7F88030 		str	r3, [r7, #128]
 6523              	.LBB36:
 6524              	.LBB37:
 6525              		.file 3 "Drivers/CMSIS/Include/cmsis_gcc.h"
   1:Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V5.0.4
   5:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     09. April 2018
   6:Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/cmsis_gcc.h **** /*
   8:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Copyright (c) 2009-2018 Arm Limited. All rights reserved.
   9:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  10:Drivers/CMSIS/Include/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  12:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:Drivers/CMSIS/Include/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:Drivers/CMSIS/Include/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  16:Drivers/CMSIS/Include/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  18:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:Drivers/CMSIS/Include/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:Drivers/CMSIS/Include/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:Drivers/CMSIS/Include/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:Drivers/CMSIS/Include/cmsis_gcc.h ****  * limitations under the License.
  23:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  24:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  25:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  28:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __has_builtin
  36:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  38:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  39:Drivers/CMSIS/Include/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ASM
  41:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  43:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __INLINE
  44:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __INLINE                               inline
  45:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  46:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
ARM GAS  /tmp/ccZ0TYFG.s 			page 303


  47:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  49:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE                 
  50:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif                                           
  52:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  55:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __USED
  56:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  58:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __WEAK
  59:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  61:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED
  62:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  64:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  67:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  70:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:Drivers/CMSIS/Include/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  78:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  86:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  94:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 102:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
ARM GAS  /tmp/ccZ0TYFG.s 			page 304


 104:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 110:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ALIGNED
 111:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 113:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 116:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 117:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 118:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 119:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 120:Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 121:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 122:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 123:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 124:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 125:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 126:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
 127:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 128:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 129:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 130:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 131:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 132:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 133:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 134:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 135:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 136:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 137:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
 138:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 139:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 140:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
 141:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 142:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 143:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 144:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 145:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 146:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 147:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Control Register
 148:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the Control Register.
 149:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Control Register value
 150:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 151:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_CONTROL(void)
 152:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 153:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 154:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 155:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control" : "=r" (result) );
 156:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 157:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 158:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 159:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 160:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
ARM GAS  /tmp/ccZ0TYFG.s 			page 305


 161:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 162:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Control Register (non-secure)
 163:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the non-secure Control Register when in secure mode.
 164:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               non-secure Control Register value
 165:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 166:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_CONTROL_NS(void)
 167:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 168:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 169:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 170:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control_ns" : "=r" (result) );
 171:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 172:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 173:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 174:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 175:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 176:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 177:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Control Register
 178:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Writes the given value to the Control Register.
 179:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
 180:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 181:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_CONTROL(uint32_t control)
 182:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 183:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 184:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 185:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 186:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 187:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 188:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 189:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Control Register (non-secure)
 190:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Writes the given value to the non-secure Control Register when in secure state.
 191:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
 192:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 193:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_CONTROL_NS(uint32_t control)
 194:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 195:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR control_ns, %0" : : "r" (control) : "memory");
 196:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 197:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 198:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 199:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 200:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 201:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get IPSR Register
 202:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the IPSR Register.
 203:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               IPSR Register value
 204:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 205:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_IPSR(void)
 206:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 207:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 208:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 209:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 210:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 211:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 212:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 213:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 214:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 215:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get APSR Register
 216:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the APSR Register.
 217:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               APSR Register value
ARM GAS  /tmp/ccZ0TYFG.s 			page 306


 218:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 219:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_APSR(void)
 220:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 221:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 222:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 223:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, apsr" : "=r" (result) );
 224:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 225:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 226:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 227:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 228:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 229:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get xPSR Register
 230:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the xPSR Register.
 231:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               xPSR Register value
 232:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 233:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_xPSR(void)
 234:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 235:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 236:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 237:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, xpsr" : "=r" (result) );
 238:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 239:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 240:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 241:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 242:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 243:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer
 244:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer (PSP).
 245:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               PSP Register value
 246:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 247:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PSP(void)
 248:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 249:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 250:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 251:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 252:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 253:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 254:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 255:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 256:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 257:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 258:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer (non-secure)
 259:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Process Stack Pointer (PSP) when in secure s
 260:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               PSP Register value
 261:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 262:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PSP_NS(void)
 263:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 264:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 265:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 266:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp_ns"  : "=r" (result) );
 267:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 268:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 269:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 270:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 271:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 272:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 273:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer
 274:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer (PSP).
ARM GAS  /tmp/ccZ0TYFG.s 			page 307


 275:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 276:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 277:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
 278:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 279:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 280:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 281:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 282:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 283:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 284:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 285:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer (non-secure)
 286:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Process Stack Pointer (PSP) when in secure sta
 287:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 288:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 289:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_PSP_NS(uint32_t topOfProcStack)
 290:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 291:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psp_ns, %0" : : "r" (topOfProcStack) : );
 292:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 293:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 294:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 295:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 296:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 297:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer
 298:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer (MSP).
 299:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               MSP Register value
 300:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 301:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_MSP(void)
 302:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 303:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 304:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 305:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp" : "=r" (result) );
 306:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 307:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 308:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 309:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 310:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 311:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 312:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer (non-secure)
 313:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Main Stack Pointer (MSP) when in secure stat
 314:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               MSP Register value
 315:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 316:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_MSP_NS(void)
 317:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 318:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 319:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 320:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp_ns" : "=r" (result) );
 321:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 322:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 323:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 324:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 325:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 326:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 327:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer
 328:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer (MSP).
 329:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfMainStack  Main Stack Pointer value to set
 330:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 331:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
ARM GAS  /tmp/ccZ0TYFG.s 			page 308


 332:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 333:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 334:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 335:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 336:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 337:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 338:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 339:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer (non-secure)
 340:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Main Stack Pointer (MSP) when in secure state.
 341:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfMainStack  Main Stack Pointer value to set
 342:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 343:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_MSP_NS(uint32_t topOfMainStack)
 344:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 345:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msp_ns, %0" : : "r" (topOfMainStack) : );
 346:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 347:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 348:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 349:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 350:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 351:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 352:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Stack Pointer (non-secure)
 353:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Stack Pointer (SP) when in secure state.
 354:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               SP Register value
 355:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 356:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_SP_NS(void)
 357:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 358:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 359:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 360:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, sp_ns" : "=r" (result) );
 361:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 362:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 363:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 364:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 365:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 366:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Stack Pointer (non-secure)
 367:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Stack Pointer (SP) when in secure state.
 368:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfStack  Stack Pointer value to set
 369:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 370:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_SP_NS(uint32_t topOfStack)
 371:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 372:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR sp_ns, %0" : : "r" (topOfStack) : );
 373:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 374:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 375:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 376:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 377:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 378:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Priority Mask
 379:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current state of the priority mask bit from the Priority Mask Register.
 380:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Priority Mask value
 381:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 382:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
 383:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 384:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 385:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 386:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 387:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 388:Drivers/CMSIS/Include/cmsis_gcc.h **** }
ARM GAS  /tmp/ccZ0TYFG.s 			page 309


 389:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 390:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 391:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 392:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 393:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Priority Mask (non-secure)
 394:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current state of the non-secure priority mask bit from the Priority Mask Reg
 395:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Priority Mask value
 396:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 397:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PRIMASK_NS(void)
 398:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 399:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 400:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 401:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask_ns" : "=r" (result) :: "memory");
 402:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 403:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 404:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 405:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 406:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 407:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 408:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Priority Mask
 409:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Priority Mask Register.
 410:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 411:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 412:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
 413:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 414:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 415:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 416:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 417:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 418:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 419:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 420:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Priority Mask (non-secure)
 421:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Priority Mask Register when in secure state.
 422:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 423:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 424:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_PRIMASK_NS(uint32_t priMask)
 425:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 426:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR primask_ns, %0" : : "r" (priMask) : "memory");
 427:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 428:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 429:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 430:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 431:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 432:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 433:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 434:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 435:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable FIQ
 436:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables FIQ interrupts by clearing the F-bit in the CPSR.
 437:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 438:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 439:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_fault_irq(void)
 440:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 441:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie f" : : : "memory");
 442:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 443:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 444:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 445:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
ARM GAS  /tmp/ccZ0TYFG.s 			page 310


 446:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable FIQ
 447:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables FIQ interrupts by setting the F-bit in the CPSR.
 448:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 449:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 450:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_fault_irq(void)
 451:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 452:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid f" : : : "memory");
 453:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 454:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 455:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 456:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 457:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Base Priority
 458:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Base Priority register.
 459:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Base Priority register value
 460:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 461:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
 462:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 463:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 464:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 465:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 466:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 467:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 468:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 469:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 470:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 471:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 472:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Base Priority (non-secure)
 473:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Base Priority register when in secure state.
 474:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Base Priority register value
 475:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 476:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_BASEPRI_NS(void)
 477:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 478:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 479:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 480:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri_ns" : "=r" (result) );
 481:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 482:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 483:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 484:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 485:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 486:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 487:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority
 488:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register.
 489:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 490:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 491:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_BASEPRI(uint32_t basePri)
 492:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 493:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 494:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 495:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 496:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 497:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 498:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 499:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority (non-secure)
 500:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Base Priority register when in secure state.
 501:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 502:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
ARM GAS  /tmp/ccZ0TYFG.s 			page 311


 503:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_BASEPRI_NS(uint32_t basePri)
 504:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 505:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri_ns, %0" : : "r" (basePri) : "memory");
 506:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 507:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 508:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 509:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 510:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 511:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority with condition
 512:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register only if BASEPRI masking is disable
 513:Drivers/CMSIS/Include/cmsis_gcc.h ****            or the new value increases the BASEPRI priority level.
 514:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 515:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 516:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_BASEPRI_MAX(uint32_t basePri)
 517:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 518:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri_max, %0" : : "r" (basePri) : "memory");
 519:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 520:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 521:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 522:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 523:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Fault Mask
 524:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Fault Mask register.
 525:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Fault Mask register value
 526:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 527:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_FAULTMASK(void)
 528:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 529:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 530:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 531:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask" : "=r" (result) );
 532:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 533:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 534:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 535:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 536:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 537:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 538:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Fault Mask (non-secure)
 539:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Fault Mask register when in secure state.
 540:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Fault Mask register value
 541:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 542:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_FAULTMASK_NS(void)
 543:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 544:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 545:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 546:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask_ns" : "=r" (result) );
 547:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 548:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 549:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 550:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 551:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 552:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 553:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Fault Mask
 554:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Fault Mask register.
 555:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    faultMask  Fault Mask value to set
 556:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 557:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
 558:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 559:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
ARM GAS  /tmp/ccZ0TYFG.s 			page 312


 560:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 561:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 562:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 563:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 564:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 565:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Fault Mask (non-secure)
 566:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Fault Mask register when in secure state.
 567:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    faultMask  Fault Mask value to set
 568:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 569:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_FAULTMASK_NS(uint32_t faultMask)
 570:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 571:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR faultmask_ns, %0" : : "r" (faultMask) : "memory");
 572:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 573:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 574:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 575:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 576:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 577:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
 578:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 579:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 580:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 581:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    )
 582:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 583:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 584:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer Limit
 585:Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 586:Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always in non-secure
 587:Drivers/CMSIS/Include/cmsis_gcc.h ****   mode.
 588:Drivers/CMSIS/Include/cmsis_gcc.h ****   
 589:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer Limit (PSPLIM).
 590:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               PSPLIM Register value
 591:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 592:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PSPLIM(void)
 593:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 594:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 595:Drivers/CMSIS/Include/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 596:Drivers/CMSIS/Include/cmsis_gcc.h ****     // without main extensions, the non-secure PSPLIM is RAZ/WI
 597:Drivers/CMSIS/Include/cmsis_gcc.h ****   return 0U;
 598:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 599:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 600:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psplim"  : "=r" (result) );
 601:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 602:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 603:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 604:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 605:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3))
 606:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 607:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer Limit (non-secure)
 608:Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 609:Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always.
 610:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 611:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Process Stack Pointer Limit (PSPLIM) when in
 612:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               PSPLIM Register value
 613:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 614:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PSPLIM_NS(void)
 615:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 616:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
ARM GAS  /tmp/ccZ0TYFG.s 			page 313


 617:Drivers/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure PSPLIM is RAZ/WI
 618:Drivers/CMSIS/Include/cmsis_gcc.h ****   return 0U;
 619:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 620:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 621:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psplim_ns"  : "=r" (result) );
 622:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 623:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 624:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 625:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 626:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 627:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 628:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 629:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer Limit
 630:Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 631:Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored in non-secure
 632:Drivers/CMSIS/Include/cmsis_gcc.h ****   mode.
 633:Drivers/CMSIS/Include/cmsis_gcc.h ****   
 634:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer Limit (PSPLIM).
 635:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ProcStackPtrLimit  Process Stack Pointer Limit value to set
 636:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 637:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PSPLIM(uint32_t ProcStackPtrLimit)
 638:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 639:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 640:Drivers/CMSIS/Include/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 641:Drivers/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure PSPLIM is RAZ/WI
 642:Drivers/CMSIS/Include/cmsis_gcc.h ****   (void)ProcStackPtrLimit;
 643:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 644:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
 645:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 646:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 647:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 648:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 649:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3))
 650:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 651:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer (non-secure)
 652:Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 653:Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored.
 654:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 655:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Process Stack Pointer Limit (PSPLIM) when in s
 656:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ProcStackPtrLimit  Process Stack Pointer Limit value to set
 657:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 658:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_PSPLIM_NS(uint32_t ProcStackPtrLimit)
 659:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 660:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 661:Drivers/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure PSPLIM is RAZ/WI
 662:Drivers/CMSIS/Include/cmsis_gcc.h ****   (void)ProcStackPtrLimit;
 663:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 664:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psplim_ns, %0\n" : : "r" (ProcStackPtrLimit));
 665:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 666:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 667:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 668:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 669:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 670:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 671:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer Limit
 672:Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 673:Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always in non-secure
ARM GAS  /tmp/ccZ0TYFG.s 			page 314


 674:Drivers/CMSIS/Include/cmsis_gcc.h ****   mode.
 675:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 676:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer Limit (MSPLIM).
 677:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               MSPLIM Register value
 678:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 679:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_MSPLIM(void)
 680:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 681:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 682:Drivers/CMSIS/Include/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 683:Drivers/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 684:Drivers/CMSIS/Include/cmsis_gcc.h ****   return 0U;
 685:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 686:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 687:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msplim" : "=r" (result) );
 688:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 689:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 690:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 691:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 692:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 693:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3))
 694:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 695:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer Limit (non-secure)
 696:Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 697:Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always.
 698:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 699:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Main Stack Pointer Limit(MSPLIM) when in sec
 700:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               MSPLIM Register value
 701:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 702:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_MSPLIM_NS(void)
 703:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 704:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 705:Drivers/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 706:Drivers/CMSIS/Include/cmsis_gcc.h ****   return 0U;
 707:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 708:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 709:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msplim_ns" : "=r" (result) );
 710:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 711:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 712:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 713:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 714:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 715:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 716:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 717:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer Limit
 718:Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 719:Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored in non-secure
 720:Drivers/CMSIS/Include/cmsis_gcc.h ****   mode.
 721:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 722:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer Limit (MSPLIM).
 723:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    MainStackPtrLimit  Main Stack Pointer Limit value to set
 724:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 725:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_MSPLIM(uint32_t MainStackPtrLimit)
 726:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 727:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 728:Drivers/CMSIS/Include/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 729:Drivers/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 730:Drivers/CMSIS/Include/cmsis_gcc.h ****   (void)MainStackPtrLimit;
ARM GAS  /tmp/ccZ0TYFG.s 			page 315


 731:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 732:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
 733:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 734:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 735:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 736:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 737:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3))
 738:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 739:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer Limit (non-secure)
 740:Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 741:Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored.
 742:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 743:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Main Stack Pointer Limit (MSPLIM) when in secu
 744:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    MainStackPtrLimit  Main Stack Pointer value to set
 745:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 746:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_MSPLIM_NS(uint32_t MainStackPtrLimit)
 747:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 748:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 749:Drivers/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 750:Drivers/CMSIS/Include/cmsis_gcc.h ****   (void)MainStackPtrLimit;
 751:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 752:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msplim_ns, %0" : : "r" (MainStackPtrLimit));
 753:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 754:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 755:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 756:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 757:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 758:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    ) */
 759:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 760:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 761:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 762:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get FPSCR
 763:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Floating Point Status/Control register.
 764:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Floating Point Status/Control register value
 765:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 766:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_FPSCR(void)
 767:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 768:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)) && \
 769:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
 770:Drivers/CMSIS/Include/cmsis_gcc.h **** #if __has_builtin(__builtin_arm_get_fpscr) 
 771:Drivers/CMSIS/Include/cmsis_gcc.h **** // Re-enable using built-in when GCC has been fixed
 772:Drivers/CMSIS/Include/cmsis_gcc.h **** // || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
 773:Drivers/CMSIS/Include/cmsis_gcc.h ****   /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
 774:Drivers/CMSIS/Include/cmsis_gcc.h ****   return __builtin_arm_get_fpscr();
 775:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 776:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 777:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 778:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("VMRS %0, fpscr" : "=r" (result) );
 779:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 780:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 781:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 782:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(0U);
 783:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 784:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 785:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 786:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 787:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
ARM GAS  /tmp/ccZ0TYFG.s 			page 316


 788:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set FPSCR
 789:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Floating Point Status/Control register.
 790:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    fpscr  Floating Point Status/Control value to set
 791:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 792:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_FPSCR(uint32_t fpscr)
 793:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 794:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)) && \
 795:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
 796:Drivers/CMSIS/Include/cmsis_gcc.h **** #if __has_builtin(__builtin_arm_set_fpscr)
 797:Drivers/CMSIS/Include/cmsis_gcc.h **** // Re-enable using built-in when GCC has been fixed
 798:Drivers/CMSIS/Include/cmsis_gcc.h **** // || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
 799:Drivers/CMSIS/Include/cmsis_gcc.h ****   /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
 800:Drivers/CMSIS/Include/cmsis_gcc.h ****   __builtin_arm_set_fpscr(fpscr);
 801:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 802:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
 803:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 804:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 805:Drivers/CMSIS/Include/cmsis_gcc.h ****   (void)fpscr;
 806:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 807:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 808:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 809:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 810:Drivers/CMSIS/Include/cmsis_gcc.h **** /*@} end of CMSIS_Core_RegAccFunctions */
 811:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 812:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 813:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ##########################  Core Instruction Access  ######################### */
 814:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
 815:Drivers/CMSIS/Include/cmsis_gcc.h ****   Access to dedicated instructions
 816:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 817:Drivers/CMSIS/Include/cmsis_gcc.h **** */
 818:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 819:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Define macros for porting to both thumb1 and thumb2.
 820:Drivers/CMSIS/Include/cmsis_gcc.h ****  * For thumb1, use low register (r0-r7), specified by constraint "l"
 821:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Otherwise, use general registers, specified by constraint "r" */
 822:Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined (__thumb__) && !defined (__thumb2__)
 823:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 824:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+l" (r)
 825:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 826:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 827:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 828:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+r" (r)
 829:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 830:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 831:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 832:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 833:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   No Operation
 834:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details No Operation does nothing. This instruction can be used for code alignment purposes.
 835:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 836:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __NOP()                             __ASM volatile ("nop")
 837:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 838:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 839:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Interrupt
 840:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Interrupt is a hint instruction that suspends execution until one of a number o
 841:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 842:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __WFI()                             __ASM volatile ("wfi")
 843:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 844:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/ccZ0TYFG.s 			page 317


 845:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 846:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Event
 847:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Event is a hint instruction that permits the processor to enter
 848:Drivers/CMSIS/Include/cmsis_gcc.h ****            a low-power state until one of a number of events occurs.
 849:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 850:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __WFE()                             __ASM volatile ("wfe")
 851:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 852:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 853:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 854:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Send Event
 855:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 856:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 857:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __SEV()                             __ASM volatile ("sev")
 858:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 859:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 860:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 861:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Instruction Synchronization Barrier
 862:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Instruction Synchronization Barrier flushes the pipeline in the processor,
 863:Drivers/CMSIS/Include/cmsis_gcc.h ****            so that all instructions following the ISB are fetched from cache or memory,
 864:Drivers/CMSIS/Include/cmsis_gcc.h ****            after the instruction has been completed.
 865:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 866:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __ISB(void)
 867:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 868:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("isb 0xF":::"memory");
 869:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 870:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 871:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 872:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 873:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Synchronization Barrier
 874:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Acts as a special kind of Data Memory Barrier.
 875:Drivers/CMSIS/Include/cmsis_gcc.h ****            It completes when all explicit memory accesses before this instruction complete.
 876:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 877:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DSB(void)
 878:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 879:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dsb 0xF":::"memory");
 880:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 881:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 882:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 883:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 884:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Memory Barrier
 885:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Ensures the apparent order of the explicit memory operations before
 886:Drivers/CMSIS/Include/cmsis_gcc.h ****            and after the instruction, without ensuring their completion.
 887:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 888:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DMB(void)
 889:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 890:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dmb 0xF":::"memory");
 891:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 892:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 893:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 894:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 895:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (32 bit)
 896:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in unsigned integer value. For example, 0x12345678 becomes 0x785
 897:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 898:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 899:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 900:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __REV(uint32_t value)
 901:Drivers/CMSIS/Include/cmsis_gcc.h **** {
ARM GAS  /tmp/ccZ0TYFG.s 			page 318


 902:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 5)
 903:Drivers/CMSIS/Include/cmsis_gcc.h ****   return __builtin_bswap32(value);
 904:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 905:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 906:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 907:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("rev %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 908:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 909:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 910:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 911:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 912:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 913:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 914:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 915:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order within each halfword of a word. For example, 0x12345678 becomes 
 916:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 917:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 918:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 919:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __REV16(uint32_t value)
 920:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 921:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 922:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 923:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("rev16 %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 924:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 925:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 926:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 927:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 928:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 929:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 930:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in a 16-bit value and returns the signed 16-bit result. For exam
 931:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 932:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 933:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 934:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE int16_t __REVSH(int16_t value)
 935:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 936:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 937:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (int16_t)__builtin_bswap16(value);
 938:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 939:Drivers/CMSIS/Include/cmsis_gcc.h ****   int16_t result;
 940:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 941:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("revsh %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 942:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 943:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 944:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 945:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 946:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 947:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 948:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Rotate Right in unsigned value (32 bit)
 949:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Rotate Right (immediate) provides the value of the contents of a register rotated by a v
 950:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    op1  Value to rotate
 951:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    op2  Number of Bits to rotate
 952:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Rotated value
 953:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 954:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __ROR(uint32_t op1, uint32_t op2)
 955:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 956:Drivers/CMSIS/Include/cmsis_gcc.h ****   op2 %= 32U;
 957:Drivers/CMSIS/Include/cmsis_gcc.h ****   if (op2 == 0U)
 958:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
ARM GAS  /tmp/ccZ0TYFG.s 			page 319


 959:Drivers/CMSIS/Include/cmsis_gcc.h ****     return op1;
 960:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 961:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (op1 >> op2) | (op1 << (32U - op2));
 962:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 963:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 964:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 965:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 966:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Breakpoint
 967:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Causes the processor to enter Debug state.
 968:Drivers/CMSIS/Include/cmsis_gcc.h ****            Debug tools can use this to investigate system state when the instruction at a particula
 969:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  is ignored by the processor.
 970:Drivers/CMSIS/Include/cmsis_gcc.h ****                  If required, a debugger can use it to store additional information about the break
 971:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 972:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __BKPT(value)                       __ASM volatile ("bkpt "#value)
 973:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 974:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 975:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 976:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse bit order of value
 977:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the bit order of the given value.
 978:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 979:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 980:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 981:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __RBIT(uint32_t value)
 982:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 983:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 984:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 985:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 986:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 987:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 988:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 6526              		.loc 3 988 4 is_stmt 1 discriminator 2
 6527 016c D7F88030 		ldr	r3, [r7, #128]
 6528              		.syntax unified
 6529              	@ 988 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 6530 0170 93FAA3F3 		rbit r3, r3
 6531              	@ 0 "" 2
 6532              		.thumb
 6533              		.syntax unified
 6534 0174 FB67     		str	r3, [r7, #124]
 989:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 990:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t s = (4U /*sizeof(v)*/ * 8U) - 1U; /* extra shift needed at end */
 991:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 992:Drivers/CMSIS/Include/cmsis_gcc.h ****   result = value;                      /* r will be reversed bits of v; first get LSB of v */
 993:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (value >>= 1U; value != 0U; value >>= 1U)
 994:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 995:Drivers/CMSIS/Include/cmsis_gcc.h ****     result <<= 1U;
 996:Drivers/CMSIS/Include/cmsis_gcc.h ****     result |= value & 1U;
 997:Drivers/CMSIS/Include/cmsis_gcc.h ****     s--;
 998:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 999:Drivers/CMSIS/Include/cmsis_gcc.h ****   result <<= s;                        /* shift when v's highest bits are zero */
1000:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
1001:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 6535              		.loc 3 1001 10 discriminator 2
 6536 0176 FB6F     		ldr	r3, [r7, #124]
 6537              	.LBE37:
 6538              	.LBE36:
 6539              		.loc 2 2852 12 discriminator 2
ARM GAS  /tmp/ccZ0TYFG.s 			page 320


 6540 0178 B3FA83F3 		clz	r3, r3
 6541 017c DBB2     		uxtb	r3, r3
 6542 017e 1A46     		mov	r2, r3
 6543              	.L360:
 6544              		.loc 2 2852 104 discriminator 4
 6545 0180 3B68     		ldr	r3, [r7]
 6546 0182 1B68     		ldr	r3, [r3]
 6547 0184 C3F31203 		ubfx	r3, r3, #0, #19
 6548 0188 002B     		cmp	r3, #0
 6549 018a 05D1     		bne	.L362
 6550              		.loc 2 2852 104 is_stmt 0 discriminator 5
 6551 018c 3B68     		ldr	r3, [r7]
 6552 018e 1B68     		ldr	r3, [r3]
 6553 0190 9B0E     		lsrs	r3, r3, #26
 6554 0192 03F01F03 		and	r3, r3, #31
 6555 0196 0AE0     		b	.L363
 6556              	.L362:
 6557              		.loc 2 2852 104 discriminator 6
 6558 0198 3B68     		ldr	r3, [r7]
 6559 019a 1B68     		ldr	r3, [r3]
 6560 019c BB67     		str	r3, [r7, #120]
 6561              	.LBB38:
 6562              	.LBB39:
 988:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 6563              		.loc 3 988 4 is_stmt 1 discriminator 6
 6564 019e BB6F     		ldr	r3, [r7, #120]
 6565              		.syntax unified
 6566              	@ 988 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 6567 01a0 93FAA3F3 		rbit r3, r3
 6568              	@ 0 "" 2
 6569              		.thumb
 6570              		.syntax unified
 6571 01a4 7B67     		str	r3, [r7, #116]
 6572              		.loc 3 1001 10 discriminator 6
 6573 01a6 7B6F     		ldr	r3, [r7, #116]
 6574              	.LBE39:
 6575              	.LBE38:
 6576              		.loc 2 2852 104 discriminator 6
 6577 01a8 B3FA83F3 		clz	r3, r3
 6578 01ac DBB2     		uxtb	r3, r3
 6579              	.L363:
 6580              		.loc 2 2852 11 discriminator 8
 6581 01ae 9A42     		cmp	r2, r3
 6582 01b0 06D1     		bne	.L365
2853:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         {
2854:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****           LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 6583              		.loc 2 2854 11
 6584 01b2 7B68     		ldr	r3, [r7, #4]
 6585 01b4 1B68     		ldr	r3, [r3]
 6586 01b6 0022     		movs	r2, #0
 6587 01b8 0021     		movs	r1, #0
 6588 01ba 1846     		mov	r0, r3
 6589 01bc FFF7FEFF 		bl	LL_ADC_SetOffsetState
 6590              	.L365:
2855:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         }
2856:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 6591              		.loc 2 2856 12
ARM GAS  /tmp/ccZ0TYFG.s 			page 321


 6592 01c0 7B68     		ldr	r3, [r7, #4]
 6593 01c2 1B68     		ldr	r3, [r3]
 6594 01c4 0121     		movs	r1, #1
 6595 01c6 1846     		mov	r0, r3
 6596 01c8 FFF7FEFF 		bl	LL_ADC_GetOffsetChannel
 6597 01cc 0346     		mov	r3, r0
 6598 01ce C3F31203 		ubfx	r3, r3, #0, #19
 6599 01d2 002B     		cmp	r3, #0
 6600 01d4 0AD1     		bne	.L366
 6601              		.loc 2 2856 12 is_stmt 0 discriminator 1
 6602 01d6 7B68     		ldr	r3, [r7, #4]
 6603 01d8 1B68     		ldr	r3, [r3]
 6604 01da 0121     		movs	r1, #1
 6605 01dc 1846     		mov	r0, r3
 6606 01de FFF7FEFF 		bl	LL_ADC_GetOffsetChannel
 6607 01e2 0346     		mov	r3, r0
 6608 01e4 9B0E     		lsrs	r3, r3, #26
 6609 01e6 03F01F02 		and	r2, r3, #31
 6610 01ea 10E0     		b	.L367
 6611              	.L366:
 6612              		.loc 2 2856 12 discriminator 2
 6613 01ec 7B68     		ldr	r3, [r7, #4]
 6614 01ee 1B68     		ldr	r3, [r3]
 6615 01f0 0121     		movs	r1, #1
 6616 01f2 1846     		mov	r0, r3
 6617 01f4 FFF7FEFF 		bl	LL_ADC_GetOffsetChannel
 6618 01f8 0346     		mov	r3, r0
 6619 01fa 3B67     		str	r3, [r7, #112]
 6620              	.LBB40:
 6621              	.LBB41:
 988:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 6622              		.loc 3 988 4 is_stmt 1 discriminator 2
 6623 01fc 3B6F     		ldr	r3, [r7, #112]
 6624              		.syntax unified
 6625              	@ 988 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 6626 01fe 93FAA3F3 		rbit r3, r3
 6627              	@ 0 "" 2
 6628              		.thumb
 6629              		.syntax unified
 6630 0202 FB66     		str	r3, [r7, #108]
 6631              		.loc 3 1001 10 discriminator 2
 6632 0204 FB6E     		ldr	r3, [r7, #108]
 6633              	.LBE41:
 6634              	.LBE40:
 6635              		.loc 2 2856 12 discriminator 2
 6636 0206 B3FA83F3 		clz	r3, r3
 6637 020a DBB2     		uxtb	r3, r3
 6638 020c 1A46     		mov	r2, r3
 6639              	.L367:
 6640              		.loc 2 2856 104 discriminator 4
 6641 020e 3B68     		ldr	r3, [r7]
 6642 0210 1B68     		ldr	r3, [r3]
 6643 0212 C3F31203 		ubfx	r3, r3, #0, #19
 6644 0216 002B     		cmp	r3, #0
 6645 0218 05D1     		bne	.L369
 6646              		.loc 2 2856 104 is_stmt 0 discriminator 5
 6647 021a 3B68     		ldr	r3, [r7]
ARM GAS  /tmp/ccZ0TYFG.s 			page 322


 6648 021c 1B68     		ldr	r3, [r3]
 6649 021e 9B0E     		lsrs	r3, r3, #26
 6650 0220 03F01F03 		and	r3, r3, #31
 6651 0224 0AE0     		b	.L370
 6652              	.L369:
 6653              		.loc 2 2856 104 discriminator 6
 6654 0226 3B68     		ldr	r3, [r7]
 6655 0228 1B68     		ldr	r3, [r3]
 6656 022a BB66     		str	r3, [r7, #104]
 6657              	.LBB42:
 6658              	.LBB43:
 988:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 6659              		.loc 3 988 4 is_stmt 1 discriminator 6
 6660 022c BB6E     		ldr	r3, [r7, #104]
 6661              		.syntax unified
 6662              	@ 988 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 6663 022e 93FAA3F3 		rbit r3, r3
 6664              	@ 0 "" 2
 6665              		.thumb
 6666              		.syntax unified
 6667 0232 7B66     		str	r3, [r7, #100]
 6668              		.loc 3 1001 10 discriminator 6
 6669 0234 7B6E     		ldr	r3, [r7, #100]
 6670              	.LBE43:
 6671              	.LBE42:
 6672              		.loc 2 2856 104 discriminator 6
 6673 0236 B3FA83F3 		clz	r3, r3
 6674 023a DBB2     		uxtb	r3, r3
 6675              	.L370:
 6676              		.loc 2 2856 11 discriminator 8
 6677 023c 9A42     		cmp	r2, r3
 6678 023e 06D1     		bne	.L372
2857:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         {
2858:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****           LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 6679              		.loc 2 2858 11
 6680 0240 7B68     		ldr	r3, [r7, #4]
 6681 0242 1B68     		ldr	r3, [r3]
 6682 0244 0022     		movs	r2, #0
 6683 0246 0121     		movs	r1, #1
 6684 0248 1846     		mov	r0, r3
 6685 024a FFF7FEFF 		bl	LL_ADC_SetOffsetState
 6686              	.L372:
2859:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         }
2860:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 6687              		.loc 2 2860 12
 6688 024e 7B68     		ldr	r3, [r7, #4]
 6689 0250 1B68     		ldr	r3, [r3]
 6690 0252 0221     		movs	r1, #2
 6691 0254 1846     		mov	r0, r3
 6692 0256 FFF7FEFF 		bl	LL_ADC_GetOffsetChannel
 6693 025a 0346     		mov	r3, r0
 6694 025c C3F31203 		ubfx	r3, r3, #0, #19
 6695 0260 002B     		cmp	r3, #0
 6696 0262 0AD1     		bne	.L373
 6697              		.loc 2 2860 12 is_stmt 0 discriminator 1
 6698 0264 7B68     		ldr	r3, [r7, #4]
 6699 0266 1B68     		ldr	r3, [r3]
ARM GAS  /tmp/ccZ0TYFG.s 			page 323


 6700 0268 0221     		movs	r1, #2
 6701 026a 1846     		mov	r0, r3
 6702 026c FFF7FEFF 		bl	LL_ADC_GetOffsetChannel
 6703 0270 0346     		mov	r3, r0
 6704 0272 9B0E     		lsrs	r3, r3, #26
 6705 0274 03F01F02 		and	r2, r3, #31
 6706 0278 10E0     		b	.L374
 6707              	.L373:
 6708              		.loc 2 2860 12 discriminator 2
 6709 027a 7B68     		ldr	r3, [r7, #4]
 6710 027c 1B68     		ldr	r3, [r3]
 6711 027e 0221     		movs	r1, #2
 6712 0280 1846     		mov	r0, r3
 6713 0282 FFF7FEFF 		bl	LL_ADC_GetOffsetChannel
 6714 0286 0346     		mov	r3, r0
 6715 0288 3B66     		str	r3, [r7, #96]
 6716              	.LBB44:
 6717              	.LBB45:
 988:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 6718              		.loc 3 988 4 is_stmt 1 discriminator 2
 6719 028a 3B6E     		ldr	r3, [r7, #96]
 6720              		.syntax unified
 6721              	@ 988 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 6722 028c 93FAA3F3 		rbit r3, r3
 6723              	@ 0 "" 2
 6724              		.thumb
 6725              		.syntax unified
 6726 0290 FB65     		str	r3, [r7, #92]
 6727              		.loc 3 1001 10 discriminator 2
 6728 0292 FB6D     		ldr	r3, [r7, #92]
 6729              	.LBE45:
 6730              	.LBE44:
 6731              		.loc 2 2860 12 discriminator 2
 6732 0294 B3FA83F3 		clz	r3, r3
 6733 0298 DBB2     		uxtb	r3, r3
 6734 029a 1A46     		mov	r2, r3
 6735              	.L374:
 6736              		.loc 2 2860 104 discriminator 4
 6737 029c 3B68     		ldr	r3, [r7]
 6738 029e 1B68     		ldr	r3, [r3]
 6739 02a0 C3F31203 		ubfx	r3, r3, #0, #19
 6740 02a4 002B     		cmp	r3, #0
 6741 02a6 05D1     		bne	.L376
 6742              		.loc 2 2860 104 is_stmt 0 discriminator 5
 6743 02a8 3B68     		ldr	r3, [r7]
 6744 02aa 1B68     		ldr	r3, [r3]
 6745 02ac 9B0E     		lsrs	r3, r3, #26
 6746 02ae 03F01F03 		and	r3, r3, #31
 6747 02b2 0AE0     		b	.L377
 6748              	.L376:
 6749              		.loc 2 2860 104 discriminator 6
 6750 02b4 3B68     		ldr	r3, [r7]
 6751 02b6 1B68     		ldr	r3, [r3]
 6752 02b8 BB65     		str	r3, [r7, #88]
 6753              	.LBB46:
 6754              	.LBB47:
 988:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
ARM GAS  /tmp/ccZ0TYFG.s 			page 324


 6755              		.loc 3 988 4 is_stmt 1 discriminator 6
 6756 02ba BB6D     		ldr	r3, [r7, #88]
 6757              		.syntax unified
 6758              	@ 988 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 6759 02bc 93FAA3F3 		rbit r3, r3
 6760              	@ 0 "" 2
 6761              		.thumb
 6762              		.syntax unified
 6763 02c0 7B65     		str	r3, [r7, #84]
 6764              		.loc 3 1001 10 discriminator 6
 6765 02c2 7B6D     		ldr	r3, [r7, #84]
 6766              	.LBE47:
 6767              	.LBE46:
 6768              		.loc 2 2860 104 discriminator 6
 6769 02c4 B3FA83F3 		clz	r3, r3
 6770 02c8 DBB2     		uxtb	r3, r3
 6771              	.L377:
 6772              		.loc 2 2860 11 discriminator 8
 6773 02ca 9A42     		cmp	r2, r3
 6774 02cc 06D1     		bne	.L379
2861:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         {
2862:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****           LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 6775              		.loc 2 2862 11
 6776 02ce 7B68     		ldr	r3, [r7, #4]
 6777 02d0 1B68     		ldr	r3, [r3]
 6778 02d2 0022     		movs	r2, #0
 6779 02d4 0221     		movs	r1, #2
 6780 02d6 1846     		mov	r0, r3
 6781 02d8 FFF7FEFF 		bl	LL_ADC_SetOffsetState
 6782              	.L379:
2863:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         }
2864:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 6783              		.loc 2 2864 12
 6784 02dc 7B68     		ldr	r3, [r7, #4]
 6785 02de 1B68     		ldr	r3, [r3]
 6786 02e0 0321     		movs	r1, #3
 6787 02e2 1846     		mov	r0, r3
 6788 02e4 FFF7FEFF 		bl	LL_ADC_GetOffsetChannel
 6789 02e8 0346     		mov	r3, r0
 6790 02ea C3F31203 		ubfx	r3, r3, #0, #19
 6791 02ee 002B     		cmp	r3, #0
 6792 02f0 0AD1     		bne	.L380
 6793              		.loc 2 2864 12 is_stmt 0 discriminator 1
 6794 02f2 7B68     		ldr	r3, [r7, #4]
 6795 02f4 1B68     		ldr	r3, [r3]
 6796 02f6 0321     		movs	r1, #3
 6797 02f8 1846     		mov	r0, r3
 6798 02fa FFF7FEFF 		bl	LL_ADC_GetOffsetChannel
 6799 02fe 0346     		mov	r3, r0
 6800 0300 9B0E     		lsrs	r3, r3, #26
 6801 0302 03F01F02 		and	r2, r3, #31
 6802 0306 10E0     		b	.L381
 6803              	.L380:
 6804              		.loc 2 2864 12 discriminator 2
 6805 0308 7B68     		ldr	r3, [r7, #4]
 6806 030a 1B68     		ldr	r3, [r3]
 6807 030c 0321     		movs	r1, #3
ARM GAS  /tmp/ccZ0TYFG.s 			page 325


 6808 030e 1846     		mov	r0, r3
 6809 0310 FFF7FEFF 		bl	LL_ADC_GetOffsetChannel
 6810 0314 0346     		mov	r3, r0
 6811 0316 3B65     		str	r3, [r7, #80]
 6812              	.LBB48:
 6813              	.LBB49:
 988:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 6814              		.loc 3 988 4 is_stmt 1 discriminator 2
 6815 0318 3B6D     		ldr	r3, [r7, #80]
 6816              		.syntax unified
 6817              	@ 988 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 6818 031a 93FAA3F3 		rbit r3, r3
 6819              	@ 0 "" 2
 6820              		.thumb
 6821              		.syntax unified
 6822 031e FB64     		str	r3, [r7, #76]
 6823              		.loc 3 1001 10 discriminator 2
 6824 0320 FB6C     		ldr	r3, [r7, #76]
 6825              	.LBE49:
 6826              	.LBE48:
 6827              		.loc 2 2864 12 discriminator 2
 6828 0322 B3FA83F3 		clz	r3, r3
 6829 0326 DBB2     		uxtb	r3, r3
 6830 0328 1A46     		mov	r2, r3
 6831              	.L381:
 6832              		.loc 2 2864 104 discriminator 4
 6833 032a 3B68     		ldr	r3, [r7]
 6834 032c 1B68     		ldr	r3, [r3]
 6835 032e C3F31203 		ubfx	r3, r3, #0, #19
 6836 0332 002B     		cmp	r3, #0
 6837 0334 05D1     		bne	.L383
 6838              		.loc 2 2864 104 is_stmt 0 discriminator 5
 6839 0336 3B68     		ldr	r3, [r7]
 6840 0338 1B68     		ldr	r3, [r3]
 6841 033a 9B0E     		lsrs	r3, r3, #26
 6842 033c 03F01F03 		and	r3, r3, #31
 6843 0340 0AE0     		b	.L384
 6844              	.L383:
 6845              		.loc 2 2864 104 discriminator 6
 6846 0342 3B68     		ldr	r3, [r7]
 6847 0344 1B68     		ldr	r3, [r3]
 6848 0346 BB64     		str	r3, [r7, #72]
 6849              	.LBB50:
 6850              	.LBB51:
 988:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 6851              		.loc 3 988 4 is_stmt 1 discriminator 6
 6852 0348 BB6C     		ldr	r3, [r7, #72]
 6853              		.syntax unified
 6854              	@ 988 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 6855 034a 93FAA3F3 		rbit r3, r3
 6856              	@ 0 "" 2
 6857              		.thumb
 6858              		.syntax unified
 6859 034e 7B64     		str	r3, [r7, #68]
 6860              		.loc 3 1001 10 discriminator 6
 6861 0350 7B6C     		ldr	r3, [r7, #68]
 6862              	.LBE51:
ARM GAS  /tmp/ccZ0TYFG.s 			page 326


 6863              	.LBE50:
 6864              		.loc 2 2864 104 discriminator 6
 6865 0352 B3FA83F3 		clz	r3, r3
 6866 0356 DBB2     		uxtb	r3, r3
 6867              	.L384:
 6868              		.loc 2 2864 11 discriminator 8
 6869 0358 9A42     		cmp	r2, r3
 6870 035a 06D1     		bne	.L353
2865:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         {
2866:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****           LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 6871              		.loc 2 2866 11
 6872 035c 7B68     		ldr	r3, [r7, #4]
 6873 035e 1B68     		ldr	r3, [r3]
 6874 0360 0022     		movs	r2, #0
 6875 0362 0321     		movs	r1, #3
 6876 0364 1846     		mov	r0, r3
 6877 0366 FFF7FEFF 		bl	LL_ADC_SetOffsetState
 6878              	.L353:
2867:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         }
2868:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       }
2869:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     }
2870:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
2871:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     /* Parameters update conditioned to ADC state:                              */
2872:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     /* Parameters that can be updated only when ADC is disabled:                */
2873:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     /*  - Single or differential mode                                           */
2874:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 6879              		.loc 2 2874 9
 6880 036a 7B68     		ldr	r3, [r7, #4]
 6881 036c 1B68     		ldr	r3, [r3]
 6882 036e 1846     		mov	r0, r3
 6883 0370 FFF7FEFF 		bl	LL_ADC_IsEnabled
 6884 0374 0346     		mov	r3, r0
 6885              		.loc 2 2874 8
 6886 0376 002B     		cmp	r3, #0
 6887 0378 40F00C81 		bne	.L386
2875:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     {
2876:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       /* Set mode single-ended or differential input of the selected ADC channel */
2877:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 6888              		.loc 2 2877 7
 6889 037c 7B68     		ldr	r3, [r7, #4]
 6890 037e 1868     		ldr	r0, [r3]
 6891 0380 3B68     		ldr	r3, [r7]
 6892 0382 1968     		ldr	r1, [r3]
 6893 0384 3B68     		ldr	r3, [r7]
 6894 0386 DB68     		ldr	r3, [r3, #12]
 6895 0388 1A46     		mov	r2, r3
 6896 038a FFF7FEFF 		bl	LL_ADC_SetChannelSingleDiff
2878:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
2879:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       /* Configuration of differential mode */
2880:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 6897              		.loc 2 2880 18
 6898 038e 3B68     		ldr	r3, [r7]
 6899 0390 DB68     		ldr	r3, [r3, #12]
 6900              		.loc 2 2880 10
 6901 0392 AF4A     		ldr	r2, .L436
 6902 0394 9342     		cmp	r3, r2
 6903 0396 40F0FD80 		bne	.L386
ARM GAS  /tmp/ccZ0TYFG.s 			page 327


2881:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       {
2882:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         /* Set sampling time of the selected ADC channel */
2883:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits r
2884:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         LL_ADC_SetChannelSamplingTime(hadc->Instance,
 6904              		.loc 2 2884 9
 6905 039a 7B68     		ldr	r3, [r7, #4]
 6906 039c 1868     		ldr	r0, [r3]
2885:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****                                       (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_T
 6907              		.loc 2 2885 50
 6908 039e 3B68     		ldr	r3, [r7]
 6909 03a0 1B68     		ldr	r3, [r3]
 6910 03a2 C3F31203 		ubfx	r3, r3, #0, #19
 6911 03a6 002B     		cmp	r3, #0
 6912 03a8 0BD1     		bne	.L387
 6913              		.loc 2 2885 50 is_stmt 0 discriminator 1
 6914 03aa 3B68     		ldr	r3, [r7]
 6915 03ac 1B68     		ldr	r3, [r3]
 6916 03ae 9B0E     		lsrs	r3, r3, #26
 6917 03b0 0133     		adds	r3, r3, #1
 6918 03b2 03F01F03 		and	r3, r3, #31
 6919 03b6 092B     		cmp	r3, #9
 6920 03b8 94BF     		ite	ls
 6921 03ba 0123     		movls	r3, #1
 6922 03bc 0023     		movhi	r3, #0
 6923 03be DBB2     		uxtb	r3, r3
 6924 03c0 12E0     		b	.L388
 6925              	.L387:
 6926              		.loc 2 2885 50 discriminator 2
 6927 03c2 3B68     		ldr	r3, [r7]
 6928 03c4 1B68     		ldr	r3, [r3]
 6929 03c6 3B64     		str	r3, [r7, #64]
 6930              	.LBB52:
 6931              	.LBB53:
 988:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 6932              		.loc 3 988 4 is_stmt 1 discriminator 2
 6933 03c8 3B6C     		ldr	r3, [r7, #64]
 6934              		.syntax unified
 6935              	@ 988 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 6936 03ca 93FAA3F3 		rbit r3, r3
 6937              	@ 0 "" 2
 6938              		.thumb
 6939              		.syntax unified
 6940 03ce FB63     		str	r3, [r7, #60]
 6941              		.loc 3 1001 10 discriminator 2
 6942 03d0 FB6B     		ldr	r3, [r7, #60]
 6943              	.LBE53:
 6944              	.LBE52:
 6945              		.loc 2 2885 50 discriminator 2
 6946 03d2 B3FA83F3 		clz	r3, r3
 6947 03d6 DBB2     		uxtb	r3, r3
 6948 03d8 0133     		adds	r3, r3, #1
 6949 03da 03F01F03 		and	r3, r3, #31
 6950 03de 092B     		cmp	r3, #9
 6951 03e0 94BF     		ite	ls
 6952 03e2 0123     		movls	r3, #1
 6953 03e4 0023     		movhi	r3, #0
 6954 03e6 DBB2     		uxtb	r3, r3
ARM GAS  /tmp/ccZ0TYFG.s 			page 328


 6955              	.L388:
2884:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****                                       (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_T
 6956              		.loc 2 2884 9
 6957 03e8 002B     		cmp	r3, #0
 6958 03ea 64D0     		beq	.L390
 6959              		.loc 2 2885 50
 6960 03ec 3B68     		ldr	r3, [r7]
 6961 03ee 1B68     		ldr	r3, [r3]
 6962 03f0 C3F31203 		ubfx	r3, r3, #0, #19
 6963 03f4 002B     		cmp	r3, #0
 6964 03f6 07D1     		bne	.L391
 6965              		.loc 2 2885 50 is_stmt 0 discriminator 3
 6966 03f8 3B68     		ldr	r3, [r7]
 6967 03fa 1B68     		ldr	r3, [r3]
 6968 03fc 9B0E     		lsrs	r3, r3, #26
 6969 03fe 0133     		adds	r3, r3, #1
 6970 0400 9B06     		lsls	r3, r3, #26
 6971 0402 03F0F842 		and	r2, r3, #2080374784
 6972 0406 0EE0     		b	.L392
 6973              	.L391:
 6974              		.loc 2 2885 50 discriminator 4
 6975 0408 3B68     		ldr	r3, [r7]
 6976 040a 1B68     		ldr	r3, [r3]
 6977 040c BB63     		str	r3, [r7, #56]
 6978              	.LBB54:
 6979              	.LBB55:
 988:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 6980              		.loc 3 988 4 is_stmt 1 discriminator 4
 6981 040e BB6B     		ldr	r3, [r7, #56]
 6982              		.syntax unified
 6983              	@ 988 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 6984 0410 93FAA3F3 		rbit r3, r3
 6985              	@ 0 "" 2
 6986              		.thumb
 6987              		.syntax unified
 6988 0414 7B63     		str	r3, [r7, #52]
 6989              		.loc 3 1001 10 discriminator 4
 6990 0416 7B6B     		ldr	r3, [r7, #52]
 6991              	.LBE55:
 6992              	.LBE54:
 6993              		.loc 2 2885 50 discriminator 4
 6994 0418 B3FA83F3 		clz	r3, r3
 6995 041c DBB2     		uxtb	r3, r3
 6996 041e 0133     		adds	r3, r3, #1
 6997 0420 9B06     		lsls	r3, r3, #26
 6998 0422 03F0F842 		and	r2, r3, #2080374784
 6999              	.L392:
 7000              		.loc 2 2885 50 is_stmt 0 discriminator 6
 7001 0426 3B68     		ldr	r3, [r7]
 7002 0428 1B68     		ldr	r3, [r3]
 7003 042a C3F31203 		ubfx	r3, r3, #0, #19
 7004 042e 002B     		cmp	r3, #0
 7005 0430 09D1     		bne	.L394
 7006              		.loc 2 2885 50 discriminator 7
 7007 0432 3B68     		ldr	r3, [r7]
 7008 0434 1B68     		ldr	r3, [r3]
 7009 0436 9B0E     		lsrs	r3, r3, #26
ARM GAS  /tmp/ccZ0TYFG.s 			page 329


 7010 0438 0133     		adds	r3, r3, #1
 7011 043a 03F01F03 		and	r3, r3, #31
 7012 043e 0121     		movs	r1, #1
 7013 0440 01FA03F3 		lsl	r3, r1, r3
 7014 0444 10E0     		b	.L395
 7015              	.L394:
 7016              		.loc 2 2885 50 discriminator 8
 7017 0446 3B68     		ldr	r3, [r7]
 7018 0448 1B68     		ldr	r3, [r3]
 7019 044a 3B63     		str	r3, [r7, #48]
 7020              	.LBB56:
 7021              	.LBB57:
 988:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 7022              		.loc 3 988 4 is_stmt 1 discriminator 8
 7023 044c 3B6B     		ldr	r3, [r7, #48]
 7024              		.syntax unified
 7025              	@ 988 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 7026 044e 93FAA3F3 		rbit r3, r3
 7027              	@ 0 "" 2
 7028              		.thumb
 7029              		.syntax unified
 7030 0452 FB62     		str	r3, [r7, #44]
 7031              		.loc 3 1001 10 discriminator 8
 7032 0454 FB6A     		ldr	r3, [r7, #44]
 7033              	.LBE57:
 7034              	.LBE56:
 7035              		.loc 2 2885 50 discriminator 8
 7036 0456 B3FA83F3 		clz	r3, r3
 7037 045a DBB2     		uxtb	r3, r3
 7038 045c 0133     		adds	r3, r3, #1
 7039 045e 03F01F03 		and	r3, r3, #31
 7040 0462 0121     		movs	r1, #1
 7041 0464 01FA03F3 		lsl	r3, r1, r3
 7042              	.L395:
 7043              		.loc 2 2885 50 is_stmt 0 discriminator 10
 7044 0468 42EA0301 		orr	r1, r2, r3
 7045 046c 3B68     		ldr	r3, [r7]
 7046 046e 1B68     		ldr	r3, [r3]
 7047 0470 C3F31203 		ubfx	r3, r3, #0, #19
 7048 0474 002B     		cmp	r3, #0
 7049 0476 0AD1     		bne	.L397
 7050              		.loc 2 2885 50 discriminator 11
 7051 0478 3B68     		ldr	r3, [r7]
 7052 047a 1B68     		ldr	r3, [r3]
 7053 047c 9B0E     		lsrs	r3, r3, #26
 7054 047e 0133     		adds	r3, r3, #1
 7055 0480 03F01F02 		and	r2, r3, #31
 7056 0484 1346     		mov	r3, r2
 7057 0486 5B00     		lsls	r3, r3, #1
 7058 0488 1344     		add	r3, r3, r2
 7059 048a 1B05     		lsls	r3, r3, #20
 7060 048c 11E0     		b	.L398
 7061              	.L397:
 7062              		.loc 2 2885 50 discriminator 12
 7063 048e 3B68     		ldr	r3, [r7]
 7064 0490 1B68     		ldr	r3, [r3]
 7065 0492 BB62     		str	r3, [r7, #40]
ARM GAS  /tmp/ccZ0TYFG.s 			page 330


 7066              	.LBB58:
 7067              	.LBB59:
 988:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 7068              		.loc 3 988 4 is_stmt 1 discriminator 12
 7069 0494 BB6A     		ldr	r3, [r7, #40]
 7070              		.syntax unified
 7071              	@ 988 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 7072 0496 93FAA3F3 		rbit r3, r3
 7073              	@ 0 "" 2
 7074              		.thumb
 7075              		.syntax unified
 7076 049a 7B62     		str	r3, [r7, #36]
 7077              		.loc 3 1001 10 discriminator 12
 7078 049c 7B6A     		ldr	r3, [r7, #36]
 7079              	.LBE59:
 7080              	.LBE58:
 7081              		.loc 2 2885 50 discriminator 12
 7082 049e B3FA83F3 		clz	r3, r3
 7083 04a2 DBB2     		uxtb	r3, r3
 7084 04a4 0133     		adds	r3, r3, #1
 7085 04a6 03F01F02 		and	r2, r3, #31
 7086 04aa 1346     		mov	r3, r2
 7087 04ac 5B00     		lsls	r3, r3, #1
 7088 04ae 1344     		add	r3, r3, r2
 7089 04b0 1B05     		lsls	r3, r3, #20
 7090              	.L398:
2884:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****                                       (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_T
 7091              		.loc 2 2884 9
 7092 04b2 0B43     		orrs	r3, r3, r1
 7093 04b4 69E0     		b	.L400
 7094              	.L390:
 7095              		.loc 2 2885 50
 7096 04b6 3B68     		ldr	r3, [r7]
 7097 04b8 1B68     		ldr	r3, [r3]
 7098 04ba C3F31203 		ubfx	r3, r3, #0, #19
 7099 04be 002B     		cmp	r3, #0
 7100 04c0 07D1     		bne	.L401
 7101              		.loc 2 2885 50 is_stmt 0 discriminator 13
 7102 04c2 3B68     		ldr	r3, [r7]
 7103 04c4 1B68     		ldr	r3, [r3]
 7104 04c6 9B0E     		lsrs	r3, r3, #26
 7105 04c8 0133     		adds	r3, r3, #1
 7106 04ca 9B06     		lsls	r3, r3, #26
 7107 04cc 03F0F842 		and	r2, r3, #2080374784
 7108 04d0 0EE0     		b	.L402
 7109              	.L401:
 7110              		.loc 2 2885 50 discriminator 14
 7111 04d2 3B68     		ldr	r3, [r7]
 7112 04d4 1B68     		ldr	r3, [r3]
 7113 04d6 3B62     		str	r3, [r7, #32]
 7114              	.LBB60:
 7115              	.LBB61:
 988:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 7116              		.loc 3 988 4 is_stmt 1 discriminator 14
 7117 04d8 3B6A     		ldr	r3, [r7, #32]
 7118              		.syntax unified
 7119              	@ 988 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
ARM GAS  /tmp/ccZ0TYFG.s 			page 331


 7120 04da 93FAA3F3 		rbit r3, r3
 7121              	@ 0 "" 2
 7122              		.thumb
 7123              		.syntax unified
 7124 04de FB61     		str	r3, [r7, #28]
 7125              		.loc 3 1001 10 discriminator 14
 7126 04e0 FB69     		ldr	r3, [r7, #28]
 7127              	.LBE61:
 7128              	.LBE60:
 7129              		.loc 2 2885 50 discriminator 14
 7130 04e2 B3FA83F3 		clz	r3, r3
 7131 04e6 DBB2     		uxtb	r3, r3
 7132 04e8 0133     		adds	r3, r3, #1
 7133 04ea 9B06     		lsls	r3, r3, #26
 7134 04ec 03F0F842 		and	r2, r3, #2080374784
 7135              	.L402:
 7136              		.loc 2 2885 50 is_stmt 0 discriminator 16
 7137 04f0 3B68     		ldr	r3, [r7]
 7138 04f2 1B68     		ldr	r3, [r3]
 7139 04f4 C3F31203 		ubfx	r3, r3, #0, #19
 7140 04f8 002B     		cmp	r3, #0
 7141 04fa 09D1     		bne	.L404
 7142              		.loc 2 2885 50 discriminator 17
 7143 04fc 3B68     		ldr	r3, [r7]
 7144 04fe 1B68     		ldr	r3, [r3]
 7145 0500 9B0E     		lsrs	r3, r3, #26
 7146 0502 0133     		adds	r3, r3, #1
 7147 0504 03F01F03 		and	r3, r3, #31
 7148 0508 0121     		movs	r1, #1
 7149 050a 01FA03F3 		lsl	r3, r1, r3
 7150 050e 10E0     		b	.L405
 7151              	.L404:
 7152              		.loc 2 2885 50 discriminator 18
 7153 0510 3B68     		ldr	r3, [r7]
 7154 0512 1B68     		ldr	r3, [r3]
 7155 0514 BB61     		str	r3, [r7, #24]
 7156              	.LBB62:
 7157              	.LBB63:
 988:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 7158              		.loc 3 988 4 is_stmt 1 discriminator 18
 7159 0516 BB69     		ldr	r3, [r7, #24]
 7160              		.syntax unified
 7161              	@ 988 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 7162 0518 93FAA3F3 		rbit r3, r3
 7163              	@ 0 "" 2
 7164              		.thumb
 7165              		.syntax unified
 7166 051c 7B61     		str	r3, [r7, #20]
 7167              		.loc 3 1001 10 discriminator 18
 7168 051e 7B69     		ldr	r3, [r7, #20]
 7169              	.LBE63:
 7170              	.LBE62:
 7171              		.loc 2 2885 50 discriminator 18
 7172 0520 B3FA83F3 		clz	r3, r3
 7173 0524 DBB2     		uxtb	r3, r3
 7174 0526 0133     		adds	r3, r3, #1
 7175 0528 03F01F03 		and	r3, r3, #31
ARM GAS  /tmp/ccZ0TYFG.s 			page 332


 7176 052c 0121     		movs	r1, #1
 7177 052e 01FA03F3 		lsl	r3, r1, r3
 7178              	.L405:
 7179              		.loc 2 2885 50 is_stmt 0 discriminator 20
 7180 0532 42EA0301 		orr	r1, r2, r3
 7181 0536 3B68     		ldr	r3, [r7]
 7182 0538 1B68     		ldr	r3, [r3]
 7183 053a C3F31203 		ubfx	r3, r3, #0, #19
 7184 053e 002B     		cmp	r3, #0
 7185 0540 0DD1     		bne	.L407
 7186              		.loc 2 2885 50 discriminator 21
 7187 0542 3B68     		ldr	r3, [r7]
 7188 0544 1B68     		ldr	r3, [r3]
 7189 0546 9B0E     		lsrs	r3, r3, #26
 7190 0548 0133     		adds	r3, r3, #1
 7191 054a 03F01F02 		and	r2, r3, #31
 7192 054e 1346     		mov	r3, r2
 7193 0550 5B00     		lsls	r3, r3, #1
 7194 0552 1344     		add	r3, r3, r2
 7195 0554 1E3B     		subs	r3, r3, #30
 7196 0556 1B05     		lsls	r3, r3, #20
 7197 0558 43F00073 		orr	r3, r3, #33554432
 7198 055c 14E0     		b	.L408
 7199              	.L407:
 7200              		.loc 2 2885 50 discriminator 22
 7201 055e 3B68     		ldr	r3, [r7]
 7202 0560 1B68     		ldr	r3, [r3]
 7203 0562 3B61     		str	r3, [r7, #16]
 7204              	.LBB64:
 7205              	.LBB65:
 988:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 7206              		.loc 3 988 4 is_stmt 1 discriminator 22
 7207 0564 3B69     		ldr	r3, [r7, #16]
 7208              		.syntax unified
 7209              	@ 988 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 7210 0566 93FAA3F3 		rbit r3, r3
 7211              	@ 0 "" 2
 7212              		.thumb
 7213              		.syntax unified
 7214 056a FB60     		str	r3, [r7, #12]
 7215              		.loc 3 1001 10 discriminator 22
 7216 056c FB68     		ldr	r3, [r7, #12]
 7217              	.LBE65:
 7218              	.LBE64:
 7219              		.loc 2 2885 50 discriminator 22
 7220 056e B3FA83F3 		clz	r3, r3
 7221 0572 DBB2     		uxtb	r3, r3
 7222 0574 0133     		adds	r3, r3, #1
 7223 0576 03F01F02 		and	r2, r3, #31
 7224 057a 1346     		mov	r3, r2
 7225 057c 5B00     		lsls	r3, r3, #1
 7226 057e 1344     		add	r3, r3, r2
 7227 0580 1E3B     		subs	r3, r3, #30
 7228 0582 1B05     		lsls	r3, r3, #20
 7229 0584 43F00073 		orr	r3, r3, #33554432
 7230              	.L408:
2884:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****                                       (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_T
ARM GAS  /tmp/ccZ0TYFG.s 			page 333


 7231              		.loc 2 2884 9 discriminator 2
 7232 0588 0B43     		orrs	r3, r3, r1
 7233              	.L400:
2884:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****                                       (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_T
 7234              		.loc 2 2884 9 is_stmt 0 discriminator 1
 7235 058a 3A68     		ldr	r2, [r7]
 7236 058c 9268     		ldr	r2, [r2, #8]
 7237 058e 1946     		mov	r1, r3
 7238 0590 FFF7FEFF 		bl	LL_ADC_SetChannelSamplingTime
 7239              	.L386:
2886:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****                                       sConfig->SamplingTime);
2887:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       }
2888:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
2889:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     }
2890:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
2891:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
2892:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     /* If internal channel selected, enable dedicated internal buffers and    */
2893:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     /* paths.                                                                 */
2894:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     /* Note: these internal measurement paths can be disabled using           */
2895:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     /* HAL_ADC_DeInit().                                                      */
2896:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
2897:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 7240              		.loc 2 2897 9 is_stmt 1
 7241 0594 3B68     		ldr	r3, [r7]
 7242 0596 1A68     		ldr	r2, [r3]
 7243 0598 2E4B     		ldr	r3, .L436+4
 7244 059a 1340     		ands	r3, r3, r2
 7245              		.loc 2 2897 8
 7246 059c 002B     		cmp	r3, #0
 7247 059e 00F0C980 		beq	.L433
2898:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     {
2899:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->I
 7248              		.loc 2 2899 68
 7249 05a2 7B68     		ldr	r3, [r7, #4]
 7250 05a4 1B68     		ldr	r3, [r3]
 7251              		.loc 2 2899 37
 7252 05a6 B3F1A04F 		cmp	r3, #1342177280
 7253 05aa 04D0     		beq	.L411
 7254              		.loc 2 2899 68 discriminator 2
 7255 05ac 7B68     		ldr	r3, [r7, #4]
 7256 05ae 1B68     		ldr	r3, [r3]
 7257 05b0 294A     		ldr	r2, .L436+8
 7258 05b2 9342     		cmp	r3, r2
 7259 05b4 01D1     		bne	.L412
 7260              	.L411:
 7261              		.loc 2 2899 37 discriminator 3
 7262 05b6 294B     		ldr	r3, .L436+12
 7263 05b8 00E0     		b	.L413
 7264              	.L412:
 7265              		.loc 2 2899 37 is_stmt 0 discriminator 4
 7266 05ba 294B     		ldr	r3, .L436+16
 7267              	.L413:
 7268              		.loc 2 2899 37 discriminator 6
 7269 05bc 1846     		mov	r0, r3
 7270 05be FFF7FEFF 		bl	LL_ADC_GetCommonPathInternalCh
 7271 05c2 C7F88400 		str	r0, [r7, #132]
2900:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
ARM GAS  /tmp/ccZ0TYFG.s 			page 334


2901:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       /* If the requested internal measurement path has already been enabled, */
2902:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       /* bypass the configuration processing.                                 */
2903:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TE
 7272              		.loc 2 2903 20 is_stmt 1 discriminator 6
 7273 05c6 3B68     		ldr	r3, [r7]
 7274 05c8 1B68     		ldr	r3, [r3]
 7275              		.loc 2 2903 10 discriminator 6
 7276 05ca 264A     		ldr	r2, .L436+20
 7277 05cc 9342     		cmp	r3, r2
 7278 05ce 04D0     		beq	.L414
 7279              		.loc 2 2903 73 discriminator 1
 7280 05d0 3B68     		ldr	r3, [r7]
 7281 05d2 1B68     		ldr	r3, [r3]
 7282              		.loc 2 2903 62 discriminator 1
 7283 05d4 244A     		ldr	r2, .L436+24
 7284 05d6 9342     		cmp	r3, r2
 7285 05d8 4ED1     		bne	.L415
 7286              	.L414:
2904:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****           && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 7287              		.loc 2 2904 44
 7288 05da D7F88430 		ldr	r3, [r7, #132]
 7289 05de 03F40003 		and	r3, r3, #8388608
 7290              		.loc 2 2904 11
 7291 05e2 002B     		cmp	r3, #0
 7292 05e4 48D1     		bne	.L415
2905:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       {
2906:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 7293              		.loc 2 2906 13
 7294 05e6 7B68     		ldr	r3, [r7, #4]
 7295 05e8 1B68     		ldr	r3, [r3]
 7296              		.loc 2 2906 12
 7297 05ea B3F1A04F 		cmp	r3, #1342177280
 7298 05ee 05D0     		beq	.L416
 7299              		.loc 2 2906 13 discriminator 1
 7300 05f0 7B68     		ldr	r3, [r7, #4]
 7301 05f2 1B68     		ldr	r3, [r3]
 7302 05f4 1D4A     		ldr	r2, .L436+28
 7303 05f6 9342     		cmp	r3, r2
 7304 05f8 40F09980 		bne	.L434
 7305              	.L416:
2907:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         {
2908:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****           LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 7306              		.loc 2 2908 42
 7307 05fc 7B68     		ldr	r3, [r7, #4]
 7308 05fe 1B68     		ldr	r3, [r3]
 7309              		.loc 2 2908 11
 7310 0600 B3F1A04F 		cmp	r3, #1342177280
 7311 0604 04D0     		beq	.L418
 7312              		.loc 2 2908 42 discriminator 2
 7313 0606 7B68     		ldr	r3, [r7, #4]
 7314 0608 1B68     		ldr	r3, [r3]
 7315 060a 134A     		ldr	r2, .L436+8
 7316 060c 9342     		cmp	r3, r2
 7317 060e 01D1     		bne	.L419
 7318              	.L418:
 7319              		.loc 2 2908 11 discriminator 3
 7320 0610 124A     		ldr	r2, .L436+12
ARM GAS  /tmp/ccZ0TYFG.s 			page 335


 7321 0612 00E0     		b	.L420
 7322              	.L419:
 7323              		.loc 2 2908 11 is_stmt 0 discriminator 4
 7324 0614 124A     		ldr	r2, .L436+16
 7325              	.L420:
 7326              		.loc 2 2908 11 discriminator 6
 7327 0616 D7F88430 		ldr	r3, [r7, #132]
 7328 061a 43F40003 		orr	r3, r3, #8388608
 7329 061e 1946     		mov	r1, r3
 7330 0620 1046     		mov	r0, r2
 7331 0622 FFF7FEFF 		bl	LL_ADC_SetCommonPathInternalCh
2909:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****                                          LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_chan
2910:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
2911:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****           /* Delay for temperature sensor stabilization time */
2912:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****           /* Wait loop initialization and execution */
2913:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****           /* Note: Variable divided by 2 to compensate partially              */
2914:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****           /*       CPU processing cycles, scaling in us split to not          */
2915:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****           /*       exceed 32 bits register capacity and handle low frequency. */
2916:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****           wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000U
 7332              		.loc 2 2916 90 is_stmt 1 discriminator 6
 7333 0626 124B     		ldr	r3, .L436+32
 7334 0628 1B68     		ldr	r3, [r3]
 7335 062a 9B09     		lsrs	r3, r3, #6
 7336 062c 114A     		ldr	r2, .L436+36
 7337 062e A2FB0323 		umull	r2, r3, r2, r3
 7338 0632 9A09     		lsrs	r2, r3, #6
 7339              		.loc 2 2916 71 discriminator 6
 7340 0634 1346     		mov	r3, r2
 7341 0636 5B00     		lsls	r3, r3, #1
 7342 0638 1344     		add	r3, r3, r2
 7343 063a 9B00     		lsls	r3, r3, #2
 7344              		.loc 2 2916 27 discriminator 6
 7345 063c BB60     		str	r3, [r7, #8]
2917:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****           while (wait_loop_index != 0UL)
 7346              		.loc 2 2917 17 discriminator 6
 7347 063e 02E0     		b	.L421
 7348              	.L422:
2918:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****           {
2919:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****             wait_loop_index--;
 7349              		.loc 2 2919 28
 7350 0640 BB68     		ldr	r3, [r7, #8]
 7351 0642 013B     		subs	r3, r3, #1
 7352 0644 BB60     		str	r3, [r7, #8]
 7353              	.L421:
2917:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****           while (wait_loop_index != 0UL)
 7354              		.loc 2 2917 34
 7355 0646 BB68     		ldr	r3, [r7, #8]
2917:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****           while (wait_loop_index != 0UL)
 7356              		.loc 2 2917 17
 7357 0648 002B     		cmp	r3, #0
 7358 064a F9D1     		bne	.L422
2906:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         {
 7359              		.loc 2 2906 12
 7360 064c 6FE0     		b	.L434
 7361              	.L437:
 7362 064e 00BF     		.align	2
 7363              	.L436:
ARM GAS  /tmp/ccZ0TYFG.s 			page 336


 7364 0650 00007F40 		.word	1082064896
 7365 0654 00000880 		.word	-2146959360
 7366 0658 00010050 		.word	1342177536
 7367 065c 00030050 		.word	1342178048
 7368 0660 00070050 		.word	1342179072
 7369 0664 000021C3 		.word	-1021247488
 7370 0668 1000C090 		.word	-1866465264
 7371 066c 00060050 		.word	1342178816
 7372 0670 00000000 		.word	SystemCoreClock
 7373 0674 632D3E05 		.word	87960931
 7374              	.L415:
2920:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****           }
2921:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         }
2922:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       }
2923:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PAT
 7375              		.loc 2 2923 24
 7376 0678 3B68     		ldr	r3, [r7]
 7377 067a 1B68     		ldr	r3, [r3]
 7378              		.loc 2 2923 15
 7379 067c 324A     		ldr	r2, .L438
 7380 067e 9342     		cmp	r3, r2
 7381 0680 25D1     		bne	.L423
 7382              		.loc 2 2923 88 discriminator 1
 7383 0682 D7F88430 		ldr	r3, [r7, #132]
 7384 0686 03F08073 		and	r3, r3, #16777216
 7385              		.loc 2 2923 55 discriminator 1
 7386 068a 002B     		cmp	r3, #0
 7387 068c 1FD1     		bne	.L423
2924:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       {
2925:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 7388              		.loc 2 2925 13
 7389 068e 7B68     		ldr	r3, [r7, #4]
 7390 0690 1B68     		ldr	r3, [r3]
 7391              		.loc 2 2925 12
 7392 0692 2E4A     		ldr	r2, .L438+4
 7393 0694 9342     		cmp	r3, r2
 7394 0696 04D1     		bne	.L424
 7395              		.loc 2 2925 13 discriminator 1
 7396 0698 7B68     		ldr	r3, [r7, #4]
 7397 069a 1B68     		ldr	r3, [r3]
 7398 069c 2C4A     		ldr	r2, .L438+8
 7399 069e 9342     		cmp	r3, r2
 7400 06a0 47D0     		beq	.L435
 7401              	.L424:
2926:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         {
2927:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****           LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 7402              		.loc 2 2927 42
 7403 06a2 7B68     		ldr	r3, [r7, #4]
 7404 06a4 1B68     		ldr	r3, [r3]
 7405              		.loc 2 2927 11
 7406 06a6 B3F1A04F 		cmp	r3, #1342177280
 7407 06aa 04D0     		beq	.L426
 7408              		.loc 2 2927 42 discriminator 2
 7409 06ac 7B68     		ldr	r3, [r7, #4]
 7410 06ae 1B68     		ldr	r3, [r3]
 7411 06b0 264A     		ldr	r2, .L438+4
 7412 06b2 9342     		cmp	r3, r2
ARM GAS  /tmp/ccZ0TYFG.s 			page 337


 7413 06b4 01D1     		bne	.L427
 7414              	.L426:
 7415              		.loc 2 2927 11 discriminator 3
 7416 06b6 274A     		ldr	r2, .L438+12
 7417 06b8 00E0     		b	.L428
 7418              	.L427:
 7419              		.loc 2 2927 11 is_stmt 0 discriminator 4
 7420 06ba 274A     		ldr	r2, .L438+16
 7421              	.L428:
 7422              		.loc 2 2927 11 discriminator 6
 7423 06bc D7F88430 		ldr	r3, [r7, #132]
 7424 06c0 43F08073 		orr	r3, r3, #16777216
 7425 06c4 1946     		mov	r1, r3
 7426 06c6 1046     		mov	r0, r2
 7427 06c8 FFF7FEFF 		bl	LL_ADC_SetCommonPathInternalCh
2925:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         {
 7428              		.loc 2 2925 12 is_stmt 1 discriminator 6
 7429 06cc 31E0     		b	.L435
 7430              	.L423:
2928:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****                                          LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
2929:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         }
2930:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       }
2931:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 7431              		.loc 2 2931 24
 7432 06ce 3B68     		ldr	r3, [r7]
 7433 06d0 1B68     		ldr	r3, [r3]
 7434              		.loc 2 2931 15
 7435 06d2 224A     		ldr	r2, .L438+20
 7436 06d4 9342     		cmp	r3, r2
 7437 06d6 2DD1     		bne	.L433
2932:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****                && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 7438              		.loc 2 2932 49
 7439 06d8 D7F88430 		ldr	r3, [r7, #132]
 7440 06dc 03F48003 		and	r3, r3, #4194304
 7441              		.loc 2 2932 16
 7442 06e0 002B     		cmp	r3, #0
 7443 06e2 27D1     		bne	.L433
2933:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       {
2934:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         if (ADC_VREFINT_INSTANCE(hadc))
 7444              		.loc 2 2934 13
 7445 06e4 7B68     		ldr	r3, [r7, #4]
 7446 06e6 1B68     		ldr	r3, [r3]
 7447              		.loc 2 2934 12
 7448 06e8 184A     		ldr	r2, .L438+4
 7449 06ea 9342     		cmp	r3, r2
 7450 06ec 22D0     		beq	.L433
2935:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         {
2936:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****           LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 7451              		.loc 2 2936 42
 7452 06ee 7B68     		ldr	r3, [r7, #4]
 7453 06f0 1B68     		ldr	r3, [r3]
 7454              		.loc 2 2936 11
 7455 06f2 B3F1A04F 		cmp	r3, #1342177280
 7456 06f6 04D0     		beq	.L430
 7457              		.loc 2 2936 42 discriminator 2
 7458 06f8 7B68     		ldr	r3, [r7, #4]
 7459 06fa 1B68     		ldr	r3, [r3]
ARM GAS  /tmp/ccZ0TYFG.s 			page 338


 7460 06fc 134A     		ldr	r2, .L438+4
 7461 06fe 9342     		cmp	r3, r2
 7462 0700 01D1     		bne	.L431
 7463              	.L430:
 7464              		.loc 2 2936 11 discriminator 3
 7465 0702 144A     		ldr	r2, .L438+12
 7466 0704 00E0     		b	.L432
 7467              	.L431:
 7468              		.loc 2 2936 11 is_stmt 0 discriminator 4
 7469 0706 144A     		ldr	r2, .L438+16
 7470              	.L432:
 7471              		.loc 2 2936 11 discriminator 6
 7472 0708 D7F88430 		ldr	r3, [r7, #132]
 7473 070c 43F48003 		orr	r3, r3, #4194304
 7474 0710 1946     		mov	r1, r3
 7475 0712 1046     		mov	r0, r2
 7476 0714 FFF7FEFF 		bl	LL_ADC_SetCommonPathInternalCh
 7477 0718 0CE0     		b	.L433
 7478              	.L352:
2937:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****                                          LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel
2938:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         }
2939:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       }
2940:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       else
2941:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       {
2942:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         /* nothing to do */
2943:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       }
2944:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     }
2945:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   }
2946:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
2947:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   /* If a conversion is on going on regular group, no update on regular       */
2948:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   /* channel could be done on neither of the channel configuration structure  */
2949:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   /* parameters.                                                              */
2950:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   else
2951:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   {
2952:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     /* Update ADC state machine to error */
2953:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 7479              		.loc 2 2953 5 is_stmt 1
 7480 071a 7B68     		ldr	r3, [r7, #4]
 7481 071c DB6D     		ldr	r3, [r3, #92]
 7482 071e 43F02002 		orr	r2, r3, #32
 7483 0722 7B68     		ldr	r3, [r7, #4]
 7484 0724 DA65     		str	r2, [r3, #92]
2954:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
2955:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     tmp_hal_status = HAL_ERROR;
 7485              		.loc 2 2955 20
 7486 0726 0123     		movs	r3, #1
 7487 0728 87F89730 		strb	r3, [r7, #151]
 7488 072c 02E0     		b	.L433
 7489              	.L434:
2906:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         {
 7490              		.loc 2 2906 12
 7491 072e 00BF     		nop
 7492 0730 00E0     		b	.L433
 7493              	.L435:
2925:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         {
 7494              		.loc 2 2925 12
 7495 0732 00BF     		nop
ARM GAS  /tmp/ccZ0TYFG.s 			page 339


 7496              	.L433:
2956:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   }
2957:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
2958:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   /* Process unlocked */
2959:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   __HAL_UNLOCK(hadc);
 7497              		.loc 2 2959 3
 7498 0734 7B68     		ldr	r3, [r7, #4]
 7499 0736 0022     		movs	r2, #0
 7500 0738 83F85820 		strb	r2, [r3, #88]
2960:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
2961:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   /* Return function status */
2962:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   return tmp_hal_status;
 7501              		.loc 2 2962 10
 7502 073c 97F89730 		ldrb	r3, [r7, #151]	@ zero_extendqisi2
 7503              	.L351:
2963:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** }
 7504              		.loc 2 2963 1
 7505 0740 1846     		mov	r0, r3
 7506 0742 9837     		adds	r7, r7, #152
 7507              	.LCFI352:
 7508              		.cfi_def_cfa_offset 8
 7509 0744 BD46     		mov	sp, r7
 7510              	.LCFI353:
 7511              		.cfi_def_cfa_register 13
 7512              		@ sp needed
 7513 0746 80BD     		pop	{r7, pc}
 7514              	.L439:
 7515              		.align	2
 7516              	.L438:
 7517 0748 000052C7 		.word	-950927360
 7518 074c 00010050 		.word	1342177536
 7519 0750 00050050 		.word	1342178560
 7520 0754 00030050 		.word	1342178048
 7521 0758 00070050 		.word	1342179072
 7522 075c 000084CB 		.word	-880541696
 7523              		.cfi_endproc
 7524              	.LFE345:
 7526              		.section	.text.HAL_ADC_AnalogWDGConfig,"ax",%progbits
 7527              		.align	1
 7528              		.global	HAL_ADC_AnalogWDGConfig
 7529              		.syntax unified
 7530              		.thumb
 7531              		.thumb_func
 7532              		.fpu fpv4-sp-d16
 7534              	HAL_ADC_AnalogWDGConfig:
 7535              	.LFB346:
2964:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
2965:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** /**
2966:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   * @brief  Configure the analog watchdog.
2967:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   * @note   Possibility to update parameters on the fly:
2968:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   *         This function initializes the selected analog watchdog, successive
2969:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   *         calls to this function can be used to reconfigure some parameters
2970:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   *         of structure "ADC_AnalogWDGConfTypeDef" on the fly, without resetting
2971:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   *         the ADC.
2972:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   *         The setting of these parameters is conditioned to ADC state.
2973:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   *         For parameters constraints, see comments of structure
2974:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   *         "ADC_AnalogWDGConfTypeDef".
ARM GAS  /tmp/ccZ0TYFG.s 			page 340


2975:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   * @note   On this STM32 serie, analog watchdog thresholds can be modified
2976:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   *         while ADC conversion is on going.
2977:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   *         In this case, some constraints must be taken into account:
2978:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   *         the programmed threshold values are effective from the next
2979:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   *         ADC EOC (end of unitary conversion).
2980:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   *         Considering that registers write delay may happen due to
2981:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   *         bus activity, this might cause an uncertainty on the
2982:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   *         effective timing of the new programmed threshold values.
2983:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   * @param hadc ADC handle
2984:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   * @param AnalogWDGConfig Structure of ADC analog watchdog configuration
2985:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   * @retval HAL status
2986:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   */
2987:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_AnalogWDGConfig(ADC_HandleTypeDef *hadc, ADC_AnalogWDGConfTypeDef *Analog
2988:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** {
 7536              		.loc 2 2988 1
 7537              		.cfi_startproc
 7538              		@ args = 0, pretend = 0, frame = 48
 7539              		@ frame_needed = 1, uses_anonymous_args = 0
 7540 0000 80B5     		push	{r7, lr}
 7541              	.LCFI354:
 7542              		.cfi_def_cfa_offset 8
 7543              		.cfi_offset 7, -8
 7544              		.cfi_offset 14, -4
 7545 0002 8CB0     		sub	sp, sp, #48
 7546              	.LCFI355:
 7547              		.cfi_def_cfa_offset 56
 7548 0004 00AF     		add	r7, sp, #0
 7549              	.LCFI356:
 7550              		.cfi_def_cfa_register 7
 7551 0006 7860     		str	r0, [r7, #4]
 7552 0008 3960     		str	r1, [r7]
2989:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 7553              		.loc 2 2989 21
 7554 000a 0023     		movs	r3, #0
 7555 000c 87F82730 		strb	r3, [r7, #39]
2990:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   uint32_t tmpAWDHighThresholdShifted;
2991:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   uint32_t tmpAWDLowThresholdShifted;
2992:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   uint32_t tmp_adc_is_conversion_on_going_regular;
2993:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   uint32_t tmp_adc_is_conversion_on_going_injected;
2994:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
2995:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   /* Check the parameters */
2996:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
2997:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   assert_param(IS_ADC_ANALOG_WATCHDOG_NUMBER(AnalogWDGConfig->WatchdogNumber));
2998:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   assert_param(IS_ADC_ANALOG_WATCHDOG_MODE(AnalogWDGConfig->WatchdogMode));
2999:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   assert_param(IS_ADC_ANALOG_WATCHDOG_FILTERING_MODE(AnalogWDGConfig->FilteringConfig));
3000:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(AnalogWDGConfig->ITMode));
3001:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
3002:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   if ((AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_REG)     ||
 7556              		.loc 2 3002 23
 7557 0010 3B68     		ldr	r3, [r7]
 7558 0012 5B68     		ldr	r3, [r3, #4]
 7559              		.loc 2 3002 6
 7560 0014 B3F5400F 		cmp	r3, #12582912
 7561 0018 03D0     		beq	.L441
3003:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       (AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_INJEC)   ||
 7562              		.loc 2 3003 23 discriminator 1
 7563 001a 3B68     		ldr	r3, [r7]
ARM GAS  /tmp/ccZ0TYFG.s 			page 341


 7564 001c 5B68     		ldr	r3, [r3, #4]
3002:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       (AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_INJEC)   ||
 7565              		.loc 2 3002 76 discriminator 1
 7566 001e B3F1A07F 		cmp	r3, #20971520
 7567              	.L441:
3004:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       (AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_REGINJEC))
3005:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   {
3006:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     assert_param(IS_ADC_CHANNEL(hadc, AnalogWDGConfig->Channel));
3007:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   }
3008:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
3009:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   /* Verify thresholds range */
3010:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   if (hadc->Init.OversamplingMode == ENABLE)
3011:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   {
3012:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     /* Case of oversampling enabled: depending on ratio and shift configuration,
3013:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****        analog watchdog thresholds can be higher than ADC resolution.
3014:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****        Verify if thresholds are within maximum thresholds range. */
3015:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     assert_param(IS_ADC_RANGE(ADC_RESOLUTION_12B, AnalogWDGConfig->HighThreshold));
3016:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     assert_param(IS_ADC_RANGE(ADC_RESOLUTION_12B, AnalogWDGConfig->LowThreshold));
3017:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   }
3018:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   else
3019:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   {
3020:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     /* Verify if thresholds are within the selected ADC resolution */
3021:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     assert_param(IS_ADC_RANGE(ADC_GET_RESOLUTION(hadc), AnalogWDGConfig->HighThreshold));
3022:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     assert_param(IS_ADC_RANGE(ADC_GET_RESOLUTION(hadc), AnalogWDGConfig->LowThreshold));
3023:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   }
3024:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
3025:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   /* Process locked */
3026:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   __HAL_LOCK(hadc);
 7568              		.loc 2 3026 3
 7569 0022 7B68     		ldr	r3, [r7, #4]
 7570 0024 93F85830 		ldrb	r3, [r3, #88]	@ zero_extendqisi2
 7571 0028 012B     		cmp	r3, #1
 7572 002a 01D1     		bne	.L442
 7573              		.loc 2 3026 3 is_stmt 0 discriminator 1
 7574 002c 0223     		movs	r3, #2
 7575 002e CEE1     		b	.L443
 7576              	.L442:
 7577              		.loc 2 3026 3 discriminator 2
 7578 0030 7B68     		ldr	r3, [r7, #4]
 7579 0032 0122     		movs	r2, #1
 7580 0034 83F85820 		strb	r2, [r3, #88]
3027:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
3028:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   /* Parameters update conditioned to ADC state:                              */
3029:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   /* Parameters that can be updated when ADC is disabled or enabled without   */
3030:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   /* conversion on going on ADC groups regular and injected:                  */
3031:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   /*  - Analog watchdog channels                                              */
3032:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 7581              		.loc 2 3032 44 is_stmt 1 discriminator 2
 7582 0038 7B68     		ldr	r3, [r7, #4]
 7583 003a 1B68     		ldr	r3, [r3]
 7584 003c 1846     		mov	r0, r3
 7585 003e FFF7FEFF 		bl	LL_ADC_REG_IsConversionOngoing
 7586 0042 3862     		str	r0, [r7, #32]
3033:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 7587              		.loc 2 3033 45 discriminator 2
 7588 0044 7B68     		ldr	r3, [r7, #4]
 7589 0046 1B68     		ldr	r3, [r3]
ARM GAS  /tmp/ccZ0TYFG.s 			page 342


 7590 0048 1846     		mov	r0, r3
 7591 004a FFF7FEFF 		bl	LL_ADC_INJ_IsConversionOngoing
 7592 004e F861     		str	r0, [r7, #28]
3034:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 7593              		.loc 2 3034 6 discriminator 2
 7594 0050 3B6A     		ldr	r3, [r7, #32]
 7595 0052 002B     		cmp	r3, #0
 7596 0054 40F05581 		bne	.L444
3035:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       && (tmp_adc_is_conversion_on_going_injected == 0UL)
 7597              		.loc 2 3035 7
 7598 0058 FB69     		ldr	r3, [r7, #28]
 7599 005a 002B     		cmp	r3, #0
 7600 005c 40F05181 		bne	.L444
3036:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****      )
3037:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   {
3038:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     /* Analog watchdog configuration */
3039:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 7601              		.loc 2 3039 24
 7602 0060 3B68     		ldr	r3, [r7]
 7603 0062 1B68     		ldr	r3, [r3]
 7604              		.loc 2 3039 8
 7605 0064 9F4A     		ldr	r2, .L480
 7606 0066 9342     		cmp	r3, r2
 7607 0068 40F08680 		bne	.L445
3040:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     {
3041:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       /* Configuration of analog watchdog:                                    */
3042:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       /*  - Set the analog watchdog enable mode: one or overall group of      */
3043:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       /*    channels, on groups regular and-or injected.                      */
3044:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       switch (AnalogWDGConfig->WatchdogMode)
 7608              		.loc 2 3044 30
 7609 006c 3B68     		ldr	r3, [r7]
 7610 006e 5B68     		ldr	r3, [r3, #4]
 7611              		.loc 2 3044 7
 7612 0070 B3F1807F 		cmp	r3, #16777216
 7613 0074 42D0     		beq	.L446
 7614 0076 B3F1807F 		cmp	r3, #16777216
 7615 007a 06D8     		bhi	.L447
 7616 007c B3F5000F 		cmp	r3, #8388608
 7617 0080 34D0     		beq	.L448
 7618 0082 B3F5400F 		cmp	r3, #12582912
 7619 0086 0AD0     		beq	.L449
 7620 0088 48E0     		b	.L450
 7621              	.L447:
 7622 008a B3F1C07F 		cmp	r3, #25165824
 7623 008e 3DD0     		beq	.L451
 7624 0090 B3F1E07F 		cmp	r3, #29360128
 7625 0094 1DD0     		beq	.L452
 7626 0096 B3F1A07F 		cmp	r3, #20971520
 7627 009a 0DD0     		beq	.L453
 7628 009c 3EE0     		b	.L450
 7629              	.L449:
3045:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       {
3046:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         case ADC_ANALOGWATCHDOG_SINGLE_REG:
3047:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****           LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, __LL_ADC_ANALOGWD_CHANNEL_GR
 7630              		.loc 2 3047 11
 7631 009e 7B68     		ldr	r3, [r7, #4]
 7632 00a0 1868     		ldr	r0, [r3]
ARM GAS  /tmp/ccZ0TYFG.s 			page 343


 7633              		.loc 2 3047 72
 7634 00a2 3B68     		ldr	r3, [r7]
 7635 00a4 9B68     		ldr	r3, [r3, #8]
 7636 00a6 23F07C73 		bic	r3, r3, #66060288
 7637              		.loc 2 3047 11
 7638 00aa 43F44003 		orr	r3, r3, #12582912
 7639 00ae 1A46     		mov	r2, r3
 7640 00b0 8C49     		ldr	r1, .L480
 7641 00b2 FFF7FEFF 		bl	LL_ADC_SetAnalogWDMonitChannels
3048:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****                                           LL_ADC_GROUP_REGULAR));
3049:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****           break;
 7642              		.loc 2 3049 11
 7643 00b6 39E0     		b	.L454
 7644              	.L453:
3050:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
3051:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         case ADC_ANALOGWATCHDOG_SINGLE_INJEC:
3052:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****           LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, __LL_ADC_ANALOGWD_CHANNEL_GR
 7645              		.loc 2 3052 11
 7646 00b8 7B68     		ldr	r3, [r7, #4]
 7647 00ba 1868     		ldr	r0, [r3]
 7648              		.loc 2 3052 72
 7649 00bc 3B68     		ldr	r3, [r7]
 7650 00be 9B68     		ldr	r3, [r3, #8]
 7651 00c0 23F07C73 		bic	r3, r3, #66060288
 7652              		.loc 2 3052 11
 7653 00c4 43F0A073 		orr	r3, r3, #20971520
 7654 00c8 1A46     		mov	r2, r3
 7655 00ca 8649     		ldr	r1, .L480
 7656 00cc FFF7FEFF 		bl	LL_ADC_SetAnalogWDMonitChannels
3053:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****                                           LL_ADC_GROUP_INJECTED));
3054:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****           break;
 7657              		.loc 2 3054 11
 7658 00d0 2CE0     		b	.L454
 7659              	.L452:
3055:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
3056:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         case ADC_ANALOGWATCHDOG_SINGLE_REGINJEC:
3057:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****           LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, __LL_ADC_ANALOGWD_CHANNEL_GR
 7660              		.loc 2 3057 11
 7661 00d2 7B68     		ldr	r3, [r7, #4]
 7662 00d4 1868     		ldr	r0, [r3]
 7663              		.loc 2 3057 72
 7664 00d6 3B68     		ldr	r3, [r7]
 7665 00d8 9B68     		ldr	r3, [r3, #8]
 7666 00da 23F07C73 		bic	r3, r3, #66060288
 7667              		.loc 2 3057 11
 7668 00de 43F0E073 		orr	r3, r3, #29360128
 7669 00e2 1A46     		mov	r2, r3
 7670 00e4 7F49     		ldr	r1, .L480
 7671 00e6 FFF7FEFF 		bl	LL_ADC_SetAnalogWDMonitChannels
3058:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****                                           LL_ADC_GROUP_REGULAR_INJECTED));
3059:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****           break;
 7672              		.loc 2 3059 11
 7673 00ea 1FE0     		b	.L454
 7674              	.L448:
3060:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
3061:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         case ADC_ANALOGWATCHDOG_ALL_REG:
3062:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****           LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, LL_ADC_AWD_ALL_CHANNELS_REG)
ARM GAS  /tmp/ccZ0TYFG.s 			page 344


 7675              		.loc 2 3062 11
 7676 00ec 7B68     		ldr	r3, [r7, #4]
 7677 00ee 1B68     		ldr	r3, [r3]
 7678 00f0 7D4A     		ldr	r2, .L480+4
 7679 00f2 7C49     		ldr	r1, .L480
 7680 00f4 1846     		mov	r0, r3
 7681 00f6 FFF7FEFF 		bl	LL_ADC_SetAnalogWDMonitChannels
3063:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****           break;
 7682              		.loc 2 3063 11
 7683 00fa 17E0     		b	.L454
 7684              	.L446:
3064:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
3065:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         case ADC_ANALOGWATCHDOG_ALL_INJEC:
3066:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****           LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, LL_ADC_AWD_ALL_CHANNELS_INJ)
 7685              		.loc 2 3066 11
 7686 00fc 7B68     		ldr	r3, [r7, #4]
 7687 00fe 1B68     		ldr	r3, [r3]
 7688 0100 7A4A     		ldr	r2, .L480+8
 7689 0102 7849     		ldr	r1, .L480
 7690 0104 1846     		mov	r0, r3
 7691 0106 FFF7FEFF 		bl	LL_ADC_SetAnalogWDMonitChannels
3067:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****           break;
 7692              		.loc 2 3067 11
 7693 010a 0FE0     		b	.L454
 7694              	.L451:
3068:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
3069:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         case ADC_ANALOGWATCHDOG_ALL_REGINJEC:
3070:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****           LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, LL_ADC_AWD_ALL_CHANNELS_REG_
 7695              		.loc 2 3070 11
 7696 010c 7B68     		ldr	r3, [r7, #4]
 7697 010e 1B68     		ldr	r3, [r3]
 7698 0110 774A     		ldr	r2, .L480+12
 7699 0112 7449     		ldr	r1, .L480
 7700 0114 1846     		mov	r0, r3
 7701 0116 FFF7FEFF 		bl	LL_ADC_SetAnalogWDMonitChannels
3071:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****           break;
 7702              		.loc 2 3071 11
 7703 011a 07E0     		b	.L454
 7704              	.L450:
3072:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
3073:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         default: /* ADC_ANALOGWATCHDOG_NONE */
3074:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****           LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, LL_ADC_AWD_DISABLE);
 7705              		.loc 2 3074 11
 7706 011c 7B68     		ldr	r3, [r7, #4]
 7707 011e 1B68     		ldr	r3, [r3]
 7708 0120 0022     		movs	r2, #0
 7709 0122 7049     		ldr	r1, .L480
 7710 0124 1846     		mov	r0, r3
 7711 0126 FFF7FEFF 		bl	LL_ADC_SetAnalogWDMonitChannels
3075:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****           break;
 7712              		.loc 2 3075 11
 7713 012a 00BF     		nop
 7714              	.L454:
3076:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       }
3077:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
3078:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       /* Set the filtering configuration */
3079:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       MODIFY_REG(hadc->Instance->TR1,
ARM GAS  /tmp/ccZ0TYFG.s 			page 345


 7715              		.loc 2 3079 7
 7716 012c 7B68     		ldr	r3, [r7, #4]
 7717 012e 1B68     		ldr	r3, [r3]
 7718 0130 1B6A     		ldr	r3, [r3, #32]
 7719 0132 23F4E041 		bic	r1, r3, #28672
 7720 0136 3B68     		ldr	r3, [r7]
 7721 0138 9A69     		ldr	r2, [r3, #24]
 7722 013a 7B68     		ldr	r3, [r7, #4]
 7723 013c 1B68     		ldr	r3, [r3]
 7724 013e 0A43     		orrs	r2, r2, r1
 7725 0140 1A62     		str	r2, [r3, #32]
3080:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****                  ADC_TR1_AWDFILT,
3081:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****                  AnalogWDGConfig->FilteringConfig);
3082:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
3083:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       /* Update state, clear previous result related to AWD1 */
3084:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 7726              		.loc 2 3084 7
 7727 0142 7B68     		ldr	r3, [r7, #4]
 7728 0144 DB6D     		ldr	r3, [r3, #92]
 7729 0146 23F48032 		bic	r2, r3, #65536
 7730 014a 7B68     		ldr	r3, [r7, #4]
 7731 014c DA65     		str	r2, [r3, #92]
3085:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
3086:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       /* Clear flag ADC analog watchdog */
3087:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       /* Note: Flag cleared Clear the ADC Analog watchdog flag to be ready  */
3088:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       /* to use for HAL_ADC_IRQHandler() or HAL_ADC_PollForEvent()          */
3089:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       /* (in case left enabled by previous ADC operations).                 */
3090:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       LL_ADC_ClearFlag_AWD1(hadc->Instance);
 7732              		.loc 2 3090 7
 7733 014e 7B68     		ldr	r3, [r7, #4]
 7734 0150 1B68     		ldr	r3, [r3]
 7735 0152 1846     		mov	r0, r3
 7736 0154 FFF7FEFF 		bl	LL_ADC_ClearFlag_AWD1
3091:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
3092:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       /* Configure ADC analog watchdog interrupt */
3093:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       if (AnalogWDGConfig->ITMode == ENABLE)
 7737              		.loc 2 3093 26
 7738 0158 3B68     		ldr	r3, [r7]
 7739 015a 1B7B     		ldrb	r3, [r3, #12]	@ zero_extendqisi2
 7740              		.loc 2 3093 10
 7741 015c 012B     		cmp	r3, #1
 7742 015e 05D1     		bne	.L455
3094:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       {
3095:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         LL_ADC_EnableIT_AWD1(hadc->Instance);
 7743              		.loc 2 3095 9
 7744 0160 7B68     		ldr	r3, [r7, #4]
 7745 0162 1B68     		ldr	r3, [r3]
 7746 0164 1846     		mov	r0, r3
 7747 0166 FFF7FEFF 		bl	LL_ADC_EnableIT_AWD1
 7748 016a CAE0     		b	.L444
 7749              	.L455:
3096:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       }
3097:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       else
3098:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       {
3099:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         LL_ADC_DisableIT_AWD1(hadc->Instance);
 7750              		.loc 2 3099 9
 7751 016c 7B68     		ldr	r3, [r7, #4]
ARM GAS  /tmp/ccZ0TYFG.s 			page 346


 7752 016e 1B68     		ldr	r3, [r3]
 7753 0170 1846     		mov	r0, r3
 7754 0172 FFF7FEFF 		bl	LL_ADC_DisableIT_AWD1
 7755 0176 C4E0     		b	.L444
 7756              	.L445:
3100:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       }
3101:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     }
3102:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     /* Case of ADC_ANALOGWATCHDOG_2 or ADC_ANALOGWATCHDOG_3 */
3103:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     else
3104:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     {
3105:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       switch (AnalogWDGConfig->WatchdogMode)
 7757              		.loc 2 3105 30
 7758 0178 3B68     		ldr	r3, [r7]
 7759 017a 5B68     		ldr	r3, [r3, #4]
 7760              		.loc 2 3105 7
 7761 017c B3F1807F 		cmp	r3, #16777216
 7762 0180 69D0     		beq	.L457
 7763 0182 B3F1807F 		cmp	r3, #16777216
 7764 0186 06D8     		bhi	.L458
 7765 0188 B3F5000F 		cmp	r3, #8388608
 7766 018c 63D0     		beq	.L457
 7767 018e B3F5400F 		cmp	r3, #12582912
 7768 0192 09D0     		beq	.L459
 7769 0194 68E0     		b	.L460
 7770              	.L458:
 7771 0196 B3F1C07F 		cmp	r3, #25165824
 7772 019a 5CD0     		beq	.L457
 7773 019c B3F1E07F 		cmp	r3, #29360128
 7774 01a0 02D0     		beq	.L459
 7775 01a2 B3F1A07F 		cmp	r3, #20971520
 7776 01a6 5FD1     		bne	.L460
 7777              	.L459:
3106:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       {
3107:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         case ADC_ANALOGWATCHDOG_SINGLE_REG:
3108:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         case ADC_ANALOGWATCHDOG_SINGLE_INJEC:
3109:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         case ADC_ANALOGWATCHDOG_SINGLE_REGINJEC:
3110:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****           /* Update AWD by bitfield to keep the possibility to monitor        */
3111:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****           /* several channels by successive calls of this function.           */
3112:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****           if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_2)
 7778              		.loc 2 3112 30
 7779 01a8 3B68     		ldr	r3, [r7]
 7780 01aa 1B68     		ldr	r3, [r3]
 7781              		.loc 2 3112 14
 7782 01ac 514A     		ldr	r2, .L480+16
 7783 01ae 9342     		cmp	r3, r2
 7784 01b0 28D1     		bne	.L461
3113:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****           {
3114:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****             SET_BIT(hadc->Instance->AWD2CR, (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(AnalogWDGConfig
 7785              		.loc 2 3114 13
 7786 01b2 3B68     		ldr	r3, [r7]
 7787 01b4 9B68     		ldr	r3, [r3, #8]
 7788 01b6 C3F31203 		ubfx	r3, r3, #0, #19
 7789 01ba 002B     		cmp	r3, #0
 7790 01bc 08D1     		bne	.L462
 7791              		.loc 2 3114 13 is_stmt 0 discriminator 1
 7792 01be 3B68     		ldr	r3, [r7]
 7793 01c0 9B68     		ldr	r3, [r3, #8]
ARM GAS  /tmp/ccZ0TYFG.s 			page 347


 7794 01c2 9B0E     		lsrs	r3, r3, #26
 7795 01c4 03F01F03 		and	r3, r3, #31
 7796 01c8 0122     		movs	r2, #1
 7797 01ca 02FA03F3 		lsl	r3, r2, r3
 7798 01ce 0FE0     		b	.L463
 7799              	.L462:
 7800              		.loc 2 3114 13 discriminator 2
 7801 01d0 3B68     		ldr	r3, [r7]
 7802 01d2 9B68     		ldr	r3, [r3, #8]
 7803 01d4 BB61     		str	r3, [r7, #24]
 7804              	.LBB66:
 7805              	.LBB67:
 988:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 7806              		.loc 3 988 4 is_stmt 1 discriminator 2
 7807 01d6 BB69     		ldr	r3, [r7, #24]
 7808              		.syntax unified
 7809              	@ 988 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 7810 01d8 93FAA3F3 		rbit r3, r3
 7811              	@ 0 "" 2
 7812              		.thumb
 7813              		.syntax unified
 7814 01dc 7B61     		str	r3, [r7, #20]
 7815              		.loc 3 1001 10 discriminator 2
 7816 01de 7B69     		ldr	r3, [r7, #20]
 7817              	.LBE67:
 7818              	.LBE66:
 7819              		.loc 2 3114 13 discriminator 2
 7820 01e0 B3FA83F3 		clz	r3, r3
 7821 01e4 DBB2     		uxtb	r3, r3
 7822 01e6 03F01F03 		and	r3, r3, #31
 7823 01ea 0122     		movs	r2, #1
 7824 01ec 02FA03F3 		lsl	r3, r2, r3
 7825              	.L463:
 7826              		.loc 2 3114 13 is_stmt 0 discriminator 4
 7827 01f0 7A68     		ldr	r2, [r7, #4]
 7828 01f2 1268     		ldr	r2, [r2]
 7829 01f4 D2F8A010 		ldr	r1, [r2, #160]
 7830 01f8 7A68     		ldr	r2, [r7, #4]
 7831 01fa 1268     		ldr	r2, [r2]
 7832 01fc 0B43     		orrs	r3, r3, r1
 7833 01fe C2F8A030 		str	r3, [r2, #160]
3115:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****           }
3116:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****           else
3117:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****           {
3118:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****             SET_BIT(hadc->Instance->AWD3CR, (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(AnalogWDGConfig
3119:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****           }
3120:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****           break;
 7834              		.loc 2 3120 11 is_stmt 1 discriminator 4
 7835 0202 3AE0     		b	.L469
 7836              	.L461:
3118:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****           }
 7837              		.loc 2 3118 13
 7838 0204 3B68     		ldr	r3, [r7]
 7839 0206 9B68     		ldr	r3, [r3, #8]
 7840 0208 C3F31203 		ubfx	r3, r3, #0, #19
 7841 020c 002B     		cmp	r3, #0
 7842 020e 08D1     		bne	.L466
ARM GAS  /tmp/ccZ0TYFG.s 			page 348


3118:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****           }
 7843              		.loc 2 3118 13 is_stmt 0 discriminator 1
 7844 0210 3B68     		ldr	r3, [r7]
 7845 0212 9B68     		ldr	r3, [r3, #8]
 7846 0214 9B0E     		lsrs	r3, r3, #26
 7847 0216 03F01F03 		and	r3, r3, #31
 7848 021a 0122     		movs	r2, #1
 7849 021c 02FA03F3 		lsl	r3, r2, r3
 7850 0220 0FE0     		b	.L467
 7851              	.L466:
3118:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****           }
 7852              		.loc 2 3118 13 discriminator 2
 7853 0222 3B68     		ldr	r3, [r7]
 7854 0224 9B68     		ldr	r3, [r3, #8]
 7855 0226 3B61     		str	r3, [r7, #16]
 7856              	.LBB68:
 7857              	.LBB69:
 988:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 7858              		.loc 3 988 4 is_stmt 1 discriminator 2
 7859 0228 3B69     		ldr	r3, [r7, #16]
 7860              		.syntax unified
 7861              	@ 988 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 7862 022a 93FAA3F3 		rbit r3, r3
 7863              	@ 0 "" 2
 7864              		.thumb
 7865              		.syntax unified
 7866 022e FB60     		str	r3, [r7, #12]
 7867              		.loc 3 1001 10 discriminator 2
 7868 0230 FB68     		ldr	r3, [r7, #12]
 7869              	.LBE69:
 7870              	.LBE68:
3118:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****           }
 7871              		.loc 2 3118 13 discriminator 2
 7872 0232 B3FA83F3 		clz	r3, r3
 7873 0236 DBB2     		uxtb	r3, r3
 7874 0238 03F01F03 		and	r3, r3, #31
 7875 023c 0122     		movs	r2, #1
 7876 023e 02FA03F3 		lsl	r3, r2, r3
 7877              	.L467:
3118:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****           }
 7878              		.loc 2 3118 13 is_stmt 0 discriminator 4
 7879 0242 7A68     		ldr	r2, [r7, #4]
 7880 0244 1268     		ldr	r2, [r2]
 7881 0246 D2F8A410 		ldr	r1, [r2, #164]
 7882 024a 7A68     		ldr	r2, [r7, #4]
 7883 024c 1268     		ldr	r2, [r2]
 7884 024e 0B43     		orrs	r3, r3, r1
 7885 0250 C2F8A430 		str	r3, [r2, #164]
 7886              		.loc 2 3120 11 is_stmt 1 discriminator 4
 7887 0254 11E0     		b	.L469
 7888              	.L457:
3121:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
3122:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         case ADC_ANALOGWATCHDOG_ALL_REG:
3123:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         case ADC_ANALOGWATCHDOG_ALL_INJEC:
3124:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         case ADC_ANALOGWATCHDOG_ALL_REGINJEC:
3125:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****           LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, AnalogWDGConfig->WatchdogNumber, LL_ADC_A
 7889              		.loc 2 3125 11
ARM GAS  /tmp/ccZ0TYFG.s 			page 349


 7890 0256 7B68     		ldr	r3, [r7, #4]
 7891 0258 1868     		ldr	r0, [r3]
 7892 025a 3B68     		ldr	r3, [r7]
 7893 025c 1B68     		ldr	r3, [r3]
 7894 025e 244A     		ldr	r2, .L480+12
 7895 0260 1946     		mov	r1, r3
 7896 0262 FFF7FEFF 		bl	LL_ADC_SetAnalogWDMonitChannels
3126:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****           break;
 7897              		.loc 2 3126 11
 7898 0266 08E0     		b	.L469
 7899              	.L460:
3127:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
3128:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         default: /* ADC_ANALOGWATCHDOG_NONE */
3129:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****           LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, AnalogWDGConfig->WatchdogNumber, LL_ADC_A
 7900              		.loc 2 3129 11
 7901 0268 7B68     		ldr	r3, [r7, #4]
 7902 026a 1868     		ldr	r0, [r3]
 7903 026c 3B68     		ldr	r3, [r7]
 7904 026e 1B68     		ldr	r3, [r3]
 7905 0270 0022     		movs	r2, #0
 7906 0272 1946     		mov	r1, r3
 7907 0274 FFF7FEFF 		bl	LL_ADC_SetAnalogWDMonitChannels
3130:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****           break;
 7908              		.loc 2 3130 11
 7909 0278 00BF     		nop
 7910              	.L469:
3131:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       }
3132:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
3133:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_2)
 7911              		.loc 2 3133 26
 7912 027a 3B68     		ldr	r3, [r7]
 7913 027c 1B68     		ldr	r3, [r3]
 7914              		.loc 2 3133 10
 7915 027e 1D4A     		ldr	r2, .L480+16
 7916 0280 9342     		cmp	r3, r2
 7917 0282 1AD1     		bne	.L470
3134:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       {
3135:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         /* Update state, clear previous result related to AWD2 */
3136:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 7918              		.loc 2 3136 9
 7919 0284 7B68     		ldr	r3, [r7, #4]
 7920 0286 DB6D     		ldr	r3, [r3, #92]
 7921 0288 23F40032 		bic	r2, r3, #131072
 7922 028c 7B68     		ldr	r3, [r7, #4]
 7923 028e DA65     		str	r2, [r3, #92]
3137:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
3138:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         /* Clear flag ADC analog watchdog */
3139:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         /* Note: Flag cleared Clear the ADC Analog watchdog flag to be ready  */
3140:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         /* to use for HAL_ADC_IRQHandler() or HAL_ADC_PollForEvent()          */
3141:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         /* (in case left enabled by previous ADC operations).                 */
3142:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         LL_ADC_ClearFlag_AWD2(hadc->Instance);
 7924              		.loc 2 3142 9
 7925 0290 7B68     		ldr	r3, [r7, #4]
 7926 0292 1B68     		ldr	r3, [r3]
 7927 0294 1846     		mov	r0, r3
 7928 0296 FFF7FEFF 		bl	LL_ADC_ClearFlag_AWD2
3143:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
ARM GAS  /tmp/ccZ0TYFG.s 			page 350


3144:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         /* Configure ADC analog watchdog interrupt */
3145:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         if (AnalogWDGConfig->ITMode == ENABLE)
 7929              		.loc 2 3145 28
 7930 029a 3B68     		ldr	r3, [r7]
 7931 029c 1B7B     		ldrb	r3, [r3, #12]	@ zero_extendqisi2
 7932              		.loc 2 3145 12
 7933 029e 012B     		cmp	r3, #1
 7934 02a0 05D1     		bne	.L471
3146:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         {
3147:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****           LL_ADC_EnableIT_AWD2(hadc->Instance);
 7935              		.loc 2 3147 11
 7936 02a2 7B68     		ldr	r3, [r7, #4]
 7937 02a4 1B68     		ldr	r3, [r3]
 7938 02a6 1846     		mov	r0, r3
 7939 02a8 FFF7FEFF 		bl	LL_ADC_EnableIT_AWD2
 7940 02ac 29E0     		b	.L444
 7941              	.L471:
3148:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         }
3149:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         else
3150:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         {
3151:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****           LL_ADC_DisableIT_AWD2(hadc->Instance);
 7942              		.loc 2 3151 11
 7943 02ae 7B68     		ldr	r3, [r7, #4]
 7944 02b0 1B68     		ldr	r3, [r3]
 7945 02b2 1846     		mov	r0, r3
 7946 02b4 FFF7FEFF 		bl	LL_ADC_DisableIT_AWD2
 7947 02b8 23E0     		b	.L444
 7948              	.L470:
3152:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         }
3153:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       }
3154:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       /* (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_3) */
3155:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       else
3156:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       {
3157:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         /* Update state, clear previous result related to AWD3 */
3158:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 7949              		.loc 2 3158 9
 7950 02ba 7B68     		ldr	r3, [r7, #4]
 7951 02bc DB6D     		ldr	r3, [r3, #92]
 7952 02be 23F48022 		bic	r2, r3, #262144
 7953 02c2 7B68     		ldr	r3, [r7, #4]
 7954 02c4 DA65     		str	r2, [r3, #92]
3159:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
3160:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         /* Clear flag ADC analog watchdog */
3161:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         /* Note: Flag cleared Clear the ADC Analog watchdog flag to be ready  */
3162:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         /* to use for HAL_ADC_IRQHandler() or HAL_ADC_PollForEvent()          */
3163:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         /* (in case left enabled by previous ADC operations).                 */
3164:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         LL_ADC_ClearFlag_AWD3(hadc->Instance);
 7955              		.loc 2 3164 9
 7956 02c6 7B68     		ldr	r3, [r7, #4]
 7957 02c8 1B68     		ldr	r3, [r3]
 7958 02ca 1846     		mov	r0, r3
 7959 02cc FFF7FEFF 		bl	LL_ADC_ClearFlag_AWD3
3165:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
3166:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         /* Configure ADC analog watchdog interrupt */
3167:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         if (AnalogWDGConfig->ITMode == ENABLE)
 7960              		.loc 2 3167 28
 7961 02d0 3B68     		ldr	r3, [r7]
ARM GAS  /tmp/ccZ0TYFG.s 			page 351


 7962 02d2 1B7B     		ldrb	r3, [r3, #12]	@ zero_extendqisi2
 7963              		.loc 2 3167 12
 7964 02d4 012B     		cmp	r3, #1
 7965 02d6 0FD1     		bne	.L473
3168:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         {
3169:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****           LL_ADC_EnableIT_AWD3(hadc->Instance);
 7966              		.loc 2 3169 11
 7967 02d8 7B68     		ldr	r3, [r7, #4]
 7968 02da 1B68     		ldr	r3, [r3]
 7969 02dc 1846     		mov	r0, r3
 7970 02de FFF7FEFF 		bl	LL_ADC_EnableIT_AWD3
 7971 02e2 0EE0     		b	.L444
 7972              	.L481:
 7973              		.align	2
 7974              	.L480:
 7975 02e4 0000C07D 		.word	2109734912
 7976 02e8 FFFF8700 		.word	8912895
 7977 02ec FFFF0701 		.word	17301503
 7978 02f0 FFFF8701 		.word	25690111
 7979 02f4 FFFF1700 		.word	1572863
 7980              	.L473:
3170:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         }
3171:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         else
3172:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         {
3173:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****           LL_ADC_DisableIT_AWD3(hadc->Instance);
 7981              		.loc 2 3173 11
 7982 02f8 7B68     		ldr	r3, [r7, #4]
 7983 02fa 1B68     		ldr	r3, [r3]
 7984 02fc 1846     		mov	r0, r3
 7985 02fe FFF7FEFF 		bl	LL_ADC_DisableIT_AWD3
 7986              	.L444:
3174:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         }
3175:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       }
3176:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     }
3177:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
3178:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   }
3179:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
3180:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   /* Analog watchdog thresholds configuration */
3181:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 7987              		.loc 2 3181 22
 7988 0302 3B68     		ldr	r3, [r7]
 7989 0304 1B68     		ldr	r3, [r3]
 7990              		.loc 2 3181 6
 7991 0306 344A     		ldr	r2, .L482
 7992 0308 9342     		cmp	r3, r2
 7993 030a 18D1     		bne	.L474
3182:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   {
3183:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     /* Shift the offset with respect to the selected ADC resolution:        */
3184:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     /* Thresholds have to be left-aligned on bit 11, the LSB (right bits)   */
3185:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     /* are set to 0.                                                        */
3186:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     tmpAWDHighThresholdShifted = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->HighThre
 7994              		.loc 2 3186 34
 7995 030c 3B68     		ldr	r3, [r7]
 7996 030e 1A69     		ldr	r2, [r3, #16]
 7997 0310 7B68     		ldr	r3, [r7, #4]
 7998 0312 1B68     		ldr	r3, [r3]
 7999 0314 DB68     		ldr	r3, [r3, #12]
ARM GAS  /tmp/ccZ0TYFG.s 			page 352


 8000 0316 DB08     		lsrs	r3, r3, #3
 8001 0318 03F00303 		and	r3, r3, #3
 8002 031c 5B00     		lsls	r3, r3, #1
 8003              		.loc 2 3186 32
 8004 031e 02FA03F3 		lsl	r3, r2, r3
 8005 0322 FB62     		str	r3, [r7, #44]
3187:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     tmpAWDLowThresholdShifted  = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->LowThres
 8006              		.loc 2 3187 34
 8007 0324 3B68     		ldr	r3, [r7]
 8008 0326 5A69     		ldr	r2, [r3, #20]
 8009 0328 7B68     		ldr	r3, [r7, #4]
 8010 032a 1B68     		ldr	r3, [r3]
 8011 032c DB68     		ldr	r3, [r3, #12]
 8012 032e DB08     		lsrs	r3, r3, #3
 8013 0330 03F00303 		and	r3, r3, #3
 8014 0334 5B00     		lsls	r3, r3, #1
 8015              		.loc 2 3187 32
 8016 0336 02FA03F3 		lsl	r3, r2, r3
 8017 033a BB62     		str	r3, [r7, #40]
 8018 033c 39E0     		b	.L475
 8019              	.L474:
3188:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   }
3189:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   /* Case of ADC_ANALOGWATCHDOG_2 and ADC_ANALOGWATCHDOG_3 */
3190:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   else
3191:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   {
3192:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     /* Shift the offset with respect to the selected ADC resolution:        */
3193:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     /* Thresholds have to be left-aligned on bit 7, the LSB (right bits)    */
3194:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     /* are set to 0.                                                        */
3195:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     tmpAWDHighThresholdShifted = ADC_AWD23THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->HighThr
 8020              		.loc 2 3195 34
 8021 033e 7B68     		ldr	r3, [r7, #4]
 8022 0340 1B68     		ldr	r3, [r3]
 8023 0342 DB68     		ldr	r3, [r3, #12]
 8024 0344 03F01803 		and	r3, r3, #24
 8025 0348 182B     		cmp	r3, #24
 8026 034a 11D0     		beq	.L476
 8027              		.loc 2 3195 34 is_stmt 0 discriminator 1
 8028 034c 3B68     		ldr	r3, [r7]
 8029 034e 1969     		ldr	r1, [r3, #16]
 8030 0350 7B68     		ldr	r3, [r7, #4]
 8031 0352 1B68     		ldr	r3, [r3]
 8032 0354 DB68     		ldr	r3, [r3, #12]
 8033 0356 DB08     		lsrs	r3, r3, #3
 8034 0358 03F00302 		and	r2, r3, #3
 8035 035c 1346     		mov	r3, r2
 8036 035e DB07     		lsls	r3, r3, #31
 8037 0360 9B1A     		subs	r3, r3, r2
 8038 0362 5B00     		lsls	r3, r3, #1
 8039 0364 0433     		adds	r3, r3, #4
 8040 0366 03F01F03 		and	r3, r3, #31
 8041 036a 21FA03F3 		lsr	r3, r1, r3
 8042 036e 02E0     		b	.L477
 8043              	.L476:
 8044              		.loc 2 3195 34 discriminator 2
 8045 0370 3B68     		ldr	r3, [r7]
 8046 0372 1B69     		ldr	r3, [r3, #16]
 8047 0374 9B00     		lsls	r3, r3, #2
ARM GAS  /tmp/ccZ0TYFG.s 			page 353


 8048              	.L477:
 8049              		.loc 2 3195 32 is_stmt 1 discriminator 4
 8050 0376 FB62     		str	r3, [r7, #44]
3196:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     tmpAWDLowThresholdShifted  = ADC_AWD23THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->LowThre
 8051              		.loc 2 3196 34 discriminator 4
 8052 0378 7B68     		ldr	r3, [r7, #4]
 8053 037a 1B68     		ldr	r3, [r3]
 8054 037c DB68     		ldr	r3, [r3, #12]
 8055 037e 03F01803 		and	r3, r3, #24
 8056 0382 182B     		cmp	r3, #24
 8057 0384 11D0     		beq	.L478
 8058              		.loc 2 3196 34 is_stmt 0 discriminator 1
 8059 0386 3B68     		ldr	r3, [r7]
 8060 0388 5969     		ldr	r1, [r3, #20]
 8061 038a 7B68     		ldr	r3, [r7, #4]
 8062 038c 1B68     		ldr	r3, [r3]
 8063 038e DB68     		ldr	r3, [r3, #12]
 8064 0390 DB08     		lsrs	r3, r3, #3
 8065 0392 03F00302 		and	r2, r3, #3
 8066 0396 1346     		mov	r3, r2
 8067 0398 DB07     		lsls	r3, r3, #31
 8068 039a 9B1A     		subs	r3, r3, r2
 8069 039c 5B00     		lsls	r3, r3, #1
 8070 039e 0433     		adds	r3, r3, #4
 8071 03a0 03F01F03 		and	r3, r3, #31
 8072 03a4 21FA03F3 		lsr	r3, r1, r3
 8073 03a8 02E0     		b	.L479
 8074              	.L478:
 8075              		.loc 2 3196 34 discriminator 2
 8076 03aa 3B68     		ldr	r3, [r7]
 8077 03ac 5B69     		ldr	r3, [r3, #20]
 8078 03ae 9B00     		lsls	r3, r3, #2
 8079              	.L479:
 8080              		.loc 2 3196 32 is_stmt 1 discriminator 4
 8081 03b0 BB62     		str	r3, [r7, #40]
 8082              	.L475:
3197:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   }
3198:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
3199:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   /* Set ADC analog watchdog thresholds value of both thresholds high and low */
3200:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   LL_ADC_ConfigAnalogWDThresholds(hadc->Instance, AnalogWDGConfig->WatchdogNumber, tmpAWDHighThresh
 8083              		.loc 2 3200 3
 8084 03b2 7B68     		ldr	r3, [r7, #4]
 8085 03b4 1868     		ldr	r0, [r3]
 8086 03b6 3B68     		ldr	r3, [r7]
 8087 03b8 1968     		ldr	r1, [r3]
 8088 03ba BB6A     		ldr	r3, [r7, #40]
 8089 03bc FA6A     		ldr	r2, [r7, #44]
 8090 03be FFF7FEFF 		bl	LL_ADC_ConfigAnalogWDThresholds
3201:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****                                   tmpAWDLowThresholdShifted);
3202:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
3203:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   /* Process unlocked */
3204:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   __HAL_UNLOCK(hadc);
 8091              		.loc 2 3204 3
 8092 03c2 7B68     		ldr	r3, [r7, #4]
 8093 03c4 0022     		movs	r2, #0
 8094 03c6 83F85820 		strb	r2, [r3, #88]
3205:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
ARM GAS  /tmp/ccZ0TYFG.s 			page 354


3206:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   /* Return function status */
3207:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   return tmp_hal_status;
 8095              		.loc 2 3207 10
 8096 03ca 97F82730 		ldrb	r3, [r7, #39]	@ zero_extendqisi2
 8097              	.L443:
3208:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** }
 8098              		.loc 2 3208 1
 8099 03ce 1846     		mov	r0, r3
 8100 03d0 3037     		adds	r7, r7, #48
 8101              	.LCFI357:
 8102              		.cfi_def_cfa_offset 8
 8103 03d2 BD46     		mov	sp, r7
 8104              	.LCFI358:
 8105              		.cfi_def_cfa_register 13
 8106              		@ sp needed
 8107 03d4 80BD     		pop	{r7, pc}
 8108              	.L483:
 8109 03d6 00BF     		.align	2
 8110              	.L482:
 8111 03d8 0000C07D 		.word	2109734912
 8112              		.cfi_endproc
 8113              	.LFE346:
 8115              		.section	.text.HAL_ADC_GetState,"ax",%progbits
 8116              		.align	1
 8117              		.global	HAL_ADC_GetState
 8118              		.syntax unified
 8119              		.thumb
 8120              		.thumb_func
 8121              		.fpu fpv4-sp-d16
 8123              	HAL_ADC_GetState:
 8124              	.LFB347:
3209:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
3210:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
3211:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** /**
3212:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   * @}
3213:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   */
3214:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
3215:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** /** @defgroup ADC_Exported_Functions_Group4 Peripheral State functions
3216:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   *  @brief    ADC Peripheral State functions
3217:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   *
3218:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** @verbatim
3219:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****  ===============================================================================
3220:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****             ##### Peripheral state and errors functions #####
3221:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****  ===============================================================================
3222:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     [..]
3223:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     This subsection provides functions to get in run-time the status of the
3224:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     peripheral.
3225:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       (+) Check the ADC state
3226:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       (+) Check the ADC error code
3227:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
3228:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** @endverbatim
3229:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   * @{
3230:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   */
3231:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
3232:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** /**
3233:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   * @brief  Return the ADC handle state.
3234:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   * @note   ADC state machine is managed by bitfields, ADC status must be
ARM GAS  /tmp/ccZ0TYFG.s 			page 355


3235:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   *         compared with states bits.
3236:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   *         For example:
3237:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   *           " if ((HAL_ADC_GetState(hadc1) & HAL_ADC_STATE_REG_BUSY) != 0UL) "
3238:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   *           " if ((HAL_ADC_GetState(hadc1) & HAL_ADC_STATE_AWD1) != 0UL) "
3239:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   * @param hadc ADC handle
3240:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   * @retval ADC handle state (bitfield on 32 bits)
3241:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   */
3242:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** uint32_t HAL_ADC_GetState(ADC_HandleTypeDef *hadc)
3243:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** {
 8125              		.loc 2 3243 1
 8126              		.cfi_startproc
 8127              		@ args = 0, pretend = 0, frame = 8
 8128              		@ frame_needed = 1, uses_anonymous_args = 0
 8129              		@ link register save eliminated.
 8130 0000 80B4     		push	{r7}
 8131              	.LCFI359:
 8132              		.cfi_def_cfa_offset 4
 8133              		.cfi_offset 7, -4
 8134 0002 83B0     		sub	sp, sp, #12
 8135              	.LCFI360:
 8136              		.cfi_def_cfa_offset 16
 8137 0004 00AF     		add	r7, sp, #0
 8138              	.LCFI361:
 8139              		.cfi_def_cfa_register 7
 8140 0006 7860     		str	r0, [r7, #4]
3244:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   /* Check the parameters */
3245:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
3246:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
3247:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   /* Return ADC handle state */
3248:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   return hadc->State;
 8141              		.loc 2 3248 14
 8142 0008 7B68     		ldr	r3, [r7, #4]
 8143 000a DB6D     		ldr	r3, [r3, #92]
3249:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** }
 8144              		.loc 2 3249 1
 8145 000c 1846     		mov	r0, r3
 8146 000e 0C37     		adds	r7, r7, #12
 8147              	.LCFI362:
 8148              		.cfi_def_cfa_offset 4
 8149 0010 BD46     		mov	sp, r7
 8150              	.LCFI363:
 8151              		.cfi_def_cfa_register 13
 8152              		@ sp needed
 8153 0012 5DF8047B 		ldr	r7, [sp], #4
 8154              	.LCFI364:
 8155              		.cfi_restore 7
 8156              		.cfi_def_cfa_offset 0
 8157 0016 7047     		bx	lr
 8158              		.cfi_endproc
 8159              	.LFE347:
 8161              		.section	.text.HAL_ADC_GetError,"ax",%progbits
 8162              		.align	1
 8163              		.global	HAL_ADC_GetError
 8164              		.syntax unified
 8165              		.thumb
 8166              		.thumb_func
 8167              		.fpu fpv4-sp-d16
ARM GAS  /tmp/ccZ0TYFG.s 			page 356


 8169              	HAL_ADC_GetError:
 8170              	.LFB348:
3250:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
3251:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** /**
3252:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   * @brief  Return the ADC error code.
3253:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   * @param hadc ADC handle
3254:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   * @retval ADC error code (bitfield on 32 bits)
3255:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   */
3256:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** uint32_t HAL_ADC_GetError(ADC_HandleTypeDef *hadc)
3257:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** {
 8171              		.loc 2 3257 1
 8172              		.cfi_startproc
 8173              		@ args = 0, pretend = 0, frame = 8
 8174              		@ frame_needed = 1, uses_anonymous_args = 0
 8175              		@ link register save eliminated.
 8176 0000 80B4     		push	{r7}
 8177              	.LCFI365:
 8178              		.cfi_def_cfa_offset 4
 8179              		.cfi_offset 7, -4
 8180 0002 83B0     		sub	sp, sp, #12
 8181              	.LCFI366:
 8182              		.cfi_def_cfa_offset 16
 8183 0004 00AF     		add	r7, sp, #0
 8184              	.LCFI367:
 8185              		.cfi_def_cfa_register 7
 8186 0006 7860     		str	r0, [r7, #4]
3258:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   /* Check the parameters */
3259:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
3260:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
3261:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   return hadc->ErrorCode;
 8187              		.loc 2 3261 14
 8188 0008 7B68     		ldr	r3, [r7, #4]
 8189 000a 1B6E     		ldr	r3, [r3, #96]
3262:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** }
 8190              		.loc 2 3262 1
 8191 000c 1846     		mov	r0, r3
 8192 000e 0C37     		adds	r7, r7, #12
 8193              	.LCFI368:
 8194              		.cfi_def_cfa_offset 4
 8195 0010 BD46     		mov	sp, r7
 8196              	.LCFI369:
 8197              		.cfi_def_cfa_register 13
 8198              		@ sp needed
 8199 0012 5DF8047B 		ldr	r7, [sp], #4
 8200              	.LCFI370:
 8201              		.cfi_restore 7
 8202              		.cfi_def_cfa_offset 0
 8203 0016 7047     		bx	lr
 8204              		.cfi_endproc
 8205              	.LFE348:
 8207              		.section	.text.ADC_ConversionStop,"ax",%progbits
 8208              		.align	1
 8209              		.global	ADC_ConversionStop
 8210              		.syntax unified
 8211              		.thumb
 8212              		.thumb_func
 8213              		.fpu fpv4-sp-d16
ARM GAS  /tmp/ccZ0TYFG.s 			page 357


 8215              	ADC_ConversionStop:
 8216              	.LFB349:
3263:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
3264:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** /**
3265:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   * @}
3266:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   */
3267:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
3268:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** /**
3269:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   * @}
3270:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   */
3271:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
3272:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** /** @defgroup ADC_Private_Functions ADC Private Functions
3273:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   * @{
3274:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   */
3275:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
3276:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** /**
3277:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   * @brief  Stop ADC conversion.
3278:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   * @param hadc ADC handle
3279:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   * @param ConversionGroup ADC group regular and/or injected.
3280:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   *          This parameter can be one of the following values:
3281:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   *            @arg @ref ADC_REGULAR_GROUP           ADC regular conversion type.
3282:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
3283:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
3284:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   * @retval HAL status.
3285:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   */
3286:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
3287:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** {
 8217              		.loc 2 3287 1
 8218              		.cfi_startproc
 8219              		@ args = 0, pretend = 0, frame = 32
 8220              		@ frame_needed = 1, uses_anonymous_args = 0
 8221 0000 80B5     		push	{r7, lr}
 8222              	.LCFI371:
 8223              		.cfi_def_cfa_offset 8
 8224              		.cfi_offset 7, -8
 8225              		.cfi_offset 14, -4
 8226 0002 88B0     		sub	sp, sp, #32
 8227              	.LCFI372:
 8228              		.cfi_def_cfa_offset 40
 8229 0004 00AF     		add	r7, sp, #0
 8230              	.LCFI373:
 8231              		.cfi_def_cfa_register 7
 8232 0006 7860     		str	r0, [r7, #4]
 8233 0008 3960     		str	r1, [r7]
3288:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   uint32_t tickstart;
3289:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8234              		.loc 2 3289 12
 8235 000a 0023     		movs	r3, #0
 8236 000c FB61     		str	r3, [r7, #28]
3290:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   uint32_t conversion_group_reassigned = ConversionGroup;
 8237              		.loc 2 3290 12
 8238 000e 3B68     		ldr	r3, [r7]
 8239 0010 BB61     		str	r3, [r7, #24]
3291:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   uint32_t tmp_ADC_CR_ADSTART_JADSTART;
3292:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   uint32_t tmp_adc_is_conversion_on_going_regular;
3293:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   uint32_t tmp_adc_is_conversion_on_going_injected;
3294:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
ARM GAS  /tmp/ccZ0TYFG.s 			page 358


3295:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   /* Check the parameters */
3296:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
3297:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));
3298:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
3299:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   /* Verification if ADC is not already stopped (on regular and injected      */
3300:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   /* groups) to bypass this function if not needed.                           */
3301:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8240              		.loc 2 3301 44
 8241 0012 7B68     		ldr	r3, [r7, #4]
 8242 0014 1B68     		ldr	r3, [r3]
 8243 0016 1846     		mov	r0, r3
 8244 0018 FFF7FEFF 		bl	LL_ADC_REG_IsConversionOngoing
 8245 001c 3861     		str	r0, [r7, #16]
3302:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8246              		.loc 2 3302 45
 8247 001e 7B68     		ldr	r3, [r7, #4]
 8248 0020 1B68     		ldr	r3, [r3]
 8249 0022 1846     		mov	r0, r3
 8250 0024 FFF7FEFF 		bl	LL_ADC_INJ_IsConversionOngoing
 8251 0028 F860     		str	r0, [r7, #12]
3303:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8252              		.loc 2 3303 6
 8253 002a 3B69     		ldr	r3, [r7, #16]
 8254 002c 002B     		cmp	r3, #0
 8255 002e 03D1     		bne	.L489
3304:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8256              		.loc 2 3304 7
 8257 0030 FB68     		ldr	r3, [r7, #12]
 8258 0032 002B     		cmp	r3, #0
 8259 0034 00F09180 		beq	.L490
 8260              	.L489:
3305:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****      )
3306:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   {
3307:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     /* Particular case of continuous auto-injection mode combined with        */
3308:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     /* auto-delay mode.                                                       */
3309:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
3310:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     /* injected group stop ADC_CR_JADSTP).                                    */
3311:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
3312:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     /* (see reference manual).                                                */
3313:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8261              		.loc 2 3313 15
 8262 0038 7B68     		ldr	r3, [r7, #4]
 8263 003a 1B68     		ldr	r3, [r3]
 8264              		.loc 2 3313 25
 8265 003c DB68     		ldr	r3, [r3, #12]
 8266              		.loc 2 3313 32
 8267 003e 03F00073 		and	r3, r3, #33554432
 8268              		.loc 2 3313 8
 8269 0042 002B     		cmp	r3, #0
 8270 0044 2AD0     		beq	.L491
3314:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         && (hadc->Init.ContinuousConvMode == ENABLE)
 8271              		.loc 2 3314 23
 8272 0046 7B68     		ldr	r3, [r7, #4]
 8273 0048 5B7F     		ldrb	r3, [r3, #29]	@ zero_extendqisi2
 8274              		.loc 2 3314 9
 8275 004a 012B     		cmp	r3, #1
 8276 004c 26D1     		bne	.L491
ARM GAS  /tmp/ccZ0TYFG.s 			page 359


3315:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         && (hadc->Init.LowPowerAutoWait == ENABLE)
 8277              		.loc 2 3315 23
 8278 004e 7B68     		ldr	r3, [r7, #4]
 8279 0050 1B7F     		ldrb	r3, [r3, #28]	@ zero_extendqisi2
 8280              		.loc 2 3315 9
 8281 0052 012B     		cmp	r3, #1
 8282 0054 22D1     		bne	.L491
3316:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****        )
3317:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     {
3318:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       /* Use stop of regular group */
3319:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       conversion_group_reassigned = ADC_REGULAR_GROUP;
 8283              		.loc 2 3319 35
 8284 0056 0123     		movs	r3, #1
 8285 0058 BB61     		str	r3, [r7, #24]
3320:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
3321:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
3322:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8286              		.loc 2 3322 13
 8287 005a 14E0     		b	.L492
 8288              	.L495:
3323:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       {
3324:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8289              		.loc 2 3324 12
 8290 005c FB69     		ldr	r3, [r7, #28]
 8291 005e 414A     		ldr	r2, .L503
 8292 0060 9342     		cmp	r3, r2
 8293 0062 0DD9     		bls	.L493
3325:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         {
3326:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****           /* Update ADC state machine to error */
3327:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****           SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8294              		.loc 2 3327 11
 8295 0064 7B68     		ldr	r3, [r7, #4]
 8296 0066 DB6D     		ldr	r3, [r3, #92]
 8297 0068 43F01002 		orr	r2, r3, #16
 8298 006c 7B68     		ldr	r3, [r7, #4]
 8299 006e DA65     		str	r2, [r3, #92]
3328:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
3329:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****           /* Set ADC error code to ADC peripheral internal error */
3330:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****           SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8300              		.loc 2 3330 11
 8301 0070 7B68     		ldr	r3, [r7, #4]
 8302 0072 1B6E     		ldr	r3, [r3, #96]
 8303 0074 43F00102 		orr	r2, r3, #1
 8304 0078 7B68     		ldr	r3, [r7, #4]
 8305 007a 1A66     		str	r2, [r3, #96]
3331:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
3332:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****           return HAL_ERROR;
 8306              		.loc 2 3332 18
 8307 007c 0123     		movs	r3, #1
 8308 007e 6DE0     		b	.L494
 8309              	.L493:
3333:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         }
3334:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         Conversion_Timeout_CPU_cycles ++;
 8310              		.loc 2 3334 39
 8311 0080 FB69     		ldr	r3, [r7, #28]
 8312 0082 0133     		adds	r3, r3, #1
 8313 0084 FB61     		str	r3, [r7, #28]
ARM GAS  /tmp/ccZ0TYFG.s 			page 360


 8314              	.L492:
3322:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       {
 8315              		.loc 2 3322 14
 8316 0086 7B68     		ldr	r3, [r7, #4]
 8317 0088 1B68     		ldr	r3, [r3]
 8318 008a 1B68     		ldr	r3, [r3]
 8319 008c 03F04003 		and	r3, r3, #64
3322:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       {
 8320              		.loc 2 3322 13
 8321 0090 402B     		cmp	r3, #64
 8322 0092 E3D1     		bne	.L495
3335:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       }
3336:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
3337:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       /* Clear JEOS */
3338:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8323              		.loc 2 3338 7
 8324 0094 7B68     		ldr	r3, [r7, #4]
 8325 0096 1B68     		ldr	r3, [r3]
 8326 0098 4022     		movs	r2, #64
 8327 009a 1A60     		str	r2, [r3]
 8328              	.L491:
3339:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     }
3340:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
3341:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     /* Stop potential conversion on going on ADC group regular */
3342:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8329              		.loc 2 3342 8
 8330 009c BB69     		ldr	r3, [r7, #24]
 8331 009e 022B     		cmp	r3, #2
 8332 00a0 14D0     		beq	.L496
3343:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     {
3344:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
3345:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8333              		.loc 2 3345 11
 8334 00a2 7B68     		ldr	r3, [r7, #4]
 8335 00a4 1B68     		ldr	r3, [r3]
 8336 00a6 1846     		mov	r0, r3
 8337 00a8 FFF7FEFF 		bl	LL_ADC_REG_IsConversionOngoing
 8338 00ac 0346     		mov	r3, r0
 8339              		.loc 2 3345 10
 8340 00ae 002B     		cmp	r3, #0
 8341 00b0 0CD0     		beq	.L496
3346:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       {
3347:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8342              		.loc 2 3347 13
 8343 00b2 7B68     		ldr	r3, [r7, #4]
 8344 00b4 1B68     		ldr	r3, [r3]
 8345 00b6 1846     		mov	r0, r3
 8346 00b8 FFF7FEFF 		bl	LL_ADC_IsDisableOngoing
 8347 00bc 0346     		mov	r3, r0
 8348              		.loc 2 3347 12
 8349 00be 002B     		cmp	r3, #0
 8350 00c0 04D1     		bne	.L496
3348:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         {
3349:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****           /* Stop ADC group regular conversion */
3350:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****           LL_ADC_REG_StopConversion(hadc->Instance);
 8351              		.loc 2 3350 11
 8352 00c2 7B68     		ldr	r3, [r7, #4]
ARM GAS  /tmp/ccZ0TYFG.s 			page 361


 8353 00c4 1B68     		ldr	r3, [r3]
 8354 00c6 1846     		mov	r0, r3
 8355 00c8 FFF7FEFF 		bl	LL_ADC_REG_StopConversion
 8356              	.L496:
3351:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         }
3352:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       }
3353:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     }
3354:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
3355:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     /* Stop potential conversion on going on ADC group injected */
3356:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8357              		.loc 2 3356 8
 8358 00cc BB69     		ldr	r3, [r7, #24]
 8359 00ce 012B     		cmp	r3, #1
 8360 00d0 14D0     		beq	.L497
3357:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     {
3358:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
3359:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8361              		.loc 2 3359 11
 8362 00d2 7B68     		ldr	r3, [r7, #4]
 8363 00d4 1B68     		ldr	r3, [r3]
 8364 00d6 1846     		mov	r0, r3
 8365 00d8 FFF7FEFF 		bl	LL_ADC_INJ_IsConversionOngoing
 8366 00dc 0346     		mov	r3, r0
 8367              		.loc 2 3359 10
 8368 00de 002B     		cmp	r3, #0
 8369 00e0 0CD0     		beq	.L497
3360:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       {
3361:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8370              		.loc 2 3361 13
 8371 00e2 7B68     		ldr	r3, [r7, #4]
 8372 00e4 1B68     		ldr	r3, [r3]
 8373 00e6 1846     		mov	r0, r3
 8374 00e8 FFF7FEFF 		bl	LL_ADC_IsDisableOngoing
 8375 00ec 0346     		mov	r3, r0
 8376              		.loc 2 3361 12
 8377 00ee 002B     		cmp	r3, #0
 8378 00f0 04D1     		bne	.L497
3362:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         {
3363:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****           /* Stop ADC group injected conversion */
3364:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****           LL_ADC_INJ_StopConversion(hadc->Instance);
 8379              		.loc 2 3364 11
 8380 00f2 7B68     		ldr	r3, [r7, #4]
 8381 00f4 1B68     		ldr	r3, [r3]
 8382 00f6 1846     		mov	r0, r3
 8383 00f8 FFF7FEFF 		bl	LL_ADC_INJ_StopConversion
 8384              	.L497:
3365:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         }
3366:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       }
3367:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     }
3368:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
3369:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     /* Selection of start and stop bits with respect to the regular or injected group */
3370:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     switch (conversion_group_reassigned)
 8385              		.loc 2 3370 5
 8386 00fc BB69     		ldr	r3, [r7, #24]
 8387 00fe 022B     		cmp	r3, #2
 8388 0100 05D0     		beq	.L498
 8389 0102 BB69     		ldr	r3, [r7, #24]
ARM GAS  /tmp/ccZ0TYFG.s 			page 362


 8390 0104 032B     		cmp	r3, #3
 8391 0106 05D1     		bne	.L499
3371:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     {
3372:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       case ADC_REGULAR_INJECTED_GROUP:
3373:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8392              		.loc 2 3373 37
 8393 0108 0C23     		movs	r3, #12
 8394 010a 7B61     		str	r3, [r7, #20]
3374:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         break;
 8395              		.loc 2 3374 9
 8396 010c 05E0     		b	.L500
 8397              	.L498:
3375:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       case ADC_INJECTED_GROUP:
3376:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8398              		.loc 2 3376 37
 8399 010e 0823     		movs	r3, #8
 8400 0110 7B61     		str	r3, [r7, #20]
3377:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         break;
 8401              		.loc 2 3377 9
 8402 0112 02E0     		b	.L500
 8403              	.L499:
3378:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       /* Case ADC_REGULAR_GROUP only*/
3379:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       default:
3380:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8404              		.loc 2 3380 37
 8405 0114 0423     		movs	r3, #4
 8406 0116 7B61     		str	r3, [r7, #20]
3381:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         break;
 8407              		.loc 2 3381 9
 8408 0118 00BF     		nop
 8409              	.L500:
3382:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     }
3383:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
3384:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     /* Wait for conversion effectively stopped */
3385:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     tickstart = HAL_GetTick();
 8410              		.loc 2 3385 17
 8411 011a FFF7FEFF 		bl	HAL_GetTick
 8412 011e B860     		str	r0, [r7, #8]
3386:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
3387:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8413              		.loc 2 3387 11
 8414 0120 14E0     		b	.L501
 8415              	.L502:
3388:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     {
3389:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8416              		.loc 2 3389 12
 8417 0122 FFF7FEFF 		bl	HAL_GetTick
 8418 0126 0246     		mov	r2, r0
 8419              		.loc 2 3389 26
 8420 0128 BB68     		ldr	r3, [r7, #8]
 8421 012a D31A     		subs	r3, r2, r3
 8422              		.loc 2 3389 10
 8423 012c 052B     		cmp	r3, #5
 8424 012e 0DD9     		bls	.L501
3390:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       {
3391:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         /* Update ADC state machine to error */
3392:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
ARM GAS  /tmp/ccZ0TYFG.s 			page 363


 8425              		.loc 2 3392 9
 8426 0130 7B68     		ldr	r3, [r7, #4]
 8427 0132 DB6D     		ldr	r3, [r3, #92]
 8428 0134 43F01002 		orr	r2, r3, #16
 8429 0138 7B68     		ldr	r3, [r7, #4]
 8430 013a DA65     		str	r2, [r3, #92]
3393:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
3394:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         /* Set ADC error code to ADC peripheral internal error */
3395:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8431              		.loc 2 3395 9
 8432 013c 7B68     		ldr	r3, [r7, #4]
 8433 013e 1B6E     		ldr	r3, [r3, #96]
 8434 0140 43F00102 		orr	r2, r3, #1
 8435 0144 7B68     		ldr	r3, [r7, #4]
 8436 0146 1A66     		str	r2, [r3, #96]
3396:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
3397:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         return HAL_ERROR;
 8437              		.loc 2 3397 16
 8438 0148 0123     		movs	r3, #1
 8439 014a 07E0     		b	.L494
 8440              	.L501:
3387:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     {
 8441              		.loc 2 3387 17
 8442 014c 7B68     		ldr	r3, [r7, #4]
 8443 014e 1B68     		ldr	r3, [r3]
3387:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     {
 8444              		.loc 2 3387 27
 8445 0150 9A68     		ldr	r2, [r3, #8]
3387:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     {
 8446              		.loc 2 3387 32
 8447 0152 7B69     		ldr	r3, [r7, #20]
 8448 0154 1340     		ands	r3, r3, r2
3387:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     {
 8449              		.loc 2 3387 11
 8450 0156 002B     		cmp	r3, #0
 8451 0158 E3D1     		bne	.L502
 8452              	.L490:
3398:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       }
3399:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     }
3400:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
3401:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   }
3402:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
3403:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   /* Return HAL status */
3404:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   return HAL_OK;
 8453              		.loc 2 3404 10
 8454 015a 0023     		movs	r3, #0
 8455              	.L494:
3405:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** }
 8456              		.loc 2 3405 1
 8457 015c 1846     		mov	r0, r3
 8458 015e 2037     		adds	r7, r7, #32
 8459              	.LCFI374:
 8460              		.cfi_def_cfa_offset 8
 8461 0160 BD46     		mov	sp, r7
 8462              	.LCFI375:
 8463              		.cfi_def_cfa_register 13
 8464              		@ sp needed
ARM GAS  /tmp/ccZ0TYFG.s 			page 364


 8465 0162 80BD     		pop	{r7, pc}
 8466              	.L504:
 8467              		.align	2
 8468              	.L503:
 8469 0164 FFFF3FA3 		.word	-1556086785
 8470              		.cfi_endproc
 8471              	.LFE349:
 8473              		.section	.text.ADC_Enable,"ax",%progbits
 8474              		.align	1
 8475              		.global	ADC_Enable
 8476              		.syntax unified
 8477              		.thumb
 8478              		.thumb_func
 8479              		.fpu fpv4-sp-d16
 8481              	ADC_Enable:
 8482              	.LFB350:
3406:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
3407:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
3408:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
3409:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** /**
3410:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   * @brief  Enable the selected ADC.
3411:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   * @note   Prerequisite condition to use this function: ADC must be disabled
3412:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
3413:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   * @param hadc ADC handle
3414:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   * @retval HAL status.
3415:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   */
3416:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
3417:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** {
 8483              		.loc 2 3417 1
 8484              		.cfi_startproc
 8485              		@ args = 0, pretend = 0, frame = 16
 8486              		@ frame_needed = 1, uses_anonymous_args = 0
 8487 0000 80B5     		push	{r7, lr}
 8488              	.LCFI376:
 8489              		.cfi_def_cfa_offset 8
 8490              		.cfi_offset 7, -8
 8491              		.cfi_offset 14, -4
 8492 0002 84B0     		sub	sp, sp, #16
 8493              	.LCFI377:
 8494              		.cfi_def_cfa_offset 24
 8495 0004 00AF     		add	r7, sp, #0
 8496              	.LCFI378:
 8497              		.cfi_def_cfa_register 7
 8498 0006 7860     		str	r0, [r7, #4]
3418:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   uint32_t tickstart;
3419:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
3420:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
3421:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   /* enabling phase not yet completed: flag ADC ready not yet set).           */
3422:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
3423:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   /* causes: ADC clock not running, ...).                                     */
3424:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8499              		.loc 2 3424 7
 8500 0008 7B68     		ldr	r3, [r7, #4]
 8501 000a 1B68     		ldr	r3, [r3]
 8502 000c 1846     		mov	r0, r3
 8503 000e FFF7FEFF 		bl	LL_ADC_IsEnabled
 8504 0012 0346     		mov	r3, r0
ARM GAS  /tmp/ccZ0TYFG.s 			page 365


 8505              		.loc 2 3424 6
 8506 0014 002B     		cmp	r3, #0
 8507 0016 46D1     		bne	.L506
3425:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   {
3426:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     /* Check if conditions to enable the ADC are fulfilled */
3427:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_
 8508              		.loc 2 3427 14
 8509 0018 7B68     		ldr	r3, [r7, #4]
 8510 001a 1B68     		ldr	r3, [r3]
 8511              		.loc 2 3427 24
 8512 001c 9A68     		ldr	r2, [r3, #8]
 8513              		.loc 2 3427 29
 8514 001e 244B     		ldr	r3, .L512
 8515 0020 1340     		ands	r3, r3, r2
 8516              		.loc 2 3427 8
 8517 0022 002B     		cmp	r3, #0
 8518 0024 0DD0     		beq	.L507
3428:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     {
3429:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       /* Update ADC state machine to error */
3430:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8519              		.loc 2 3430 7
 8520 0026 7B68     		ldr	r3, [r7, #4]
 8521 0028 DB6D     		ldr	r3, [r3, #92]
 8522 002a 43F01002 		orr	r2, r3, #16
 8523 002e 7B68     		ldr	r3, [r7, #4]
 8524 0030 DA65     		str	r2, [r3, #92]
3431:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
3432:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       /* Set ADC error code to ADC peripheral internal error */
3433:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8525              		.loc 2 3433 7
 8526 0032 7B68     		ldr	r3, [r7, #4]
 8527 0034 1B6E     		ldr	r3, [r3, #96]
 8528 0036 43F00102 		orr	r2, r3, #1
 8529 003a 7B68     		ldr	r3, [r7, #4]
 8530 003c 1A66     		str	r2, [r3, #96]
3434:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
3435:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       return HAL_ERROR;
 8531              		.loc 2 3435 14
 8532 003e 0123     		movs	r3, #1
 8533 0040 32E0     		b	.L508
 8534              	.L507:
3436:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     }
3437:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
3438:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     /* Enable the ADC peripheral */
3439:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     LL_ADC_Enable(hadc->Instance);
 8535              		.loc 2 3439 5
 8536 0042 7B68     		ldr	r3, [r7, #4]
 8537 0044 1B68     		ldr	r3, [r3]
 8538 0046 1846     		mov	r0, r3
 8539 0048 FFF7FEFF 		bl	LL_ADC_Enable
3440:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
3441:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     /* Wait for ADC effectively enabled */
3442:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     tickstart = HAL_GetTick();
 8540              		.loc 2 3442 17
 8541 004c FFF7FEFF 		bl	HAL_GetTick
 8542 0050 F860     		str	r0, [r7, #12]
3443:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
ARM GAS  /tmp/ccZ0TYFG.s 			page 366


3444:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8543              		.loc 2 3444 11
 8544 0052 21E0     		b	.L509
 8545              	.L511:
3445:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     {
3446:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       /*  If ADEN bit is set less than 4 ADC clock cycles after the ADCAL bit
3447:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****           has been cleared (after a calibration), ADEN bit is reset by the
3448:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****           calibration logic.
3449:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****           The workaround is to continue setting ADEN until ADRDY is becomes 1.
3450:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****           Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
3451:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****           4 ADC clock cycle duration */
3452:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       /* Note: Test of ADC enabled required due to hardware constraint to     */
3453:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       /*       not enable ADC if already enabled.                             */
3454:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8546              		.loc 2 3454 11
 8547 0054 7B68     		ldr	r3, [r7, #4]
 8548 0056 1B68     		ldr	r3, [r3]
 8549 0058 1846     		mov	r0, r3
 8550 005a FFF7FEFF 		bl	LL_ADC_IsEnabled
 8551 005e 0346     		mov	r3, r0
 8552              		.loc 2 3454 10
 8553 0060 002B     		cmp	r3, #0
 8554 0062 04D1     		bne	.L510
3455:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       {
3456:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         LL_ADC_Enable(hadc->Instance);
 8555              		.loc 2 3456 9
 8556 0064 7B68     		ldr	r3, [r7, #4]
 8557 0066 1B68     		ldr	r3, [r3]
 8558 0068 1846     		mov	r0, r3
 8559 006a FFF7FEFF 		bl	LL_ADC_Enable
 8560              	.L510:
3457:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       }
3458:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
3459:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8561              		.loc 2 3459 12
 8562 006e FFF7FEFF 		bl	HAL_GetTick
 8563 0072 0246     		mov	r2, r0
 8564              		.loc 2 3459 26
 8565 0074 FB68     		ldr	r3, [r7, #12]
 8566 0076 D31A     		subs	r3, r2, r3
 8567              		.loc 2 3459 10
 8568 0078 022B     		cmp	r3, #2
 8569 007a 0DD9     		bls	.L509
3460:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       {
3461:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         /* Update ADC state machine to error */
3462:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8570              		.loc 2 3462 9
 8571 007c 7B68     		ldr	r3, [r7, #4]
 8572 007e DB6D     		ldr	r3, [r3, #92]
 8573 0080 43F01002 		orr	r2, r3, #16
 8574 0084 7B68     		ldr	r3, [r7, #4]
 8575 0086 DA65     		str	r2, [r3, #92]
3463:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
3464:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         /* Set ADC error code to ADC peripheral internal error */
3465:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8576              		.loc 2 3465 9
 8577 0088 7B68     		ldr	r3, [r7, #4]
ARM GAS  /tmp/ccZ0TYFG.s 			page 367


 8578 008a 1B6E     		ldr	r3, [r3, #96]
 8579 008c 43F00102 		orr	r2, r3, #1
 8580 0090 7B68     		ldr	r3, [r7, #4]
 8581 0092 1A66     		str	r2, [r3, #96]
3466:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
3467:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         return HAL_ERROR;
 8582              		.loc 2 3467 16
 8583 0094 0123     		movs	r3, #1
 8584 0096 07E0     		b	.L508
 8585              	.L509:
3444:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     {
 8586              		.loc 2 3444 12
 8587 0098 7B68     		ldr	r3, [r7, #4]
 8588 009a 1B68     		ldr	r3, [r3]
 8589 009c 1B68     		ldr	r3, [r3]
 8590 009e 03F00103 		and	r3, r3, #1
3444:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     {
 8591              		.loc 2 3444 11
 8592 00a2 012B     		cmp	r3, #1
 8593 00a4 D6D1     		bne	.L511
 8594              	.L506:
3468:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       }
3469:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     }
3470:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   }
3471:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
3472:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   /* Return HAL status */
3473:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   return HAL_OK;
 8595              		.loc 2 3473 10
 8596 00a6 0023     		movs	r3, #0
 8597              	.L508:
3474:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** }
 8598              		.loc 2 3474 1
 8599 00a8 1846     		mov	r0, r3
 8600 00aa 1037     		adds	r7, r7, #16
 8601              	.LCFI379:
 8602              		.cfi_def_cfa_offset 8
 8603 00ac BD46     		mov	sp, r7
 8604              	.LCFI380:
 8605              		.cfi_def_cfa_register 13
 8606              		@ sp needed
 8607 00ae 80BD     		pop	{r7, pc}
 8608              	.L513:
 8609              		.align	2
 8610              	.L512:
 8611 00b0 3F000080 		.word	-2147483585
 8612              		.cfi_endproc
 8613              	.LFE350:
 8615              		.section	.text.ADC_Disable,"ax",%progbits
 8616              		.align	1
 8617              		.global	ADC_Disable
 8618              		.syntax unified
 8619              		.thumb
 8620              		.thumb_func
 8621              		.fpu fpv4-sp-d16
 8623              	ADC_Disable:
 8624              	.LFB351:
3475:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
ARM GAS  /tmp/ccZ0TYFG.s 			page 368


3476:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** /**
3477:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   * @brief  Disable the selected ADC.
3478:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   * @note   Prerequisite condition to use this function: ADC conversions must be
3479:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   *         stopped.
3480:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   * @param hadc ADC handle
3481:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   * @retval HAL status.
3482:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   */
3483:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
3484:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** {
 8625              		.loc 2 3484 1
 8626              		.cfi_startproc
 8627              		@ args = 0, pretend = 0, frame = 16
 8628              		@ frame_needed = 1, uses_anonymous_args = 0
 8629 0000 80B5     		push	{r7, lr}
 8630              	.LCFI381:
 8631              		.cfi_def_cfa_offset 8
 8632              		.cfi_offset 7, -8
 8633              		.cfi_offset 14, -4
 8634 0002 84B0     		sub	sp, sp, #16
 8635              	.LCFI382:
 8636              		.cfi_def_cfa_offset 24
 8637 0004 00AF     		add	r7, sp, #0
 8638              	.LCFI383:
 8639              		.cfi_def_cfa_register 7
 8640 0006 7860     		str	r0, [r7, #4]
3485:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   uint32_t tickstart;
3486:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8641              		.loc 2 3486 48
 8642 0008 7B68     		ldr	r3, [r7, #4]
 8643 000a 1B68     		ldr	r3, [r3]
 8644 000c 1846     		mov	r0, r3
 8645 000e FFF7FEFF 		bl	LL_ADC_IsDisableOngoing
 8646 0012 F860     		str	r0, [r7, #12]
3487:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
3488:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   /* Verification if ADC is not already disabled:                             */
3489:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
3490:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   /*       disabled.                                                          */
3491:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8647              		.loc 2 3491 8
 8648 0014 7B68     		ldr	r3, [r7, #4]
 8649 0016 1B68     		ldr	r3, [r3]
 8650 0018 1846     		mov	r0, r3
 8651 001a FFF7FEFF 		bl	LL_ADC_IsEnabled
 8652 001e 0346     		mov	r3, r0
 8653              		.loc 2 3491 6
 8654 0020 002B     		cmp	r3, #0
 8655 0022 40D0     		beq	.L515
3492:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       && (tmp_adc_is_disable_on_going == 0UL)
 8656              		.loc 2 3492 7
 8657 0024 FB68     		ldr	r3, [r7, #12]
 8658 0026 002B     		cmp	r3, #0
 8659 0028 3DD1     		bne	.L515
3493:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****      )
3494:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   {
3495:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     /* Check if conditions to disable the ADC are fulfilled */
3496:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8660              		.loc 2 3496 14
ARM GAS  /tmp/ccZ0TYFG.s 			page 369


 8661 002a 7B68     		ldr	r3, [r7, #4]
 8662 002c 1B68     		ldr	r3, [r3]
 8663              		.loc 2 3496 24
 8664 002e 9B68     		ldr	r3, [r3, #8]
 8665              		.loc 2 3496 29
 8666 0030 03F00D03 		and	r3, r3, #13
 8667              		.loc 2 3496 8
 8668 0034 012B     		cmp	r3, #1
 8669 0036 0CD1     		bne	.L516
3497:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     {
3498:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       /* Disable the ADC peripheral */
3499:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       LL_ADC_Disable(hadc->Instance);
 8670              		.loc 2 3499 7
 8671 0038 7B68     		ldr	r3, [r7, #4]
 8672 003a 1B68     		ldr	r3, [r3]
 8673 003c 1846     		mov	r0, r3
 8674 003e FFF7FEFF 		bl	LL_ADC_Disable
3500:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8675              		.loc 2 3500 7
 8676 0042 7B68     		ldr	r3, [r7, #4]
 8677 0044 1B68     		ldr	r3, [r3]
 8678 0046 0322     		movs	r2, #3
 8679 0048 1A60     		str	r2, [r3]
3501:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     }
3502:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     else
3503:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     {
3504:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       /* Update ADC state machine to error */
3505:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
3506:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
3507:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       /* Set ADC error code to ADC peripheral internal error */
3508:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
3509:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
3510:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       return HAL_ERROR;
3511:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     }
3512:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
3513:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     /* Wait for ADC effectively disabled */
3514:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     /* Get tick count */
3515:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     tickstart = HAL_GetTick();
 8680              		.loc 2 3515 17
 8681 004a FFF7FEFF 		bl	HAL_GetTick
 8682 004e B860     		str	r0, [r7, #8]
3516:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
3517:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8683              		.loc 2 3517 11
 8684 0050 22E0     		b	.L519
 8685              	.L516:
3505:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
 8686              		.loc 2 3505 7
 8687 0052 7B68     		ldr	r3, [r7, #4]
 8688 0054 DB6D     		ldr	r3, [r3, #92]
 8689 0056 43F01002 		orr	r2, r3, #16
 8690 005a 7B68     		ldr	r3, [r7, #4]
 8691 005c DA65     		str	r2, [r3, #92]
3508:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
 8692              		.loc 2 3508 7
 8693 005e 7B68     		ldr	r3, [r7, #4]
 8694 0060 1B6E     		ldr	r3, [r3, #96]
ARM GAS  /tmp/ccZ0TYFG.s 			page 370


 8695 0062 43F00102 		orr	r2, r3, #1
 8696 0066 7B68     		ldr	r3, [r7, #4]
 8697 0068 1A66     		str	r2, [r3, #96]
3510:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     }
 8698              		.loc 2 3510 14
 8699 006a 0123     		movs	r3, #1
 8700 006c 1CE0     		b	.L518
 8701              	.L520:
3518:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     {
3519:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8702              		.loc 2 3519 12
 8703 006e FFF7FEFF 		bl	HAL_GetTick
 8704 0072 0246     		mov	r2, r0
 8705              		.loc 2 3519 26
 8706 0074 BB68     		ldr	r3, [r7, #8]
 8707 0076 D31A     		subs	r3, r2, r3
 8708              		.loc 2 3519 10
 8709 0078 022B     		cmp	r3, #2
 8710 007a 0DD9     		bls	.L519
3520:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       {
3521:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         /* Update ADC state machine to error */
3522:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8711              		.loc 2 3522 9
 8712 007c 7B68     		ldr	r3, [r7, #4]
 8713 007e DB6D     		ldr	r3, [r3, #92]
 8714 0080 43F01002 		orr	r2, r3, #16
 8715 0084 7B68     		ldr	r3, [r7, #4]
 8716 0086 DA65     		str	r2, [r3, #92]
3523:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
3524:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         /* Set ADC error code to ADC peripheral internal error */
3525:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8717              		.loc 2 3525 9
 8718 0088 7B68     		ldr	r3, [r7, #4]
 8719 008a 1B6E     		ldr	r3, [r3, #96]
 8720 008c 43F00102 		orr	r2, r3, #1
 8721 0090 7B68     		ldr	r3, [r7, #4]
 8722 0092 1A66     		str	r2, [r3, #96]
3526:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
3527:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         return HAL_ERROR;
 8723              		.loc 2 3527 16
 8724 0094 0123     		movs	r3, #1
 8725 0096 07E0     		b	.L518
 8726              	.L519:
3517:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     {
 8727              		.loc 2 3517 17
 8728 0098 7B68     		ldr	r3, [r7, #4]
 8729 009a 1B68     		ldr	r3, [r3]
3517:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     {
 8730              		.loc 2 3517 27
 8731 009c 9B68     		ldr	r3, [r3, #8]
3517:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     {
 8732              		.loc 2 3517 32
 8733 009e 03F00103 		and	r3, r3, #1
3517:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     {
 8734              		.loc 2 3517 11
 8735 00a2 002B     		cmp	r3, #0
 8736 00a4 E3D1     		bne	.L520
ARM GAS  /tmp/ccZ0TYFG.s 			page 371


 8737              	.L515:
3528:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       }
3529:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     }
3530:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   }
3531:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
3532:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   /* Return HAL status */
3533:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   return HAL_OK;
 8738              		.loc 2 3533 10
 8739 00a6 0023     		movs	r3, #0
 8740              	.L518:
3534:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** }
 8741              		.loc 2 3534 1
 8742 00a8 1846     		mov	r0, r3
 8743 00aa 1037     		adds	r7, r7, #16
 8744              	.LCFI384:
 8745              		.cfi_def_cfa_offset 8
 8746 00ac BD46     		mov	sp, r7
 8747              	.LCFI385:
 8748              		.cfi_def_cfa_register 13
 8749              		@ sp needed
 8750 00ae 80BD     		pop	{r7, pc}
 8751              		.cfi_endproc
 8752              	.LFE351:
 8754              		.section	.text.ADC_DMAConvCplt,"ax",%progbits
 8755              		.align	1
 8756              		.global	ADC_DMAConvCplt
 8757              		.syntax unified
 8758              		.thumb
 8759              		.thumb_func
 8760              		.fpu fpv4-sp-d16
 8762              	ADC_DMAConvCplt:
 8763              	.LFB352:
3535:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
3536:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** /**
3537:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   * @brief  DMA transfer complete callback.
3538:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   * @param hdma pointer to DMA handle.
3539:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   * @retval None
3540:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   */
3541:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
3542:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** {
 8764              		.loc 2 3542 1
 8765              		.cfi_startproc
 8766              		@ args = 0, pretend = 0, frame = 16
 8767              		@ frame_needed = 1, uses_anonymous_args = 0
 8768 0000 80B5     		push	{r7, lr}
 8769              	.LCFI386:
 8770              		.cfi_def_cfa_offset 8
 8771              		.cfi_offset 7, -8
 8772              		.cfi_offset 14, -4
 8773 0002 84B0     		sub	sp, sp, #16
 8774              	.LCFI387:
 8775              		.cfi_def_cfa_offset 24
 8776 0004 00AF     		add	r7, sp, #0
 8777              	.LCFI388:
 8778              		.cfi_def_cfa_register 7
 8779 0006 7860     		str	r0, [r7, #4]
3543:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   /* Retrieve ADC handle corresponding to current DMA handle */
ARM GAS  /tmp/ccZ0TYFG.s 			page 372


3544:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8780              		.loc 2 3544 22
 8781 0008 7B68     		ldr	r3, [r7, #4]
 8782 000a 9B6A     		ldr	r3, [r3, #40]
 8783 000c FB60     		str	r3, [r7, #12]
3545:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
3546:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   /* Update state machine on conversion status if not in error state */
3547:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8784              		.loc 2 3547 12
 8785 000e FB68     		ldr	r3, [r7, #12]
 8786 0010 DB6D     		ldr	r3, [r3, #92]
 8787              		.loc 2 3547 20
 8788 0012 03F05003 		and	r3, r3, #80
 8789              		.loc 2 3547 6
 8790 0016 002B     		cmp	r3, #0
 8791 0018 4BD1     		bne	.L522
3548:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   {
3549:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     /* Set ADC state */
3550:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8792              		.loc 2 3550 5
 8793 001a FB68     		ldr	r3, [r7, #12]
 8794 001c DB6D     		ldr	r3, [r3, #92]
 8795 001e 43F40072 		orr	r2, r3, #512
 8796 0022 FB68     		ldr	r3, [r7, #12]
 8797 0024 DA65     		str	r2, [r3, #92]
3551:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
3552:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     /* Determine whether any further conversion upcoming on group regular     */
3553:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     /* by external trigger, continuous mode or scan sequence on going         */
3554:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     /* to disable interruption.                                               */
3555:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     /* Is it the end of the regular sequence ? */
3556:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8798              		.loc 2 3556 14
 8799 0026 FB68     		ldr	r3, [r7, #12]
 8800 0028 1B68     		ldr	r3, [r3]
 8801              		.loc 2 3556 24
 8802 002a 1B68     		ldr	r3, [r3]
 8803              		.loc 2 3556 30
 8804 002c 03F00803 		and	r3, r3, #8
 8805              		.loc 2 3556 8
 8806 0030 002B     		cmp	r3, #0
 8807 0032 21D0     		beq	.L523
3557:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     {
3558:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       /* Are conversions software-triggered ? */
3559:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8808              		.loc 2 3559 11
 8809 0034 FB68     		ldr	r3, [r7, #12]
 8810 0036 1B68     		ldr	r3, [r3]
 8811 0038 1846     		mov	r0, r3
 8812 003a FFF7FEFF 		bl	LL_ADC_REG_IsTriggerSourceSWStart
 8813 003e 0346     		mov	r3, r0
 8814              		.loc 2 3559 10
 8815 0040 002B     		cmp	r3, #0
 8816 0042 32D0     		beq	.L525
3560:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       {
3561:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         /* Is CONT bit set ? */
3562:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8817              		.loc 2 3562 13
ARM GAS  /tmp/ccZ0TYFG.s 			page 373


 8818 0044 FB68     		ldr	r3, [r7, #12]
 8819 0046 1B68     		ldr	r3, [r3]
 8820 0048 DB68     		ldr	r3, [r3, #12]
 8821 004a 03F40053 		and	r3, r3, #8192
 8822              		.loc 2 3562 12
 8823 004e 002B     		cmp	r3, #0
 8824 0050 2BD1     		bne	.L525
3563:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         {
3564:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****           /* CONT bit is not set, no more conversions expected */
3565:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****           CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8825              		.loc 2 3565 11
 8826 0052 FB68     		ldr	r3, [r7, #12]
 8827 0054 DB6D     		ldr	r3, [r3, #92]
 8828 0056 23F48072 		bic	r2, r3, #256
 8829 005a FB68     		ldr	r3, [r7, #12]
 8830 005c DA65     		str	r2, [r3, #92]
3566:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****           if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8831              		.loc 2 3566 20
 8832 005e FB68     		ldr	r3, [r7, #12]
 8833 0060 DB6D     		ldr	r3, [r3, #92]
 8834              		.loc 2 3566 28
 8835 0062 03F48053 		and	r3, r3, #4096
 8836              		.loc 2 3566 14
 8837 0066 002B     		cmp	r3, #0
 8838 0068 1FD1     		bne	.L525
3567:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****           {
3568:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****             SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8839              		.loc 2 3568 13
 8840 006a FB68     		ldr	r3, [r7, #12]
 8841 006c DB6D     		ldr	r3, [r3, #92]
 8842 006e 43F00102 		orr	r2, r3, #1
 8843 0072 FB68     		ldr	r3, [r7, #12]
 8844 0074 DA65     		str	r2, [r3, #92]
 8845 0076 18E0     		b	.L525
 8846              	.L523:
3569:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****           }
3570:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         }
3571:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       }
3572:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     }
3573:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     else
3574:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     {
3575:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       /* DMA End of Transfer interrupt was triggered but conversions sequence
3576:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****          is not over. If DMACFG is set to 0, conversions are stopped. */
3577:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8847              		.loc 2 3577 11
 8848 0078 FB68     		ldr	r3, [r7, #12]
 8849 007a 1B68     		ldr	r3, [r3]
 8850 007c DB68     		ldr	r3, [r3, #12]
 8851 007e 03F00203 		and	r3, r3, #2
 8852              		.loc 2 3577 10
 8853 0082 002B     		cmp	r3, #0
 8854 0084 11D1     		bne	.L525
3578:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       {
3579:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         /* DMACFG bit is not set, conversions are stopped. */
3580:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8855              		.loc 2 3580 9
 8856 0086 FB68     		ldr	r3, [r7, #12]
ARM GAS  /tmp/ccZ0TYFG.s 			page 374


 8857 0088 DB6D     		ldr	r3, [r3, #92]
 8858 008a 23F48072 		bic	r2, r3, #256
 8859 008e FB68     		ldr	r3, [r7, #12]
 8860 0090 DA65     		str	r2, [r3, #92]
3581:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8861              		.loc 2 3581 18
 8862 0092 FB68     		ldr	r3, [r7, #12]
 8863 0094 DB6D     		ldr	r3, [r3, #92]
 8864              		.loc 2 3581 26
 8865 0096 03F48053 		and	r3, r3, #4096
 8866              		.loc 2 3581 12
 8867 009a 002B     		cmp	r3, #0
 8868 009c 05D1     		bne	.L525
3582:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         {
3583:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****           SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8869              		.loc 2 3583 11
 8870 009e FB68     		ldr	r3, [r7, #12]
 8871 00a0 DB6D     		ldr	r3, [r3, #92]
 8872 00a2 43F00102 		orr	r2, r3, #1
 8873 00a6 FB68     		ldr	r3, [r7, #12]
 8874 00a8 DA65     		str	r2, [r3, #92]
 8875              	.L525:
3584:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****         }
3585:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       }
3586:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     }
3587:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
3588:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     /* Conversion complete callback */
3589:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** #if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
3590:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     hadc->ConvCpltCallback(hadc);
3591:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** #else
3592:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     HAL_ADC_ConvCpltCallback(hadc);
 8876              		.loc 2 3592 5
 8877 00aa F868     		ldr	r0, [r7, #12]
 8878 00ac FFF7FEFF 		bl	HAL_ADC_ConvCpltCallback
3593:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** #endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
3594:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   }
3595:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   else /* DMA and-or internal error occurred */
3596:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   {
3597:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
3598:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     {
3599:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       /* Call HAL ADC Error Callback function */
3600:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** #if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
3601:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       hadc->ErrorCallback(hadc);
3602:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** #else
3603:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       HAL_ADC_ErrorCallback(hadc);
3604:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** #endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
3605:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     }
3606:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     else
3607:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     {
3608:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       /* Call ADC DMA error callback */
3609:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****       hadc->DMA_Handle->XferErrorCallback(hdma);
3610:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     }
3611:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   }
3612:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** }
 8879              		.loc 2 3612 1
 8880 00b0 0EE0     		b	.L528
 8881              	.L522:
ARM GAS  /tmp/ccZ0TYFG.s 			page 375


3597:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     {
 8882              		.loc 2 3597 14
 8883 00b2 FB68     		ldr	r3, [r7, #12]
 8884 00b4 DB6D     		ldr	r3, [r3, #92]
3597:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     {
 8885              		.loc 2 3597 22
 8886 00b6 03F01003 		and	r3, r3, #16
3597:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     {
 8887              		.loc 2 3597 8
 8888 00ba 002B     		cmp	r3, #0
 8889 00bc 03D0     		beq	.L527
3603:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** #endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
 8890              		.loc 2 3603 7
 8891 00be F868     		ldr	r0, [r7, #12]
 8892 00c0 FFF7FEFF 		bl	HAL_ADC_ErrorCallback
 8893              		.loc 2 3612 1
 8894 00c4 04E0     		b	.L528
 8895              	.L527:
3609:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     }
 8896              		.loc 2 3609 11
 8897 00c6 FB68     		ldr	r3, [r7, #12]
 8898 00c8 5B6D     		ldr	r3, [r3, #84]
3609:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     }
 8899              		.loc 2 3609 23
 8900 00ca 5B6B     		ldr	r3, [r3, #52]
3609:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****     }
 8901              		.loc 2 3609 7
 8902 00cc 7868     		ldr	r0, [r7, #4]
 8903 00ce 9847     		blx	r3
 8904              	.LVL0:
 8905              	.L528:
 8906              		.loc 2 3612 1
 8907 00d0 00BF     		nop
 8908 00d2 1037     		adds	r7, r7, #16
 8909              	.LCFI389:
 8910              		.cfi_def_cfa_offset 8
 8911 00d4 BD46     		mov	sp, r7
 8912              	.LCFI390:
 8913              		.cfi_def_cfa_register 13
 8914              		@ sp needed
 8915 00d6 80BD     		pop	{r7, pc}
 8916              		.cfi_endproc
 8917              	.LFE352:
 8919              		.section	.text.ADC_DMAHalfConvCplt,"ax",%progbits
 8920              		.align	1
 8921              		.global	ADC_DMAHalfConvCplt
 8922              		.syntax unified
 8923              		.thumb
 8924              		.thumb_func
 8925              		.fpu fpv4-sp-d16
 8927              	ADC_DMAHalfConvCplt:
 8928              	.LFB353:
3613:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
3614:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** /**
3615:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   * @brief  DMA half transfer complete callback.
3616:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   * @param hdma pointer to DMA handle.
3617:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   * @retval None
ARM GAS  /tmp/ccZ0TYFG.s 			page 376


3618:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   */
3619:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
3620:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** {
 8929              		.loc 2 3620 1
 8930              		.cfi_startproc
 8931              		@ args = 0, pretend = 0, frame = 16
 8932              		@ frame_needed = 1, uses_anonymous_args = 0
 8933 0000 80B5     		push	{r7, lr}
 8934              	.LCFI391:
 8935              		.cfi_def_cfa_offset 8
 8936              		.cfi_offset 7, -8
 8937              		.cfi_offset 14, -4
 8938 0002 84B0     		sub	sp, sp, #16
 8939              	.LCFI392:
 8940              		.cfi_def_cfa_offset 24
 8941 0004 00AF     		add	r7, sp, #0
 8942              	.LCFI393:
 8943              		.cfi_def_cfa_register 7
 8944 0006 7860     		str	r0, [r7, #4]
3621:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   /* Retrieve ADC handle corresponding to current DMA handle */
3622:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8945              		.loc 2 3622 22
 8946 0008 7B68     		ldr	r3, [r7, #4]
 8947 000a 9B6A     		ldr	r3, [r3, #40]
 8948 000c FB60     		str	r3, [r7, #12]
3623:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
3624:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   /* Half conversion callback */
3625:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** #if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
3626:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   hadc->ConvHalfCpltCallback(hadc);
3627:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** #else
3628:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   HAL_ADC_ConvHalfCpltCallback(hadc);
 8949              		.loc 2 3628 3
 8950 000e F868     		ldr	r0, [r7, #12]
 8951 0010 FFF7FEFF 		bl	HAL_ADC_ConvHalfCpltCallback
3629:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** #endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
3630:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** }
 8952              		.loc 2 3630 1
 8953 0014 00BF     		nop
 8954 0016 1037     		adds	r7, r7, #16
 8955              	.LCFI394:
 8956              		.cfi_def_cfa_offset 8
 8957 0018 BD46     		mov	sp, r7
 8958              	.LCFI395:
 8959              		.cfi_def_cfa_register 13
 8960              		@ sp needed
 8961 001a 80BD     		pop	{r7, pc}
 8962              		.cfi_endproc
 8963              	.LFE353:
 8965              		.section	.text.ADC_DMAError,"ax",%progbits
 8966              		.align	1
 8967              		.global	ADC_DMAError
 8968              		.syntax unified
 8969              		.thumb
 8970              		.thumb_func
 8971              		.fpu fpv4-sp-d16
 8973              	ADC_DMAError:
 8974              	.LFB354:
ARM GAS  /tmp/ccZ0TYFG.s 			page 377


3631:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
3632:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** /**
3633:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   * @brief  DMA error callback.
3634:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   * @param hdma pointer to DMA handle.
3635:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   * @retval None
3636:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   */
3637:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** void ADC_DMAError(DMA_HandleTypeDef *hdma)
3638:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** {
 8975              		.loc 2 3638 1
 8976              		.cfi_startproc
 8977              		@ args = 0, pretend = 0, frame = 16
 8978              		@ frame_needed = 1, uses_anonymous_args = 0
 8979 0000 80B5     		push	{r7, lr}
 8980              	.LCFI396:
 8981              		.cfi_def_cfa_offset 8
 8982              		.cfi_offset 7, -8
 8983              		.cfi_offset 14, -4
 8984 0002 84B0     		sub	sp, sp, #16
 8985              	.LCFI397:
 8986              		.cfi_def_cfa_offset 24
 8987 0004 00AF     		add	r7, sp, #0
 8988              	.LCFI398:
 8989              		.cfi_def_cfa_register 7
 8990 0006 7860     		str	r0, [r7, #4]
3639:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   /* Retrieve ADC handle corresponding to current DMA handle */
3640:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8991              		.loc 2 3640 22
 8992 0008 7B68     		ldr	r3, [r7, #4]
 8993 000a 9B6A     		ldr	r3, [r3, #40]
 8994 000c FB60     		str	r3, [r7, #12]
3641:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
3642:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   /* Set ADC state */
3643:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8995              		.loc 2 3643 3
 8996 000e FB68     		ldr	r3, [r7, #12]
 8997 0010 DB6D     		ldr	r3, [r3, #92]
 8998 0012 43F04002 		orr	r2, r3, #64
 8999 0016 FB68     		ldr	r3, [r7, #12]
 9000 0018 DA65     		str	r2, [r3, #92]
3644:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
3645:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   /* Set ADC error code to DMA error */
3646:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 9001              		.loc 2 3646 3
 9002 001a FB68     		ldr	r3, [r7, #12]
 9003 001c 1B6E     		ldr	r3, [r3, #96]
 9004 001e 43F00402 		orr	r2, r3, #4
 9005 0022 FB68     		ldr	r3, [r7, #12]
 9006 0024 1A66     		str	r2, [r3, #96]
3647:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** 
3648:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   /* Error callback */
3649:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** #if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
3650:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   hadc->ErrorCallback(hadc);
3651:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** #else
3652:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c ****   HAL_ADC_ErrorCallback(hadc);
 9007              		.loc 2 3652 3
 9008 0026 F868     		ldr	r0, [r7, #12]
 9009 0028 FFF7FEFF 		bl	HAL_ADC_ErrorCallback
ARM GAS  /tmp/ccZ0TYFG.s 			page 378


3653:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** #endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
3654:Drivers/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c **** }
 9010              		.loc 2 3654 1
 9011 002c 00BF     		nop
 9012 002e 1037     		adds	r7, r7, #16
 9013              	.LCFI399:
 9014              		.cfi_def_cfa_offset 8
 9015 0030 BD46     		mov	sp, r7
 9016              	.LCFI400:
 9017              		.cfi_def_cfa_register 13
 9018              		@ sp needed
 9019 0032 80BD     		pop	{r7, pc}
 9020              		.cfi_endproc
 9021              	.LFE354:
 9023              		.text
 9024              	.Letext0:
 9025              		.file 4 "/opt/gcc-arm-none-eabi-8-2019-q3-update/arm-none-eabi/include/machine/_default_types.h"
 9026              		.file 5 "/opt/gcc-arm-none-eabi-8-2019-q3-update/arm-none-eabi/include/sys/_stdint.h"
 9027              		.file 6 "Drivers/CMSIS/Include/core_cm4.h"
 9028              		.file 7 "Drivers/CMSIS/Device/ST/STM32G4xx/Include/system_stm32g4xx.h"
 9029              		.file 8 "Drivers/CMSIS/Device/ST/STM32G4xx/Include/stm32g474xx.h"
 9030              		.file 9 "Drivers/CMSIS/Device/ST/STM32G4xx/Include/stm32g4xx.h"
 9031              		.file 10 "Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_hal_def.h"
 9032              		.file 11 "Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_hal_dma.h"
 9033              		.file 12 "Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_hal_adc.h"
 9034              		.file 13 "Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_hal_flash.h"
 9035              		.file 14 "Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_hal.h"
ARM GAS  /tmp/ccZ0TYFG.s 			page 379


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32g4xx_hal_adc.c
     /tmp/ccZ0TYFG.s:18     .text.LL_ADC_SetCommonClock:0000000000000000 $t
     /tmp/ccZ0TYFG.s:25     .text.LL_ADC_SetCommonClock:0000000000000000 LL_ADC_SetCommonClock
     /tmp/ccZ0TYFG.s:71     .text.LL_ADC_SetCommonPathInternalCh:0000000000000000 $t
     /tmp/ccZ0TYFG.s:77     .text.LL_ADC_SetCommonPathInternalCh:0000000000000000 LL_ADC_SetCommonPathInternalCh
     /tmp/ccZ0TYFG.s:122    .text.LL_ADC_GetCommonPathInternalCh:0000000000000000 $t
     /tmp/ccZ0TYFG.s:128    .text.LL_ADC_GetCommonPathInternalCh:0000000000000000 LL_ADC_GetCommonPathInternalCh
     /tmp/ccZ0TYFG.s:169    .text.LL_ADC_SetOffset:0000000000000000 $t
     /tmp/ccZ0TYFG.s:175    .text.LL_ADC_SetOffset:0000000000000000 LL_ADC_SetOffset
     /tmp/ccZ0TYFG.s:235    .text.LL_ADC_SetOffset:0000000000000040 $d
     /tmp/ccZ0TYFG.s:240    .text.LL_ADC_GetOffsetChannel:0000000000000000 $t
     /tmp/ccZ0TYFG.s:246    .text.LL_ADC_GetOffsetChannel:0000000000000000 LL_ADC_GetOffsetChannel
     /tmp/ccZ0TYFG.s:297    .text.LL_ADC_SetOffsetState:0000000000000000 $t
     /tmp/ccZ0TYFG.s:303    .text.LL_ADC_SetOffsetState:0000000000000000 LL_ADC_SetOffsetState
     /tmp/ccZ0TYFG.s:358    .text.LL_ADC_SetOffsetSign:0000000000000000 $t
     /tmp/ccZ0TYFG.s:364    .text.LL_ADC_SetOffsetSign:0000000000000000 LL_ADC_SetOffsetSign
     /tmp/ccZ0TYFG.s:419    .text.LL_ADC_SetOffsetSaturation:0000000000000000 $t
     /tmp/ccZ0TYFG.s:425    .text.LL_ADC_SetOffsetSaturation:0000000000000000 LL_ADC_SetOffsetSaturation
     /tmp/ccZ0TYFG.s:480    .text.LL_ADC_SetSamplingTimeCommonConfig:0000000000000000 $t
     /tmp/ccZ0TYFG.s:486    .text.LL_ADC_SetSamplingTimeCommonConfig:0000000000000000 LL_ADC_SetSamplingTimeCommonConfig
     /tmp/ccZ0TYFG.s:531    .text.LL_ADC_REG_IsTriggerSourceSWStart:0000000000000000 $t
     /tmp/ccZ0TYFG.s:537    .text.LL_ADC_REG_IsTriggerSourceSWStart:0000000000000000 LL_ADC_REG_IsTriggerSourceSWStart
     /tmp/ccZ0TYFG.s:587    .text.LL_ADC_REG_SetSequencerRanks:0000000000000000 $t
     /tmp/ccZ0TYFG.s:593    .text.LL_ADC_REG_SetSequencerRanks:0000000000000000 LL_ADC_REG_SetSequencerRanks
     /tmp/ccZ0TYFG.s:660    .text.LL_ADC_INJ_IsTriggerSourceSWStart:0000000000000000 $t
     /tmp/ccZ0TYFG.s:666    .text.LL_ADC_INJ_IsTriggerSourceSWStart:0000000000000000 LL_ADC_INJ_IsTriggerSourceSWStart
     /tmp/ccZ0TYFG.s:716    .text.LL_ADC_SetChannelSamplingTime:0000000000000000 $t
     /tmp/ccZ0TYFG.s:722    .text.LL_ADC_SetChannelSamplingTime:0000000000000000 LL_ADC_SetChannelSamplingTime
     /tmp/ccZ0TYFG.s:789    .text.LL_ADC_SetChannelSingleDiff:0000000000000000 $t
     /tmp/ccZ0TYFG.s:795    .text.LL_ADC_SetChannelSingleDiff:0000000000000000 LL_ADC_SetChannelSingleDiff
     /tmp/ccZ0TYFG.s:849    .text.LL_ADC_SetChannelSingleDiff:0000000000000044 $d
     /tmp/ccZ0TYFG.s:854    .text.LL_ADC_SetAnalogWDMonitChannels:0000000000000000 $t
     /tmp/ccZ0TYFG.s:860    .text.LL_ADC_SetAnalogWDMonitChannels:0000000000000000 LL_ADC_SetAnalogWDMonitChannels
     /tmp/ccZ0TYFG.s:930    .text.LL_ADC_ConfigAnalogWDThresholds:0000000000000000 $t
     /tmp/ccZ0TYFG.s:936    .text.LL_ADC_ConfigAnalogWDThresholds:0000000000000000 LL_ADC_ConfigAnalogWDThresholds
     /tmp/ccZ0TYFG.s:997    .text.LL_ADC_GetMultimode:0000000000000000 $t
     /tmp/ccZ0TYFG.s:1003   .text.LL_ADC_GetMultimode:0000000000000000 LL_ADC_GetMultimode
     /tmp/ccZ0TYFG.s:1044   .text.LL_ADC_GetMultiDMATransfer:0000000000000000 $t
     /tmp/ccZ0TYFG.s:1050   .text.LL_ADC_GetMultiDMATransfer:0000000000000000 LL_ADC_GetMultiDMATransfer
     /tmp/ccZ0TYFG.s:1091   .text.LL_ADC_DisableDeepPowerDown:0000000000000000 $t
     /tmp/ccZ0TYFG.s:1097   .text.LL_ADC_DisableDeepPowerDown:0000000000000000 LL_ADC_DisableDeepPowerDown
     /tmp/ccZ0TYFG.s:1140   .text.LL_ADC_IsDeepPowerDownEnabled:0000000000000000 $t
     /tmp/ccZ0TYFG.s:1146   .text.LL_ADC_IsDeepPowerDownEnabled:0000000000000000 LL_ADC_IsDeepPowerDownEnabled
     /tmp/ccZ0TYFG.s:1196   .text.LL_ADC_EnableInternalRegulator:0000000000000000 $t
     /tmp/ccZ0TYFG.s:1202   .text.LL_ADC_EnableInternalRegulator:0000000000000000 LL_ADC_EnableInternalRegulator
     /tmp/ccZ0TYFG.s:1246   .text.LL_ADC_IsInternalRegulatorEnabled:0000000000000000 $t
     /tmp/ccZ0TYFG.s:1252   .text.LL_ADC_IsInternalRegulatorEnabled:0000000000000000 LL_ADC_IsInternalRegulatorEnabled
     /tmp/ccZ0TYFG.s:1302   .text.LL_ADC_Enable:0000000000000000 $t
     /tmp/ccZ0TYFG.s:1308   .text.LL_ADC_Enable:0000000000000000 LL_ADC_Enable
     /tmp/ccZ0TYFG.s:1352   .text.LL_ADC_Disable:0000000000000000 $t
     /tmp/ccZ0TYFG.s:1358   .text.LL_ADC_Disable:0000000000000000 LL_ADC_Disable
     /tmp/ccZ0TYFG.s:1402   .text.LL_ADC_IsEnabled:0000000000000000 $t
     /tmp/ccZ0TYFG.s:1408   .text.LL_ADC_IsEnabled:0000000000000000 LL_ADC_IsEnabled
     /tmp/ccZ0TYFG.s:1458   .text.LL_ADC_IsDisableOngoing:0000000000000000 $t
     /tmp/ccZ0TYFG.s:1464   .text.LL_ADC_IsDisableOngoing:0000000000000000 LL_ADC_IsDisableOngoing
     /tmp/ccZ0TYFG.s:1514   .text.LL_ADC_REG_StartConversion:0000000000000000 $t
ARM GAS  /tmp/ccZ0TYFG.s 			page 380


     /tmp/ccZ0TYFG.s:1520   .text.LL_ADC_REG_StartConversion:0000000000000000 LL_ADC_REG_StartConversion
     /tmp/ccZ0TYFG.s:1564   .text.LL_ADC_REG_StopConversion:0000000000000000 $t
     /tmp/ccZ0TYFG.s:1570   .text.LL_ADC_REG_StopConversion:0000000000000000 LL_ADC_REG_StopConversion
     /tmp/ccZ0TYFG.s:1614   .text.LL_ADC_REG_IsConversionOngoing:0000000000000000 $t
     /tmp/ccZ0TYFG.s:1620   .text.LL_ADC_REG_IsConversionOngoing:0000000000000000 LL_ADC_REG_IsConversionOngoing
     /tmp/ccZ0TYFG.s:1670   .text.LL_ADC_INJ_StopConversion:0000000000000000 $t
     /tmp/ccZ0TYFG.s:1676   .text.LL_ADC_INJ_StopConversion:0000000000000000 LL_ADC_INJ_StopConversion
     /tmp/ccZ0TYFG.s:1720   .text.LL_ADC_INJ_IsConversionOngoing:0000000000000000 $t
     /tmp/ccZ0TYFG.s:1726   .text.LL_ADC_INJ_IsConversionOngoing:0000000000000000 LL_ADC_INJ_IsConversionOngoing
     /tmp/ccZ0TYFG.s:1776   .text.LL_ADC_ClearFlag_AWD1:0000000000000000 $t
     /tmp/ccZ0TYFG.s:1782   .text.LL_ADC_ClearFlag_AWD1:0000000000000000 LL_ADC_ClearFlag_AWD1
     /tmp/ccZ0TYFG.s:1822   .text.LL_ADC_ClearFlag_AWD2:0000000000000000 $t
     /tmp/ccZ0TYFG.s:1828   .text.LL_ADC_ClearFlag_AWD2:0000000000000000 LL_ADC_ClearFlag_AWD2
     /tmp/ccZ0TYFG.s:1868   .text.LL_ADC_ClearFlag_AWD3:0000000000000000 $t
     /tmp/ccZ0TYFG.s:1874   .text.LL_ADC_ClearFlag_AWD3:0000000000000000 LL_ADC_ClearFlag_AWD3
     /tmp/ccZ0TYFG.s:1914   .text.LL_ADC_EnableIT_AWD1:0000000000000000 $t
     /tmp/ccZ0TYFG.s:1920   .text.LL_ADC_EnableIT_AWD1:0000000000000000 LL_ADC_EnableIT_AWD1
     /tmp/ccZ0TYFG.s:1962   .text.LL_ADC_EnableIT_AWD2:0000000000000000 $t
     /tmp/ccZ0TYFG.s:1968   .text.LL_ADC_EnableIT_AWD2:0000000000000000 LL_ADC_EnableIT_AWD2
     /tmp/ccZ0TYFG.s:2010   .text.LL_ADC_EnableIT_AWD3:0000000000000000 $t
     /tmp/ccZ0TYFG.s:2016   .text.LL_ADC_EnableIT_AWD3:0000000000000000 LL_ADC_EnableIT_AWD3
     /tmp/ccZ0TYFG.s:2058   .text.LL_ADC_DisableIT_AWD1:0000000000000000 $t
     /tmp/ccZ0TYFG.s:2064   .text.LL_ADC_DisableIT_AWD1:0000000000000000 LL_ADC_DisableIT_AWD1
     /tmp/ccZ0TYFG.s:2106   .text.LL_ADC_DisableIT_AWD2:0000000000000000 $t
     /tmp/ccZ0TYFG.s:2112   .text.LL_ADC_DisableIT_AWD2:0000000000000000 LL_ADC_DisableIT_AWD2
     /tmp/ccZ0TYFG.s:2154   .text.LL_ADC_DisableIT_AWD3:0000000000000000 $t
     /tmp/ccZ0TYFG.s:2160   .text.LL_ADC_DisableIT_AWD3:0000000000000000 LL_ADC_DisableIT_AWD3
     /tmp/ccZ0TYFG.s:2202   .text.HAL_ADC_Init:0000000000000000 $t
     /tmp/ccZ0TYFG.s:2209   .text.HAL_ADC_Init:0000000000000000 HAL_ADC_Init
     /tmp/ccZ0TYFG.s:3176   .text.HAL_ADC_MspInit:0000000000000000 HAL_ADC_MspInit
     /tmp/ccZ0TYFG.s:2661   .text.HAL_ADC_Init:00000000000002ec $d
     /tmp/ccZ0TYFG.s:2672   .text.HAL_ADC_Init:0000000000000310 $t
     /tmp/ccZ0TYFG.s:2745   .text.HAL_ADC_DeInit:0000000000000000 $t
     /tmp/ccZ0TYFG.s:2752   .text.HAL_ADC_DeInit:0000000000000000 HAL_ADC_DeInit
     /tmp/ccZ0TYFG.s:8215   .text.ADC_ConversionStop:0000000000000000 ADC_ConversionStop
     /tmp/ccZ0TYFG.s:8623   .text.ADC_Disable:0000000000000000 ADC_Disable
     /tmp/ccZ0TYFG.s:3219   .text.HAL_ADC_MspDeInit:0000000000000000 HAL_ADC_MspDeInit
     /tmp/ccZ0TYFG.s:3154   .text.HAL_ADC_DeInit:00000000000002b8 $d
     /tmp/ccZ0TYFG.s:3169   .text.HAL_ADC_MspInit:0000000000000000 $t
     /tmp/ccZ0TYFG.s:3212   .text.HAL_ADC_MspDeInit:0000000000000000 $t
     /tmp/ccZ0TYFG.s:3255   .text.HAL_ADC_Start:0000000000000000 $t
     /tmp/ccZ0TYFG.s:3262   .text.HAL_ADC_Start:0000000000000000 HAL_ADC_Start
     /tmp/ccZ0TYFG.s:8481   .text.ADC_Enable:0000000000000000 ADC_Enable
     /tmp/ccZ0TYFG.s:3554   .text.HAL_ADC_Start:00000000000001b4 $d
     /tmp/ccZ0TYFG.s:3563   .text.HAL_ADC_Stop:0000000000000000 $t
     /tmp/ccZ0TYFG.s:3570   .text.HAL_ADC_Stop:0000000000000000 HAL_ADC_Stop
     /tmp/ccZ0TYFG.s:3650   .text.HAL_ADC_PollForConversion:0000000000000000 $t
     /tmp/ccZ0TYFG.s:3657   .text.HAL_ADC_PollForConversion:0000000000000000 HAL_ADC_PollForConversion
     /tmp/ccZ0TYFG.s:4010   .text.HAL_ADC_PollForConversion:00000000000001e8 $d
     /tmp/ccZ0TYFG.s:4019   .text.HAL_ADC_PollForEvent:0000000000000000 $t
     /tmp/ccZ0TYFG.s:4026   .text.HAL_ADC_PollForEvent:0000000000000000 HAL_ADC_PollForEvent
     /tmp/ccZ0TYFG.s:4241   .text.HAL_ADC_Start_IT:0000000000000000 $t
     /tmp/ccZ0TYFG.s:4248   .text.HAL_ADC_Start_IT:0000000000000000 HAL_ADC_Start_IT
     /tmp/ccZ0TYFG.s:4637   .text.HAL_ADC_Start_IT:0000000000000264 $d
     /tmp/ccZ0TYFG.s:4644   .text.HAL_ADC_Start_IT:0000000000000278 $t
     /tmp/ccZ0TYFG.s:4694   .text.HAL_ADC_Stop_IT:0000000000000000 $t
     /tmp/ccZ0TYFG.s:4701   .text.HAL_ADC_Stop_IT:0000000000000000 HAL_ADC_Stop_IT
ARM GAS  /tmp/ccZ0TYFG.s 			page 381


     /tmp/ccZ0TYFG.s:4789   .text.HAL_ADC_Start_DMA:0000000000000000 $t
     /tmp/ccZ0TYFG.s:4796   .text.HAL_ADC_Start_DMA:0000000000000000 HAL_ADC_Start_DMA
     /tmp/ccZ0TYFG.s:5057   .text.HAL_ADC_Start_DMA:000000000000017c $d
     /tmp/ccZ0TYFG.s:8762   .text.ADC_DMAConvCplt:0000000000000000 ADC_DMAConvCplt
     /tmp/ccZ0TYFG.s:8927   .text.ADC_DMAHalfConvCplt:0000000000000000 ADC_DMAHalfConvCplt
     /tmp/ccZ0TYFG.s:8973   .text.ADC_DMAError:0000000000000000 ADC_DMAError
     /tmp/ccZ0TYFG.s:5069   .text.HAL_ADC_Stop_DMA:0000000000000000 $t
     /tmp/ccZ0TYFG.s:5076   .text.HAL_ADC_Stop_DMA:0000000000000000 HAL_ADC_Stop_DMA
     /tmp/ccZ0TYFG.s:5209   .text.HAL_ADC_GetValue:0000000000000000 $t
     /tmp/ccZ0TYFG.s:5216   .text.HAL_ADC_GetValue:0000000000000000 HAL_ADC_GetValue
     /tmp/ccZ0TYFG.s:5257   .text.HAL_ADC_StartSampling:0000000000000000 $t
     /tmp/ccZ0TYFG.s:5264   .text.HAL_ADC_StartSampling:0000000000000000 HAL_ADC_StartSampling
     /tmp/ccZ0TYFG.s:5310   .text.HAL_ADC_StopSampling:0000000000000000 $t
     /tmp/ccZ0TYFG.s:5317   .text.HAL_ADC_StopSampling:0000000000000000 HAL_ADC_StopSampling
     /tmp/ccZ0TYFG.s:5363   .text.HAL_ADC_IRQHandler:0000000000000000 $t
     /tmp/ccZ0TYFG.s:5370   .text.HAL_ADC_IRQHandler:0000000000000000 HAL_ADC_IRQHandler
     /tmp/ccZ0TYFG.s:6149   .text.HAL_ADC_ConvCpltCallback:0000000000000000 HAL_ADC_ConvCpltCallback
     /tmp/ccZ0TYFG.s:5797   .text.HAL_ADC_IRQHandler:0000000000000280 $d
     /tmp/ccZ0TYFG.s:5804   .text.HAL_ADC_IRQHandler:0000000000000294 $t
     /tmp/ccZ0TYFG.s:6235   .text.HAL_ADC_LevelOutOfWindowCallback:0000000000000000 HAL_ADC_LevelOutOfWindowCallback
     /tmp/ccZ0TYFG.s:6278   .text.HAL_ADC_ErrorCallback:0000000000000000 HAL_ADC_ErrorCallback
     /tmp/ccZ0TYFG.s:6135   .text.HAL_ADC_IRQHandler:00000000000004a8 $d
     /tmp/ccZ0TYFG.s:6142   .text.HAL_ADC_ConvCpltCallback:0000000000000000 $t
     /tmp/ccZ0TYFG.s:6185   .text.HAL_ADC_ConvHalfCpltCallback:0000000000000000 $t
     /tmp/ccZ0TYFG.s:6192   .text.HAL_ADC_ConvHalfCpltCallback:0000000000000000 HAL_ADC_ConvHalfCpltCallback
     /tmp/ccZ0TYFG.s:6228   .text.HAL_ADC_LevelOutOfWindowCallback:0000000000000000 $t
     /tmp/ccZ0TYFG.s:6271   .text.HAL_ADC_ErrorCallback:0000000000000000 $t
     /tmp/ccZ0TYFG.s:6314   .text.HAL_ADC_ConfigChannel:0000000000000000 $t
     /tmp/ccZ0TYFG.s:6321   .text.HAL_ADC_ConfigChannel:0000000000000000 HAL_ADC_ConfigChannel
     /tmp/ccZ0TYFG.s:7364   .text.HAL_ADC_ConfigChannel:0000000000000650 $d
     /tmp/ccZ0TYFG.s:7376   .text.HAL_ADC_ConfigChannel:0000000000000678 $t
     /tmp/ccZ0TYFG.s:7517   .text.HAL_ADC_ConfigChannel:0000000000000748 $d
     /tmp/ccZ0TYFG.s:7527   .text.HAL_ADC_AnalogWDGConfig:0000000000000000 $t
     /tmp/ccZ0TYFG.s:7534   .text.HAL_ADC_AnalogWDGConfig:0000000000000000 HAL_ADC_AnalogWDGConfig
     /tmp/ccZ0TYFG.s:7975   .text.HAL_ADC_AnalogWDGConfig:00000000000002e4 $d
     /tmp/ccZ0TYFG.s:7982   .text.HAL_ADC_AnalogWDGConfig:00000000000002f8 $t
     /tmp/ccZ0TYFG.s:8111   .text.HAL_ADC_AnalogWDGConfig:00000000000003d8 $d
     /tmp/ccZ0TYFG.s:8116   .text.HAL_ADC_GetState:0000000000000000 $t
     /tmp/ccZ0TYFG.s:8123   .text.HAL_ADC_GetState:0000000000000000 HAL_ADC_GetState
     /tmp/ccZ0TYFG.s:8162   .text.HAL_ADC_GetError:0000000000000000 $t
     /tmp/ccZ0TYFG.s:8169   .text.HAL_ADC_GetError:0000000000000000 HAL_ADC_GetError
     /tmp/ccZ0TYFG.s:8208   .text.ADC_ConversionStop:0000000000000000 $t
     /tmp/ccZ0TYFG.s:8469   .text.ADC_ConversionStop:0000000000000164 $d
     /tmp/ccZ0TYFG.s:8474   .text.ADC_Enable:0000000000000000 $t
     /tmp/ccZ0TYFG.s:8611   .text.ADC_Enable:00000000000000b0 $d
     /tmp/ccZ0TYFG.s:8616   .text.ADC_Disable:0000000000000000 $t
     /tmp/ccZ0TYFG.s:8755   .text.ADC_DMAConvCplt:0000000000000000 $t
     /tmp/ccZ0TYFG.s:8920   .text.ADC_DMAHalfConvCplt:0000000000000000 $t
     /tmp/ccZ0TYFG.s:8966   .text.ADC_DMAError:0000000000000000 $t

UNDEFINED SYMBOLS
SystemCoreClock
HAL_GetTick
HAL_DMA_Start_IT
HAL_DMA_Abort
HAL_ADCEx_EndOfSamplingCallback
HAL_ADCEx_InjectedConvCpltCallback
ARM GAS  /tmp/ccZ0TYFG.s 			page 382


HAL_ADCEx_LevelOutOfWindow2Callback
HAL_ADCEx_LevelOutOfWindow3Callback
HAL_ADCEx_InjectedQueueOverflowCallback
