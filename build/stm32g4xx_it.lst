ARM GAS  /tmp/ccGMeDa2.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"stm32g4xx_it.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.get_clock,"ax",%progbits
  18              		.align	1
  19              		.arch armv7e-m
  20              		.syntax unified
  21              		.thumb
  22              		.thumb_func
  23              		.fpu fpv4-sp-d16
  25              	get_clock:
  26              	.LFB406:
  27              		.file 1 "Src/../motorlib/util.h"
   1:Src/../motorlib/util.h **** #ifndef UTIL_H
   2:Src/../motorlib/util.h **** #define UTIL_H
   3:Src/../motorlib/util.h **** 
   4:Src/../motorlib/util.h **** #include "stdint.h"
   5:Src/../motorlib/util.h **** #include "core_cm4.h"
   6:Src/../motorlib/util.h **** 
   7:Src/../motorlib/util.h **** static inline uint32_t get_clock() { return DWT->CYCCNT; }
  28              		.loc 1 7 36
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 1, uses_anonymous_args = 0
  32              		@ link register save eliminated.
  33 0000 80B4     		push	{r7}
  34              	.LCFI0:
  35              		.cfi_def_cfa_offset 4
  36              		.cfi_offset 7, -4
  37 0002 00AF     		add	r7, sp, #0
  38              	.LCFI1:
  39              		.cfi_def_cfa_register 7
  40              		.loc 1 7 48
  41 0004 034B     		ldr	r3, .L3
  42 0006 5B68     		ldr	r3, [r3, #4]
  43              		.loc 1 7 1
  44 0008 1846     		mov	r0, r3
  45 000a BD46     		mov	sp, r7
  46              	.LCFI2:
  47              		.cfi_def_cfa_register 13
  48              		@ sp needed
  49 000c 5DF8047B 		ldr	r7, [sp], #4
  50              	.LCFI3:
  51              		.cfi_restore 7
ARM GAS  /tmp/ccGMeDa2.s 			page 2


  52              		.cfi_def_cfa_offset 0
  53 0010 7047     		bx	lr
  54              	.L4:
  55 0012 00BF     		.align	2
  56              	.L3:
  57 0014 001000E0 		.word	-536866816
  58              		.cfi_endproc
  59              	.LFE406:
  61              		.section	.text.get_cpi_count,"ax",%progbits
  62              		.align	1
  63              		.syntax unified
  64              		.thumb
  65              		.thumb_func
  66              		.fpu fpv4-sp-d16
  68              	get_cpi_count:
  69              	.LFB407:
   8:Src/../motorlib/util.h **** static inline uint8_t get_cpi_count() { return DWT->CPICNT; }
  70              		.loc 1 8 39
  71              		.cfi_startproc
  72              		@ args = 0, pretend = 0, frame = 0
  73              		@ frame_needed = 1, uses_anonymous_args = 0
  74              		@ link register save eliminated.
  75 0000 80B4     		push	{r7}
  76              	.LCFI4:
  77              		.cfi_def_cfa_offset 4
  78              		.cfi_offset 7, -4
  79 0002 00AF     		add	r7, sp, #0
  80              	.LCFI5:
  81              		.cfi_def_cfa_register 7
  82              		.loc 1 8 51
  83 0004 034B     		ldr	r3, .L7
  84 0006 9B68     		ldr	r3, [r3, #8]
  85 0008 DBB2     		uxtb	r3, r3
  86              		.loc 1 8 1
  87 000a 1846     		mov	r0, r3
  88 000c BD46     		mov	sp, r7
  89              	.LCFI6:
  90              		.cfi_def_cfa_register 13
  91              		@ sp needed
  92 000e 5DF8047B 		ldr	r7, [sp], #4
  93              	.LCFI7:
  94              		.cfi_restore 7
  95              		.cfi_def_cfa_offset 0
  96 0012 7047     		bx	lr
  97              	.L8:
  98              		.align	2
  99              	.L7:
 100 0014 001000E0 		.word	-536866816
 101              		.cfi_endproc
 102              	.LFE407:
 104              		.section	.text.get_lsu_count,"ax",%progbits
 105              		.align	1
 106              		.syntax unified
 107              		.thumb
 108              		.thumb_func
 109              		.fpu fpv4-sp-d16
 111              	get_lsu_count:
ARM GAS  /tmp/ccGMeDa2.s 			page 3


 112              	.LFB408:
   9:Src/../motorlib/util.h **** static inline uint8_t get_lsu_count() { return DWT->LSUCNT; }
 113              		.loc 1 9 39
 114              		.cfi_startproc
 115              		@ args = 0, pretend = 0, frame = 0
 116              		@ frame_needed = 1, uses_anonymous_args = 0
 117              		@ link register save eliminated.
 118 0000 80B4     		push	{r7}
 119              	.LCFI8:
 120              		.cfi_def_cfa_offset 4
 121              		.cfi_offset 7, -4
 122 0002 00AF     		add	r7, sp, #0
 123              	.LCFI9:
 124              		.cfi_def_cfa_register 7
 125              		.loc 1 9 51
 126 0004 034B     		ldr	r3, .L11
 127 0006 5B69     		ldr	r3, [r3, #20]
 128 0008 DBB2     		uxtb	r3, r3
 129              		.loc 1 9 1
 130 000a 1846     		mov	r0, r3
 131 000c BD46     		mov	sp, r7
 132              	.LCFI10:
 133              		.cfi_def_cfa_register 13
 134              		@ sp needed
 135 000e 5DF8047B 		ldr	r7, [sp], #4
 136              	.LCFI11:
 137              		.cfi_restore 7
 138              		.cfi_def_cfa_offset 0
 139 0012 7047     		bx	lr
 140              	.L12:
 141              		.align	2
 142              	.L11:
 143 0014 001000E0 		.word	-536866816
 144              		.cfi_endproc
 145              	.LFE408:
 147              		.comm	t_exec,4,4
 148              		.comm	fold_diff,1,1
 149              		.comm	lsu_diff,1,1
 150              		.comm	cpi_diff,1,1
 151              		.comm	cpi_diff1,1,1
 152              		.comm	inst,2,2
 153              		.section	.text.NMI_Handler,"ax",%progbits
 154              		.align	1
 155              		.global	NMI_Handler
 156              		.syntax unified
 157              		.thumb
 158              		.thumb_func
 159              		.fpu fpv4-sp-d16
 161              	NMI_Handler:
 162              	.LFB409:
 163              		.file 2 "Src/stm32g4xx_it.c"
   1:Src/stm32g4xx_it.c **** /* USER CODE BEGIN Header */
   2:Src/stm32g4xx_it.c **** /**
   3:Src/stm32g4xx_it.c ****   ******************************************************************************
   4:Src/stm32g4xx_it.c ****   * @file    stm32g4xx_it.c
   5:Src/stm32g4xx_it.c ****   * @brief   Interrupt Service Routines.
   6:Src/stm32g4xx_it.c ****   ******************************************************************************
ARM GAS  /tmp/ccGMeDa2.s 			page 4


   7:Src/stm32g4xx_it.c ****   * @attention
   8:Src/stm32g4xx_it.c ****   *
   9:Src/stm32g4xx_it.c ****   * <h2><center>&copy; Copyright (c) 2019 STMicroelectronics.
  10:Src/stm32g4xx_it.c ****   * All rights reserved.</center></h2>
  11:Src/stm32g4xx_it.c ****   *
  12:Src/stm32g4xx_it.c ****   * This software component is licensed by ST under Ultimate Liberty license
  13:Src/stm32g4xx_it.c ****   * SLA0044, the "License"; You may not use this file except in compliance with
  14:Src/stm32g4xx_it.c ****   * the License. You may obtain a copy of the License at:
  15:Src/stm32g4xx_it.c ****   *                             www.st.com/SLA0044
  16:Src/stm32g4xx_it.c ****   *
  17:Src/stm32g4xx_it.c ****   ******************************************************************************
  18:Src/stm32g4xx_it.c ****   */
  19:Src/stm32g4xx_it.c **** /* USER CODE END Header */
  20:Src/stm32g4xx_it.c **** 
  21:Src/stm32g4xx_it.c **** /* Includes ------------------------------------------------------------------*/
  22:Src/stm32g4xx_it.c **** #include "main.h"
  23:Src/stm32g4xx_it.c **** #include "stm32g4xx_it.h"
  24:Src/stm32g4xx_it.c **** /* Private includes ----------------------------------------------------------*/
  25:Src/stm32g4xx_it.c **** /* USER CODE BEGIN Includes */
  26:Src/stm32g4xx_it.c **** #include "../motorlib/foc_i.h"
  27:Src/stm32g4xx_it.c **** /* USER CODE END Includes */
  28:Src/stm32g4xx_it.c **** 
  29:Src/stm32g4xx_it.c **** /* Private typedef -----------------------------------------------------------*/
  30:Src/stm32g4xx_it.c **** /* USER CODE BEGIN TD */
  31:Src/stm32g4xx_it.c **** 
  32:Src/stm32g4xx_it.c **** /* USER CODE END TD */
  33:Src/stm32g4xx_it.c **** 
  34:Src/stm32g4xx_it.c **** /* Private define ------------------------------------------------------------*/
  35:Src/stm32g4xx_it.c **** /* USER CODE BEGIN PD */
  36:Src/stm32g4xx_it.c ****  
  37:Src/stm32g4xx_it.c **** /* USER CODE END PD */
  38:Src/stm32g4xx_it.c **** 
  39:Src/stm32g4xx_it.c **** /* Private macro -------------------------------------------------------------*/
  40:Src/stm32g4xx_it.c **** /* USER CODE BEGIN PM */
  41:Src/stm32g4xx_it.c **** 
  42:Src/stm32g4xx_it.c **** /* USER CODE END PM */
  43:Src/stm32g4xx_it.c **** 
  44:Src/stm32g4xx_it.c **** /* Private variables ---------------------------------------------------------*/
  45:Src/stm32g4xx_it.c **** /* USER CODE BEGIN PV */
  46:Src/stm32g4xx_it.c **** 
  47:Src/stm32g4xx_it.c **** /* USER CODE END PV */
  48:Src/stm32g4xx_it.c **** 
  49:Src/stm32g4xx_it.c **** /* Private function prototypes -----------------------------------------------*/
  50:Src/stm32g4xx_it.c **** /* USER CODE BEGIN PFP */
  51:Src/stm32g4xx_it.c **** 
  52:Src/stm32g4xx_it.c **** /* USER CODE END PFP */
  53:Src/stm32g4xx_it.c **** 
  54:Src/stm32g4xx_it.c **** /* Private user code ---------------------------------------------------------*/
  55:Src/stm32g4xx_it.c **** /* USER CODE BEGIN 0 */
  56:Src/stm32g4xx_it.c **** #include "../motorlib/util.h"
  57:Src/stm32g4xx_it.c **** uint32_t t_exec;
  58:Src/stm32g4xx_it.c **** uint8_t fold_diff, lsu_diff, cpi_diff, cpi_diff1;
  59:Src/stm32g4xx_it.c **** uint16_t inst;
  60:Src/stm32g4xx_it.c **** #include "main2.h"
  61:Src/stm32g4xx_it.c **** /* USER CODE END 0 */
  62:Src/stm32g4xx_it.c **** 
  63:Src/stm32g4xx_it.c **** /* External variables --------------------------------------------------------*/
ARM GAS  /tmp/ccGMeDa2.s 			page 5


  64:Src/stm32g4xx_it.c **** extern PCD_HandleTypeDef hpcd_USB_FS;
  65:Src/stm32g4xx_it.c **** extern ADC_HandleTypeDef hadc1;
  66:Src/stm32g4xx_it.c **** extern ADC_HandleTypeDef hadc2;
  67:Src/stm32g4xx_it.c **** extern HRTIM_HandleTypeDef hhrtim1;
  68:Src/stm32g4xx_it.c **** extern DMA_HandleTypeDef hdma_spi3_rx;
  69:Src/stm32g4xx_it.c **** extern DMA_HandleTypeDef hdma_spi3_tx;
  70:Src/stm32g4xx_it.c **** /* USER CODE BEGIN EV */
  71:Src/stm32g4xx_it.c **** 
  72:Src/stm32g4xx_it.c **** /* USER CODE END EV */
  73:Src/stm32g4xx_it.c **** 
  74:Src/stm32g4xx_it.c **** /******************************************************************************/
  75:Src/stm32g4xx_it.c **** /*           Cortex-M4 Processor Interruption and Exception Handlers          */ 
  76:Src/stm32g4xx_it.c **** /******************************************************************************/
  77:Src/stm32g4xx_it.c **** /**
  78:Src/stm32g4xx_it.c ****   * @brief This function handles Non maskable interrupt.
  79:Src/stm32g4xx_it.c ****   */
  80:Src/stm32g4xx_it.c **** void NMI_Handler(void)
  81:Src/stm32g4xx_it.c **** {
 164              		.loc 2 81 1
 165              		.cfi_startproc
 166              		@ args = 0, pretend = 0, frame = 0
 167              		@ frame_needed = 1, uses_anonymous_args = 0
 168              		@ link register save eliminated.
 169 0000 80B4     		push	{r7}
 170              	.LCFI12:
 171              		.cfi_def_cfa_offset 4
 172              		.cfi_offset 7, -4
 173 0002 00AF     		add	r7, sp, #0
 174              	.LCFI13:
 175              		.cfi_def_cfa_register 7
  82:Src/stm32g4xx_it.c ****   /* USER CODE BEGIN NonMaskableInt_IRQn 0 */
  83:Src/stm32g4xx_it.c **** 
  84:Src/stm32g4xx_it.c ****   /* USER CODE END NonMaskableInt_IRQn 0 */
  85:Src/stm32g4xx_it.c ****   /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  86:Src/stm32g4xx_it.c **** 
  87:Src/stm32g4xx_it.c ****   /* USER CODE END NonMaskableInt_IRQn 1 */
  88:Src/stm32g4xx_it.c **** }
 176              		.loc 2 88 1
 177 0004 00BF     		nop
 178 0006 BD46     		mov	sp, r7
 179              	.LCFI14:
 180              		.cfi_def_cfa_register 13
 181              		@ sp needed
 182 0008 5DF8047B 		ldr	r7, [sp], #4
 183              	.LCFI15:
 184              		.cfi_restore 7
 185              		.cfi_def_cfa_offset 0
 186 000c 7047     		bx	lr
 187              		.cfi_endproc
 188              	.LFE409:
 190              		.section	.text.HardFault_Handler,"ax",%progbits
 191              		.align	1
 192              		.global	HardFault_Handler
 193              		.syntax unified
 194              		.thumb
 195              		.thumb_func
 196              		.fpu fpv4-sp-d16
ARM GAS  /tmp/ccGMeDa2.s 			page 6


 198              	HardFault_Handler:
 199              	.LFB410:
  89:Src/stm32g4xx_it.c **** 
  90:Src/stm32g4xx_it.c **** /**
  91:Src/stm32g4xx_it.c ****   * @brief This function handles Hard fault interrupt.
  92:Src/stm32g4xx_it.c ****   */
  93:Src/stm32g4xx_it.c **** void HardFault_Handler(void)
  94:Src/stm32g4xx_it.c **** {
 200              		.loc 2 94 1
 201              		.cfi_startproc
 202              		@ args = 0, pretend = 0, frame = 0
 203              		@ frame_needed = 1, uses_anonymous_args = 0
 204              		@ link register save eliminated.
 205 0000 80B4     		push	{r7}
 206              	.LCFI16:
 207              		.cfi_def_cfa_offset 4
 208              		.cfi_offset 7, -4
 209 0002 00AF     		add	r7, sp, #0
 210              	.LCFI17:
 211              		.cfi_def_cfa_register 7
 212              	.L15:
  95:Src/stm32g4xx_it.c ****   /* USER CODE BEGIN HardFault_IRQn 0 */
  96:Src/stm32g4xx_it.c **** 
  97:Src/stm32g4xx_it.c ****   /* USER CODE END HardFault_IRQn 0 */
  98:Src/stm32g4xx_it.c ****   while (1)
 213              		.loc 2 98 9 discriminator 1
 214 0004 FEE7     		b	.L15
 215              		.cfi_endproc
 216              	.LFE410:
 218              		.section	.text.MemManage_Handler,"ax",%progbits
 219              		.align	1
 220              		.global	MemManage_Handler
 221              		.syntax unified
 222              		.thumb
 223              		.thumb_func
 224              		.fpu fpv4-sp-d16
 226              	MemManage_Handler:
 227              	.LFB411:
  99:Src/stm32g4xx_it.c ****   {
 100:Src/stm32g4xx_it.c ****     /* USER CODE BEGIN W1_HardFault_IRQn 0 */
 101:Src/stm32g4xx_it.c ****     /* USER CODE END W1_HardFault_IRQn 0 */
 102:Src/stm32g4xx_it.c ****   }
 103:Src/stm32g4xx_it.c **** }
 104:Src/stm32g4xx_it.c **** 
 105:Src/stm32g4xx_it.c **** /**
 106:Src/stm32g4xx_it.c ****   * @brief This function handles Memory management fault.
 107:Src/stm32g4xx_it.c ****   */
 108:Src/stm32g4xx_it.c **** void MemManage_Handler(void)
 109:Src/stm32g4xx_it.c **** {
 228              		.loc 2 109 1
 229              		.cfi_startproc
 230              		@ args = 0, pretend = 0, frame = 0
 231              		@ frame_needed = 1, uses_anonymous_args = 0
 232              		@ link register save eliminated.
 233 0000 80B4     		push	{r7}
 234              	.LCFI18:
 235              		.cfi_def_cfa_offset 4
ARM GAS  /tmp/ccGMeDa2.s 			page 7


 236              		.cfi_offset 7, -4
 237 0002 00AF     		add	r7, sp, #0
 238              	.LCFI19:
 239              		.cfi_def_cfa_register 7
 240              	.L17:
 110:Src/stm32g4xx_it.c ****   /* USER CODE BEGIN MemoryManagement_IRQn 0 */
 111:Src/stm32g4xx_it.c **** 
 112:Src/stm32g4xx_it.c ****   /* USER CODE END MemoryManagement_IRQn 0 */
 113:Src/stm32g4xx_it.c ****   while (1)
 241              		.loc 2 113 9 discriminator 1
 242 0004 FEE7     		b	.L17
 243              		.cfi_endproc
 244              	.LFE411:
 246              		.section	.text.BusFault_Handler,"ax",%progbits
 247              		.align	1
 248              		.global	BusFault_Handler
 249              		.syntax unified
 250              		.thumb
 251              		.thumb_func
 252              		.fpu fpv4-sp-d16
 254              	BusFault_Handler:
 255              	.LFB412:
 114:Src/stm32g4xx_it.c ****   {
 115:Src/stm32g4xx_it.c ****     /* USER CODE BEGIN W1_MemoryManagement_IRQn 0 */
 116:Src/stm32g4xx_it.c ****     /* USER CODE END W1_MemoryManagement_IRQn 0 */
 117:Src/stm32g4xx_it.c ****   }
 118:Src/stm32g4xx_it.c **** }
 119:Src/stm32g4xx_it.c **** 
 120:Src/stm32g4xx_it.c **** /**
 121:Src/stm32g4xx_it.c ****   * @brief This function handles Prefetch fault, memory access fault.
 122:Src/stm32g4xx_it.c ****   */
 123:Src/stm32g4xx_it.c **** void BusFault_Handler(void)
 124:Src/stm32g4xx_it.c **** {
 256              		.loc 2 124 1
 257              		.cfi_startproc
 258              		@ args = 0, pretend = 0, frame = 0
 259              		@ frame_needed = 1, uses_anonymous_args = 0
 260              		@ link register save eliminated.
 261 0000 80B4     		push	{r7}
 262              	.LCFI20:
 263              		.cfi_def_cfa_offset 4
 264              		.cfi_offset 7, -4
 265 0002 00AF     		add	r7, sp, #0
 266              	.LCFI21:
 267              		.cfi_def_cfa_register 7
 268              	.L19:
 125:Src/stm32g4xx_it.c ****   /* USER CODE BEGIN BusFault_IRQn 0 */
 126:Src/stm32g4xx_it.c **** 
 127:Src/stm32g4xx_it.c ****   /* USER CODE END BusFault_IRQn 0 */
 128:Src/stm32g4xx_it.c ****   while (1)
 269              		.loc 2 128 9 discriminator 1
 270 0004 FEE7     		b	.L19
 271              		.cfi_endproc
 272              	.LFE412:
 274              		.section	.text.UsageFault_Handler,"ax",%progbits
 275              		.align	1
 276              		.global	UsageFault_Handler
ARM GAS  /tmp/ccGMeDa2.s 			page 8


 277              		.syntax unified
 278              		.thumb
 279              		.thumb_func
 280              		.fpu fpv4-sp-d16
 282              	UsageFault_Handler:
 283              	.LFB413:
 129:Src/stm32g4xx_it.c ****   {
 130:Src/stm32g4xx_it.c ****     /* USER CODE BEGIN W1_BusFault_IRQn 0 */
 131:Src/stm32g4xx_it.c ****     /* USER CODE END W1_BusFault_IRQn 0 */
 132:Src/stm32g4xx_it.c ****   }
 133:Src/stm32g4xx_it.c **** }
 134:Src/stm32g4xx_it.c **** 
 135:Src/stm32g4xx_it.c **** /**
 136:Src/stm32g4xx_it.c ****   * @brief This function handles Undefined instruction or illegal state.
 137:Src/stm32g4xx_it.c ****   */
 138:Src/stm32g4xx_it.c **** void UsageFault_Handler(void)
 139:Src/stm32g4xx_it.c **** {
 284              		.loc 2 139 1
 285              		.cfi_startproc
 286              		@ args = 0, pretend = 0, frame = 0
 287              		@ frame_needed = 1, uses_anonymous_args = 0
 288              		@ link register save eliminated.
 289 0000 80B4     		push	{r7}
 290              	.LCFI22:
 291              		.cfi_def_cfa_offset 4
 292              		.cfi_offset 7, -4
 293 0002 00AF     		add	r7, sp, #0
 294              	.LCFI23:
 295              		.cfi_def_cfa_register 7
 296              	.L21:
 140:Src/stm32g4xx_it.c ****   /* USER CODE BEGIN UsageFault_IRQn 0 */
 141:Src/stm32g4xx_it.c **** 
 142:Src/stm32g4xx_it.c ****   /* USER CODE END UsageFault_IRQn 0 */
 143:Src/stm32g4xx_it.c ****   while (1)
 297              		.loc 2 143 9 discriminator 1
 298 0004 FEE7     		b	.L21
 299              		.cfi_endproc
 300              	.LFE413:
 302              		.section	.text.SVC_Handler,"ax",%progbits
 303              		.align	1
 304              		.global	SVC_Handler
 305              		.syntax unified
 306              		.thumb
 307              		.thumb_func
 308              		.fpu fpv4-sp-d16
 310              	SVC_Handler:
 311              	.LFB414:
 144:Src/stm32g4xx_it.c ****   {
 145:Src/stm32g4xx_it.c ****     /* USER CODE BEGIN W1_UsageFault_IRQn 0 */
 146:Src/stm32g4xx_it.c ****     /* USER CODE END W1_UsageFault_IRQn 0 */
 147:Src/stm32g4xx_it.c ****   }
 148:Src/stm32g4xx_it.c **** }
 149:Src/stm32g4xx_it.c **** 
 150:Src/stm32g4xx_it.c **** /**
 151:Src/stm32g4xx_it.c ****   * @brief This function handles System service call via SWI instruction.
 152:Src/stm32g4xx_it.c ****   */
 153:Src/stm32g4xx_it.c **** void SVC_Handler(void)
ARM GAS  /tmp/ccGMeDa2.s 			page 9


 154:Src/stm32g4xx_it.c **** {
 312              		.loc 2 154 1
 313              		.cfi_startproc
 314              		@ args = 0, pretend = 0, frame = 0
 315              		@ frame_needed = 1, uses_anonymous_args = 0
 316              		@ link register save eliminated.
 317 0000 80B4     		push	{r7}
 318              	.LCFI24:
 319              		.cfi_def_cfa_offset 4
 320              		.cfi_offset 7, -4
 321 0002 00AF     		add	r7, sp, #0
 322              	.LCFI25:
 323              		.cfi_def_cfa_register 7
 155:Src/stm32g4xx_it.c ****   /* USER CODE BEGIN SVCall_IRQn 0 */
 156:Src/stm32g4xx_it.c **** 
 157:Src/stm32g4xx_it.c ****   /* USER CODE END SVCall_IRQn 0 */
 158:Src/stm32g4xx_it.c ****   /* USER CODE BEGIN SVCall_IRQn 1 */
 159:Src/stm32g4xx_it.c **** 
 160:Src/stm32g4xx_it.c ****   /* USER CODE END SVCall_IRQn 1 */
 161:Src/stm32g4xx_it.c **** }
 324              		.loc 2 161 1
 325 0004 00BF     		nop
 326 0006 BD46     		mov	sp, r7
 327              	.LCFI26:
 328              		.cfi_def_cfa_register 13
 329              		@ sp needed
 330 0008 5DF8047B 		ldr	r7, [sp], #4
 331              	.LCFI27:
 332              		.cfi_restore 7
 333              		.cfi_def_cfa_offset 0
 334 000c 7047     		bx	lr
 335              		.cfi_endproc
 336              	.LFE414:
 338              		.section	.text.DebugMon_Handler,"ax",%progbits
 339              		.align	1
 340              		.global	DebugMon_Handler
 341              		.syntax unified
 342              		.thumb
 343              		.thumb_func
 344              		.fpu fpv4-sp-d16
 346              	DebugMon_Handler:
 347              	.LFB415:
 162:Src/stm32g4xx_it.c **** 
 163:Src/stm32g4xx_it.c **** /**
 164:Src/stm32g4xx_it.c ****   * @brief This function handles Debug monitor.
 165:Src/stm32g4xx_it.c ****   */
 166:Src/stm32g4xx_it.c **** void DebugMon_Handler(void)
 167:Src/stm32g4xx_it.c **** {
 348              		.loc 2 167 1
 349              		.cfi_startproc
 350              		@ args = 0, pretend = 0, frame = 0
 351              		@ frame_needed = 1, uses_anonymous_args = 0
 352              		@ link register save eliminated.
 353 0000 80B4     		push	{r7}
 354              	.LCFI28:
 355              		.cfi_def_cfa_offset 4
 356              		.cfi_offset 7, -4
ARM GAS  /tmp/ccGMeDa2.s 			page 10


 357 0002 00AF     		add	r7, sp, #0
 358              	.LCFI29:
 359              		.cfi_def_cfa_register 7
 168:Src/stm32g4xx_it.c ****   /* USER CODE BEGIN DebugMonitor_IRQn 0 */
 169:Src/stm32g4xx_it.c **** 
 170:Src/stm32g4xx_it.c ****   /* USER CODE END DebugMonitor_IRQn 0 */
 171:Src/stm32g4xx_it.c ****   /* USER CODE BEGIN DebugMonitor_IRQn 1 */
 172:Src/stm32g4xx_it.c **** 
 173:Src/stm32g4xx_it.c ****   /* USER CODE END DebugMonitor_IRQn 1 */
 174:Src/stm32g4xx_it.c **** }
 360              		.loc 2 174 1
 361 0004 00BF     		nop
 362 0006 BD46     		mov	sp, r7
 363              	.LCFI30:
 364              		.cfi_def_cfa_register 13
 365              		@ sp needed
 366 0008 5DF8047B 		ldr	r7, [sp], #4
 367              	.LCFI31:
 368              		.cfi_restore 7
 369              		.cfi_def_cfa_offset 0
 370 000c 7047     		bx	lr
 371              		.cfi_endproc
 372              	.LFE415:
 374              		.section	.text.PendSV_Handler,"ax",%progbits
 375              		.align	1
 376              		.global	PendSV_Handler
 377              		.syntax unified
 378              		.thumb
 379              		.thumb_func
 380              		.fpu fpv4-sp-d16
 382              	PendSV_Handler:
 383              	.LFB416:
 175:Src/stm32g4xx_it.c **** 
 176:Src/stm32g4xx_it.c **** /**
 177:Src/stm32g4xx_it.c ****   * @brief This function handles Pendable request for system service.
 178:Src/stm32g4xx_it.c ****   */
 179:Src/stm32g4xx_it.c **** void PendSV_Handler(void)
 180:Src/stm32g4xx_it.c **** {
 384              		.loc 2 180 1
 385              		.cfi_startproc
 386              		@ args = 0, pretend = 0, frame = 0
 387              		@ frame_needed = 1, uses_anonymous_args = 0
 388              		@ link register save eliminated.
 389 0000 80B4     		push	{r7}
 390              	.LCFI32:
 391              		.cfi_def_cfa_offset 4
 392              		.cfi_offset 7, -4
 393 0002 00AF     		add	r7, sp, #0
 394              	.LCFI33:
 395              		.cfi_def_cfa_register 7
 181:Src/stm32g4xx_it.c ****   /* USER CODE BEGIN PendSV_IRQn 0 */
 182:Src/stm32g4xx_it.c **** 
 183:Src/stm32g4xx_it.c ****   /* USER CODE END PendSV_IRQn 0 */
 184:Src/stm32g4xx_it.c ****   /* USER CODE BEGIN PendSV_IRQn 1 */
 185:Src/stm32g4xx_it.c **** 
 186:Src/stm32g4xx_it.c ****   /* USER CODE END PendSV_IRQn 1 */
 187:Src/stm32g4xx_it.c **** }
ARM GAS  /tmp/ccGMeDa2.s 			page 11


 396              		.loc 2 187 1
 397 0004 00BF     		nop
 398 0006 BD46     		mov	sp, r7
 399              	.LCFI34:
 400              		.cfi_def_cfa_register 13
 401              		@ sp needed
 402 0008 5DF8047B 		ldr	r7, [sp], #4
 403              	.LCFI35:
 404              		.cfi_restore 7
 405              		.cfi_def_cfa_offset 0
 406 000c 7047     		bx	lr
 407              		.cfi_endproc
 408              	.LFE416:
 410              		.section	.text.SysTick_Handler,"ax",%progbits
 411              		.align	1
 412              		.global	SysTick_Handler
 413              		.syntax unified
 414              		.thumb
 415              		.thumb_func
 416              		.fpu fpv4-sp-d16
 418              	SysTick_Handler:
 419              	.LFB417:
 188:Src/stm32g4xx_it.c **** 
 189:Src/stm32g4xx_it.c **** /**
 190:Src/stm32g4xx_it.c ****   * @brief This function handles System tick timer.
 191:Src/stm32g4xx_it.c ****   */
 192:Src/stm32g4xx_it.c **** void SysTick_Handler(void)
 193:Src/stm32g4xx_it.c **** {
 420              		.loc 2 193 1
 421              		.cfi_startproc
 422              		@ args = 0, pretend = 0, frame = 0
 423              		@ frame_needed = 1, uses_anonymous_args = 0
 424 0000 80B5     		push	{r7, lr}
 425              	.LCFI36:
 426              		.cfi_def_cfa_offset 8
 427              		.cfi_offset 7, -8
 428              		.cfi_offset 14, -4
 429 0002 00AF     		add	r7, sp, #0
 430              	.LCFI37:
 431              		.cfi_def_cfa_register 7
 194:Src/stm32g4xx_it.c ****   /* USER CODE BEGIN SysTick_IRQn 0 */
 195:Src/stm32g4xx_it.c **** 
 196:Src/stm32g4xx_it.c ****   /* USER CODE END SysTick_IRQn 0 */
 197:Src/stm32g4xx_it.c ****   HAL_IncTick();
 432              		.loc 2 197 3
 433 0004 FFF7FEFF 		bl	HAL_IncTick
 198:Src/stm32g4xx_it.c ****   /* USER CODE BEGIN SysTick_IRQn 1 */
 199:Src/stm32g4xx_it.c **** 
 200:Src/stm32g4xx_it.c ****   /* USER CODE END SysTick_IRQn 1 */
 201:Src/stm32g4xx_it.c **** }
 434              		.loc 2 201 1
 435 0008 00BF     		nop
 436 000a 80BD     		pop	{r7, pc}
 437              		.cfi_endproc
 438              	.LFE417:
 440              		.section	.text.DMA1_Channel1_IRQHandler,"ax",%progbits
 441              		.align	1
ARM GAS  /tmp/ccGMeDa2.s 			page 12


 442              		.global	DMA1_Channel1_IRQHandler
 443              		.syntax unified
 444              		.thumb
 445              		.thumb_func
 446              		.fpu fpv4-sp-d16
 448              	DMA1_Channel1_IRQHandler:
 449              	.LFB418:
 202:Src/stm32g4xx_it.c **** 
 203:Src/stm32g4xx_it.c **** /******************************************************************************/
 204:Src/stm32g4xx_it.c **** /* STM32G4xx Peripheral Interrupt Handlers                                    */
 205:Src/stm32g4xx_it.c **** /* Add here the Interrupt Handlers for the used peripherals.                  */
 206:Src/stm32g4xx_it.c **** /* For the available peripheral interrupt handler names,                      */
 207:Src/stm32g4xx_it.c **** /* please refer to the startup file (startup_stm32g4xx.s).                    */
 208:Src/stm32g4xx_it.c **** /******************************************************************************/
 209:Src/stm32g4xx_it.c **** 
 210:Src/stm32g4xx_it.c **** /**
 211:Src/stm32g4xx_it.c ****   * @brief This function handles DMA1 channel1 global interrupt.
 212:Src/stm32g4xx_it.c ****   */
 213:Src/stm32g4xx_it.c **** void DMA1_Channel1_IRQHandler(void)
 214:Src/stm32g4xx_it.c **** {
 450              		.loc 2 214 1
 451              		.cfi_startproc
 452              		@ args = 0, pretend = 0, frame = 0
 453              		@ frame_needed = 1, uses_anonymous_args = 0
 454              		@ link register save eliminated.
 455 0000 80B4     		push	{r7}
 456              	.LCFI38:
 457              		.cfi_def_cfa_offset 4
 458              		.cfi_offset 7, -4
 459 0002 00AF     		add	r7, sp, #0
 460              	.LCFI39:
 461              		.cfi_def_cfa_register 7
 215:Src/stm32g4xx_it.c ****   /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */
 216:Src/stm32g4xx_it.c **** 
 217:Src/stm32g4xx_it.c **** #if 0
 218:Src/stm32g4xx_it.c ****   /* USER CODE END DMA1_Channel1_IRQn 0 */
 219:Src/stm32g4xx_it.c ****   HAL_DMA_IRQHandler(&hdma_spi3_rx);
 220:Src/stm32g4xx_it.c ****   /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */
 221:Src/stm32g4xx_it.c **** #endif
 222:Src/stm32g4xx_it.c ****   /* USER CODE END DMA1_Channel1_IRQn 1 */
 223:Src/stm32g4xx_it.c **** }
 462              		.loc 2 223 1
 463 0004 00BF     		nop
 464 0006 BD46     		mov	sp, r7
 465              	.LCFI40:
 466              		.cfi_def_cfa_register 13
 467              		@ sp needed
 468 0008 5DF8047B 		ldr	r7, [sp], #4
 469              	.LCFI41:
 470              		.cfi_restore 7
 471              		.cfi_def_cfa_offset 0
 472 000c 7047     		bx	lr
 473              		.cfi_endproc
 474              	.LFE418:
 476              		.section	.text.DMA1_Channel2_IRQHandler,"ax",%progbits
 477              		.align	1
 478              		.global	DMA1_Channel2_IRQHandler
ARM GAS  /tmp/ccGMeDa2.s 			page 13


 479              		.syntax unified
 480              		.thumb
 481              		.thumb_func
 482              		.fpu fpv4-sp-d16
 484              	DMA1_Channel2_IRQHandler:
 485              	.LFB419:
 224:Src/stm32g4xx_it.c **** 
 225:Src/stm32g4xx_it.c **** /**
 226:Src/stm32g4xx_it.c ****   * @brief This function handles DMA1 channel2 global interrupt.
 227:Src/stm32g4xx_it.c ****   */
 228:Src/stm32g4xx_it.c **** void DMA1_Channel2_IRQHandler(void)
 229:Src/stm32g4xx_it.c **** {
 486              		.loc 2 229 1
 487              		.cfi_startproc
 488              		@ args = 0, pretend = 0, frame = 0
 489              		@ frame_needed = 1, uses_anonymous_args = 0
 490 0000 80B5     		push	{r7, lr}
 491              	.LCFI42:
 492              		.cfi_def_cfa_offset 8
 493              		.cfi_offset 7, -8
 494              		.cfi_offset 14, -4
 495 0002 00AF     		add	r7, sp, #0
 496              	.LCFI43:
 497              		.cfi_def_cfa_register 7
 230:Src/stm32g4xx_it.c ****   /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */
 231:Src/stm32g4xx_it.c **** 
 232:Src/stm32g4xx_it.c ****   /* USER CODE END DMA1_Channel2_IRQn 0 */
 233:Src/stm32g4xx_it.c ****   HAL_DMA_IRQHandler(&hdma_spi3_tx);
 498              		.loc 2 233 3
 499 0004 0248     		ldr	r0, .L28
 500 0006 FFF7FEFF 		bl	HAL_DMA_IRQHandler
 234:Src/stm32g4xx_it.c ****   /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */
 235:Src/stm32g4xx_it.c **** 
 236:Src/stm32g4xx_it.c ****   /* USER CODE END DMA1_Channel2_IRQn 1 */
 237:Src/stm32g4xx_it.c **** }
 501              		.loc 2 237 1
 502 000a 00BF     		nop
 503 000c 80BD     		pop	{r7, pc}
 504              	.L29:
 505 000e 00BF     		.align	2
 506              	.L28:
 507 0010 00000000 		.word	hdma_spi3_tx
 508              		.cfi_endproc
 509              	.LFE419:
 511              		.global	i
 512              		.section	.bss.i,"aw",%nobits
 513              		.align	2
 516              	i:
 517 0000 00000000 		.space	4
 518              		.section	.text.ADC1_2_IRQHandler,"ax",%progbits
 519              		.align	1
 520              		.global	ADC1_2_IRQHandler
 521              		.syntax unified
 522              		.thumb
 523              		.thumb_func
 524              		.fpu fpv4-sp-d16
 526              	ADC1_2_IRQHandler:
ARM GAS  /tmp/ccGMeDa2.s 			page 14


 527              	.LFB420:
 238:Src/stm32g4xx_it.c **** 
 239:Src/stm32g4xx_it.c **** /**
 240:Src/stm32g4xx_it.c ****   * @brief This function handles ADC1 and ADC2 global interrupt.
 241:Src/stm32g4xx_it.c ****   */
 242:Src/stm32g4xx_it.c ****  int i = 0;
 243:Src/stm32g4xx_it.c **** void ADC1_2_IRQHandler(void)
 244:Src/stm32g4xx_it.c **** {
 528              		.loc 2 244 1
 529              		.cfi_startproc
 530              		@ args = 0, pretend = 0, frame = 8
 531              		@ frame_needed = 1, uses_anonymous_args = 0
 532 0000 80B5     		push	{r7, lr}
 533              	.LCFI44:
 534              		.cfi_def_cfa_offset 8
 535              		.cfi_offset 7, -8
 536              		.cfi_offset 14, -4
 537 0002 82B0     		sub	sp, sp, #8
 538              	.LCFI45:
 539              		.cfi_def_cfa_offset 16
 540 0004 00AF     		add	r7, sp, #0
 541              	.LCFI46:
 542              		.cfi_def_cfa_register 7
 245:Src/stm32g4xx_it.c ****   /* USER CODE BEGIN ADC1_2_IRQn 0 */
 246:Src/stm32g4xx_it.c ****   GPIOC->BSRR |= GPIO_BSRR_BS3;
 543              		.loc 2 246 15
 544 0006 374B     		ldr	r3, .L32
 545 0008 9B69     		ldr	r3, [r3, #24]
 546 000a 364A     		ldr	r2, .L32
 547 000c 43F00803 		orr	r3, r3, #8
 548 0010 9361     		str	r3, [r2, #24]
 247:Src/stm32g4xx_it.c ****   uint32_t t_start = get_clock();
 549              		.loc 2 247 22
 550 0012 FFF7FEFF 		bl	get_clock
 551 0016 7860     		str	r0, [r7, #4]
 248:Src/stm32g4xx_it.c ****   uint8_t cpi_start = get_cpi_count();
 552              		.loc 2 248 23
 553 0018 FFF7FEFF 		bl	get_cpi_count
 554 001c 0346     		mov	r3, r0
 555 001e FB70     		strb	r3, [r7, #3]
 249:Src/stm32g4xx_it.c ****   uint8_t lsu_start = get_lsu_count();
 556              		.loc 2 249 23
 557 0020 FFF7FEFF 		bl	get_lsu_count
 558 0024 0346     		mov	r3, r0
 559 0026 BB70     		strb	r3, [r7, #2]
 250:Src/stm32g4xx_it.c ****   uint8_t fold_start = DWT->FOLDCNT;
 560              		.loc 2 250 27
 561 0028 2F4B     		ldr	r3, .L32+4
 562 002a 9B69     		ldr	r3, [r3, #24]
 563              		.loc 2 250 11
 564 002c 7B70     		strb	r3, [r7, #1]
 251:Src/stm32g4xx_it.c ****   fast_loop_update();
 565              		.loc 2 251 3
 566 002e FFF7FEFF 		bl	fast_loop_update
 252:Src/stm32g4xx_it.c ****   if (i++ > 10000){
 567              		.loc 2 252 8
 568 0032 2E4B     		ldr	r3, .L32+8
ARM GAS  /tmp/ccGMeDa2.s 			page 15


 569 0034 1B68     		ldr	r3, [r3]
 570 0036 5A1C     		adds	r2, r3, #1
 571 0038 2C49     		ldr	r1, .L32+8
 572 003a 0A60     		str	r2, [r1]
 573              		.loc 2 252 6
 574 003c 42F21072 		movw	r2, #10000
 575 0040 9342     		cmp	r3, r2
 576 0042 04DD     		ble	.L31
 253:Src/stm32g4xx_it.c ****     i=0;
 577              		.loc 2 253 6
 578 0044 294B     		ldr	r3, .L32+8
 579 0046 0022     		movs	r2, #0
 580 0048 1A60     		str	r2, [r3]
 254:Src/stm32g4xx_it.c ****   main_loop_update();
 581              		.loc 2 254 3
 582 004a FFF7FEFF 		bl	main_loop_update
 583              	.L31:
 255:Src/stm32g4xx_it.c ****   }
 256:Src/stm32g4xx_it.c ****   cpi_diff1 = get_cpi_count() - cpi_start;
 584              		.loc 2 256 15
 585 004e FFF7FEFF 		bl	get_cpi_count
 586 0052 0346     		mov	r3, r0
 587 0054 1A46     		mov	r2, r3
 588              		.loc 2 256 31
 589 0056 FB78     		ldrb	r3, [r7, #3]
 590 0058 D31A     		subs	r3, r2, r3
 591 005a DAB2     		uxtb	r2, r3
 592              		.loc 2 256 13
 593 005c 244B     		ldr	r3, .L32+12
 594 005e 1A70     		strb	r2, [r3]
 257:Src/stm32g4xx_it.c **** #if 0
 258:Src/stm32g4xx_it.c ****   /* USER CODE END ADC1_2_IRQn 0 */
 259:Src/stm32g4xx_it.c ****   HAL_ADC_IRQHandler(&hadc1);
 260:Src/stm32g4xx_it.c ****   HAL_ADC_IRQHandler(&hadc2);
 261:Src/stm32g4xx_it.c ****   /* USER CODE BEGIN ADC1_2_IRQn 1 */
 262:Src/stm32g4xx_it.c **** #endif
 263:Src/stm32g4xx_it.c **** hadc1.Instance->ISR &= ~ADC_ISR_JEOC;
 595              		.loc 2 263 6
 596 0060 244B     		ldr	r3, .L32+16
 597 0062 1B68     		ldr	r3, [r3]
 598              		.loc 2 263 21
 599 0064 1A68     		ldr	r2, [r3]
 600              		.loc 2 263 6
 601 0066 234B     		ldr	r3, .L32+16
 602 0068 1B68     		ldr	r3, [r3]
 603              		.loc 2 263 21
 604 006a 22F02002 		bic	r2, r2, #32
 605 006e 1A60     		str	r2, [r3]
 264:Src/stm32g4xx_it.c ****   t_exec = get_clock()-t_start;
 606              		.loc 2 264 12
 607 0070 FFF7FEFF 		bl	get_clock
 608 0074 0246     		mov	r2, r0
 609              		.loc 2 264 23
 610 0076 7B68     		ldr	r3, [r7, #4]
 611 0078 D31A     		subs	r3, r2, r3
 612              		.loc 2 264 10
 613 007a 1F4A     		ldr	r2, .L32+20
ARM GAS  /tmp/ccGMeDa2.s 			page 16


 614 007c 1360     		str	r3, [r2]
 265:Src/stm32g4xx_it.c ****   cpi_diff = get_cpi_count() - cpi_start;
 615              		.loc 2 265 14
 616 007e FFF7FEFF 		bl	get_cpi_count
 617 0082 0346     		mov	r3, r0
 618 0084 1A46     		mov	r2, r3
 619              		.loc 2 265 30
 620 0086 FB78     		ldrb	r3, [r7, #3]
 621 0088 D31A     		subs	r3, r2, r3
 622 008a DAB2     		uxtb	r2, r3
 623              		.loc 2 265 12
 624 008c 1B4B     		ldr	r3, .L32+24
 625 008e 1A70     		strb	r2, [r3]
 266:Src/stm32g4xx_it.c ****   lsu_diff = get_lsu_count() - lsu_start;
 626              		.loc 2 266 14
 627 0090 FFF7FEFF 		bl	get_lsu_count
 628 0094 0346     		mov	r3, r0
 629 0096 1A46     		mov	r2, r3
 630              		.loc 2 266 30
 631 0098 BB78     		ldrb	r3, [r7, #2]
 632 009a D31A     		subs	r3, r2, r3
 633 009c DAB2     		uxtb	r2, r3
 634              		.loc 2 266 12
 635 009e 184B     		ldr	r3, .L32+28
 636 00a0 1A70     		strb	r2, [r3]
 267:Src/stm32g4xx_it.c ****   fold_diff = DWT->FOLDCNT - fold_start;
 637              		.loc 2 267 18
 638 00a2 114B     		ldr	r3, .L32+4
 639 00a4 9B69     		ldr	r3, [r3, #24]
 640              		.loc 2 267 28
 641 00a6 DAB2     		uxtb	r2, r3
 642 00a8 7B78     		ldrb	r3, [r7, #1]
 643 00aa D31A     		subs	r3, r2, r3
 644 00ac DAB2     		uxtb	r2, r3
 645              		.loc 2 267 13
 646 00ae 154B     		ldr	r3, .L32+32
 647 00b0 1A70     		strb	r2, [r3]
 268:Src/stm32g4xx_it.c ****   inst = t_exec - cpi_diff - lsu_diff;
 648              		.loc 2 268 17
 649 00b2 114B     		ldr	r3, .L32+20
 650 00b4 1B68     		ldr	r3, [r3]
 651 00b6 9AB2     		uxth	r2, r3
 652 00b8 104B     		ldr	r3, .L32+24
 653 00ba 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 654 00bc 9BB2     		uxth	r3, r3
 655 00be D31A     		subs	r3, r2, r3
 656 00c0 9AB2     		uxth	r2, r3
 657              		.loc 2 268 28
 658 00c2 0F4B     		ldr	r3, .L32+28
 659 00c4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 660 00c6 9BB2     		uxth	r3, r3
 661 00c8 D31A     		subs	r3, r2, r3
 662 00ca 9AB2     		uxth	r2, r3
 663              		.loc 2 268 8
 664 00cc 0E4B     		ldr	r3, .L32+36
 665 00ce 1A80     		strh	r2, [r3]	@ movhi
 269:Src/stm32g4xx_it.c ****   GPIOC->BSRR |= GPIO_BSRR_BR3;
ARM GAS  /tmp/ccGMeDa2.s 			page 17


 666              		.loc 2 269 15
 667 00d0 044B     		ldr	r3, .L32
 668 00d2 9B69     		ldr	r3, [r3, #24]
 669 00d4 034A     		ldr	r2, .L32
 670 00d6 43F40023 		orr	r3, r3, #524288
 671 00da 9361     		str	r3, [r2, #24]
 270:Src/stm32g4xx_it.c ****   /* USER CODE END ADC1_2_IRQn 1 */
 271:Src/stm32g4xx_it.c **** }
 672              		.loc 2 271 1
 673 00dc 00BF     		nop
 674 00de 0837     		adds	r7, r7, #8
 675              	.LCFI47:
 676              		.cfi_def_cfa_offset 8
 677 00e0 BD46     		mov	sp, r7
 678              	.LCFI48:
 679              		.cfi_def_cfa_register 13
 680              		@ sp needed
 681 00e2 80BD     		pop	{r7, pc}
 682              	.L33:
 683              		.align	2
 684              	.L32:
 685 00e4 00080048 		.word	1207961600
 686 00e8 001000E0 		.word	-536866816
 687 00ec 00000000 		.word	i
 688 00f0 00000000 		.word	cpi_diff1
 689 00f4 00000000 		.word	hadc1
 690 00f8 00000000 		.word	t_exec
 691 00fc 00000000 		.word	cpi_diff
 692 0100 00000000 		.word	lsu_diff
 693 0104 00000000 		.word	fold_diff
 694 0108 00000000 		.word	inst
 695              		.cfi_endproc
 696              	.LFE420:
 698              		.section	.text.USB_LP_IRQHandler,"ax",%progbits
 699              		.align	1
 700              		.global	USB_LP_IRQHandler
 701              		.syntax unified
 702              		.thumb
 703              		.thumb_func
 704              		.fpu fpv4-sp-d16
 706              	USB_LP_IRQHandler:
 707              	.LFB421:
 272:Src/stm32g4xx_it.c **** 
 273:Src/stm32g4xx_it.c **** /**
 274:Src/stm32g4xx_it.c ****   * @brief This function handles USB low priority interrupt remap.
 275:Src/stm32g4xx_it.c ****   */
 276:Src/stm32g4xx_it.c **** void USB_LP_IRQHandler(void)
 277:Src/stm32g4xx_it.c **** {
 708              		.loc 2 277 1
 709              		.cfi_startproc
 710              		@ args = 0, pretend = 0, frame = 0
 711              		@ frame_needed = 1, uses_anonymous_args = 0
 712 0000 80B5     		push	{r7, lr}
 713              	.LCFI49:
 714              		.cfi_def_cfa_offset 8
 715              		.cfi_offset 7, -8
 716              		.cfi_offset 14, -4
ARM GAS  /tmp/ccGMeDa2.s 			page 18


 717 0002 00AF     		add	r7, sp, #0
 718              	.LCFI50:
 719              		.cfi_def_cfa_register 7
 278:Src/stm32g4xx_it.c ****   /* USER CODE BEGIN USB_LP_IRQn 0 */
 279:Src/stm32g4xx_it.c ****   GPIOC->BSRR |= GPIO_BSRR_BS2;
 720              		.loc 2 279 15
 721 0004 094B     		ldr	r3, .L35
 722 0006 9B69     		ldr	r3, [r3, #24]
 723 0008 084A     		ldr	r2, .L35
 724 000a 43F00403 		orr	r3, r3, #4
 725 000e 9361     		str	r3, [r2, #24]
 280:Src/stm32g4xx_it.c ****   usb_interrupt();
 726              		.loc 2 280 3
 727 0010 FFF7FEFF 		bl	usb_interrupt
 281:Src/stm32g4xx_it.c ****   /* USER CODE END USB_LP_IRQn 0 */
 282:Src/stm32g4xx_it.c ****   HAL_PCD_IRQHandler(&hpcd_USB_FS);
 728              		.loc 2 282 3
 729 0014 0648     		ldr	r0, .L35+4
 730 0016 FFF7FEFF 		bl	HAL_PCD_IRQHandler
 283:Src/stm32g4xx_it.c ****   /* USER CODE BEGIN USB_LP_IRQn 1 */
 284:Src/stm32g4xx_it.c ****   GPIOC->BSRR |= GPIO_BSRR_BR2;
 731              		.loc 2 284 15
 732 001a 044B     		ldr	r3, .L35
 733 001c 9B69     		ldr	r3, [r3, #24]
 734 001e 034A     		ldr	r2, .L35
 735 0020 43F48023 		orr	r3, r3, #262144
 736 0024 9361     		str	r3, [r2, #24]
 285:Src/stm32g4xx_it.c ****   /* USER CODE END USB_LP_IRQn 1 */
 286:Src/stm32g4xx_it.c **** }
 737              		.loc 2 286 1
 738 0026 00BF     		nop
 739 0028 80BD     		pop	{r7, pc}
 740              	.L36:
 741 002a 00BF     		.align	2
 742              	.L35:
 743 002c 00080048 		.word	1207961600
 744 0030 00000000 		.word	hpcd_USB_FS
 745              		.cfi_endproc
 746              	.LFE421:
 748              		.section	.text.EXTI15_10_IRQHandler,"ax",%progbits
 749              		.align	1
 750              		.global	EXTI15_10_IRQHandler
 751              		.syntax unified
 752              		.thumb
 753              		.thumb_func
 754              		.fpu fpv4-sp-d16
 756              	EXTI15_10_IRQHandler:
 757              	.LFB422:
 287:Src/stm32g4xx_it.c **** 
 288:Src/stm32g4xx_it.c **** /**
 289:Src/stm32g4xx_it.c ****   * @brief This function handles EXTI line[15:10] interrupts.
 290:Src/stm32g4xx_it.c ****   */
 291:Src/stm32g4xx_it.c **** void EXTI15_10_IRQHandler(void)
 292:Src/stm32g4xx_it.c **** {
 758              		.loc 2 292 1
 759              		.cfi_startproc
 760              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /tmp/ccGMeDa2.s 			page 19


 761              		@ frame_needed = 1, uses_anonymous_args = 0
 762 0000 80B5     		push	{r7, lr}
 763              	.LCFI51:
 764              		.cfi_def_cfa_offset 8
 765              		.cfi_offset 7, -8
 766              		.cfi_offset 14, -4
 767 0002 00AF     		add	r7, sp, #0
 768              	.LCFI52:
 769              		.cfi_def_cfa_register 7
 293:Src/stm32g4xx_it.c ****   /* USER CODE BEGIN EXTI15_10_IRQn 0 */
 294:Src/stm32g4xx_it.c **** 
 295:Src/stm32g4xx_it.c ****   /* USER CODE END EXTI15_10_IRQn 0 */
 296:Src/stm32g4xx_it.c ****   HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 770              		.loc 2 296 3
 771 0004 4FF40050 		mov	r0, #8192
 772 0008 FFF7FEFF 		bl	HAL_GPIO_EXTI_IRQHandler
 297:Src/stm32g4xx_it.c ****   /* USER CODE BEGIN EXTI15_10_IRQn 1 */
 298:Src/stm32g4xx_it.c **** 
 299:Src/stm32g4xx_it.c ****   /* USER CODE END EXTI15_10_IRQn 1 */
 300:Src/stm32g4xx_it.c **** }
 773              		.loc 2 300 1
 774 000c 00BF     		nop
 775 000e 80BD     		pop	{r7, pc}
 776              		.cfi_endproc
 777              	.LFE422:
 779              		.section	.text.HRTIM1_Master_IRQHandler,"ax",%progbits
 780              		.align	1
 781              		.global	HRTIM1_Master_IRQHandler
 782              		.syntax unified
 783              		.thumb
 784              		.thumb_func
 785              		.fpu fpv4-sp-d16
 787              	HRTIM1_Master_IRQHandler:
 788              	.LFB423:
 301:Src/stm32g4xx_it.c **** 
 302:Src/stm32g4xx_it.c **** /**
 303:Src/stm32g4xx_it.c ****   * @brief This function handles HRTIM master timer global interrupt.
 304:Src/stm32g4xx_it.c ****   */
 305:Src/stm32g4xx_it.c **** void HRTIM1_Master_IRQHandler(void)
 306:Src/stm32g4xx_it.c **** {
 789              		.loc 2 306 1
 790              		.cfi_startproc
 791              		@ args = 0, pretend = 0, frame = 0
 792              		@ frame_needed = 1, uses_anonymous_args = 0
 793 0000 80B5     		push	{r7, lr}
 794              	.LCFI53:
 795              		.cfi_def_cfa_offset 8
 796              		.cfi_offset 7, -8
 797              		.cfi_offset 14, -4
 798 0002 00AF     		add	r7, sp, #0
 799              	.LCFI54:
 800              		.cfi_def_cfa_register 7
 307:Src/stm32g4xx_it.c ****   /* USER CODE BEGIN HRTIM1_Master_IRQn 0 */
 308:Src/stm32g4xx_it.c **** 
 309:Src/stm32g4xx_it.c ****   /* USER CODE END HRTIM1_Master_IRQn 0 */
 310:Src/stm32g4xx_it.c ****   HAL_HRTIM_IRQHandler(&hhrtim1,HRTIM_TIMERINDEX_MASTER);
 801              		.loc 2 310 3
ARM GAS  /tmp/ccGMeDa2.s 			page 20


 802 0004 0621     		movs	r1, #6
 803 0006 0248     		ldr	r0, .L39
 804 0008 FFF7FEFF 		bl	HAL_HRTIM_IRQHandler
 311:Src/stm32g4xx_it.c ****   /* USER CODE BEGIN HRTIM1_Master_IRQn 1 */
 312:Src/stm32g4xx_it.c **** 
 313:Src/stm32g4xx_it.c ****   /* USER CODE END HRTIM1_Master_IRQn 1 */
 314:Src/stm32g4xx_it.c **** }
 805              		.loc 2 314 1
 806 000c 00BF     		nop
 807 000e 80BD     		pop	{r7, pc}
 808              	.L40:
 809              		.align	2
 810              	.L39:
 811 0010 00000000 		.word	hhrtim1
 812              		.cfi_endproc
 813              	.LFE423:
 815              		.text
 816              	.Letext0:
 817              		.file 3 "/opt/gcc-arm-none-eabi-8-2019-q3-update/arm-none-eabi/include/machine/_default_types.h"
 818              		.file 4 "/opt/gcc-arm-none-eabi-8-2019-q3-update/arm-none-eabi/include/sys/_stdint.h"
 819              		.file 5 "Drivers/CMSIS/Include/core_cm4.h"
 820              		.file 6 "Drivers/CMSIS/Device/ST/STM32G4xx/Include/system_stm32g4xx.h"
 821              		.file 7 "Drivers/CMSIS/Device/ST/STM32G4xx/Include/stm32g474xx.h"
 822              		.file 8 "Drivers/CMSIS/Device/ST/STM32G4xx/Include/stm32g4xx.h"
 823              		.file 9 "Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_hal_def.h"
 824              		.file 10 "Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_hal_dma.h"
 825              		.file 11 "Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_hal_adc.h"
 826              		.file 12 "Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_hal_flash.h"
 827              		.file 13 "Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_hal_hrtim.h"
 828              		.file 14 "Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usb.h"
 829              		.file 15 "Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_hal_pcd.h"
 830              		.file 16 "Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_hal.h"
ARM GAS  /tmp/ccGMeDa2.s 			page 21


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32g4xx_it.c
     /tmp/ccGMeDa2.s:18     .text.get_clock:0000000000000000 $t
     /tmp/ccGMeDa2.s:25     .text.get_clock:0000000000000000 get_clock
     /tmp/ccGMeDa2.s:57     .text.get_clock:0000000000000014 $d
     /tmp/ccGMeDa2.s:62     .text.get_cpi_count:0000000000000000 $t
     /tmp/ccGMeDa2.s:68     .text.get_cpi_count:0000000000000000 get_cpi_count
     /tmp/ccGMeDa2.s:100    .text.get_cpi_count:0000000000000014 $d
     /tmp/ccGMeDa2.s:105    .text.get_lsu_count:0000000000000000 $t
     /tmp/ccGMeDa2.s:111    .text.get_lsu_count:0000000000000000 get_lsu_count
     /tmp/ccGMeDa2.s:143    .text.get_lsu_count:0000000000000014 $d
                            *COM*:0000000000000004 t_exec
                            *COM*:0000000000000001 fold_diff
                            *COM*:0000000000000001 lsu_diff
                            *COM*:0000000000000001 cpi_diff
                            *COM*:0000000000000001 cpi_diff1
                            *COM*:0000000000000002 inst
     /tmp/ccGMeDa2.s:154    .text.NMI_Handler:0000000000000000 $t
     /tmp/ccGMeDa2.s:161    .text.NMI_Handler:0000000000000000 NMI_Handler
     /tmp/ccGMeDa2.s:191    .text.HardFault_Handler:0000000000000000 $t
     /tmp/ccGMeDa2.s:198    .text.HardFault_Handler:0000000000000000 HardFault_Handler
     /tmp/ccGMeDa2.s:219    .text.MemManage_Handler:0000000000000000 $t
     /tmp/ccGMeDa2.s:226    .text.MemManage_Handler:0000000000000000 MemManage_Handler
     /tmp/ccGMeDa2.s:247    .text.BusFault_Handler:0000000000000000 $t
     /tmp/ccGMeDa2.s:254    .text.BusFault_Handler:0000000000000000 BusFault_Handler
     /tmp/ccGMeDa2.s:275    .text.UsageFault_Handler:0000000000000000 $t
     /tmp/ccGMeDa2.s:282    .text.UsageFault_Handler:0000000000000000 UsageFault_Handler
     /tmp/ccGMeDa2.s:303    .text.SVC_Handler:0000000000000000 $t
     /tmp/ccGMeDa2.s:310    .text.SVC_Handler:0000000000000000 SVC_Handler
     /tmp/ccGMeDa2.s:339    .text.DebugMon_Handler:0000000000000000 $t
     /tmp/ccGMeDa2.s:346    .text.DebugMon_Handler:0000000000000000 DebugMon_Handler
     /tmp/ccGMeDa2.s:375    .text.PendSV_Handler:0000000000000000 $t
     /tmp/ccGMeDa2.s:382    .text.PendSV_Handler:0000000000000000 PendSV_Handler
     /tmp/ccGMeDa2.s:411    .text.SysTick_Handler:0000000000000000 $t
     /tmp/ccGMeDa2.s:418    .text.SysTick_Handler:0000000000000000 SysTick_Handler
     /tmp/ccGMeDa2.s:441    .text.DMA1_Channel1_IRQHandler:0000000000000000 $t
     /tmp/ccGMeDa2.s:448    .text.DMA1_Channel1_IRQHandler:0000000000000000 DMA1_Channel1_IRQHandler
     /tmp/ccGMeDa2.s:477    .text.DMA1_Channel2_IRQHandler:0000000000000000 $t
     /tmp/ccGMeDa2.s:484    .text.DMA1_Channel2_IRQHandler:0000000000000000 DMA1_Channel2_IRQHandler
     /tmp/ccGMeDa2.s:507    .text.DMA1_Channel2_IRQHandler:0000000000000010 $d
     /tmp/ccGMeDa2.s:516    .bss.i:0000000000000000 i
     /tmp/ccGMeDa2.s:513    .bss.i:0000000000000000 $d
     /tmp/ccGMeDa2.s:519    .text.ADC1_2_IRQHandler:0000000000000000 $t
     /tmp/ccGMeDa2.s:526    .text.ADC1_2_IRQHandler:0000000000000000 ADC1_2_IRQHandler
     /tmp/ccGMeDa2.s:685    .text.ADC1_2_IRQHandler:00000000000000e4 $d
     /tmp/ccGMeDa2.s:699    .text.USB_LP_IRQHandler:0000000000000000 $t
     /tmp/ccGMeDa2.s:706    .text.USB_LP_IRQHandler:0000000000000000 USB_LP_IRQHandler
     /tmp/ccGMeDa2.s:743    .text.USB_LP_IRQHandler:000000000000002c $d
     /tmp/ccGMeDa2.s:749    .text.EXTI15_10_IRQHandler:0000000000000000 $t
     /tmp/ccGMeDa2.s:756    .text.EXTI15_10_IRQHandler:0000000000000000 EXTI15_10_IRQHandler
     /tmp/ccGMeDa2.s:780    .text.HRTIM1_Master_IRQHandler:0000000000000000 $t
     /tmp/ccGMeDa2.s:787    .text.HRTIM1_Master_IRQHandler:0000000000000000 HRTIM1_Master_IRQHandler
     /tmp/ccGMeDa2.s:811    .text.HRTIM1_Master_IRQHandler:0000000000000010 $d

UNDEFINED SYMBOLS
HAL_IncTick
HAL_DMA_IRQHandler
ARM GAS  /tmp/ccGMeDa2.s 			page 22


hdma_spi3_tx
fast_loop_update
main_loop_update
hadc1
usb_interrupt
HAL_PCD_IRQHandler
hpcd_USB_FS
HAL_GPIO_EXTI_IRQHandler
HAL_HRTIM_IRQHandler
hhrtim1
