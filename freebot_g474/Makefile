##########################################################################################################################
# File automatically-generated by tool: [projectgenerator] version: [3.7.1] date: [Tue May 12 13:50:55 PDT 2020] 
##########################################################################################################################

# ------------------------------------------------
# Generic Makefile (based on gcc)
#
# ChangeLog :
#	2017-02-10 - Several enhancements + project update mode
#   2015-07-22 - first version
# ------------------------------------------------

######################################
# target
######################################
TARGET = freebot_g474
CONFIG_FILE = config_freebot_g474_col.cpp

GIT_VERSION := $(shell git describe --dirty --always --tags)
$(shell touch version.h)


######################################
# building variables
######################################
# debug build?
DEBUG = 1
# optimization
OPT = -Og -fsingle-precision-constant -O3 
LTO = #-flto

DRIVERS = ../boost_g474/Drivers


#######################################
# paths
#######################################
# Build path
BUILD_DIR = build

######################################
# source
######################################
# C sources
C_SOURCES =  \
Src/main.c \
Src/stm32g4xx_it.c \
Src/stm32g4xx_hal_msp.c \
Src/system_stm32g4xx.c \
$(DRIVERS)/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_gpio.c \
$(DRIVERS)/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc.c \
$(DRIVERS)/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_adc_ex.c \
$(DRIVERS)/STM32G4xx_HAL_Driver/Src/stm32g4xx_ll_adc.c \
$(DRIVERS)/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal.c \
$(DRIVERS)/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_rcc.c \
$(DRIVERS)/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_rcc_ex.c \
$(DRIVERS)/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_flash.c \
$(DRIVERS)/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_flash_ex.c \
$(DRIVERS)/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_flash_ramfunc.c \
$(DRIVERS)/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_exti.c \
$(DRIVERS)/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_dma.c \
$(DRIVERS)/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_dma_ex.c \
$(DRIVERS)/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_pwr.c \
$(DRIVERS)/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_pwr_ex.c \
$(DRIVERS)/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_cortex.c \
$(DRIVERS)/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_hrtim.c \
$(DRIVERS)/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_opamp.c \
$(DRIVERS)/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_opamp_ex.c \
$(DRIVERS)/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_spi.c \
$(DRIVERS)/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_spi_ex.c \
$(DRIVERS)/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_tim.c \
$(DRIVERS)/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_tim_ex.c \
$(DRIVERS)/STM32G4xx_HAL_Driver/Src/stm32g4xx_ll_pwr.c \
$(DRIVERS)/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_pcd.c \
$(DRIVERS)/STM32G4xx_HAL_Driver/Src/stm32g4xx_hal_pcd_ex.c \
$(DRIVERS)/STM32G4xx_HAL_Driver/Src/stm32g4xx_ll_usb.c \
../motorlib/param.c \
./param_freebot_g474_col.c \

CPP_SOURCES = \
../motorlib/control_fun.cpp\
foc.cpp\
gpio.cpp\
sincos.cpp\
util.cpp\
hall.cpp\
../motorlib/peripheral/spi_encoder.cpp\
../motorlib/peripheral/stm32g4/usb.cpp\
hrpwm.cpp\
ams_encoder.cpp\
parameter_api.cpp\
./$(CONFIG_FILE)

# ASM sources
ASM_SOURCES =  \
startup_stm32g474xx.s


#######################################
# binaries
#######################################
PREFIX = arm-none-eabi-
# The gcc compiler bin path can be either defined in make command via GCC_PATH variable (> make GCC_PATH=xxx)
# either it can be added to the PATH environment variable.
ifdef GCC_PATH
CC = $(GCC_PATH)/$(PREFIX)gcc
AS = $(GCC_PATH)/$(PREFIX)gcc -x assembler-with-cpp
CP = $(GCC_PATH)/$(PREFIX)objcopy
SZ = $(GCC_PATH)/$(PREFIX)size
CXX = $(GCC_PATH)/$(PREFIX)g++
else
CC = $(PREFIX)gcc
AS = $(PREFIX)gcc -x assembler-with-cpp
CP = $(PREFIX)objcopy
SZ = $(PREFIX)size
CXX = $(PREFIX)g++
endif
HEX = $(CP) -O ihex
BIN = $(CP) -O binary -S
 
#######################################
# CFLAGS
#######################################
# cpu
CPU = -mcpu=cortex-m4

# fpu
FPU = -mfpu=fpv4-sp-d16

# float-abi
FLOAT-ABI = -mfloat-abi=hard

# mcu
MCU = $(CPU) -mthumb $(FPU) $(FLOAT-ABI)

# macros for gcc
# AS defines
AS_DEFS = 

# C defines
C_DEFS =  \
-DGIT_VERSION=\"$(GIT_VERSION)\" \
-DUSE_HAL_DRIVER \
-DSTM32G474xx


# AS includes
AS_INCLUDES = 

# C includes
C_INCLUDES =  \
-IInc \
-IDrivers/CMSIS/Include \
-I$(DRIVERS)/STM32G4xx_HAL_Driver/Inc \
-I$(DRIVERS)/STM32G4xx_HAL_Driver/Inc/Legacy \
-I$(DRIVERS)/CMSIS/Device/ST/STM32G4xx/Include \
-I$(DRIVERS)/CMSIS/Include


# compile gcc flags
ASFLAGS = $(MCU) $(AS_DEFS) $(AS_INCLUDES) $(OPT) -Wall -fdata-sections -ffunction-sections $(LTO)

CFLAGS = $(MCU) $(C_DEFS) $(C_INCLUDES) $(OPT) -Wall -fdata-sections -ffunction-sections $(LTO)

ifeq ($(DEBUG), 1)
CFLAGS += -g -gdwarf-2
endif


# Generate dependency information
CFLAGS += -MMD -MP -MF"$(@:%.o=%.d)"
CPPFLAGS = $(CFLAGS)

#######################################
# LDFLAGS
#######################################
# link script
LDSCRIPT = STM32G474RETx_FLASH.ld

# libraries
LIBS = -lc -lm -lnosys 
LIBDIR = 
LDFLAGS = $(MCU) -specs=nosys.specs -specs=nano.specs -T$(LDSCRIPT) $(LIBDIR) $(LIBS) -Wl,-Map=$(BUILD_DIR)/$(TARGET).map,--cref -Wl,--gc-sections -u _printf_float

# default action: build all
all: $(BUILD_DIR)/$(TARGET).elf $(BUILD_DIR)/$(TARGET).hex $(BUILD_DIR)/$(TARGET).bin

#######################################
# build the application
#######################################
# list of objects
OBJECTS = $(addprefix $(BUILD_DIR)/,$(notdir $(C_SOURCES:.c=.o)))
vpath %.c $(sort $(dir $(C_SOURCES)))
OBJECTS += $(addprefix $(BUILD_DIR)/,$(notdir $(CPP_SOURCES:.cpp=.o)))
vpath %.cpp $(sort $(dir $(CPP_SOURCES)))
# list of ASM program objects
OBJECTS += $(addprefix $(BUILD_DIR)/,$(notdir $(ASM_SOURCES:.s=.o)))
vpath %.s $(sort $(dir $(ASM_SOURCES)))

$(BUILD_DIR)/%.o: %.c Makefile | $(BUILD_DIR) 
	$(CC) -c $(CFLAGS) -Wa,-a,-ad,-alms=$(BUILD_DIR)/$(notdir $(<:.c=.lst)) $< -o $@

$(BUILD_DIR)/%.o: %.cpp Makefile | $(BUILD_DIR) 
	$(CXX) -c $(CPPFLAGS) -std=c++11 -Wa,-a,-ad,-alms=$(BUILD_DIR)/$(notdir $(<:.cpp=.lst)) $< -o $@

$(BUILD_DIR)/%.o: %.s Makefile | $(BUILD_DIR)
	$(AS) -c $(CFLAGS) $< -o $@

$(BUILD_DIR)/$(TARGET).elf: $(OBJECTS) Makefile
	$(CXX) $(OBJECTS) $(LDFLAGS) -o $@
	$(SZ) $@

$(BUILD_DIR)/%.hex: $(BUILD_DIR)/%.elf | $(BUILD_DIR)
	$(HEX) $< $@
	
$(BUILD_DIR)/%.bin: $(BUILD_DIR)/%.elf | $(BUILD_DIR)
	$(BIN) $< $@	
	
$(BUILD_DIR):
	mkdir $@		

#######################################
# clean up
#######################################
clean:
	-rm -fR $(BUILD_DIR)
  
#######################################
# dependencies
#######################################
-include $(wildcard $(BUILD_DIR)/*.d)

# *** EOF ***
